
// Copyright (c) Syrus Systems 2000 Syrus Systems
package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import java.text.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class MapdbInterfaceSave1 extends Object
{
	protected MapdbInterfaceSave1()
	{
	}

	static public int saveMaps(MapContext_Transferable[] mapseq)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = mapseq.length;
		for (i = 0; i < len; i++)
		{
			String zoom_factor = String.valueOf(mapseq[i].zoomFactor);
			String default_zoom_factor = String.valueOf(mapseq[i].defaultZoomFactor);
			int show_nodes = (mapseq[i].showPhysicalNodeElement)? 1 : 0;
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.MAPCONTEXTS
						where ID = :(mapseq[i].id)
				};
				if(count == 0)
				{
//					System.out.println("map " + mapseq[i].id + " not found in database");
					throw new SQLException("do insert!");
				}
				System.out.println("update map " + mapseq[i].id);
				try
				{
					#sql {
						update AMFICOM.MAPCONTEXTS
							set
								NAME = :(mapseq[i].name),
								CODENAME = :(mapseq[i].codename),
								DESCRIPTION = :(mapseq[i].description),
								MODIFIED = SYSDATE,
								MODIFIED_BY = :(mapseq[i].user_id),
								DOMAIN_ID = :(mapseq[i].domain_id),
								SHOW_NODES = :show_nodes,
								MOUSE_TOLERANCY = :(mapseq[i].mouseTolerancy),
								ZOOM_FACTOR = :zoom_factor,
								DEFAULT_ZOOM_FACTOR = :default_zoom_factor,
								USER_ID = :(mapseq[i].user_id),
								LONGITUDE = :(mapseq[i].longitude),
								LATITUDE = :(mapseq[i].latitude),
								SCHEME_ID = :(mapseq[i].scheme_id)
							where ID = :(mapseq[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing maps: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new map " + mapseq[i].id);
				try
				{
					#sql {
						insert into AMFICOM.MAPCONTEXTS(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								CREATED,
								CREATED_BY,
								MODIFIED,
								MODIFIED_BY,
								DOMAIN_ID,
								SHOW_NODES,
								MOUSE_TOLERANCY,
								ZOOM_FACTOR,
								DEFAULT_ZOOM_FACTOR,
								USER_ID,
								LONGITUDE,
								LATITUDE,
								SCHEME_ID)
							values(
								 :(mapseq[i].id),
								 :(mapseq[i].name),
								 :(mapseq[i].codename),
								 :(mapseq[i].description),
								 SYSDATE,
								 :(mapseq[i].user_id),
								 SYSDATE,
								 :(mapseq[i].user_id),
								 :(mapseq[i].domain_id),
								 :show_nodes,
								 :(mapseq[i].mouseTolerancy),
								 :zoom_factor,
								 :default_zoom_factor,
								 :(mapseq[i].user_id),
								 :(mapseq[i].longitude),
								 :(mapseq[i].latitude),
								 :(mapseq[i].scheme_id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing maps: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			try
			{
				#sql { delete from MAPMARKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].mark_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPMARKLINKS(ID, MAP_ID, MAP_MARK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].mark_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPELEMENTLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].equipment_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPELEMENTLINKS(ID, MAP_ID, MAP_ELEMENT_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].equipment_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPNODELINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].node_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPNODELINKS(ID, MAP_ID, MAP_NODE_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].node_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPNODELINKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].nodeLink_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPNODELINKLINKS(ID, MAP_ID, MAP_NODE_LINK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].nodeLink_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPLINKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].physicalLink_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPLINKLINKS(ID, MAP_ID, MAP_LINK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].physicalLink_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPKISLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].kis_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPKISLINKS(ID, MAP_ID, MAP_KIS_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].kis_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql { delete from MAPPATHSLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].path_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("mapelementlink");
					#sql { insert into MAPPATHSLINKS(ID, MAP_ID, MAP_PATH_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].path_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapElement(MapElement_Transferable equipment)
	{
		int i;
		int j;
		int len;
		int len2;
		String id = "";
		int count = 0;

		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPELEMENTS
					where ID = :(equipment.id)
			};
			if(count == 0)
			{
//				System.out.println("equipment " + equipmentseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update equipment element " + equipment.id);
			try
			{
				#sql {
					update AMFICOM.MAPELEMENTS
						set
							OWNER_ID = :(equipment.owner_id),
							LATITUDE = :(equipment.latitude),
							NAME = :(equipment.name),
							SYMBOL_ID = :(equipment.symbol_id),
							TYPE_ID = :(equipment.type_id),
							DESCRIPTION = :(equipment.description),
							LONGITUDE = :(equipment.longitude),
							KIS_TYPE_ID = :(equipment.kis_element_type_id),
							ID = :(equipment.id),
							MAP_ID = :(equipment.map_id),
							ELEMENT_ID = :(equipment.element_id),
							ELEMENT_TYPE_ID = :(equipment.element_type_id)
						where ID = :(equipment.id)
				};
			}
			catch(SQLException e)
			{
				System.out.println("error saVing equipment elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("insert new equipment element " + equipment.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPELEMENTS(
							OWNER_ID,
							LATITUDE,
							NAME,
							SYMBOL_ID,
							TYPE_ID,
							DESCRIPTION,
							LONGITUDE,
							KIS_TYPE_ID,
							ID,
							MAP_ID,
							ELEMENT_ID,
							ELEMENT_TYPE_ID)
						values(
							:(equipment.owner_id),
							:(equipment.latitude),
							:(equipment.name),
							:(equipment.symbol_id),
							:(equipment.type_id),
							:(equipment.description),
							:(equipment.longitude),
							:(equipment.kis_element_type_id),
							:(equipment.id),
							:(equipment.map_id),
							:(equipment.element_id),
							:(equipment.element_type_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing equipment elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPEQUIPMENTELEMENTATTRIBUTES",
				"MAP_EQUIPMENT_ELEMENT_ID",
				equipment.id,
				equipment.attributes);

		CatalogSchemeMapUpdater.mapElementUpdated(equipment);

		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapElements(MapElement_Transferable[] equipmentseq)
	{
		int i;
		int len;

		len = equipmentseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapElement(equipmentseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}
/*
	static public int saveMapEquipments(MapEquipmentElement_Transferable[] equipmentseq)
	{
		int i;
		int j;
		int len;
		int len2;
		String id = "";
		int count = 0;

		len = equipmentseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.MAPEQUIPMENTELEMENTS
						where ID = :(equipmentseq[i].id)
				};
				if(count == 0)
				{
//					System.out.println("equipment " + equipmentseq[i].id + " not found in database");
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment element " + equipmentseq[i].id);
				try
				{
					#sql {
						update AMFICOM.MAPEQUIPMENTELEMENTS
							set
								SCHEME_EQUIPMENT_ELEMENT_ID = :(equipmentseq[i].scheme_equipment_element_id),
								OWNER_ID = :(equipmentseq[i].owner_id),
								LATITUDE = :(equipmentseq[i].latitude),
								NAME = :(equipmentseq[i].name),
								SYMBOL_ID = :(equipmentseq[i].symbol_id),
								TYPE_ID = :(equipmentseq[i].type_id),
								DESCRIPTION = :(equipmentseq[i].description),
								LONGITUDE = :(equipmentseq[i].longitude),
								CODENAME = :(equipmentseq[i].codename),
								ID = :(equipmentseq[i].id),
								MAP_ID = :(equipmentseq[i].map_id),
								EQUIPMENT_ID = :(equipmentseq[i].element_id),
								EQUIPMENT_TYPE_ID = :(equipmentseq[i].element_type_id)
							where ID = :(equipmentseq[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment elements: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment element " + equipmentseq[i].id);
				try
				{
					#sql {
						insert into AMFICOM.MAPEQUIPMENTELEMENTS(
								SCHEME_EQUIPMENT_ELEMENT_ID,
								OWNER_ID,
								LATITUDE,
								NAME,
								SYMBOL_ID,
								TYPE_ID,
								DESCRIPTION,
								LONGITUDE,
								CODENAME,
								ID,
								MAP_ID,
								EQUIPMENT_ID,
								EQUIPMENT_TYPE_ID)
							values(
								:(equipmentseq[i].scheme_equipment_element_id),
								:(equipmentseq[i].owner_id),
								:(equipmentseq[i].latitude),
								:(equipmentseq[i].name),
								:(equipmentseq[i].symbol_id),
								:(equipmentseq[i].type_id),
								:(equipmentseq[i].description),
								:(equipmentseq[i].longitude),
								:(equipmentseq[i].codename),
								:(equipmentseq[i].id),
								:(equipmentseq[i].map_id),
								:(equipmentseq[i].element_id),
								:(equipmentseq[i].element_type_id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment elements: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			MapdbInterfaceSave3.saveAttributes(
					"MAPEQUIPMENTELEMENTATTRIBUTES",
					"MAP_EQUIPMENT_ELEMENT_ID",
					equipmentseq[i].id,
					equipmentseq[i].attributes);
		}
		return Constants.ERROR_NO_ERROR;
	}
*/
	static public int saveMapMark(MapMarkElement_Transferable mark)
	{
		int count = 0;

		String dist = "";

		dist = String.valueOf(mark.distance);
		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPMARKELEMENTS
					where ID = :(mark.id)
			};
			if(count == 0)
			{
//				System.out.println("equipment " + equipmentseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update mark element " + mark.id);
			try
			{
				#sql {
					update AMFICOM.MAPMARKELEMENTS
						set
							OWNER_ID = :(mark.owner_id),
							LATITUDE = :(mark.latitude),
							NAME = :(mark.name),
							SYMBOL_ID = :(mark.symbol_id),
							DESCRIPTION = :(mark.description),
							LONGITUDE = :(mark.longitude),
							ID = :(mark.id),
							MAP_ID = :(mark.map_id),
							LINK_ID = :(mark.link_id),
							DISTANCE = :(dist)
						where ID = :(mark.id)
				};
			}
			catch(SQLException e)
			{
				System.out.println("error saVing marn elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("insert new mark element " + mark.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPMARKELEMENTS(
							OWNER_ID,
							LATITUDE,
							NAME,
							SYMBOL_ID,
							DESCRIPTION,
							LONGITUDE,
							ID,
							MAP_ID,
							LINK_ID,
							DISTANCE)
						values(
							:(mark.owner_id),
							:(mark.latitude),
							:(mark.name),
							:(mark.symbol_id),
							:(mark.description),
							:(mark.longitude),
							:(mark.id),
							:(mark.map_id),
							:(mark.link_id),
							:dist )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing mark elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPMARKELEMENTATTRIBUTES",
				"MAP_MARK_ELEMENT_ID",
				mark.id,
				mark.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapMarks(MapMarkElement_Transferable[] markseq)
	{
		int i;
		int len;

		len = markseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapMark(markseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapKIS(MapElement_Transferable kis)
	{
		int count = 0;

		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPKISELEMENTS
					where ID = :(kis.id)
			};
			if(count == 0)
			{
//				System.out.println("kis " + kisseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update KIS element " + kis.id);
			try
			{
				#sql {
					update AMFICOM.MAPKISELEMENTS
						set
							MAP_ELEMENT_ID = :(kis.id),
							ISM_MAP_ID = :(kis.ism_map_id),
							MAP_ID = :(kis.map_id),
							KIS_TYPE_ID = :(kis.kis_element_type_id)
						where ID = :(kis.map_kis_id)
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error saVing KIS elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new KIS element " + kis.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPKISELEMENTS(
							MAP_ELEMENT_ID,
							ISM_MAP_ID,
							KIS_TYPE_ID,
							MAP_ID,
							ID)
						values(
							:(kis.id),
							:(kis.ism_map_id),
							:(kis.kis_element_type_id),
							:(kis.map_id),
							:(kis.map_kis_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing KIS elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPKISELEMENTATTRIBUTES",
				"MAP_KIS_ELEMENT_ID",
				kis.id,
				kis.attributes);

		saveMapElement(kis);

		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapKISs(MapElement_Transferable[] kisseq)
	{
		int i;
		int len;

		len = kisseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapKIS(kisseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}
/*
	static public int saveMapKISs(MapKISElement_Transferable[] kisseq)
	{
		int i;
		int j;
		int len;
		int len2;
		String id = "";
		int count = 0;

		len = kisseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.MAPKISELEMENTS
						where ID = :(kisseq[i].id)
				};
				if(count == 0)
				{
//					System.out.println("kis " + kisseq[i].id + " not found in database");
					throw new SQLException("do insert!");
				}
				System.out.println("update KIS element " + kisseq[i].id);
				try
				{
					#sql {
						update AMFICOM.MAPKISELEMENTS
							set
								SCHEME_KIS_ELEMENT_ID = :(kisseq[i].scheme_kis_element_id),
								OWNER_ID = :(kisseq[i].owner_id),
								LATITUDE = :(kisseq[i].latitude),
								NAME = :(kisseq[i].name),
								SYMBOL_ID = :(kisseq[i].symbol_id),
								TYPE_ID = :(kisseq[i].type_id),
								DESCRIPTION = :(kisseq[i].description),
								LONGITUDE = :(kisseq[i].longitude),
								CODENAME = :(kisseq[i].codename),
								ID = :(kisseq[i].id),
								MAP_ID = :(kisseq[i].map_id),
								KIS_ID = :(kisseq[i].KIS_id),
								KIS_TYPE_ID = :(kisseq[i].KIS_type_id)
							where ID = :(kisseq[i].id)
					};
					#sql { commit };
				}
				catch(SQLException e)
				{
					System.out.println("error saVing KIS elements: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
			}
			catch(SQLException e)
			{
				System.out.println("insert new KIS element " + kisseq[i].id);
				try
				{
					#sql {
						insert into AMFICOM.MAPKISELEMENTS(
								SCHEME_KIS_ELEMENT_ID,
								OWNER_ID,
								LATITUDE,
								NAME,
								SYMBOL_ID,
								TYPE_ID,
								DESCRIPTION,
								LONGITUDE,
								CODENAME,
								ID,
								MAP_ID,
								KIS_ID,
								KIS_TYPE_ID)
							values(
								:(kisseq[i].scheme_kis_element_id),
								:(kisseq[i].owner_id),
								:(kisseq[i].latitude),
								:(kisseq[i].name),
								:(kisseq[i].symbol_id),
								:(kisseq[i].type_id),
								:(kisseq[i].description),
								:(kisseq[i].longitude),
								:(kisseq[i].codename),
								:(kisseq[i].id),
								:(kisseq[i].map_id),
								:(kisseq[i].KIS_id),
								:(kisseq[i].KIS_type_id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing KIS elements: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			MapdbInterfaceSave3.saveAttributes(
					"MAPKISELEMENTATTRIBUTES",
					"MAP_KIS_ELEMENT_ID",
					kisseq[i].id,
					kisseq[i].attributes);
		}
		return Constants.ERROR_NO_ERROR;
	}
*/
}

