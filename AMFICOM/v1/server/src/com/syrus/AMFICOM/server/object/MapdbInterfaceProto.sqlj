/*
 * $Id: MapdbInterfaceProto.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.ElementAttribute_Transferable;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import java.sql.*;
import java.util.*;
import sqlj.runtime.SQLNullException;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class MapdbInterfaceProto {
	private MapdbInterfaceProto() {
	}

	static int loadProtoElements(final Connection conn, String domain_id, MapNodeProtoElementSeq_TransferableHolder protoseq, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		MapNodeProtoElement_Transferable pr_t;
		Vector vector = new Vector();
		MapNodeProtoElement_Transferable pr_ts[];
		MapProtoIterator prIt = null;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_owner_id = "";
		String It_symbol_id = "";
		long It_modified = 0;
		String It_pe_class = "";
		boolean It_pe_is_kis = false;
		boolean It_is_visual = false;
		boolean It_is_topological = false;
		String It_domain_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		String pe_ids[] = new String[0];
		IdIterator idIt = null;

		String It_pe_id = "";
		String It_proto_element_id = "";
		String It_map_proto_element_id = "";
		Vector vector3 = new Vector();
		MapProtoPEIterator mppeIt = null;

		try
		{
			#sql [connCtx] prIt = { select
					ID,
					NAME,
					CODENAME,
					DESCRIPTION,
					OWNER_ID,
					SYMBOL_ID,
					MODIFIED,
					PE_CLASS,
					PE_IS_KIS,
					IS_VISUAL,
					IS_TOPOLOGICAL,
					DOMAIN_ID
				from AMFICOM.MAPPROTOELEMENTS
			};
			count = 0;
			while (prIt.next())
			{
				count ++;
				try { It_id = prIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = prIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = prIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = prIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_owner_id = prIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_symbol_id = prIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_modified = prIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_pe_class = prIt.pe_class(); }
				catch(SQLException e) { }
				if(It_pe_class == null) It_pe_class = "";
				try { It_pe_is_kis = (prIt.pe_is_kis() != 0); }
				catch(SQLException e) { }
				try { It_is_visual = (prIt.is_visual() != 0); }
				catch(SQLException e) { }
				try { It_is_topological = (prIt.is_topological() != 0); }
				catch(SQLException e) { }
				try { It_domain_id = prIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPPROTOELEMENTATTRIBUTES", "MAP_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);
				try
				{
					vector3 = new Vector();
					#sql [connCtx] mppeIt =
					{
						select ID, MAP_PROTO_ELEMENT_ID, PROTO_ELEMENT_ID
							from MAPPROTOELEMENTPELINKS
							where MAP_PROTO_ELEMENT_ID = :It_id
					};

					while (mppeIt.next())
					{
						try { It_proto_element_id = mppeIt.proto_element_id(); }
						catch(SQLException e) { }
						if(It_proto_element_id == null) It_proto_element_id = "";
						vector3.add(It_proto_element_id);
					}
					mppeIt.close();
				}
				catch(Exception e)
				{
					mppeIt.close();
				}
				pe_ids = new String[vector3.size()];
				vector3.copyInto(pe_ids);

				pr_t = new MapNodeProtoElement_Transferable(
						It_id,
						It_name,
						It_codename,
						It_description,
						It_owner_id,
						It_symbol_id,
						It_modified,
						It_pe_class,
						It_pe_is_kis,
						It_is_visual,
						It_is_topological,
						It_domain_id,
						attributes,
						pe_ids);
				imageResourceIds.add(It_symbol_id);

				vector.addElement(pr_t);
			}
			prIt.close();
			pr_ts = new MapNodeProtoElement_Transferable[vector.size()];
			vector.copyInto(pr_ts);
			protoseq.value = pr_ts;

		}
		catch(SQLException e)
		{
			if(prIt != null) try {
			prIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading proto elements: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				prIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int loadProtoElements(final Connection conn, String domain_id, String[] ids, MapNodeProtoElementSeq_TransferableHolder protoseq, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		MapNodeProtoElement_Transferable pr_t;
		Vector vector = new Vector();
		MapNodeProtoElement_Transferable pr_ts[];
		MapProtoIterator prIt = null;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_owner_id = "";
		String It_symbol_id = "";
		long It_modified = 0;
		String It_pe_class = "";
		boolean It_pe_is_kis = false;
		boolean It_is_visual = false;
		boolean It_is_topological = false;
		String It_domain_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		String pe_ids[] = new String[0];
		IdIterator idIt = null;

		String It_pe_id = "";
		String It_proto_element_id = "";
		String It_map_proto_element_id = "";
		Vector vector3 = new Vector();
		MapProtoPEIterator mppeIt = null;

		Vector id_s = new Vector();
		for(int j = 0; j < ids.length; j++)
			id_s.add(ids[j]);

		try
		{
			#sql [connCtx] prIt = { select
					ID,
					NAME,
					CODENAME,
					DESCRIPTION,
					OWNER_ID,
					SYMBOL_ID,
					MODIFIED,
					PE_CLASS,
					PE_IS_KIS,
					IS_VISUAL,
					IS_TOPOLOGICAL,
					DOMAIN_ID
				from AMFICOM.MAPPROTOELEMENTS
			};
			count = 0;
			while (prIt.next())
			{
				if(!id_s.contains(prIt.id()))
					continue;

				count ++;
				try { It_id = prIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = prIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = prIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = prIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_owner_id = prIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_symbol_id = prIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_modified = prIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_pe_class = prIt.pe_class(); }
				catch(SQLException e) { }
				if(It_pe_class == null) It_pe_class = "";
				try { It_pe_is_kis = (prIt.pe_is_kis() != 0); }
				catch(SQLException e) { }
				try { It_is_visual = (prIt.is_visual() != 0); }
				catch(SQLException e) { }
				try { It_is_topological = (prIt.is_topological() != 0); }
				catch(SQLException e) { }
				try { It_domain_id = prIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPPROTOELEMENTATTRIBUTES", "MAP_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				try
				{
					vector3 = new Vector();
					#sql [connCtx] mppeIt =
					{
						select ID, MAP_PROTO_ELEMENT_ID, PROTO_ELEMENT_ID
							from MAPPROTOELEMENTPELINKS
							where MAP_PROTO_ELEMENT_ID = :It_id
					};

					while (mppeIt.next())
					{
						try { It_proto_element_id = mppeIt.proto_element_id(); }
						catch(SQLException e) { }
						if(It_proto_element_id == null) It_proto_element_id = "";
						vector3.add(It_proto_element_id);
					}
					mppeIt.close();
				}
				catch(Exception e)
				{
					mppeIt.close();
				}
				pe_ids = new String[vector3.size()];
				vector3.copyInto(pe_ids);

				pr_t = new MapNodeProtoElement_Transferable(
						It_id,
						It_name,
						It_codename,
						It_description,
						It_owner_id,
						It_symbol_id,
						It_modified,
						It_pe_class,
						It_pe_is_kis,
						It_is_visual,
						It_is_topological,
						It_domain_id,
						attributes,
						pe_ids);
				imageResourceIds.add(It_symbol_id);

				vector.addElement(pr_t);
			}
			prIt.close();
			pr_ts = new MapNodeProtoElement_Transferable[vector.size()];
			vector.copyInto(pr_ts);
			protoseq.value = pr_ts;

		}
		catch(SQLException e)
		{
			if(prIt != null) try {
			prIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading proto elements: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				prIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int saveProtoElements(final Connection conn, String domain_id, MapNodeProtoElement_Transferable[] protos) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		for(int i = 0; i < protos.length; i++)
		{
			int is_kis = (protos[i].pe_is_kis) ? 1 : 0;
			int is_visual = (protos[i].is_visual) ? 1 : 0;
			int is_topological = (protos[i].isTopological) ? 1 : 0;
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPPROTOELEMENTS(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							OWNER_ID,
							SYMBOL_ID,
							MODIFIED,
							PE_CLASS,
							PE_IS_KIS,
							IS_VISUAL,
							IS_TOPOLOGICAL,
							DOMAIN_ID)
						values(
							:(protos[i].id),
							:(protos[i].name),
							:(protos[i].codename),
							:(protos[i].description),
							:(protos[i].owner_id),
							:(protos[i].symbolId),
							SYSDATE,
							:(protos[i].pe_class),
							:is_kis,
							:is_visual,
							:is_topological,
							:(protos[i].domain_id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				try
				{
					#sql [connCtx] {
						update AMFICOM.MAPPROTOELEMENTS set
								NAME = :(protos[i].name),
								CODENAME = :(protos[i].codename),
								DESCRIPTION = :(protos[i].description),
								OWNER_ID = :(protos[i].owner_id),
								SYMBOL_ID = :(protos[i].symbolId),
								MODIFIED = SYSDATE,
								PE_CLASS = :(protos[i].pe_class),
								PE_IS_KIS = :is_kis,
								IS_VISUAL = :is_visual,
								IS_TOPOLOGICAL = :is_topological,
								DOMAIN_ID = :(protos[i].domain_id)
							where ID = :(protos[i].id)
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing map proto elements: " + exx.getMessage());
				}
			}

			MapdbInterfaceSave.saveAttributes(conn, "MAPPROTOELEMENTATTRIBUTES", "MAP_PROTO_ELEMENT_ID", protos[i].id, protos[i].attributes);

			for(int j = 0; j < protos[i].pe_ids.length; j++)
			{
				try
				{
					int count;
					#sql [connCtx]
					{
						select count(*) into :count from AMFICOM.MAPPROTOELEMENTPELINKS
							where MAP_PROTO_ELEMENT_ID = :(protos[i].id)
							and PROTO_ELEMENT_ID = :(protos[i].pe_ids[j])
					};
					if(count != 0)
						continue;
					int id;
					String id_v = "mapppel";
					#sql [connCtx] { select AMFICOM.MAPPPEL_SEQ.NEXTVAL into :id from SYS.DUAL };
					id_v = id_v + String.valueOf(id);
					#sql [connCtx]
					{
						insert into AMFICOM.MAPPROTOELEMENTPELINKS(ID, MAP_PROTO_ELEMENT_ID, PROTO_ELEMENT_ID)
						values(:id_v, :(protos[i].id), :(protos[i].pe_ids[j]))
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error setting pe for map proto: " + ex.getMessage());
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeProtoElements(final Connection conn, String[] proto_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		for(int i = 0; i < proto_ids.length; i++)
		{
			try
			{
				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOELEMENTPELINKS
						where MAP_PROTO_ELEMENT_ID = :(proto_ids[i])
				};

				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOELEMENTATTRIBUTES
						where MAP_PROTO_ELEMENT_ID = :(proto_ids[i])
				};

				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
					conn.commit();
			}
			catch(SQLException exx)
			{
				System.out.println("error saVing map proto elements: " + exx.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int loadProtoGroups(final Connection conn, String domain_id, SchemeProtoGroupSeq_TransferableHolder groupseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		SchemeProtoGroup_Transferable pr_t;
		Vector vector = new Vector();
		SchemeProtoGroup_Transferable pr_ts[];
		MapProtoGroupIterator prIt = null;

		String It_id = "";
		String It_name = "";
		String It_parent_id = "";
		long It_modified = 0;

		Vector vector2 = new Vector();

		String ch_ids[] = new String[0];
		String pe_ids[] = new String[0];

		ChildIdIterator chIt = null;
		ProtoIdIterator peIt = null;

		try
		{
			#sql [connCtx] prIt = { select
					ID,
					NAME,
					MODIFIED
				from AMFICOM.MAPPROTOGROUPS
			};
			count = 0;
			while (prIt.next())
			{
				count ++;
				try { It_id = prIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = prIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_modified = prIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }

				try
				{
					vector2 = new Vector();
					#sql [connCtx] peIt =
					{
						select PROTO_ID
							from MAPPROTOGROUPLINKS
							where GROUP_ID = :It_id
					};

					while (peIt.next())
					{
						try { vector2.add(peIt.proto_id()); }
						catch(SQLException e) { }

					}
					peIt.close();
				}
				catch(Exception e)
				{
					peIt.close();
				}
				pe_ids = new String[vector2.size()];
				vector2.copyInto(pe_ids);

				try
				{
					vector2 = new Vector();
					#sql [connCtx] chIt =
					{
						select CHILD_ID
							from MAPPROTOGROUPNESTINGS
							where PARENT_ID = :It_id
					};

					while (chIt.next())
					{
						try { vector2.add(chIt.child_id()); }
						catch(SQLException e) { }

					}
					chIt.close();
				}
				catch(Exception e)
				{
					chIt.close();
				}
				ch_ids = new String[vector2.size()];
				vector2.copyInto(ch_ids);

				try
				{
					#sql [connCtx]
					{
						select PARENT_ID into :It_parent_id
							from MAPPROTOGROUPNESTINGS
							where CHILD_ID = :It_id
					};
					if(It_parent_id == null)
						It_parent_id = "";
				}
				catch(Exception e)
				{
					It_parent_id = "";
				}

				pr_t = new SchemeProtoGroup_Transferable(
						It_id,
						It_name,
						It_parent_id,
						It_modified,
						ch_ids,
						pe_ids);

				vector.addElement(pr_t);
			}
			prIt.close();
			pr_ts = new SchemeProtoGroup_Transferable[vector.size()];
			vector.copyInto(pr_ts);
			groupseq.value = pr_ts;

		}
		catch(SQLException e)
		{
			if(prIt != null) try {
			prIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading proto elements: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				prIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int loadProtoGroups(final Connection conn, String domain_id, String[] group_ids, SchemeProtoGroupSeq_TransferableHolder groupseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		SchemeProtoGroup_Transferable pr_t;
		Vector vector = new Vector();
		SchemeProtoGroup_Transferable pr_ts[];
		MapProtoGroupIterator prIt = null;

		String It_id = "";
		String It_name = "";
		String It_parent_id = "";
		long It_modified = 0;

		Vector vector2 = new Vector();

		String ch_ids[] = new String[0];
		String pe_ids[] = new String[0];

		ChildIdIterator chIt = null;
		ProtoIdIterator peIt = null;

		Vector id_s = new Vector();
		for(int j = 0; j < group_ids.length; j++)
		{
			System.out.println("	retreive request for " + group_ids[j]);
			id_s.add(group_ids[j]);
		}

		try
		{
			#sql [connCtx] prIt = { select
					ID,
					NAME,
					MODIFIED
				from AMFICOM.MAPPROTOGROUPS
			};
			count = 0;
			while (prIt.next())
			{
				System.out.println("load mapproto " + prIt.id());
				if(!id_s.contains(prIt.id()))
					continue;
				System.out.println("(do load)");

				count ++;
				try { It_id = prIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = prIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_modified = prIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }

				try
				{
					vector2 = new Vector();
					#sql [connCtx] peIt =
					{
						select PROTO_ID
							from MAPPROTOGROUPLINKS
							where GROUP_ID = :It_id
					};

					while (peIt.next())
					{
						try { vector2.add(peIt.proto_id()); }
						catch(SQLException e) { }
						System.out.println("	mapproto " + peIt.proto_id());
					}
					peIt.close();
				}
				catch(Exception e)
				{
					peIt.close();
				}
				pe_ids = new String[vector2.size()];
				vector2.copyInto(pe_ids);

				try
				{
					vector2 = new Vector();
					#sql [connCtx] chIt =
					{
						select CHILD_ID
							from MAPPROTOGROUPNESTINGS
							where PARENT_ID = :It_id
					};

					while (chIt.next())
					{
						try { vector2.add(chIt.child_id()); }
						catch(SQLException e) { }
						System.out.println("	child group " + chIt.child_id());
					}
					chIt.close();
				}
				catch(Exception e)
				{
					chIt.close();
				}
				ch_ids = new String[vector2.size()];
				vector2.copyInto(ch_ids);

				try
				{
					#sql [connCtx]
					{
						select PARENT_ID into :It_parent_id
							from MAPPROTOGROUPNESTINGS
							where CHILD_ID = :It_id
					};
					if(It_parent_id == null)
						It_parent_id = "";
				}
				catch(Exception e)
				{
					It_parent_id = "";
				}

				System.out.println("	mapproto size " + pe_ids.length);
				System.out.println("	child groups size " + ch_ids.length);
				pr_t = new SchemeProtoGroup_Transferable(
						It_id,
						It_name,
						It_parent_id,
						It_modified,
						ch_ids,
						pe_ids);

				vector.addElement(pr_t);
			}
			prIt.close();
			pr_ts = new SchemeProtoGroup_Transferable[vector.size()];
			vector.copyInto(pr_ts);
			groupseq.value = pr_ts;

		}
		catch(SQLException e)
		{
			if(prIt != null) try {
			prIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading proto elements: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				prIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int saveProtoGroups(final Connection conn, String domain_id, SchemeProtoGroup_Transferable[] groups) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		for(int i = 0; i < groups.length; i++)
		{
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPPROTOGROUPS(
							ID,
							NAME,
							MODIFIED)
						values(
							:(groups[i].id),
							:(groups[i].name),
							SYSDATE)
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				try
				{
					#sql [connCtx] {
						update AMFICOM.MAPPROTOGROUPS set
								NAME = :(groups[i].name),
								MODIFIED = SYSDATE
							where ID = :(groups[i].id)
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing map proto groups: " + exx.getMessage());
				}
			}

			try
			{
				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOGROUPLINKS
						where GROUP_ID = :(groups[i].id)
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error removing protos for map proto group: " + ex.getMessage());
			}

			for(int j = 0; j < groups[i].peIds.length; j++)
			{
				try {
					#sql [connCtx] {
						insert into AMFICOM.MAPPROTOGROUPLINKS(GROUP_ID, PROTO_ID)
						values(:(groups[i].id), :(groups[i].peIds[j]))
					};
					conn.commit();
				} catch (SQLException sqle) {
					sqle.printStackTrace();
				}
			}

			try
			{
				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOGROUPNESTINGS
						where PARENT_ID = :(groups[i].id)
						or CHILD_ID = :(groups[i].id)
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error removing nestings for map proto group: " + ex.getMessage());
			}

			String parentId = groups[i].parentId;
			if (!((parentId == null) || (parentId.length() == 0))) {
				try {
					#sql [connCtx] {
						insert into AMFICOM.MAPPROTOGROUPNESTINGS(PARENT_ID, CHILD_ID)
						values(:parentId, :(groups[i].id))
					};
					conn.commit();
				} catch (SQLException sqle) {
					sqle.printStackTrace();
				}
			}

			for (int j = 0; j < groups[i].groupIds.length; j++)
			{
				try
				{
					#sql [connCtx]
					{
						insert into AMFICOM.MAPPROTOGROUPNESTINGS(PARENT_ID, CHILD_ID)
						values(:(groups[i].id), :(groups[i].groupIds[j]))
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error setting children for map proto group: " + ex.getMessage());
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeProtoGroups(final Connection conn, String[] group_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		for(int i = 0; i < group_ids.length; i++)
		{
			try
			{
				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOGROUPLINKS
						where GROUP_ID = :(group_ids[i])
				};

				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOGROUPNESTINGS
						where PARENT_ID = :(group_ids[i])
						or CHILD_ID = :(group_ids[i])
				};

				#sql [connCtx]
				{
					delete from AMFICOM.MAPPROTOGROUPS
						where ID = :(group_ids[i])
				};
					conn.commit();
			}
			catch(SQLException exx)
			{
				System.out.println("error saVing map proto elements: " + exx.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int loadLinkProto(final Connection conn, String domain_id, MapLinkProtoElementSeq_TransferableHolder linkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		Vector vector = new Vector();
		MapLinkProtoElement_Transferable link_t;
		MapLinkProtoElement_Transferable link_ts[];
		MapLinkProtoIterator linkIt = null;

		String It_description = "";
		String It_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_domain_id = "";
		long It_modified = 0;

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();
		String cabletype_ids[] = new String[0];
		CableTypeIdIterator idIt = null;

		try
		{
			#sql [connCtx] linkIt = { select
					ID,
					NAME,
					DESCRIPTION,
					OWNER_ID,
					MODIFIED,
					DOMAIN_ID
				from AMFICOM.MAPLINKPROTOELEMENTS
				};

			while (linkIt.next())
			{
				try { It_description = linkIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = linkIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = linkIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = linkIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_modified = linkIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_domain_id = linkIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPLINKPROTOELEMENTATTRIBUTES", "MAP_LINK_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				try
				{
					#sql [connCtx] idIt = { select CABLE_TYPE_ID from AMFICOM.MAPLINKPROTOCABLETYPES
						where MAP_LINK_ID = :It_id };
					while (idIt.next())
					{
						try { vector2.addElement(idIt.cable_type_id()); }
						catch(SQLNullException e) { }
					}
					idIt.close();
				}
				catch(SQLException e)
				{
					idIt.close();
					System.out.println("could not get cable types for proto link " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				cabletype_ids = new String[vector2.size()];
				vector2.copyInto(cabletype_ids);

				link_t = new MapLinkProtoElement_Transferable(
						It_id,
						It_name,
						It_description,
						It_owner_id,
						It_domain_id,
						It_modified,
						cabletype_ids,
						attributes);

				vector.addElement(link_t);
			}
			linkIt.close();
			link_ts = new MapLinkProtoElement_Transferable[vector.size()];
			vector.copyInto(link_ts);
			linkseq.value = link_ts;
		}
		catch(SQLException e)
		{
			if(linkIt != null) try {
			linkIt.close();
			}catch(Exception exe) {}
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				linkIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int loadLinkProto(final Connection conn, String domain_id, String[] ids, MapLinkProtoElementSeq_TransferableHolder linkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		Vector vector = new Vector();
		MapLinkProtoElement_Transferable link_t;
		MapLinkProtoElement_Transferable link_ts[];
		MapLinkProtoIterator linkIt = null;

		String It_description = "";
		String It_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_domain_id = "";
		long It_modified = 0;

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();
		String cabletype_ids[] = new String[0];
		CableTypeIdIterator idIt = null;

		Vector id_s = new Vector();
		for(int j = 0; j < ids.length; j++)
			id_s.add(ids[j]);

		try
		{
			#sql [connCtx] linkIt = { select
					ID,
					NAME,
					DESCRIPTION,
					OWNER_ID,
					MODIFIED,
					DOMAIN_ID
				from AMFICOM.MAPLINKPROTOELEMENTS
				};

			while (linkIt.next())
			{
				if(!id_s.contains(linkIt.id()))
					continue;

				try { It_description = linkIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = linkIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = linkIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = linkIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_modified = linkIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_domain_id = linkIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPLINKPROTOELEMENTATTRIBUTES", "MAP_LINK_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				try
				{
					#sql [connCtx] idIt = { select CABLE_TYPE_ID from AMFICOM.MAPLINKPROTOCABLETYPES
						where MAP_LINK_ID = :It_id };
					while (idIt.next())
					{
						try { vector2.addElement(idIt.cable_type_id()); }
						catch(SQLNullException e) { }
					}
					idIt.close();
				}
				catch(SQLException e)
				{
					idIt.close();
					System.out.println("could not get cable types for proto link " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				cabletype_ids = new String[vector2.size()];
				vector2.copyInto(cabletype_ids);

				link_t = new MapLinkProtoElement_Transferable(
						It_id,
						It_name,
						It_description,
						It_owner_id,
						It_domain_id,
						It_modified,
						cabletype_ids,
						attributes);

				vector.addElement(link_t);
			}
			linkIt.close();
			link_ts = new MapLinkProtoElement_Transferable[vector.size()];
			vector.copyInto(link_ts);
			linkseq.value = link_ts;
		}
		catch(SQLException e)
		{
			if(linkIt != null) try {
			linkIt.close();
			}catch(Exception exe) {}
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				linkIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int loadPathProto(final Connection conn, String domain_id, MapPathProtoElementSeq_TransferableHolder pathseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		MapPathProtoElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathProtoElement_Transferable path_ts[];
		MapLinkProtoIterator pathIt = null;

		String It_description = "";
		String It_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_domain_id = "";
		long It_modified = 0;

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();
		String pathtype_ids[] = new String[0];
		PathTypeIdIterator idIt = null;

		try
		{
			#sql [connCtx] pathIt = { select
					ID,
					NAME,
					DESCRIPTION,
					OWNER_ID,
					MODIFIED,
					DOMAIN_ID
				from AMFICOM.MAPPATHPROTOELEMENTS
				};

			count = 0;
			while (pathIt.next())
			{
				count ++;

				try { It_description = pathIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = pathIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = pathIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = pathIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_modified = pathIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_domain_id = pathIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPPATHPROTOELEMENTATTRIBUTES", "MAP_PATH_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				try
				{
					#sql [connCtx] idIt = { select PATH_TYPE_ID from AMFICOM.MAPPATHPROTOPATHTYPES
						where MAP_PATH_PROTO_ID = :It_id };
					while (idIt.next())
					{
						try { vector2.addElement(idIt.path_type_id()); }
						catch(SQLNullException e) { }
					}
					idIt.close();
				}
				catch(SQLException e)
				{
					idIt.close();
					System.out.println("could not get path types for proto path " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				pathtype_ids = new String[vector2.size()];
				vector2.copyInto(pathtype_ids);

				path_t = new MapPathProtoElement_Transferable(
						It_id,
						It_name,
						It_description,
						It_owner_id,
						It_domain_id,
						It_modified,
						pathtype_ids,
						attributes);

				vector.addElement(path_t);
			}
			pathIt.close();
			path_ts = new MapPathProtoElement_Transferable[vector.size()];
			vector.copyInto(path_ts);
			pathseq.value = path_ts;

		}
		catch(SQLException e)
		{
			if(pathIt != null) try {
			pathIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading paths: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				pathIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	static int loadPathProto(final Connection conn, String domain_id, String[] ids, MapPathProtoElementSeq_TransferableHolder pathseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		MapPathProtoElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathProtoElement_Transferable path_ts[];
		MapLinkProtoIterator pathIt = null;

		String It_description = "";
		String It_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_domain_id = "";
		long It_modified = 0;

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();
		String pathtype_ids[] = new String[0];
		PathTypeIdIterator idIt = null;

		Vector id_s = new Vector();
		for(int j = 0; j < ids.length; j++)
			id_s.add(ids[j]);

		try
		{
			#sql [connCtx] pathIt = { select
					ID,
					NAME,
					DESCRIPTION,
					OWNER_ID,
					MODIFIED,
					DOMAIN_ID
				from AMFICOM.MAPPATHPROTOELEMENTS
				};

			count = 0;
			while (pathIt.next())
			{
				if(!id_s.contains(pathIt.id()))
					continue;

				count ++;

				try { It_description = pathIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = pathIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = pathIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = pathIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_modified = pathIt.modified().getTime(); }
				catch(Exception e) { It_modified = 0; }
				try { It_domain_id = pathIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = MapdbInterfaceLoad.loadAttributes(conn, "MAPPATHPROTOELEMENTATTRIBUTES", "MAP_PATH_PROTO_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				try
				{
					#sql [connCtx] idIt = { select PATH_TYPE_ID from AMFICOM.MAPPATHPROTOPATHTYPES
						where MAP_PATH_PROTO_ID = :It_id };
					while (idIt.next())
					{
						try { vector2.addElement(idIt.path_type_id()); }
						catch(SQLNullException e) { }
					}
					idIt.close();
				}
				catch(SQLException e)
				{
					idIt.close();
					System.out.println("could not get path types for proto path " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				pathtype_ids = new String[vector2.size()];
				vector2.copyInto(pathtype_ids);

				path_t = new MapPathProtoElement_Transferable(
						It_id,
						It_name,
						It_description,
						It_owner_id,
						It_domain_id,
						It_modified,
						pathtype_ids,
						attributes);

				vector.addElement(path_t);
			}
			pathIt.close();
			path_ts = new MapPathProtoElement_Transferable[vector.size()];
			vector.copyInto(path_ts);
			pathseq.value = path_ts;

		}
		catch(SQLException e)
		{
			if(pathIt != null) try {
			pathIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading paths: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				pathIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator (
		String id);

	#sql public static iterator CableTypeIdIterator (
		String cable_type_id);

	#sql public static iterator PathTypeIdIterator (
		String path_type_id);

	#sql public static iterator ChildIdIterator (
		String child_id);

	#sql public static iterator ProtoIdIterator (
		String proto_id);

	#sql public static iterator MapProtoGroupIterator (
		String id,
		String name,
		Timestamp modified );

	#sql public static iterator MapProtoIterator (
		String id,
		String name,
		String codename,
		String description,
		String owner_id,
		String symbol_id,
		Timestamp modified,
		String pe_class,
		int pe_is_kis,
		int is_visual,
		int is_topological,
		String domain_id);

	#sql public static iterator MapProtoPEIterator (
		String id,
		String map_proto_element_id,
		String proto_element_id);

	#sql public static iterator MapLinkProtoIterator (
		String id,
		String name,
		String description,
		String owner_id,
		Timestamp modified,
		String domain_id);
}
