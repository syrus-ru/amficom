/*
 * $Id: CatalogSchemeMapUpdater.sqlj,v 1.1.2.5 2004/10/18 15:31:41 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.ISM.TransmissionPath_Transferable;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:41 $
 * @author $Author: bass $
 * @module server_v1
 */
final class CatalogSchemeMapUpdater {
	private CatalogSchemeMapUpdater() {
	}

	private static String getElementScheme(final Connection conn, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_ID into :s1
				from AMFICOM.ELEMENTSONSCHEME
				where SCHEME_ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme element " + element_id + " not on any scheme - may be inside other element?..");
		}
		try
		{
			#sql [connCtx] {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTELEMENTS
				where SCHEME_EL_ID = :element_id
			};
			return getElementScheme(conn, s2);
		}
		catch(Exception ex)
		{
			System.out.println("scheme element " + element_id + " not on any scheme");
		}
		return null;
	}

	private static String getElementMap(final Connection conn, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select MAP_ID into :s1
				from AMFICOM.MAPELEMENTLINKS
				where MAP_ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map element " + element_id + " not on any map");
		}
		return null;
	}

	static void equipmentUpdated(final Connection conn, Equipment_Transferable eq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMEELEMENTS
				where EQUIPMENT_ID = :(eq.id)
				and NAME != :(eq.name)
				and DESCRIPTION != :(eq.description)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMEELEMENTS
				set
					NAME = :(eq.name),
					DESCRIPTION = :(eq.description)
				where EQUIPMENT_ID = :(eq.id)
				and NAME != :(eq.name)
				and DESCRIPTION != :(eq.description)
			};
			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getElementScheme(conn, s);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}

				#sql [connCtx] idIt2 = {
					select ID from AMFICOM.MAPELEMENTS
					where ELEMENT_ID = :s
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getElementMap(conn, s2);

					#sql [connCtx] {
						update AMFICOM.MAPELEMENTS
						set
							NAME = :(eq.name),
							DESCRIPTION = :(eq.description)
						where ID = :s2
					};
					conn.commit();

					if(s3 != null)
					{
						#sql [connCtx] {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						conn.commit();
					}
				}
				idIt2.close();

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated equipment " + eq.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemeElementUpdated(final Connection conn, SchemeElement_Transferable se) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			String equpmentId = se.equipmentId;
			if ((equpmentId == null) || (equpmentId.length() == 0))
				return;

			#sql [connCtx] {
				update AMFICOM.EQUIPMENTS
				set
					NAME = :(se.name),
					DESCRIPTION = :(se.description),
					MODIFIED = SYSDATE
				where ID = :(se.equipmentId)
				and NAME != :(se.name)
				and DESCRIPTION != :(se.description)
			};
			conn.commit();

			#sql [connCtx] idIt = {
				select ID from AMFICOM.MAPELEMENTS
				where ELEMENT_ID = :(se.id)
				and NAME != :(se.name)
				and DESCRIPTION != :(se.description)
			};
			while(idIt.next())
			{
				String s2 = idIt.id();
				String s3 = getElementMap(conn, s2);

				#sql [connCtx] {
					update AMFICOM.MAPELEMENTS
					set
						NAME = :(se.name),
						DESCRIPTION = :(se.description)
					where ID = :s2
				};
				conn.commit();

				if(s3 != null)
				{
					#sql [connCtx] {
						update AMFICOM.MAPCONTEXTS
						set MODIFIED = SYSDATE
						where ID = :s3
					};
					conn.commit();
				}
			}
			idIt.close();
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme element " + se.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void mapElementUpdated(final Connection conn, MapElement_Transferable me) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			if(me.element_id != null && !me.element_id.equals(""))
			{
				#sql [connCtx] {
					update AMFICOM.SCHEMEELEMENTS
					set
						NAME = :(me.name),
						DESCRIPTION = :(me.description)
					where ID = :(me.element_id)
					and NAME != :(me.name)
					and DESCRIPTION != :(me.description)
				};
				conn.commit();

				#sql [connCtx] {
					select EQUIPMENT_ID into :s1
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(me.element_id)
				};

				if(s1 != null && !s1.equals(""))
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTS
						set
							NAME = :(me.name),
							MODIFIED = SYSDATE,
							LONGITUDE = :(me.longitude),
							LATITUDE = :(me.latitude),
							DESCRIPTION = :(me.description)
						where ID = :s1
						and NAME != :(me.name)
						and DESCRIPTION != :(me.description)
						and LONGITUDE != :(me.longitude)
						and LATITUDE != :(me.latitude)
					};
					conn.commit();
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated map element " + me.id + "!!!");
			ex.printStackTrace();
		}
	}

	private static String getPathScheme(final Connection conn, String path_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_ID into :s1
				from AMFICOM.PATHSONSCHEME
				where SCHEME_PATH_ID = :path_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme path " + path_id + " not on any scheme");
		}
		return null;
	}

	private static String getPathMap(final Connection conn, String path_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select MAP_ID into :s1
				from AMFICOM.MAPPATHSLINKS
				where MAP_PATH_ID = :path_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map path " + path_id + " not on any map");
		}
		return null;
	}

	static void pathUpdated(final Connection conn, TransmissionPath_Transferable tp) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql [connCtx] {
				update AMFICOM.MONITOREDELEMENTS
				set
					MODIFIED = SYSDATE
				where PATH_ID = :(tp.id)
			};
			conn.commit();

			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMEPATHS
				where PATH_ID = :(tp.id)
				and NAME != :(tp.name)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMEPATHS
				set NAME = :(tp.name)
				where PATH_ID = :(tp.id)
				and NAME != :(tp.name)
			};
			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getPathScheme(conn, s);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}

				#sql [connCtx] idIt2 = {
					select ID from AMFICOM.MAPPATHELEMENTS
					where PATH_ID = :s
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getPathMap(conn, s2);

					#sql [connCtx] {
						update AMFICOM.MAPPATHELEMENTS
						set
							NAME = :(tp.name),
							DESCRIPTION = :(tp.description)
						where ID = :s2
					};
					conn.commit();

					if(s3 != null)
					{
						#sql [connCtx] {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						conn.commit();
					}
				}
				idIt2.close();

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated path " + tp.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemePathUpdated(final Connection conn, SchemePath_Transferable sp) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(sp.pathId != null && !sp.pathId.equals(""))
			{
				#sql [connCtx] {
					update AMFICOM.TRANSMISSIONPATHS
					set
						NAME = :(sp.name),
						MODIFIED = SYSDATE
					where ID = :(sp.pathId)
					and NAME != :(sp.name)
				};
				conn.commit();


				#sql [connCtx] {
					update AMFICOM.MONITOREDELEMENTS
					set
						MODIFIED = SYSDATE
					where PATH_ID = :(sp.pathId)
				};
				conn.commit();
			}


			#sql [connCtx] idIt = {
				select ID from AMFICOM.MAPPATHELEMENTS
				where PATH_ID = :(sp.id)
				and NAME != :(sp.name)
			};
			while(idIt.next())
			{
				String s2 = idIt.id();
				String s3 = getPathMap(conn, s2);

				#sql [connCtx] {
					update AMFICOM.MAPPATHELEMENTS
					set
						NAME = :(sp.name)
					where ID = :s2
				};
				conn.commit();

				if(s3 != null)
				{
					#sql [connCtx] {
						update AMFICOM.MAPCONTEXTS
						set MODIFIED = SYSDATE
						where ID = :s3
					};
					conn.commit();
				}
			}
			idIt.close();
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme path " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

	/**
	 * Tables involved:<ul>
	 * <li>MONITOREDELEMENTS;</li>
	 * <li>SCHEMEPATHS;</li>
	 * <li>TRANSMISSIONPATHS.</li>
	 * </ul>
	 */
	static void mapPathUpdated(final Connection conn, MapPathElement_Transferable mp) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String schemePathId = mp.pathId;
		if ((schemePathId != null) && (schemePathId.length() != 0)) {
			String name = mp.name;
			#sql [connCtx] {
				UPDATE amficom.schemepaths SET name = :name WHERE id = :schemePathId
			};
			String transmissionPathId;
			#sql [connCtx] {
				SELECT path_id INTO :transmissionPathId FROM amficom.schemepaths WHERE id = :schemePathId
			};
			if ((transmissionPathId != null) && (transmissionPathId.length() != 0)) {
				#sql [connCtx] {
					UPDATE amficom.transmissionpaths SET name = :name, modified = SYSDATE, description = :(mp.description) WHERE id = :transmissionPathId
				};
				#sql [connCtx] {
					UPDATE amficom.monitoredelements SET modified = SYSDATE WHERE path_id = :transmissionPathId
				};
			}
			conn.commit();
		}
	}

	private static String getDeviceElement(final Connection conn, String device_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select SCHEME_ELEMENT_ID into :s1
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICE_ID = :device_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme device " + device_id + " not in any element");
		}
		return null;
	}

	private static String getSchemePort(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select ID into :s1
				from AMFICOM.SCHEMEPORTS
				where PORT_ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("catalog port " + port_id + " not on scheme");
		}
		return null;
	}

	private static String getPort(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select PORT_ID into :s1
				from AMFICOM.SCHEMEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not in catalog - may be cable port?..");
		}
		try
		{
			#sql [connCtx] {
				select CABLE_PORT_ID into :s1
				from AMFICOM.SCHEMECABLEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not in catalog");
		}
		return null;
	}

	private static String getPortEquipment(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select EQUIPMENT_ID into :s1
				from AMFICOM.PORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("port " + port_id + " not at equipment - may be cable port?..");
		}
		try
		{
			#sql [connCtx] {
				select EQUIPMENT_ID into :s1
				from AMFICOM.CABLEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("cable port " + port_id + " not at equipment");
		}
		return null;
	}

	private static String getLinkScheme(final Connection conn, String link_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_ID into :s1
				from AMFICOM.LINKSONSCHEME
				where SCHEME_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme link " + link_id + " not on scheme - may be inside any element?..");
		}
		try
		{
			#sql [connCtx] {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTLINKS
				where SCHEME_LINK_ID = :link_id
			};
			return getElementScheme(conn, s2);
		}
		catch(Exception ex)
		{
			System.out.println("scheme link " + link_id + " not on scheme element");
		}
		return null;
	}

	static void linkUpdated(final Connection conn, Link_Transferable l) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			String s_p_id = getSchemePort(conn, l.start_port_id);
			if(s_p_id == null)
				s_p_id = "";
			String t_p_id = getSchemePort(conn, l.end_port_id);
			if(t_p_id == null)
				t_p_id = "";

			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMELINKS
				where LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMELINKS
				set
					NAME = :(l.name),
					PHYSICAL_LENGTH = :(l.physical_length),
					OPTICAL_LENGTH = :(l.optical_length)
				where LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};
			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getLinkScheme(conn, s);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated link " + l.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemeLinkUpdated(final Connection conn, SchemeLink_Transferable sl) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(sl.linkId != null && !sl.linkId.equals(""))
			{
				String s_p_id = getPort(conn, sl.sourcePortId);
				if(s_p_id == null)
					s_p_id = "";
				String t_p_id = getPort(conn, sl.targetPortId);
				if(t_p_id == null)
					t_p_id = "";
				String s_e_id = getPortEquipment(conn, s_p_id);
				if(s_e_id == null)
					s_e_id = "";
				String t_e_id = getPortEquipment(conn, t_p_id);
				if(t_e_id == null)
					t_e_id = "";

				#sql [connCtx] {
					update AMFICOM.LINKS
					set
						NAME = :(sl.name),
						MODIFIED = SYSDATE,
						PHYSICAL_LENGTH = :(sl.physicalLength),
						OPTICAL_LENGTH = :(sl.opticalLength)
					where ID = :(sl.linkId)
					and NAME != :(sl.name)
					and PHYSICAL_LENGTH != :(sl.physicalLength)
					and OPTICAL_LENGTH != :(sl.opticalLength)
				};
				conn.commit();
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme link " + sl.id + "!!!");
			ex.printStackTrace();
		}
	}

	private static String getCableLinkScheme(final Connection conn, String link_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_ID into :s1
				from AMFICOM.CABLELINKSONSCHEME
				where SCHEME_CABLE_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable link " + link_id + " not on any scheme");
		}
		return null;
	}

	private static String getCableLinkMap(final Connection conn, String link_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select MAP_ID into :s1
				from AMFICOM.MAPLINKLINKS
				where MAP_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map link " + link_id + " not on any map");
		}
		return null;
	}

	private static String getSchemeCablePort(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select ID into :s1
				from AMFICOM.SCHEMECABLEPORTS
				where CABLE_PORT_ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("cable port " + port_id + " not on scheme");
		}
		return null;
	}

	private static String getMapElement(final Connection conn, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select ID into :s1
				from AMFICOM.MAPELEMENTS
				where ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map element " + element_id + " not on any map");
		}
		return null;
	}

	private static String getSchemePortElement(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICEPORTS
				where SCHEME_PORT_ID = :port_id
			};
			#sql [connCtx] {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICE_ID = :s1
			};
			return s2;
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not on scheme element - may be cable port?..");
		}
		try
		{
			#sql [connCtx] {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICECABLEPORTS
				where SCHEME_CABLE_PORT_ID = :port_id
			};
			#sql [connCtx] {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICe_ID = :s1
			};
			return s2;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not on scheme element");
		}
		return null;
	}

	static void cableLinkUpdated(final Connection conn, CableLink_Transferable l) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			String s_p_id = getSchemeCablePort(conn, l.start_port_id);
			if(s_p_id == null)
				s_p_id = "";
			String t_p_id = getSchemeCablePort(conn, l.end_port_id);
			if(t_p_id == null)
				t_p_id = "";

			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMECABLELINKS
				where CABLE_LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMECABLELINKS
				set
					NAME = :(l.name),
					PHYSICAL_LENGTH = :(l.physical_length),
					OPTICAL_LENGTH = :(l.optical_length)
				where CABLE_LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getCableLinkScheme(conn, s);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}

				#sql [connCtx] idIt2 = {
					select ID from AMFICOM.MAPPHYSICALLINKELEMENTS
					where LINK_ID = :s
					and NAME != :(l.name)
					and DESCRIPTION != :(l.description)
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getCableLinkMap(conn, s2);

					String s_n_id = getMapElement(conn, getSchemePortElement(conn, s_p_id));
					String e_n_id = getMapElement(conn, getSchemePortElement(conn, t_p_id));

					#sql [connCtx] {
						update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							NAME = :(l.name),
							DESCRIPTION = :(l.description)
						where ID = :s2
					};
					conn.commit();

					if(s3 != null)
					{
						#sql [connCtx] {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						conn.commit();
					}
				}
				idIt2.close();
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable link " + l.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemeCableLinkUpdated(final Connection conn, SchemeCableLink_Transferable scl) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(scl.cableLinkId != null && !scl.cableLinkId.equals(""))
			{
				String s_p_id = getPort(conn, scl.sourcePortId);
				if(s_p_id == null)
					s_p_id = "";
				String t_p_id = getPort(conn, scl.targetPortId);
				if(t_p_id == null)
					t_p_id = "";
				String s_e_id = getPortEquipment(conn, s_p_id);
				if(s_e_id == null)
					s_e_id = "";
				String t_e_id = getPortEquipment(conn, t_p_id);
				if(t_e_id == null)
					t_e_id = "";

				#sql [connCtx] {
					update AMFICOM.CABLELINKS
					set
						NAME = :(scl.name),
						MODIFIED = SYSDATE,
						PHYSICAL_LENGTH = :(scl.physicalLength),
						OPTICAL_LENGTH = :(scl.opticalLength)
					where ID = :(scl.cableLinkId)
					and NAME != :(scl.name)
					and PHYSICAL_LENGTH != :(scl.physicalLength)
					and OPTICAL_LENGTH != :(scl.opticalLength)
				};
				conn.commit();

				#sql [connCtx] idIt = {
					select ID from AMFICOM.MAPPHYSICALLINKELEMENTS
					where LINK_ID = :(scl.id)
					and NAME != :(scl.name)
				};
				while(idIt.next())
				{
					String s2 = idIt.id();
					String s3 = getCableLinkMap(conn, s2);

					String s_n_id = getMapElement(conn, getSchemePortElement(conn, s_p_id));
					String e_n_id = getMapElement(conn, getSchemePortElement(conn, t_p_id));

					#sql [connCtx] {
						update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							NAME = :(scl.name)
						where ID = :s2
					};
					conn.commit();

					if(s3 != null)
					{
						#sql [connCtx] {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						conn.commit();
					}
				}
				idIt.close();
			}
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme cable link " + scl.id + "!!!");
			ex.printStackTrace();
		}
	}

	/**
	 * Tables involved:<ul>
	 * <li>CABLELINKS;</li>
	 * <li>SCHEMECABLELINKS.</li>
	 * </ul>
	 */
	static void mapLinkUpdated(final Connection conn, MapPhysicalLinkElement_Transferable ml) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String schemeCableLinkId = ml.linkId; 
		if ((schemeCableLinkId != null) && (schemeCableLinkId.length() != 0)) {
			String name = ml.name;
			#sql [connCtx] {
				UPDATE amficom.schemecablelinks SET name = :name WHERE id = :schemeCableLinkId
			};
			String cableLinkId;
			#sql [connCtx] {
				SELECT cable_link_id INTO :cableLinkId FROM amficom.schemecablelinks WHERE id = :schemeCableLinkId
			};
			if ((cableLinkId != null) && (cableLinkId.length() != 0)) {
				#sql [connCtx] {
					UPDATE amficom.cablelinks SET name = :name, modified = SYSDATE, description = :(ml.description) where ID = :cableLinkId
				};
			}
			conn.commit();
		}
	}

	private static String getThreadSchemeCable(final Connection conn, String thread_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select SCHEME_CABLE_LINK_ID into :s1
				from AMFICOM.SCHEMECABLELINKTHREADS
				where SCHEME_CABLE_THREAD_ID = :thread_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme thread " + thread_id + " not in scheme cable link");
			ex.printStackTrace();
		}
		return null;
	}

	private static String getThreadCableLink(final Connection conn, String thread_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;

		try
		{
			#sql [connCtx] {
				select CABLE_ID into :s1
				from AMFICOM.CABLELINKTHREADS
				where ID = :thread_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("thread " + thread_id + " not in cable link");
		}
		return null;
	}

	static void cableThreadUpdated(final Connection conn, CableLinkThread_Transferable t) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			int count = 0;
				
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.SCHEMECABLETHREADS
				where THREAD_ID = :(t.id)
				and NAME != :(t.name)
				and LINK_TYPE_ID != :(t.linkTypeId)
			};

			if(count == 0)
				return;

			#sql [connCtx] {
				update AMFICOM.SCHEMECABLETHREADS
				set
					NAME = :(t.name),
					LINK_TYPE_ID = :(t.linkTypeId)
				where THREAD_ID = :(t.id)
			};
			conn.commit();

			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMELINKS
				where LINK_ID = :(t.id)
			};
			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getThreadSchemeCable(conn, s);
				if(s2 == null)
					continue;
				String s1 = getCableLinkScheme(conn, s2);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable thread " + t.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemeCableLinkThreadUpdated(final Connection conn, SchemeCableThread_Transferable st) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(st.threadId != null && !st.threadId.equals(""))
			{
				int count = 0;
				
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLELINKTHREADS
					where ID = :(st.threadId)
					and NAME != :(st.name)
					and LINK_TYPE_ID != :(st.linkTypeId)
				};

				if(count == 0)
					return;

				#sql [connCtx] {
					update AMFICOM.CABLELINKTHREADS
					set
						NAME = :(st.name),
						LINK_TYPE_ID = :(st.linkTypeId)
					where ID = :(st.threadId)
				};
				conn.commit();

				String s1 = getThreadCableLink(conn, st.threadId);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.CABLELINKS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme cable thread " + st.id + "!!!");
			ex.printStackTrace();
		}
	}

	private static String getPortElement(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICEPORTS
				where SCHEME_PORT_ID = :port_id
			};
			return getDeviceElement(conn, s1);
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not on scheme");
		}
		return null;
	}

	static void portUpdated(final Connection conn, Port_Transferable p) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMEPORTS
				where PORT_ID = :(p.id)
				and NAME != :(p.name)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMEPORTS
				set NAME = :(p.name)
				where PORT_ID = :(p.id)
				and NAME != :(p.name)
			};
			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getPortElement(conn, s);
				String s1 = getElementScheme(conn, s2);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated port " + p.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemePortUpdated(final Connection conn, SchemePort_Transferable sp) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(sp.portId != null && !sp.portId.equals(""))
			{
				int count = 0;
				
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.PORTS
					where ID = :(sp.portId)
					and NAME != :(sp.name)
				};

				if(count == 0)
					return;

				#sql [connCtx] {
					update AMFICOM.PORTS
					set NAME = :(sp.name)
					where ID = :(sp.portId)
					and NAME != :(sp.name)
				};
				conn.commit();

				String s1 = getPortEquipment(conn, sp.portId);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme port " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

	private static String getCablePortElement(final Connection conn, String port_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String s1;
		String s2;

		try
		{
			#sql [connCtx] {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICECABLEPORTS
				where SCHEME_CABLE_PORT_ID = :port_id
			};
			return getDeviceElement(conn, s1);
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not on scheme");
		}
		return null;
	}

	static void cablePortUpdated(final Connection conn, CablePort_Transferable p) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql [connCtx] idIt = {
				select ID from AMFICOM.SCHEMECABLEPORTS
				where CABLE_PORT_ID = :(p.id)
				and NAME != :(p.name)
			};

			#sql [connCtx] {
				update AMFICOM.SCHEMECABLEPORTS
				set NAME = :(p.name)
				where CABLE_PORT_ID = :(p.id)
				and NAME != :(p.name)
			};
			conn.commit();

			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getCablePortElement(conn, s);
				String s1 = getElementScheme(conn, s2);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable port " + p.id + "!!!");
			ex.printStackTrace();
		}
	}

	static void schemeCablePortUpdated(final Connection conn, SchemeCablePort_Transferable sp) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;

		try
		{
			if(sp.cablePortId != null && !sp.cablePortId.equals(""))
			{
				int count = 0;
				
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLEPORTS
					where ID = :(sp.cablePortId)
					and NAME != :(sp.name)
				};

				if(count == 0)
					return;

				#sql [connCtx] {
					update AMFICOM.CABLEPORTS
					set NAME = :(sp.name)
					where ID = :(sp.cablePortId)
					and NAME != :(sp.name)
				};
				conn.commit();

				String s1 = getPortEquipment(conn, sp.cablePortId);
				if(s1 != null)
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					conn.commit();
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme cable port " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

	#sql private static iterator IdIterator(
		String id);
}
