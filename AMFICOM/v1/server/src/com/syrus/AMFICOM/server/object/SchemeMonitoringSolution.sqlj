/*
 * $Id: SchemeMonitoringSolution.sqlj,v 1.1.2.3 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import java.util.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemeMonitoringSolution {
	private SchemeMonitoringSolution_Transferable sms;

	private String id = "";
	private String name = "";
	private String scheme_id = "";

	private double price = 0.0;

	private ArrayList paths = new ArrayList();

	SchemeMonitoringSolution(final Connection conn, SchemeMonitoringSolution_Transferable sms) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

    	this.sms = sms;

		this.id = sms.id;
		this.scheme_id = sms.scheme_id;
    	this.name = sms.name;

		this.price = sms.price;

	this.paths = new ArrayList();
	for(int i = 0; i < sms.paths.length; i++)
			paths.add(sms.paths[i]);

		System.out.println(
				"	\n id = " + id +
				"	\n name = " + name +
		    	"	\n scheme_id = " + scheme_id +
		"	\n price = " + price);
		
		#sql [connCtx] { insert into SCHEMEMONITORINGSOLUTION(
				id,
				name,
		    	scheme_id,
		price)
		values(
				:id,
				:name,
		    	:scheme_id,
		:price)
	};

		savePaths(conn);
	    	conn.commit();
	}

	SchemeMonitoringSolution(final Connection conn, String sms_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		#sql [connCtx] { select
				id,
				name,
		    	scheme_id,
		price
		into
				:id,
				:name,
		    	:scheme_id,
		:price
	    from SCHEMEMONITORINGSOLUTION
	    where id = :sms_id
		};
		loadPaths(conn);
    }

    void delete(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		deletePaths(conn);
		
    	#sql [connCtx] { delete
	    from SCHEMEMONITORINGSOLUTION
	    where id = :id
	};
    	conn.commit();
    }

    private SchemeMonitoringSolution_Transferable getTransferable() {
    	sms = new SchemeMonitoringSolution_Transferable(
				id,
				name,
		    	scheme_id,
		price,
		(SchemePath_Transferable[] )paths.toArray(new SchemePath_Transferable[0]));
	return sms;
    }

	private void savePaths(final Connection conn) throws SQLException {
 		DefaultContext connCtx = new DefaultContext(conn);

		#sql [connCtx] {
			delete from PATHSINSOLUTION where solution_id = :id
		};

		SchemedbInterfaceSave.saveSchemePaths(conn, (SchemePath_Transferable[] )paths.toArray(new SchemePath_Transferable[0]));
		for(int i = 0; i < paths.size(); i++) {
			SchemePath_Transferable pt = (SchemePath_Transferable )paths.get(i);
			String uid = ResourcedbInterface.getUid(conn, "sm_solution");
			
			#sql [connCtx] { insert into PATHSINSOLUTION(
					id,
					scheme_path_id,
					solution_id)
				values(
					:uid,
					:(pt.id),
					:id)
			};
		}

	}

	private void loadPaths(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PathIdIterator pIt = null;

		try
		{
		#sql [connCtx] pIt = { select scheme_path_id from PATHSINSOLUTION
			where SOLUTION_ID = :id
		};

		paths = new ArrayList();
		while(pIt.next())
		{
			paths.add(SchemedbInterfaceLoad.loadSchemePath(conn, pIt.scheme_path_id()));
		}
		pIt.close();
		}
		catch(SQLException e)
		{
			throw e;
		}
		finally
		{
			try {
				pIt.close();
			}catch(Exception exe) {}
		}
		
	}

	private void deletePaths(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

	for(int i = 0; i < paths.size(); i++)
		{
			SchemePath_Transferable pt = (SchemePath_Transferable )paths.get(i);
			SchemedbInterfaceSave.removeSchemePath(conn, pt.id);
		}

    	#sql [connCtx] { delete
	    from PATHSINSOLUTION
	    where solution_id = :id
	};
	}

	static SchemeMonitoringSolution_Transferable[] getSMSs(final Connection conn) throws SQLException {
 		DefaultContext connCtx = new DefaultContext(conn);

   	Vector vec = new Vector();

    	IdIterator idIt = null;

		try
		{
		#sql [connCtx] idIt = { select id
	    from SCHEMEMONITORINGSOLUTION
	};
	while(idIt.next())
		vec.add(new SchemeMonitoringSolution(conn, idIt.id()).getTransferable());
		}
		catch(SQLException e)
		{
			throw e;
		}
		finally
		{
			try {
				idIt.close();
			} catch(Exception exe) {}
		}
		

	return (SchemeMonitoringSolution_Transferable [])vec.toArray(new SchemeMonitoringSolution_Transferable[vec.size()]);
    }

	#sql public static iterator IdIterator(String id);

	#sql public static iterator PathIdIterator(String scheme_path_id);
}
