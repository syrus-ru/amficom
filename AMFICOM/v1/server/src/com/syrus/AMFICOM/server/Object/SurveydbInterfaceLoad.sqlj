/*
 * $Id: SurveydbInterfaceLoad.sqlj,v 1.3 2004/06/29 07:12:58 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import java.sql.*;
import java.util.*;
import oracle.sql.BLOB;

/**
 * @version $Revision: 1.3 $, $Date: 2004/06/29 07:12:58 $
 * @author $Author: bass $
 * @module server_v1
 */
public class SurveydbInterfaceLoad
{
	protected SurveydbInterfaceLoad()
	{
	}

	public static int GetTestIdsForMonitoredElement(
			String me_id,
			ResourceDescriptorSeq_TransferableHolder testids)
		throws AMFICOMRemoteException
	{
		int ret = Constants.ERROR_NO_ERROR;

		ResourceIdIterator idIt = null;

		testids.value = new ResourceDescriptor_Transferable[0];
		try
		{
			Vector vec = new Vector();

			#sql idIt = { select ID, MODIFIED from AMFICOM.TESTS
				where MONITORED_ELEMENT_ID = :me_id
				and DELETED IS NULL
			};
			while(idIt.next())
				vec.add(new ResourceDescriptor_Transferable(idIt.id(), idIt.modified().getTime()));
			idIt.close();

			testids.value = new ResourceDescriptor_Transferable[vec.size()];
			vec.copyInto(testids.value);
		}
		catch(SQLException ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			ex.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, "Невозможно загрузить тест: " + ex.getMessage());
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return ret;
	}



	public static ClientParameter_Transferable[] loadTestArguments(String test_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_p_type_id = "";
		String It_action_id = "";
		String It_arg_id = "";

		Vector vector = new Vector();
		ClientParameter_Transferable[] args = new ClientParameter_Transferable[0];
		ClientParameter_Transferable arg;
		TestArgumentIterator tparIt = null;
/*
		try
		{
			#sql tparIt = {SELECT
					id,
					value,
					type_id,
					test_id
					FROM amficom.testarguments
					WHERE test_id = :test_id };

			String str;
			while (tparIt.next())
			{
				try { It_id = tparIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_arg_id = tparIt.type_id(); }
				catch(SQLException e) { }
				if(It_arg_id == null) It_arg_id = "";

				#sql {SELECT name, codename, parameter_type_id
						INTO :It_name, :It_codename, :It_parameter_type_id
						FROM amficom.testtypearguments
						WHERE id = :It_arg_id
				};

				#sql {
					select NAME, TYPE_ID into
						:It_parameter_type_name, :It_data_type
					from AMFICOM.PARAMETERTYPES
					where ID = :It_parameter_type_id };

				arg = new Parameter_Transferable(
						It_id,
						It_name,
						It_codename,
						It_parameter_type_name,
						It_parameter_type_id,
						It_data_type,
						test_id,
						ByteArrayDatabase.toByteArr(tparIt.value()));
				vector.add(arg);
			}
			tparIt.close();
		}
		catch(SQLException e)
		{
			System.out.println("could not get parameters for test " + test_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		args = new Parameter_Transferable[vector.size()];
		vector.copyInto(args);
*/
		return args;
	}

	public static long[] getTestTimeTableStamps(String test_i_d)
		throws SQLException
	{
		TestTimeTableStampsIterator ttsIt = null;
		LinkedList ll = new LinkedList();
		try
		{
			#sql ttsIt = {select time_stamp from amficom.testtimetablestamps where test_id = :test_i_d } ;
			while (ttsIt.next())
				ll.add(ttsIt.time_stamp());
			ttsIt.close();
		}
		catch(SQLException ex)
		{
			if(ttsIt != null) try {
			ttsIt.close();
			}catch(Exception exe) {}
			throw ex;
		}
		finally
		{
			try {
				ttsIt.close();
			}catch(Exception exe) {}
		}
		
		long[] ts = new long[0];
		if (ll.size() == 0)
			System.out.println("No time stamps for test id: " + test_i_d);
		else
		{
			ts = new long[ll.size()];
			for (int j = 0; j < ts.length; j++)
				ts[j] = ((Timestamp)(ll.get(j))).getTime();
		}
		return ts;
	}

	public static Vector loadResultParameters(
			String paramTableName,
			String result_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_p_type_id = "";
		String It_action_id = "";
		BLOB It_value;
		byte[] val = new byte[0];
		octetSeqHolder osh;

		Vector vector2 = new Vector();
		ResultParameterIterator paramIt = null;
/*
		try
		{
			#sql paramIt = {
				select ID, PARAMETER_TYPE_ID, VALUE, RESULT_ID
					from AMFICOM.PARAMETERS
					where RESULT_ID = :result_id
			};

			while (paramIt.next())
			{
				osh = new octetSeqHolder();
				osh.value = new byte[0];

				try { It_id = paramIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_p_type_id = paramIt.parameter_type_id(); }
				catch(SQLException e) { }
				if(It_p_type_id == null) It_p_type_id = "";
				try
				{
					It_value = paramIt.value();
					val = ByteArrayDatabase.toByteArr(It_value);
				}
				catch(SQLException e)
				{
					System.out.println("could not get parameter " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					ConnectionContext connCtx = DefaultContext.getDefaultContext();

					Statement statement = null;
					try
					{
						statement = connCtx.getConnection().createStatement();
					}
					catch(SQLException sqlexception)
					{
//						Log.systemLog.logDebugMessage("CharacterizationDatabase: Error (3)", 200);
//						Log.systemLog.logErrorException(sqlexception);
						System.out.println("Лажа");
					}

					String qry = "select NAME, CODENAME, PARAMETER_TYPE_ID " +
							"from AMFICOM." + paramTableName +
							" where ID = '" + It_p_type_id + "'";

					System.out.println("Executing " + qry);

					OracleResultSet resultset = null;
					try
					{
						resultset = (OracleResultSet )statement.executeQuery(qry);
						if(resultset.next())
						{
							It_name = resultset.getString("NAME");
							It_codename = resultset.getString("CODENAME");
							It_parameter_type_id = resultset.getString("PARAMETER_TYPE_ID");
						}
						else
						{
							System.out.println("Characterization does not exist");
							return vector2;
						}
					}
					catch(SQLException sqlexception1)
					{
						System.out.println("CharacterizationDatabase: Error (4)" + ": " + sqlexception1.getMessage());
					}
					finally
					{
						try
						{
							if(resultset != null)
								resultset.close();
							resultset = null;
							if(statement != null)
								statement.close();
							statement = null;
						}
						catch(SQLException _ex) { }
					}
				}
				catch(Exception e)
				{
					System.out.println("could not get parameter " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}

				System.out.println("start retreive for " + It_parameter_type_id);
				#sql {
					select NAME, TYPE_ID into
						:It_parameter_type_name, :It_data_type
					from AMFICOM.PARAMETERTYPES
					where ID = :It_parameter_type_id };

				System.out.println("retreived " + It_parameter_type_name + " data type " + It_data_type);

				Parameter_Transferable param =
					new Parameter_Transferable(
							It_id,
							It_name,
							It_codename,
							It_parameter_type_name,
							It_parameter_type_id,
							It_data_type,
							It_action_id,
							val );
//							osh.value);
					vector2.addElement(param);

			}// while(paramIt)
			paramIt.close();
		}
		catch(SQLException e)
		{
			System.out.println("could not get parameters for result " + result_id + ": " + e.getMessage());
			e.printStackTrace();
		}
*/
		return vector2;
	}

/*
	loadActionArguments(
			"ANALYSISARGUMENTS",
			"ANALYSIS_ID",
			"ARGUMENT_TYPE_ID",
			"ANALYSISTYPEARGUMENTS",
			"ana1")
*/
	public static ClientParameter_Transferable[] loadActionArguments(
			String argumentTableName,
			String argumentFieldName,
			String argumentParameterFieldName,
			String argumentTypeTableName,
			String action_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_arg_id = "";

		byte[] val = new byte[0];

		Vector vector = new Vector();
		ClientParameter_Transferable[] args = new ClientParameter_Transferable[0];
		ClientParameter_Transferable arg;
/*


		try
		{
			ConnectionContext connCtx = DefaultContext.getDefaultContext();
			Statement statement = null;
			OracleResultSet resultset = null;
			Statement statement2 = null;
			OracleResultSet resultset2 = null;
System.out.println("Zaebali ");
			String qry =
					"select ID, VALUE, " + argumentParameterFieldName +
					" from AMFICOM." + argumentTableName +
					" where " + argumentFieldName + " = '" + action_id + "'";

			System.out.println("Executing " + qry);
			try
			{
				statement = connCtx.getConnection().createStatement();
				resultset = (OracleResultSet )statement.executeQuery(qry);
				while(resultset.next())
				{
					It_arg_id = resultset.getString(argumentParameterFieldName);
					It_id = resultset.getString("ID");
					val = ByteArrayDatabase.toByteArr(resultset.getBLOB("VALUE"));
					System.out.println("retreived id " + It_id + " argID " + It_arg_id);

					String qry2 =
							"select NAME, CODENAME, PARAMETER_TYPE_ID " +
							" from AMFICOM." + argumentTypeTableName +
							" where ID = '" + It_arg_id + "'";
					System.out.println("Executing " + qry2);
					try
					{
						statement2 = connCtx.getConnection().createStatement();
						resultset2 = (OracleResultSet )statement.executeQuery(qry2);
						if(resultset2.next())
						{
							It_name = resultset2.getString("NAME");
							It_codename = resultset2.getString("CODENAME");
							It_parameter_type_id = resultset2.getString("PARAMETER_TYPE_ID");
						}
						else
						{
							System.out.println("param does not exist");
							return args;
						}
						resultset2.close();
					}
					catch(SQLException sqlexception1)
					{
						System.out.println("Фигня: " + sqlexception1.getMessage());
						sqlexception1.printStackTrace();
						return args;
					}
					finally
					{
						try
						{
							if(resultset2 != null)
								resultset2.close();
							resultset2 = null;
							if(statement2 != null)
								statement2.close();
							statement2 = null;
						}
						catch(SQLException _ex) { }
					}

					#sql {
						select NAME, TYPE_ID into
							:It_parameter_type_name, :It_data_type
						from AMFICOM.PARAMETERTYPES
						where ID = :It_parameter_type_id };

					arg = new Parameter_Transferable(
							It_id,
							It_name,
							It_codename,
							It_parameter_type_name,
							It_parameter_type_id,
							It_data_type,
							action_id,
							val);
//							ByteArrayDatabase.toByteArr(resultset.getBLOB("VALUE")));
					vector.add(arg);
				}
				resultset.close();
			}
			catch(SQLException sqlexception1)
			{
				System.out.println("Zhopa: " + sqlexception1.getMessage());
				sqlexception1.printStackTrace();
				return args;
			}
			finally
			{
				try
				{
					if(resultset != null)
						resultset.close();
					resultset = null;
					if(statement != null)
						statement.close();
					statement = null;
				}
				catch(SQLException _ex) { }
			}
		}
		catch(Exception e)
		{
			System.out.println("could not get parameters for " + action_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		args = new Parameter_Transferable[vector.size()];
		vector.copyInto(args);
*/
		return args;
	}

	public static ClientParameter_Transferable[] loadActionArguments(
			String tableName,
			String actionFieldName,
			String element_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		BLOB It_value;
		byte[] val = new byte[0];
		octetSeqHolder osh;

		ClientParameter_Transferable arg;
		ClientParameter_Transferable args[] = new ClientParameter_Transferable[0];
		ActionArgumentIterator argIt = null;
		Vector vector = new Vector();
/*
		try
		{
			String qry =
					"select ID, NAME, CODENAME, PARAMETER_TYPE_ID, VALUE " +
					" from AMFICOM." + tableName +
					" where " + actionFieldName + " = '" + element_id + "'";

			#sql
			{
				BEGIN
					open :OUT argIt for :qry;
				END;
			};
			while(argIt.next())
			{
				try { It_id = argIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = argIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = argIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_parameter_type_id = argIt.parameter_type_id(); }
				catch(SQLException e) { }
				if(It_parameter_type_id == null) It_parameter_type_id = "";

				osh = new octetSeqHolder();
				osh.value = new byte[0];

				try
				{
					It_value = argIt.value();
					val = ByteArrayDatabase.toByteArr(It_value);
				}
				catch(SQLException e)
				{
					System.out.println("could not get argument " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					#sql {
						select NAME, TYPE_ID into
							:It_parameter_type_name, :It_data_type
						from AMFICOM.PARAMETERTYPES
						where ID = :It_parameter_type_id };

					arg = new Parameter_Transferable(
							It_id,
							It_name,
							It_codename,
							It_parameter_type_name,
							It_parameter_type_id,
							It_data_type,
							element_id,
							val );
//							osh.value);
					vector.addElement(arg);
				}
				catch(SQLException e)
				{
					System.out.println("could not get argument " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
			}
			argIt.close();

			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("could not load argument " + It_id + ": " + e.getMessage());
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		args = new Parameter_Transferable[vector.size()];
		vector.copyInto(args);
*/
		return args;
	}

	public static ClientParameter_Transferable[] loadActionParameters(
			String tableName,
			String actionFieldName,
			String element_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		byte[] val = new byte[0];

		ClientParameter_Transferable param;
		ClientParameter_Transferable[] params = new ClientParameter_Transferable[0];
		ActionParameterIterator paramIt = null;
		Vector vector = new Vector();
/*
		try
		{
			String qry =
					"select ID, NAME, CODENAME, PARAMETER_TYPE_ID " +
					" from AMFICOM." + tableName +
					" where " + actionFieldName + " = '" + element_id + "'";

			#sql
			{
				BEGIN
					open :OUT paramIt for :qry;
				END;
			};
			while(paramIt.next())
			{
				try { It_id = paramIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = paramIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = paramIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_parameter_type_id = paramIt.parameter_type_id(); }
				catch(SQLException e) { }
				if(It_parameter_type_id == null) It_parameter_type_id = "";

				try
				{
					#sql {
						select NAME, TYPE_ID into
							:It_parameter_type_name, :It_data_type
						from AMFICOM.PARAMETERTYPES
						where ID = :It_parameter_type_id };

					param = new Parameter_Transferable(
							It_id,
							It_name,
							It_codename,
							It_parameter_type_name,
							It_parameter_type_id,
							It_data_type,
							element_id,
							val);
					vector.addElement(param);
				}
				catch(SQLException e)
				{
					System.out.println("could not get parameter " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
			}
			paramIt.close();

			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("could not load parameter " + It_id + ": " + e.getMessage());
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		params = new Parameter_Transferable[vector.size()];
		vector.copyInto(params);
*/
		return params;
	}

	#sql public static iterator IdIterator ( String id );
	#sql public static iterator ResourceIdIterator( String id, Timestamp modified );

	#sql public static iterator TestIterator (
		String id,
		Timestamp created,
		String test_type_id,
		int temporal_type,
		Timestamp start_time,
		Timestamp period,
		Timestamp end_time,
		int status,
		String kis_id,
		String local_id,
		String request_id);

  #sql public static iterator TestArgumentIterator (
	  String id,
	  BLOB value,
	  String type_id,
	  String test_id);

	#sql public static iterator TestTimeTableStampsIterator (Timestamp time_stamp);

	#sql public static iterator ResultParameterIterator(
		String id,
		String parameter_type_id,
		BLOB value,
		String result_id);

	#sql public static iterator ActionArgumentIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id,
		BLOB value);

	#sql public static iterator ActionParameterIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id);
}
