/*
 * $Id: MapdbInterfaceLoad5.sqlj,v 1.1.2.1 2004/08/20 14:03:47 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.ElementAttribute_Transferable;
import java.sql.SQLException;
import java.util.Vector;
import sqlj.runtime.SQLNullException;

/**
 * @version $Revision: 1.1.2.1 $, $Date: 2004/08/20 14:03:47 $
 * @author $Author: bass $
 * @module server_v1
 */
public class MapdbInterfaceLoad5
{
	protected MapdbInterfaceLoad5()
	{
	}

	public static int loadJMapNodes(
			Vector map_ids,
			MapPhysicalNodeElementSeq_TransferableHolder nodeseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalNodeElement_Transferable node_t;
		Vector vector = new Vector();
		MapPhysicalNodeElement_Transferable node_ts[];
		MapNodeIterator nodeIt = null;

		String It_symbol_id = "";
		String It_latitude = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		boolean It_active = false;
		String It_name = "";
		String It_physical_link_id = "";
		String It_longitude = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nodeIt = { select
						SYMBOL_ID,
						LATITUDE,
						OWNER_ID,
						DESCRIPTION,
						ID,
						MAP_ID,
						ISM_MAP_ID,
						ACTIVE,
						NAME,
						PHYSICAL_LINK_ID,
						LONGITUDE
					from AMFICOM.MAPPHYSICALNODEELEMENTS
					where ISM_MAP_ID = :current_map_id
					};

				count = 0;
				while (nodeIt.next())
				{
					count ++;

					try { It_symbol_id = nodeIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_latitude = nodeIt.latitude(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_owner_id = nodeIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_description = nodeIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = nodeIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_map_id = nodeIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_active = (nodeIt.active() == 0)? false:true; }
					catch(SQLException e) { }
					try { It_name = nodeIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_physical_link_id = nodeIt.physical_link_id(); }
					catch(SQLException e) { }
					if(It_physical_link_id == null) It_physical_link_id = "";
					try { It_longitude = nodeIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPHYSICALNODEELEMENTATTRIBUT",
							"MAP_PHYSICAL_NODE_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					node_t = new MapPhysicalNodeElement_Transferable(
							It_id,
							It_name,
							It_longitude,
							It_latitude,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_symbol_id,
							It_physical_link_id,
							It_active,
							attributes);

					images.add(It_symbol_id);
					vector.addElement(node_t);
				}// while(nodeIt)
				nodeIt.close();
				node_ts = new MapPhysicalNodeElement_Transferable[vector.size()];
				vector.copyInto(node_ts);
				nodeseq.value = node_ts;

			}
			catch(SQLException e)
			{
				if(nodeIt != null) try {
				nodeIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading physical nodes: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					nodeIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

	public static int loadJMapNodeLinks(
			Vector map_ids,
			MapNodeLinkElementSeq_TransferableHolder nodelinkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapNodeLinkElement_Transferable nl_t;
		Vector vector = new Vector();
		MapNodeLinkElement_Transferable nl_ts[];
		MapNodeLinkIterator nlIt = null;

		int It_alarmed_line_size = 1;
		String It_metric = "";
		String It_physical_link_id = "";
		int It_alarmed_color = 0;
		String It_codename = "";
		String It_description = "";
		String It_id = "";
		int It_color = 0;
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		boolean It_alarmed = false;
		String It_style = "";
		boolean It_show_alarmed = false;
		String It_alarmed_style = "";
		int It_line_size = 1;
		String It_owner_id = "";
		String It_type_id = "";
		String It_font_id = "";
		boolean It_show_metric = false;
		String It_selected_style = "";
		String It_map_id = "";
		String It_ism_map_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nlIt = { select
						PHYSICAL_LINK_ID,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						MAP_ID,
						ISM_MAP_ID
					from AMFICOM.MAPNODELINKELEMENTS
					where ISM_MAP_ID = :current_map_id
					};

				count = 0;
				while (nlIt.next())
				{
					count ++;

					try { It_physical_link_id = nlIt.physical_link_id(); }
					catch(SQLException e) { }
					if(It_physical_link_id == null) It_physical_link_id = "";
					try { It_id = nlIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = nlIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = nlIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = nlIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = nlIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_map_id = nlIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPNODELINKELEMENTATTRIBUTES",
							"MAP_NODE_LINK_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					nl_t = new MapNodeLinkElement_Transferable(
							It_id,
							It_name,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							It_physical_link_id,
							attributes);

					vector.addElement(nl_t);
				}// while(nlIt)
				nlIt.close();
				nl_ts = new MapNodeLinkElement_Transferable[vector.size()];
				vector.copyInto(nl_ts);
				nodelinkseq.value = nl_ts;

			}
			catch(SQLException e)
			{
				if(nlIt != null) try {
				nlIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading node links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					nlIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

	public static int loadJMapLinks(
			Vector map_ids,
			MapPhysicalLinkElementSeq_TransferableHolder linkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalLinkElement_Transferable link_t;
		Vector vector = new Vector();
		MapPhysicalLinkElement_Transferable link_ts[];
		MapPhysicalLinkIterator linkIt = null;

		int It_alarmed_line_size = 1;
		String It_metric = "";
		int It_alarmed_color = 0;
		String It_codename = "";
		String It_description = "";
		String It_id = "";
		int It_color = 0;
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		boolean It_alarmed = false;
		String It_style = "";
		boolean It_show_alarmed = false;
		String It_alarmed_style = "";
		int It_line_size = 1;
		String It_owner_id = "";
		String It_type_id = "";
		String It_font_id = "";
		boolean It_show_metric = false;
		String It_selected_style = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_link_id = "";
		String It_link_type_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		String nodelink_ids[] = new String[0];
		IdIterator idIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
//			System.out.println("retreive links for " + current_map_id);
			try
			{
				#sql linkIt = { select
						DESCRIPTION,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						TYPE_ID,
						MAP_ID,
						ISM_MAP_ID,
						LINK_ID,
						LINK_TYPE_ID
					from AMFICOM.MAPPHYSICALLINKELEMENTS
					where ISM_MAP_ID = :current_map_id
					};

//				System.out.println("sql ok - getting values");
				count = 0;
				while (linkIt.next())
				{
					count ++;

					try { It_description = linkIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = linkIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = linkIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = linkIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = linkIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = linkIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_type_id = linkIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_map_id = linkIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_link_id = linkIt.link_id(); }
					catch(SQLException e) { }
					if(It_link_id == null) It_link_id = "";
					try { It_link_type_id = linkIt.link_type_id(); }
					catch(SQLException e) { }
					if(It_link_type_id == null) It_link_type_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPHYSICALLINKELEMENTATTRIBUT",
							"MAP_PHYSICAL_LINK_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

//					System.out.println("getting node links for " + It_id);
					vector2 = new Vector();
					try
					{
						#sql idIt = { select ID from AMFICOM.MAPNODELINKELEMENTS
								where PHYSICAL_LINK_ID = :It_id };
						while (idIt.next())
						{
							try { vector2.addElement(idIt.id()); }
							catch(SQLNullException e) { }
						}
						idIt.close();
					}
					catch(SQLException e)
					{
						idIt.close();
						System.out.println("could not get nodelinks for physical link " + It_id + ": " + e.getMessage());
						e.printStackTrace();
					}
					nodelink_ids = new String[vector2.size()];
					vector2.copyInto(nodelink_ids);

					link_t = new MapPhysicalLinkElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							attributes,
							It_link_id,
							It_link_type_id,
							nodelink_ids);

					vector.addElement(link_t);
				}// while(linkIt)
				linkIt.close();
				link_ts = new MapPhysicalLinkElement_Transferable[vector.size()];
				vector.copyInto(link_ts);
				linkseq.value = link_ts;

			}
			catch(SQLException e)
			{
				if(linkIt != null) try {
				linkIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading physical links for map " + current_map_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					linkIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator PathLinkIterator (
		String physical_link_id,
		String path_id );
	#sql public static iterator IdIterator ( String id );
	#sql public static iterator ElementAttributeIterator (
		String id,
		String attribute_id );

	#sql public static iterator MapNodeIterator (
		String symbol_id,
		String latitude,
		String owner_id,
		String description,
		String id,
		String map_id,
		String ism_map_id,
		int active,
		String name,
		String physical_link_id,
		String longitude);

	#sql public static iterator MapNodeLinkIterator (
		String physical_link_id,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String map_id,
		String ism_map_id);

	#sql public static iterator MapPhysicalLinkIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String link_id,
		String link_type_id);

	#sql public static iterator MapPathIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String path_id);
}
