/*
 * $Id: ResultSetdbInterface.sqlj,v 1.2 2004/06/29 07:12:58 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.Survey.*;
import java.sql.*;
import java.util.Vector;

/**
 * @version $Revision: 1.2 $, $Date: 2004/06/29 07:12:58 $
 * @author $Author: bass $
 * @module server_v1
 */
public class ResultSetdbInterface
{
	protected ResultSetdbInterface()
	{
	}

	public static int getResultSets(
			String domain_id,
			ResultSetSeq_TransferableHolder resultsets)
	{
		String It_id = "";
		String It_name = "";
		long It_start_time = 0;
		long It_end_time = 0;

		String It_domain_id = "";

		long It_created = 0;
		long It_modified = 0;

		boolean It_active = false;
		String It_comments = "";

		Vector vector = new Vector();

		ResultSet_Transferable rs_t;
		ResultSet_Transferable[] rs_ts;
		ResultSetIterator rsIt = null;
		Vector vector2;

		try
		{
			#sql rsIt = {
				select
						ID,
						NAME,
						COMMENTS,
						DOMAIN_ID,
						ACTIVE,
						CREATED,
						MODIFIED,
						START_TIME,
						END_TIME
					from AMFICOM.RESULTSETS
			};

			while (rsIt.next())
			{
				try { It_id = rsIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = rsIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_domain_id = rsIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_comments = rsIt.comments(); }
				catch(SQLException e) { }
				if(It_comments == null) It_comments = "";
				try { It_active = (rsIt.active() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_created = rsIt.created().getTime(); }
				catch(Exception e) { }
				try { It_modified = rsIt.modified().getTime(); }
				catch(Exception e) { }
				try { It_start_time = rsIt.start_time().getTime(); }
				catch(Exception e) { }
				try { It_end_time = rsIt.end_time().getTime(); }
				catch(Exception e) { }

				rs_t = new ResultSet_Transferable(
					It_id,
					It_name,
					It_start_time,
					It_end_time,
					It_domain_id,
					It_created,
					It_modified,
					It_active,
					It_comments);

				vector.add(rs_t);
			}// while(rsIt)
			rsIt.close();
			rs_ts = new ResultSet_Transferable[vector.size()];
			vector.copyInto(rs_ts);
			resultsets.value = rs_ts;
		}
		catch(SQLException e)
		{
			if(rsIt != null) try {
			rsIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result sets: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				rsIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int getResultSets(
			String domain_id,
			ResultSetSeq_TransferableHolder resultsets,
			String[] ids)
	{
		String It_id = "";
		String It_name = "";
		long It_start_time = 0;
		long It_end_time = 0;

		String It_domain_id = "";

		long It_created = 0;
		long It_modified = 0;

		boolean It_active = false;
		String It_comments = "";

		Vector vector = new Vector();

		ResultSet_Transferable rs_t;
		ResultSet_Transferable[] rs_ts;
		ResultSetIterator rsIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql rsIt = {
				select
						ID,
						NAME,
						COMMENTS,
						DOMAIN_ID,
						ACTIVE,
						CREATED,
						MODIFIED,
						START_TIME,
						END_TIME
					from AMFICOM.RESULTSETS
			};

			while (rsIt.next())
			{
				if(! loadvec.contains(rsIt.id()))
					continue;

				try { It_id = rsIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = rsIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_domain_id = rsIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_comments = rsIt.comments(); }
				catch(SQLException e) { }
				if(It_comments == null) It_comments = "";
				try { It_active = (rsIt.active() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_created = rsIt.created().getTime(); }
				catch(SQLException e) { }
				try { It_modified = rsIt.modified().getTime(); }
				catch(SQLException e) { }
				try { It_start_time = rsIt.start_time().getTime(); }
				catch(SQLException e) { }
				try { It_end_time = rsIt.end_time().getTime(); }
				catch(SQLException e) { }

				rs_t = new ResultSet_Transferable(
					It_id,
					It_name,
					It_start_time,
					It_end_time,
					It_domain_id,
					It_created,
					It_modified,
					It_active,
					It_comments);

				vector.add(rs_t);
			}// while(rsIt)
			rsIt.close();
			rs_ts = new ResultSet_Transferable[vector.size()];
			vector.copyInto(rs_ts);
			resultsets.value = rs_ts;
		}
		catch(SQLException e)
		{
			if(rsIt != null) try {
			rsIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result sets: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				rsIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int getResultIds(
			String result_set_id,
			ResourceDescriptorSeq_TransferableHolder result_ids)
//			wstringSeqHolder result_ids)
	{
		String It_id = "";
		Vector vector = new Vector();

		ResultIdIterator idIt = null;

		try
		{
			#sql idIt = {
				select ID, ELEMENTARY_START_TIME from RESULTS
					where RESULT_SET_ID = :result_set_id
					and RESULT_TYPE = 'test'
			};

			while (idIt.next())
			{
				try { It_id = idIt.id(); }
				catch(SQLException e) { }
				if(It_id != null)
					vector.add(new ResourceDescriptor_Transferable(It_id, idIt.elementary_start_time().getTime()));
			}// while(idIt)
			idIt.close();

			result_ids.value = new ResourceDescriptor_Transferable[vector.size()];
			vector.copyInto(result_ids.value);
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result set results: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int getResultIds(
			String result_set_id,
			String me_id,
			ResourceDescriptorSeq_TransferableHolder result_ids)
//			wstringSeqHolder result_ids)
	{
		String It_id = "";
		String It_test_id = "";
		String It_me_id = "";
		Vector vector = new Vector();

		ResultIdTestIterator idIt = null;

		try
		{
			#sql idIt = {
				select ID, ELEMENTARY_START_TIME, TEST_ID from RESULTS
					where RESULT_SET_ID = :result_set_id
					and RESULT_TYPE = 'test'
			};

			while (idIt.next())
			{
				try { It_id = idIt.id(); }
				catch(SQLException e) { }
				try { It_test_id = idIt.test_id(); }
				catch(SQLException e) { }
				if(It_id != null)
					if(It_test_id != null)
					{
						try
						{
							#sql { select MONITORED_ELEMENT_ID into :It_me_id
								from TESTS where ID = :It_test_id
							};
							if(It_me_id != null)
								if(It_me_id.equals(me_id))
									vector.add(new ResourceDescriptor_Transferable(It_id, idIt.elementary_start_time().getTime()));
						}
						catch(Exception ex)
						{
						}
					}
			}// while(idIt)
			idIt.close();

			result_ids.value = new ResourceDescriptor_Transferable[vector.size()];
			vector.copyInto(result_ids.value);
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result set results: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator( String id );
	#sql public static iterator ResultIdIterator( String id, Timestamp elementary_start_time );

	#sql public static iterator IdTestIterator(
		String id,
		String test_id);

	#sql public static iterator ResultIdTestIterator(
		String id,
		Timestamp elementary_start_time,
		String test_id);

	#sql public static iterator ResultSetIterator(
		String id,
		String name,
		String comments,
		String domain_id,
		int active,
		Timestamp created,
		Timestamp modified,
		Timestamp start_time,
		Timestamp end_time);
}
