package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.*;
import com.syrus.util.*;
import com.syrus.util.database.*;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;

import java.util.*;
import java.sql.*;

import oracle.sql.*;

import java.io.*;

public class SchemeMonitoringSolution
{
	SchemeMonitoringSolution_Transferable sms;

	String id = "";
    String name = "";
	String scheme_id = "";

	double price = 0.0;

	ArrayList paths = new ArrayList();

	public SchemeMonitoringSolution(SchemeMonitoringSolution_Transferable sms)
    	throws SQLException
	{
    	this.sms = sms;

		this.id = sms.id;
		this.scheme_id = sms.scheme_id;
    	this.name = sms.name;

		this.price = sms.price;

        this.paths = new ArrayList();
        for(int i = 0; i < sms.paths.length; i++)
			paths.add(sms.paths[i]);

		System.out.println(
				"	\n id = " + id +
				"	\n name = " + name +
		    	"	\n scheme_id = " + scheme_id +
                "	\n price = " + price);
		
		#sql { insert into SCHEMEMONITORINGSOLUTION(
				id,
				name,
		    	scheme_id,
                price)
        	values(
				:id,
				:name,
		    	:scheme_id,
                :price)
        };

		savePaths();

    	#sql { commit };
	}

	public SchemeMonitoringSolution(String sms_id)
    	throws SQLException
    {
		#sql { select
				id,
				name,
		    	scheme_id,
                price
        	into
				:id,
				:name,
		    	:scheme_id,
                :price
            from SCHEMEMONITORINGSOLUTION
            where id = :sms_id
        };

		loadPaths();
    }

    public void delete()
    	throws SQLException
    {
		deletePaths();
		
    	#sql { delete
            from SCHEMEMONITORINGSOLUTION
            where id = :id
        };
    	#sql { commit };
    }

    public SchemeMonitoringSolution_Transferable getTransferable()
    {
    	sms = new SchemeMonitoringSolution_Transferable(
				id,
				name,
		    	scheme_id,
                price,
                (SchemePath_Transferable[] )paths.toArray(new SchemePath_Transferable[0]));
        return sms;
    }

	public void savePaths()
    	throws SQLException
	{
    	#sql { delete
            from PATHSINSOLUTION
            where solution_id = :id
        };

		SchemedbInterfaceSave.saveSchemePaths((SchemePath_Transferable[] )paths.toArray(new SchemePath_Transferable[0]));
        for(int i = 0; i < paths.size(); i++)
		{
			SchemePath_Transferable pt = (SchemePath_Transferable )paths.get(i);
			String uid = ResourcedbInterface.getUId("sm_solution");
			
			#sql { insert into PATHSINSOLUTION(
					id,
					scheme_path_id,
					solution_id)
				values(
					:uid,
					:(pt.id),
					:id)
			};
		}

	}

	public void loadPaths()
    	throws SQLException
	{
		PathIdIterator pIt = null;

		try
		{
		#sql pIt = { select scheme_path_id from PATHSINSOLUTION
			where SOLUTION_ID = :id
		};

		paths = new ArrayList();
		while(pIt.next())
		{
			paths.add(SchemedbInterfaceLoad.loadSchemePath(pIt.scheme_path_id()));
		}
		pIt.close();
		}
		catch(SQLException e)
		{
			throw e;
		}
		finally
		{
			try {
				pIt.close();
			}catch(Exception exe) {}
		}
		
	}

	public void deletePaths()
    	throws SQLException
	{
        for(int i = 0; i < paths.size(); i++)
		{
			SchemePath_Transferable pt = (SchemePath_Transferable )paths.get(i);
			SchemedbInterfaceSave.removeSchemePath(pt.id);
		}

    	#sql { delete
            from PATHSINSOLUTION
            where solution_id = :id
        };
	}

    static public SchemeMonitoringSolution_Transferable[] getSMSs()
    	throws SQLException
    {
    	Vector vec = new Vector();

    	IdIterator idIt = null;

		try
		{
		#sql idIt = { select id
            from SCHEMEMONITORINGSOLUTION
        };
        while(idIt.next())
        	vec.add(new SchemeMonitoringSolution(idIt.id()).getTransferable());
		}
		catch(SQLException e)
		{
			throw e;
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		

        return (SchemeMonitoringSolution_Transferable [])vec.toArray(new SchemeMonitoringSolution_Transferable[vec.size()]);
    }

   	#sql public static iterator IdIterator( String id );

   	#sql public static iterator PathIdIterator( String scheme_path_id );
}

