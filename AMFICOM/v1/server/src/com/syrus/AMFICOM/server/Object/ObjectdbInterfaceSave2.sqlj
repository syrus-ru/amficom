package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;

import oracle.sql.*;

import java.util.Vector;

import com.syrus.io.*;
import com.syrus.util.*;
import com.syrus.util.database.*;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Admin.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class ObjectdbInterfaceSave2
{
	protected ObjectdbInterfaceSave2()
	{
	}

	static public int saveCategories(OperatorCategory_Transferable[] categoryseq)
	{
		int i;
		int len;

		len = categoryseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql
				{
					insert into AMFICOM.CATEGORIES(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							MODIFIED)
					values(
						:(categoryseq[i].id),
						:(categoryseq[i].name),
						:(categoryseq[i].codename),
						:(categoryseq[i].description),
						SYSDATE )
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("category exists - updating...");
				try
				{
					#sql
					{ update AMFICOM.CATEGORIES set
							NAME = :(categoryseq[i].name),
							CODENAME = :(categoryseq[i].codename),
							DESCRIPTION = :(categoryseq[i].description),
							MODIFIED = SYSDATE
						where Id = :(categoryseq[i].id)
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("could not save category: " + ex.getMessage());
					e.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveGroups(OperatorGroup_Transferable[] groupseq)
	{
		int i;
		int len;

		len = groupseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql
				{
					insert into AMFICOM.GROUPS(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							OWNER_ID,
							CREATED,
							CREATED_BY,
							MODIFIED,
							MODIFIED_BY)
					values(
						:(groupseq[i].id),
						:(groupseq[i].name),
						:(groupseq[i].codename),
						:(groupseq[i].description),
						:(groupseq[i].owner_id),
						SYSDATE,
						:(groupseq[i].owner_id),
						SYSDATE,
						:(groupseq[i].owner_id) )
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("group exists - updating...");
				try
				{
					#sql
					{ update AMFICOM.GROUPS set
							NAME = :(groupseq[i].name),
							CODENAME = :(groupseq[i].codename),
							DESCRIPTION = :(groupseq[i].description),
							OWNER_ID = :(groupseq[i].owner_id),
							MODIFIED = SYSDATE,
							MODIFIED_BY = :(groupseq[i].modified_by)
						where ID = :(groupseq[i].id)
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("could not save group: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			try
			{
				#sql {
					delete from AMFICOM.USERGROUPS
						where GROUP_ID = :(groupseq[i].id)
				};
				for(int j = groupseq[i].user_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUId("operatorgrouplink");
					#sql
					{ insert into AMFICOM.USERGROUPS(ID, USER_ID, GROUP_ID)
						values(:id_v, :(groupseq[i].user_ids[j]), :(groupseq[i].id) )
					};
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error profile=group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error profile=group link: " + ex.getMessage());
			}
			try
			{
				#sql {
					delete from AMFICOM.EXECGROUPS
						where GROUP_ID = :(groupseq[i].id)
				};
				for(int j = groupseq[i].exec_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUId("operatorgrouplink");
					#sql
					{ insert into AMFICOM.EXECGROUPS(ID, EXEC_ID, GROUP_ID)
						values(:id_v, :(groupseq[i].exec_ids[j]), :(groupseq[i].id) )
					};
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error exec=group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error exec=group link: " + ex.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
/*
	static public int saveRoles(OperatorRole_Transferable[] roleseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	static public int savePrivileges(OperatorPrivilege_Transferable[] privilegeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}
*/
	static public int saveProfiles(OperatorProfile_Transferable[] profileseq)
	{
		int i;
		int len;
		int count = 0;

		ConnectionContext connCtx2 = DefaultContext.getDefaultContext();

		len = profileseq.length;
		for (i = 0; i < len; i++)
		{
//			String pwd = Rewriter.write(profileseq[i].password);
			try
			{
				#sql
				{
					select count(*) into :count from AMFICOM.OPERATORPROFILES
						where ID = :(profileseq[i].id)
					};
				if(count == 0)
				{
					System.out.println("insert profile " + profileseq[i].id);
					#sql
					{
						insert into AMFICOM.OPERATORPROFILES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,

								CREATED,
								CREATED_BY,
								MODIFIED,
								MODIFIED_BY,

								USER_ID,
								OWNER_ID,
								LOGIN,
                                PASSWORD,
								PASSWORD_EXPIRY,

								STATUS,
								STATE,
								DISABLED_COMMENTS,
								PRIORITY,
								LOGFILE,
								FIRST_NAME,
								SECOND_NAME,
								LAST_NAME,
								PHONE_WORK,
								PHONE_HOME,
								PHONE_MOBILE,
								PHONE_EMERGENCY,
								PAGER_PHONE,
								PAGER_NUMBER,
								SMS_NUMBER,
								ADDRESS,
								LANGUAGE,
								ORGANIZATION,
								E_MAIL)
							values(
								:(profileseq[i].id),
								:(profileseq[i].name),
								:(profileseq[i].codename),
								:(profileseq[i].description),

								SYSDATE,
								:(profileseq[i].owner_id),
								SYSDATE,
								:(profileseq[i].owner_id),

								:(profileseq[i].user_id),
								:(profileseq[i].owner_id),
								:(profileseq[i].login),
                                empty_blob(),
								:(profileseq[i].disabled),

								:(profileseq[i].status),
								:(profileseq[i].state),

								:(profileseq[i].disabled_comments),

								:(profileseq[i].priority),
								:(profileseq[i].logfile),

								:(profileseq[i].first_name),
								:(profileseq[i].second_name),
								:(profileseq[i].last_name),
								:(profileseq[i].phone_work),
								:(profileseq[i].phone_home),
								:(profileseq[i].phone_mobile),
								:(profileseq[i].phone_emergency),

								:(profileseq[i].pager_phone),
								:(profileseq[i].pager_number),
								:(profileseq[i].sms_number),

								:(profileseq[i].address),
								:(profileseq[i].language),
								:(profileseq[i].organization),
								:(profileseq[i].e_mail) )
					};
					ByteArrayDatabase pwdArr = new ByteArrayDatabase(profileseq[i].password);

					pwdArr.saveAsBlob(
							connCtx2.getConnection(),
							"AMFICOM.OPERATORPROFILES",
							"PASSWORD",
							"id = '" + profileseq[i].id + "'");
					#sql { commit };
				}
				else
				{
					System.out.println("profile exists - updating...");
//							DISABLED = :(profileseq[i].disabled),
					boolean do_save = true;
					while(do_save)
                    {
                    try
                    {
					#sql
					{
						update AMFICOM.OPERATORPROFILES set
							NAME = :(profileseq[i].name),
							CODENAME = :(profileseq[i].codename),
							DESCRIPTION = :(profileseq[i].description),
							MODIFIED = SYSDATE,
							MODIFIED_BY = :(profileseq[i].modified_by),
							USER_ID = :(profileseq[i].user_id),
							OWNER_ID = :(profileseq[i].owner_id),
							LOGIN = :(profileseq[i].login),
							PASSWORD_EXPIRY = :(profileseq[i].disabled),
							STATUS = :(profileseq[i].status),
							STATE = :(profileseq[i].state),
							DISABLED_COMMENTS = :(profileseq[i].disabled_comments),
							PRIORITY = :(profileseq[i].priority),
							LOGFILE = :(profileseq[i].logfile),
							FIRST_NAME = :(profileseq[i].first_name),
							SECOND_NAME = :(profileseq[i].second_name),
							LAST_NAME = :(profileseq[i].last_name),
							PHONE_WORK = :(profileseq[i].phone_work),
							PHONE_HOME = :(profileseq[i].phone_home),
							PHONE_MOBILE = :(profileseq[i].phone_mobile),
							PHONE_EMERGENCY = :(profileseq[i].phone_emergency),
							PAGER_PHONE = :(profileseq[i].pager_phone),
							PAGER_NUMBER = :(profileseq[i].pager_number),
							SMS_NUMBER = :(profileseq[i].sms_number),
							ADDRESS = :(profileseq[i].address),
							LANGUAGE = :(profileseq[i].language),
							ORGANIZATION = :(profileseq[i].organization),
							E_MAIL = :(profileseq[i].e_mail)
						where ID = :(profileseq[i].id)
					};
					ByteArrayDatabase pwdArr = new ByteArrayDatabase(profileseq[i].password);

					pwdArr.saveAsBlob(
							connCtx2.getConnection(),
							"AMFICOM.OPERATORPROFILES",
							"PASSWORD",
							"id = '" + profileseq[i].id + "'");
					#sql { commit };
                    do_save = false;
					}
                    catch(Exception sqlex)
                    {
                    	sqlex.printStackTrace();
                    	System.out.println("insert empty blob...");
						#sql
						{
							update AMFICOM.OPERATORPROFILES set
								PASSWORD = empty_blob()
							where ID = :(profileseq[i].id)
    	                };
                    }
                    }
				}
			}
			catch(Exception e)
			{
				System.out.println("could not save profile: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			try
			{
				#sql {
					delete from AMFICOM.USERGROUPS
						where USER_ID = :(profileseq[i].user_id)
				};
				for(int j = profileseq[i].group_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUId("operatorgrouplink");
					#sql
					{ insert into AMFICOM.USERGROUPS(ID, USER_ID, GROUP_ID)
						values(:id_v, :(profileseq[i].user_id), :(profileseq[i].group_ids[j]) )
					};
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error generating profile-group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating profile-group link: " + ex.getMessage());
			}
			try
			{
				#sql {
					delete from AMFICOM.USERCATEGORIES
						where USER_ID = :(profileseq[i].user_id)
				};
				for(int j = profileseq[i].category_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUId("operatorcategorylink");
					#sql
					{ insert into AMFICOM.USERCATEGORIES(ID, USER_ID, CATEGORY_ID)
						values(:id_v, :(profileseq[i].user_id), :(profileseq[i].category_ids[j]) )
					};
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error generating profile category: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating profile category: " + ex.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

}

