
// Copyright (c) Syrus Systems 2000 Syrus Systems
package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import java.text.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class MapdbInterfaceSave2 extends Object
{
	protected MapdbInterfaceSave2()
	{
	}

	static public int saveMapNode(MapPhysicalNodeElement_Transferable node)
	{
		int i;
		int count = 0;
		int active = 0;

		active = (node.active)? 1 : 0;
		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPPHYSICALNODEELEMENTS
					where ID = :(node.id)
			};
			if(count == 0)
			{
//				System.out.println("node " + nodeseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update node " + node.id);
			try
			{
				#sql {
					update AMFICOM.MAPPHYSICALNODEELEMENTS
						set
							SYMBOL_ID = :(node.symbol_id),
							OWNER_ID = :(node.owner_id),
							MAP_ID = :(node.map_id),
							ACTIVE = :active,
							PHYSICAL_LINK_ID = :(node.physicalLinkID),
							NAME = :(node.name),
							DESCRIPTION = :(node.description),
							LONGITUDE = :(node.longitude),
							LATITUDE = :(node.latitude)
						where ID = :(node.id)
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error saVing nodes: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new node " + node.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPPHYSICALNODEELEMENTS(
							SYMBOL_ID,
							LATITUDE,
							OWNER_ID,
							DESCRIPTION,
							ID,
							MAP_ID,
							ACTIVE,
							NAME,
							PHYSICAL_LINK_ID,
							LONGITUDE)
						values(
							:(node.symbol_id),
							:(node.latitude),
							:(node.owner_id),
							:(node.description),
							:(node.id),
							:(node.map_id),
							:active,
							:(node.name),
							:(node.physicalLinkID),
							:(node.longitude) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing nodes: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPPHYSICALNODEELEMENTATTRIBUT",
				"MAP_PHYSICAL_NODE_ELEMENT_ID",
				node.id,
				node.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapNodes(MapPhysicalNodeElement_Transferable[] nodeseq)
	{
		int i;
		int len;

		len = nodeseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapNode(nodeseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapNodeLink(MapNodeLinkElement_Transferable nodelink)
	{
		int count = 0;

		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPNODELINKELEMENTS
					where ID = :(nodelink.id)
			};
			if(count == 0)
			{
//				System.out.println("nodelink " + nodelinkseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update node link " + nodelink.id);
			try
			{
				#sql {
					update AMFICOM.MAPNODELINKELEMENTS
						set
							PHYSICAL_LINK_ID = :(nodelink.physicalLinkID),
							END_NODE_ID = :(nodelink.endNode_id),
							START_NODE_ID = :(nodelink.startNode_id),
							NAME = :(nodelink.name),
							OWNER_ID = :(nodelink.owner_id),
							MAP_ID = :(nodelink.map_id)
						where ID = :(nodelink.id)
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error saVing node links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new node link " + nodelink.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPNODELINKELEMENTS(
							PHYSICAL_LINK_ID,
							ID,
							END_NODE_ID,
							START_NODE_ID,
							NAME,
							OWNER_ID,
							MAP_ID)
						values(
							:(nodelink.physicalLinkID),
							:(nodelink.id),
							:(nodelink.endNode_id),
							:(nodelink.startNode_id),
							:(nodelink.name),
							:(nodelink.owner_id),
							:(nodelink.map_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing node links: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPNODELINKELEMENTATTRIBUTES",
				"MAP_NODE_LINK_ID",
				nodelink.id,
				nodelink.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapNodeLinks(MapNodeLinkElement_Transferable[] nodelinkseq)
	{
		int i;
		int len;

		len = nodelinkseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapNodeLink(nodelinkseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapLink(MapPhysicalLinkElement_Transferable link)
	{
		int i;
		int count = 0;

		try
		{
			#sql {
				select count(*) into :count from AMFICOM.MAPPHYSICALLINKELEMENTS
					where ID = :(link.id)
			};
			if(count == 0)
			{
//				System.out.println("link " + linkseq[i].id + " not found in database");
				throw new SQLException("do insert!");
			}
			System.out.println("update physical link " + link.id);
			try
			{
				#sql {
					update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							DESCRIPTION = :(link.description),
							END_NODE_ID = :(link.endNode_id),
							START_NODE_ID = :(link.startNode_id),
							NAME = :(link.name),
							OWNER_ID = :(link.owner_id),
							TYPE_ID = :(link.type_id),
							MAP_ID = :(link.map_id),
							LINK_ID = :(link.link_id),
							LINK_TYPE_ID = :(link.link_type_id)
						where ID = :(link.id)
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("error saVing physical links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new physical link " + link.id);
			try
			{
				#sql {
					insert into AMFICOM.MAPPHYSICALLINKELEMENTS(
							DESCRIPTION,
							ID,
							END_NODE_ID,
							START_NODE_ID,
							NAME,
							OWNER_ID,
							TYPE_ID,
							MAP_ID,
							LINK_ID,
							LINK_TYPE_ID)
						values(
							:(link.description),
							:(link.id),
							:(link.endNode_id),
							:(link.startNode_id),
							:(link.name),
							:(link.owner_id),
							:(link.type_id),
							:(link.map_id),
							:(link.link_id),
							:(link.link_type_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing physical links: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave3.saveAttributes(
				"MAPPHYSICALLINKELEMENTATTRIBUT",
				"MAP_PHYSICAL_LINK_ELEMENT_ID",
				link.id,
				link.attributes);

		CatalogSchemeMapUpdater.mapLinkUpdated(link);

		return Constants.ERROR_NO_ERROR;
	}

	static public int saveMapLinks(MapPhysicalLinkElement_Transferable[] linkseq)
	{
		int i;
		int len;

		len = linkseq.length;
		for (i = 0; i < len; i++)
		{
			saveMapLink(linkseq[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

}

