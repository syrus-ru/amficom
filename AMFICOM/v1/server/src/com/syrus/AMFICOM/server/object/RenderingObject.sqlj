/*
 * $Id: RenderingObject.sqlj,v 1.1.2.2 2004/08/20 17:12:09 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Report.RenderingObject_Transferable;
import com.syrus.util.ByteArray;
import com.syrus.util.database.ByteArrayDatabase;
import java.io.*;
import java.sql.SQLException;
import java.util.Vector;
import oracle.sql.BLOB;
import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/20 17:12:09 $
 * @author $Author: bass $
 * @module server_v1
 */
public class RenderingObject
{
	private String roID;
	private int objectX;
	private int objectY;
	private int width;
	private int height;
	private byte[] incapsulated_report;
	private int[] column_widths;
	private int tableDivisionsNumber;

	private String report_template_id;

	public RenderingObject(RenderingObject_Transferable ro, String r_t_id)
			throws Exception
	{
    this.report_template_id = r_t_id; 
		this.roID = ro.roID;
		this.objectX = ro.objectX;
		this.objectY = ro.objectY;
		this.width = ro.width;
		this.height = ro.height;
		this.incapsulated_report = ro.incapsulated_report;
		this.column_widths = ro.column_widths;
		this.tableDivisionsNumber = ro.tableDivisionsNumber;
		
		ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
		boolean autoc = connCtx2.getConnection().getAutoCommit();


		#sql{ insert into AMFICOM.REPORTTEMPLATEFIELDS(
				REPORT_TEMPLATE_ID,
				ID,
				OBJECT_X,
				OBJECT_Y,
				WIDTH,
				HEIGHT,
				IN_REPORT,
				COL_WIDTHS,
				TDN)
			values(
				:(this.report_template_id),
				:(this.roID),
				:(this.objectX),
				:(this.objectY),
				:(this.width),
				:(this.height),
				empty_blob(),
				empty_blob(),
				:(this.tableDivisionsNumber))
		};

		#sql { commit };

		try
		{
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DataOutputStream oos = new DataOutputStream(baos);
			for(int i = 0; i < this.column_widths.length; i++)
				oos.writeInt(this.column_widths[i]);
			byte[] bytes = baos.toByteArray();

			System.out.println("Saving " + bytes.length + " bytes as blob:");
			ByteArrayDatabase bArr = new ByteArrayDatabase(bytes);
			bArr.saveAsBlob(
				connCtx2.getConnection(),
				"AMFICOM.REPORTTEMPLATEFIELDS",
				"COL_WIDTHS",
				"id = '" + this.roID + "'");
        
			bytes = this.incapsulated_report;

			System.out.println("Saving " + bytes.length + " bytes as blob:");
			bArr = new ByteArrayDatabase(bytes);
			bArr.saveAsBlob(
				connCtx2.getConnection(),
				"AMFICOM.REPORTTEMPLATEFIELDS",
				"IN_REPORT",
				"id = '" + this.roID + "'");
        
		}
		catch(Exception ioe)
		{
			System.out.println("error saving REPORTTEMPLATEFIELDS: " + ioe.getMessage());
			ioe.printStackTrace();
		}
		#sql { commit };
		connCtx2.getConnection().setAutoCommit(autoc);
	}

	public RenderingObject(String id)
			throws Exception
	{
		RenderingObjectIterator roIt = null;

		BLOB bl;
		byte[] width_bytes = new byte[0];
    byte[] report_bytes = new byte[0];

		try
		{
			#sql roIt = { select
					ID,
					REPORT_TEMPLATE_ID,
					OBJECT_X,
					OBJECT_Y,
					WIDTH,
					HEIGHT,
					IN_REPORT,
					COL_WIDTHS,
					TDN
				from AMFICOM.REPORTTEMPLATEFIELDS
				where ID = :id
			};

			roIt.next();

			try { this.roID = roIt.id(); }
        catch(SQLException e) { }
			if(this.roID == null) 
        this.roID = "";
			try { this.objectX = roIt.object_x(); }
        catch(SQLException e) { this.objectX = 0; }
			try { this.objectY = roIt.object_y(); }
        catch(SQLException e) { this.objectY = 0; }
			try { this.width = roIt.width(); }
        catch(SQLException e) { this.width = 0; }
			try { this.height = roIt.height(); }
        catch(SQLException e) { this.height = 0; }

			try { report_bytes = ByteArrayDatabase.toByteArray(roIt.in_report()); }
        catch(SQLException e) { e.printStackTrace(); }

			try { this.tableDivisionsNumber = roIt.tdn(); }
        catch(SQLException e) { this.tableDivisionsNumber = 0; }
        
			try { width_bytes = ByteArrayDatabase.toByteArray(roIt.col_widths()); }
        catch(SQLException e) { e.printStackTrace(); }
        
			try { this.report_template_id = roIt.report_template_id(); }
        catch(SQLException e) { }
			if(this.report_template_id == null)
        this.report_template_id = "";

			roIt.close();

			try
			{
				this.column_widths = new ByteArray(width_bytes).toIntArray();
				this.incapsulated_report = report_bytes;
			}
			catch(Exception ioe)
			{
				System.out.println("error loading report template: " + ioe.getMessage());
				ioe.printStackTrace();
			}
		}
		catch(SQLException e)
		{
			roIt.close();
			System.out.println("error loading report template: " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				roIt.close();
			}catch(Exception exe) {}
		}
		
	}

	public RenderingObject_Transferable getTransferable()
			throws Exception
	{
		return new RenderingObject_Transferable(
			this.roID,
			this.objectX,
			this.objectY,
			this.width,
			this.height,
			this.incapsulated_report,
			this.column_widths,
			this.tableDivisionsNumber);
	}

	public String getReportTemplateId()
	{
		return this.report_template_id;
	}

	public String getId()
	{
		return this.roID;
	}

	public void delete() throws Exception
	{
		#sql { delete from AMFICOM.REPORTTEMPLATEFIELDS
			where ID = :(this.roID)
		};
		#sql { commit };
	}

	public void update(RenderingObject_Transferable ro) throws Exception
	{
		this.objectX = ro.objectX;
		this.objectY = ro.objectY;
		this.width = ro.width;
		this.height = ro.height;
		this.incapsulated_report = ro.incapsulated_report;
		this.column_widths = ro.column_widths;
		this.tableDivisionsNumber = ro.tableDivisionsNumber;

		#sql{ update AMFICOM.REPORTTEMPLATEFIELDS set
				OBJECT_X = :(this.objectX),
				OBJECT_Y = :(this.objectY),
				WIDTH = :(this.width),
				HEIGHT = :(this.height),
				TDN = :(this.tableDivisionsNumber)
			where ID = :(this.roID)
		};

		try
		{
			ByteArrayOutputStream baos = new ByteArrayOutputStream(this.column_widths.length * 4);
			ObjectOutputStream oos = new ObjectOutputStream(baos);
			for(int i = 0; i < this.column_widths.length; i++)
				oos.writeInt(this.column_widths[i]);
			byte[] bytes = baos.toByteArray();

			ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
			ByteArrayDatabase bArr = new ByteArrayDatabase(bytes);
			bArr.saveAsBlob(
				connCtx2.getConnection(),
				"AMFICOM.REPORTTEMPLATEFIELDS",
				"COL_WIDTHS",
				"id = '" + this.roID + "'");
		}
		catch(Exception ioe)
		{
			System.out.println("error saving report template: " + ioe.getMessage());
			ioe.printStackTrace();
		}
		#sql { commit };
	}

	public static RenderingObject[] retrieveRenderingObjects(String rt_id) throws Exception
	{
		IdIterator idIt = null;
		Vector linkedlist = new Vector();

		try
		{
			#sql idIt = { select ID
					from AMFICOM.REPORTTEMPLATEFIELDS
					where report_template_id = :rt_id  };

			while (idIt.next())
				linkedlist.add(new RenderingObject(idIt.id()));
			idIt.close();
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			throw ex;
		}
		RenderingObject[] ros = new RenderingObject[linkedlist.size()];
		linkedlist.copyInto(ros);
		return ros;
	}

	#sql public static iterator IdIterator(
		String id);

	#sql public static iterator RenderingObjectIterator(
		String id,
		String report_template_id,
		int object_x,
		int object_y,
		int width,
		int height,
		BLOB in_report,
		BLOB col_widths,
		int tdn);
}
