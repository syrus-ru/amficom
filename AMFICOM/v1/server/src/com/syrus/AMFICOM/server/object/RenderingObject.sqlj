/*
 * $Id: RenderingObject.sqlj,v 1.1.2.5 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.AMFICOMRemoteException;
import com.syrus.AMFICOM.CORBA.Report.RenderingObject_Transferable;
import com.syrus.util.ByteArray;
import com.syrus.util.database.JdbcBlobManager;
import java.io.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class RenderingObject {
	private String roID;
	private int objectX;
	private int objectY;
	private int width;
	private int height;
	private byte[] incapsulated_report;
	private int[] column_widths;
	private int tableDivisionsNumber;

	private String report_template_id;

	RenderingObject(final Connection conn, RenderingObject_Transferable ro, String r_t_id) throws SQLException, AMFICOMRemoteException {
		try {
			this.report_template_id = r_t_id; 
			this.roID = ro.roID;
			this.objectX = ro.objectX;
			this.objectY = ro.objectY;
			this.width = ro.width;
			this.height = ro.height;
			this.incapsulated_report = ro.incapsulated_report;
			this.column_widths = ro.column_widths;
			this.tableDivisionsNumber = ro.tableDivisionsNumber;
			#sql [new DefaultContext(conn)] {
				INSERT INTO amficom.reporttemplatefields (report_template_id, id, object_x, object_y, width, height, in_report, col_widths, tdn) VALUES (:(this.report_template_id), :(this.roID), :(this.objectX), :(this.objectY), :(this.width), :(this.height), EMPTY_BLOB(), EMPTY_BLOB(), :(this.tableDivisionsNumber))
			};
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DataOutputStream oos = new DataOutputStream(baos);
			for (int i = 0; i < this.column_widths.length; i++)
				oos.writeInt(this.column_widths[i]);
			JdbcBlobManager.setData(conn, "col_widths", "amficom.reporttemplatefields", "id = '" + this.roID + '\'', false, baos.toByteArray());
			JdbcBlobManager.setData(conn, "in_report", "amficom.reporttemplatefields", "id = '" + this.roID + '\'', false, this.incapsulated_report);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_SAVING, ioe.toString());
		} finally {
			conn.commit();
		}
	}

	RenderingObject(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		RenderingObjectIterator roIt = null;

		byte[] width_bytes = new byte[0];
		byte[] report_bytes = new byte[0];

		try
		{
			#sql [connCtx] roIt = { select
					ID,
					REPORT_TEMPLATE_ID,
					OBJECT_X,
					OBJECT_Y,
					WIDTH,
					HEIGHT,
					IN_REPORT,
					COL_WIDTHS,
					TDN
				from AMFICOM.REPORTTEMPLATEFIELDS
				where ID = :id
			};

			roIt.next();

			try { this.roID = roIt.id(); }
	catch(SQLException e) { }
			if(this.roID == null) 
	this.roID = "";
			try { this.objectX = roIt.object_x(); }
	catch(SQLException e) { this.objectX = 0; }
			try { this.objectY = roIt.object_y(); }
	catch(SQLException e) { this.objectY = 0; }
			try { this.width = roIt.width(); }
	catch(SQLException e) { this.width = 0; }
			try { this.height = roIt.height(); }
	catch(SQLException e) { this.height = 0; }

			try {
				report_bytes = JdbcBlobManager.getData(roIt.in_report());
			} catch(SQLException e) {
				e.printStackTrace();
			}

			try { this.tableDivisionsNumber = roIt.tdn(); }
	catch(SQLException e) { this.tableDivisionsNumber = 0; }
	
			try { width_bytes = JdbcBlobManager.getData(roIt.col_widths()); }
	catch(SQLException e) { e.printStackTrace(); }
	
			try { this.report_template_id = roIt.report_template_id(); }
	catch(SQLException e) { }
			if(this.report_template_id == null)
	this.report_template_id = "";

			roIt.close();

			this.column_widths = new ByteArray(width_bytes).toIntArray();
			this.incapsulated_report = report_bytes;
		}
		catch(SQLException e)
		{
			roIt.close();
			System.out.println("error loading report template: " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				roIt.close();
			}catch(SQLException exe) {}
		}
		
	}

	RenderingObject_Transferable getTransferable() {
		return new RenderingObject_Transferable(
			this.roID,
			this.objectX,
			this.objectY,
			this.width,
			this.height,
			this.incapsulated_report,
			this.column_widths,
			this.tableDivisionsNumber);
	}

	void update(final Connection conn, RenderingObject_Transferable ro) throws SQLException, AMFICOMRemoteException {
		try {
			this.objectX = ro.objectX;
			this.objectY = ro.objectY;
			this.width = ro.width;
			this.height = ro.height;
			this.incapsulated_report = ro.incapsulated_report;
			this.column_widths = ro.column_widths;
			this.tableDivisionsNumber = ro.tableDivisionsNumber;
			#sql [new DefaultContext(conn)] {
				UPDATE amficom.reporttemplatefields SET object_x = :(this.objectX), object_y = :(this.objectY), width = :(this.width), height = :(this.height), tdn = :(this.tableDivisionsNumber) WHERE id = :(this.roID)
			};
			ByteArrayOutputStream baos = new ByteArrayOutputStream(this.column_widths.length * 4);
			ObjectOutputStream oos = new ObjectOutputStream(baos);
			for (int i = 0; i < this.column_widths.length; i++)
				oos.writeInt(this.column_widths[i]);
			JdbcBlobManager.setData(conn, "col_widths", "amficom.reporttemplatefields", "id = '" + this.roID + '\'', false, baos.toByteArray());
		} catch(IOException ioe) {
			ioe.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_SAVING, ioe.toString());
		} finally {
			conn.commit();
		}
	}

	static RenderingObject[] retrieveRenderingObjects(final Connection conn, String rt_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIt = null;
		Vector linkedlist = new Vector();

		try {
			#sql [connCtx] idIt = { select ID
					from AMFICOM.REPORTTEMPLATEFIELDS
					where report_template_id = :rt_id  };

			while (idIt.next())
				linkedlist.add(new RenderingObject(conn, idIt.id()));
		} finally {
			if (idIt != null)
				idIt.close();
		}
		RenderingObject[] ros = new RenderingObject[linkedlist.size()];
		linkedlist.copyInto(ros);
		return ros;
	}

	#sql public static iterator IdIterator(
		String id);

	#sql public static iterator RenderingObjectIterator(
		String id,
		String report_template_id,
		int object_x,
		int object_y,
		int width,
		int height,
		Blob in_report,
		Blob col_widths,
		int tdn);
}
