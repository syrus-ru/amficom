package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import java.text.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.CORBA.ISM.*;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class CatalogSchemeMapUpdater extends Object
{

	public CatalogSchemeMapUpdater()
	{
	}

///////////////////////////////////////////////////////////////////
// ELEMENT
///////////////////////////////////////////////////////////////////

	static public String getElementScheme(String element_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_ID into :s1
				from AMFICOM.ELEMENTSONSCHEME
				where SCHEME_ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme element " + element_id + " not on any scheme - may be inside other element?..");
//			ex.printStackTrace();
		}
		try
		{
			#sql {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTELEMENTS
				where SCHEME_EL_ID = :element_id
			};
			return getElementScheme(s2);
		}
		catch(Exception ex)
		{
			System.out.println("scheme element " + element_id + " not on any scheme");
		}
		return null;
	}

	static public String getElementMap(String element_id)
	{
		String s1;

		try
		{
			#sql {
				select MAP_ID into :s1
				from AMFICOM.MAPELEMENTLINKS
				where MAP_ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map element " + element_id + " not on any map");
		}
		return null;
	}

	static public void equipmentUpdated(Equipment_Transferable eq)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql idIt = {
				select ID from AMFICOM.SCHEMEELEMENTS
				where EQUIPMENT_ID = :(eq.id)
				and NAME != :(eq.name)
				and DESCRIPTION != :(eq.description)
			};

			#sql {
				update AMFICOM.SCHEMEELEMENTS
				set
					NAME = :(eq.name),
					DESCRIPTION = :(eq.description)
				where EQUIPMENT_ID = :(eq.id)
				and NAME != :(eq.name)
				and DESCRIPTION != :(eq.description)
			};
			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getElementScheme(s);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}

				#sql idIt2 = {
					select ID from AMFICOM.MAPELEMENTS
					where ELEMENT_ID = :s
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getElementMap(s2);

					#sql {
						update AMFICOM.MAPELEMENTS
						set
							NAME = :(eq.name),
							DESCRIPTION = :(eq.description)
						where ID = :s2
					};
					#sql { commit };

					if(s3 != null)
					{
						#sql {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						#sql { commit };
					}
				}
				idIt2.close();

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated equipment " + eq.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemeElementUpdated(SchemeElement_Transferable se)
	{
		IdIterator idIt = null;

		try
		{
			if(se.equipment_id == null || se.equipment_id.equals(""))
				return;

			#sql {
				update AMFICOM.EQUIPMENTS
				set
					NAME = :(se.name),
					DESCRIPTION = :(se.description),
					MODIFIED = SYSDATE
				where ID = :(se.equipment_id)
				and NAME != :(se.name)
				and DESCRIPTION != :(se.description)
			};
			#sql { commit };

			#sql idIt = {
				select ID from AMFICOM.MAPELEMENTS
				where ELEMENT_ID = :(se.id)
				and NAME != :(se.name)
				and DESCRIPTION != :(se.description)
			};
			while(idIt.next())
			{
				String s2 = idIt.id();
				String s3 = getElementMap(s2);

				#sql {
					update AMFICOM.MAPELEMENTS
					set
						NAME = :(se.name),
						DESCRIPTION = :(se.description)
					where ID = :s2
				};
				#sql { commit };
//						SYMBOL_ID = :(se.image_id)

				if(s3 != null)
				{
					#sql {
						update AMFICOM.MAPCONTEXTS
						set MODIFIED = SYSDATE
						where ID = :s3
					};
					#sql { commit };
				}
			}
			idIt.close();
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme element " + se.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void mapElementUpdated(MapElement_Transferable me)
	{
		String s1;

		try
		{
			if(me.element_id != null && !me.element_id.equals(""))
			{
				#sql {
					update AMFICOM.SCHEMEELEMENTS
					set
						NAME = :(me.name),
						DESCRIPTION = :(me.description)
					where ID = :(me.element_id)
					and NAME != :(me.name)
					and DESCRIPTION != :(me.description)
				};
				#sql { commit };
//						IMAGE_ID = :(me.symbol_id)

				#sql {
					select EQUIPMENT_ID into :s1
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(me.element_id)
				};

				if(s1 != null && !s1.equals(""))
				{
					#sql {
						update AMFICOM.EQUIPMENTS
						set
							NAME = :(me.name),
							MODIFIED = SYSDATE,
							LONGITUDE = :(me.longitude),
							LATITUDE = :(me.latitude),
							DESCRIPTION = :(me.description)
						where ID = :s1
						and NAME != :(me.name)
						and DESCRIPTION != :(me.description)
						and LONGITUDE != :(me.longitude)
						and LATITUDE != :(me.latitude)
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated map element " + me.id + "!!!");
			ex.printStackTrace();
		}
	}

///////////////////////////////////////////////////////////////////
// PATH
///////////////////////////////////////////////////////////////////

	static public String getPathScheme(String path_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_ID into :s1
				from AMFICOM.PATHSONSCHEME
				where SCHEME_PATH_ID = :path_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme path " + path_id + " not on any scheme");
		}
		return null;
	}

	static public String getPathMap(String path_id)
	{
		String s1;

		try
		{
			#sql {
				select MAP_ID into :s1
				from AMFICOM.MAPPATHSLINKS
				where MAP_PATH_ID = :path_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map path " + path_id + " not on any map");
		}
		return null;
	}

	static public void pathUpdated(TransmissionPath_Transferable tp)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql {
				update AMFICOM.MONITOREDELEMENTS
				set
					MODIFIED = SYSDATE
				where PATH_ID = :(tp.id)
			};
			#sql { commit };
//					NAME = :(tp.name),

			#sql idIt = {
				select ID from AMFICOM.SCHEMEPATHS
				where PATH_ID = :(tp.id)
				and NAME != :(tp.name)
			};

			#sql {
				update AMFICOM.SCHEMEPATHS
				set NAME = :(tp.name)
				where PATH_ID = :(tp.id)
				and NAME != :(tp.name)
			};
			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getPathScheme(s);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}

				#sql idIt2 = {
					select ID from AMFICOM.MAPPATHELEMENTS
					where PATH_ID = :s
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getPathMap(s2);

					#sql {
						update AMFICOM.MAPPATHELEMENTS
						set
							NAME = :(tp.name),
							DESCRIPTION = :(tp.description)
						where ID = :s2
					};
					#sql { commit };

					if(s3 != null)
					{
						#sql {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						#sql { commit };
					}
				}
				idIt2.close();

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated path " + tp.id + "!!!");
			ex.printStackTrace();
		}
	}
/*
	static public void updatePathLinks(SchemePath_Transferable sp)
	{
		PathLinkIterator lidIt = null;

		int It_pl_n = 0;
		boolean It_pl_is_cable = false;
		String It_pl_link_id = "";
		String It_pl_thread_id = "";

		try
		{
			#sql {
				delete from AMFICOM.PATHLINKS
					where PATH_ID = :(sp.path_id)
			};

			#sql lidIt = { select N, IS_CABLE, LINK_ID, THREAD_ID
					from AMFICOM.SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :(sp.id)
			};
			while(lidIt.next())
			{
				try { It_pl_n = lidIt.n(); }
				catch(SQLException e) { }
				try { It_pl_is_cable = (lidIt.is_cable() == 0)?false : true; }
				catch(SQLException e) { }
				try { It_pl_link_id = lidIt.link_id(); }
				catch(SQLException e) { }
				if(It_pl_link_id == null) It_pl_link_id = "";
				try { It_pl_thread_id = lidIt.thread_id(); }
				catch(SQLException e) { }
				if(It_pl_thread_id == null) It_pl_thread_id = "";

				String at_s = ResourcedbInterface.getUId("pathlink");
				#sql {
					insert into AMFICOM.PATHLINKS(
							ID,
							PATH_ID,
							N,
							IS_CABLE,
							LINK_ID,
							THREAD_ID)
						values(
							:at_s,
							:(sp.path_id),
							:It_pl_n,
							:It_pl_is_cable,
							:(paths[i].links[j].link_id),
							:(paths[i].links[j].thread_id) )
				};
				#sql { commit };
			}
			lidIt.close();
		}
		catch(Exception ex)
		{
			System.out.println("error updated links for path " + sp.path_id + "!!!");
			ex.printStackTrace();
		}
	}
*/
	static public void schemePathUpdated(SchemePath_Transferable sp)
	{
		IdIterator idIt = null;

		try
		{
			if(sp.path_id != null && !sp.path_id.equals(""))
			{
				#sql {
					update AMFICOM.TRANSMISSIONPATHS
					set
						NAME = :(sp.name),
						MODIFIED = SYSDATE
					where ID = :(sp.path_id)
					and NAME != :(sp.name)
				};
				#sql { commit };

//				updatePathLinks(sp);

//						NAME = :(sp.name),
				#sql {
					update AMFICOM.MONITOREDELEMENTS
					set
						MODIFIED = SYSDATE
					where PATH_ID = :(sp.path_id)
				};
				#sql { commit };
			}


			#sql idIt = {
				select ID from AMFICOM.MAPPATHELEMENTS
				where PATH_ID = :(sp.id)
				and NAME != :(sp.name)
			};
			while(idIt.next())
			{
				String s2 = idIt.id();
				String s3 = getPathMap(s2);

				#sql {
					update AMFICOM.MAPPATHELEMENTS
					set
						NAME = :(sp.name)
					where ID = :s2
				};
				#sql { commit };

				if(s3 != null)
				{
					#sql {
						update AMFICOM.MAPCONTEXTS
						set MODIFIED = SYSDATE
						where ID = :s3
					};
					#sql { commit };
				}
			}
			idIt.close();
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme path " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void mapPathUpdated(MapPathElement_Transferable mp)
	{
		String s1;

		try
		{
			if(mp.path_id != null && !mp.path_id.equals(""))
			{
				#sql {
					update AMFICOM.SCHEMEPATHS
					set
						NAME = :(mp.name)
					where ID = :(mp.path_id)
					and NAME != :(mp.name)
				};
				#sql { commit };

				#sql {
					select PATH_ID into :s1
						from AMFICOM.SCHEMEPATHS
						where ID = :(mp.path_id)
				};

				if(s1 != null && !s1.equals(""))
				{
					#sql {
						update AMFICOM.TRANSMISSIONPATHS
						set
							NAME = :(mp.name),
							MODIFIED = SYSDATE,
							DESCRIPTION = :(mp.description)
						where ID = :s1
						and NAME != :(mp.name)
						and DESCRIPTION != :(mp.description)
					};
					#sql { commit };

//							NAME = :(mp.name),
					#sql {
						update AMFICOM.MONITOREDELEMENTS
						set
							MODIFIED = SYSDATE
						where PATH_ID = :s1
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated map path " + mp.id + "!!!");
			ex.printStackTrace();
		}
	}


///////////////////////////////////////////////////////////////////
// LINK
///////////////////////////////////////////////////////////////////

	static public String getDeviceElement(String device_id)
	{
		String s1;

		try
		{
			#sql {
				select SCHEME_ELEMENT_ID into :s1
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICE_ID = :device_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme device " + device_id + " not in any element");
		}
		return null;
	}

	static public String getSchemePort(String port_id)
	{
		String s1;

		try
		{
			#sql {
				select ID into :s1
				from AMFICOM.SCHEMEPORTS
				where PORT_ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("catalog port " + port_id + " not on scheme");
		}
		return null;
	}

	static public String getPort(String port_id)
	{
		String s1;

		try
		{
			#sql {
				select PORT_ID into :s1
				from AMFICOM.SCHEMEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not in catalog - may be cable port?..");
		}
		try
		{
			#sql {
				select CABLE_PORT_ID into :s1
				from AMFICOM.SCHEMECABLEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not in catalog");
		}
		return null;
	}

	static public String getPortEquipment(String port_id)
	{
		String s1;

		try
		{
			#sql {
				select EQUIPMENT_ID into :s1
				from AMFICOM.PORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("port " + port_id + " not at equipment - may be cable port?..");
		}
		try
		{
			#sql {
				select EQUIPMENT_ID into :s1
				from AMFICOM.CABLEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("cable port " + port_id + " not at equipment");
		}
		return null;
	}

	static public String getLinkScheme(String link_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_ID into :s1
				from AMFICOM.LINKSONSCHEME
				where SCHEME_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme link " + link_id + " not on scheme - may be inside any element?..");
		}
		try
		{
			#sql {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTLINKS
				where SCHEME_LINK_ID = :link_id
			};
			return getElementScheme(s2);
		}
		catch(Exception ex)
		{
			System.out.println("scheme link " + link_id + " not on scheme element");
		}
		return null;
	}

	static public void linkUpdated(Link_Transferable l)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			String s_p_id = getSchemePort(l.start_port_id);
			if(s_p_id == null)
				s_p_id = "";
			String t_p_id = getSchemePort(l.end_port_id);
			if(t_p_id == null)
				t_p_id = "";

//					SOURCE_PORT_ID = :s_p_id,
//					TARGET_PORT_ID = :t_p_id
			#sql idIt = {
				select ID from AMFICOM.SCHEMELINKS
				where LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			#sql {
				update AMFICOM.SCHEMELINKS
				set
					NAME = :(l.name),
					PHYSICAL_LENGTH = :(l.physical_length),
					OPTICAL_LENGTH = :(l.optical_length)
				where LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};
			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getLinkScheme(s);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated link " + l.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemeLinkUpdated(SchemeLink_Transferable sl)
	{
		IdIterator idIt = null;

		try
		{
			if(sl.link_id != null && !sl.link_id.equals(""))
			{
				String s_p_id = getPort(sl.source_port_id);
				if(s_p_id == null)
					s_p_id = "";
				String t_p_id = getPort(sl.target_port_id);
				if(t_p_id == null)
					t_p_id = "";
				String s_e_id = getPortEquipment(s_p_id);
				if(s_e_id == null)
					s_e_id = "";
				String t_e_id = getPortEquipment(t_p_id);
				if(t_e_id == null)
					t_e_id = "";

//						START_PORT_ID = :s_p_id,
//						START_EQUIPMENT_ID = :s_e_id,
//						END_PORT_ID = :t_p_id,
//						END_EQUIPMENT_ID = :t_e_id
				#sql {
					update AMFICOM.LINKS
					set
						NAME = :(sl.name),
						MODIFIED = SYSDATE,
						PHYSICAL_LENGTH = :(sl.physical_length),
						OPTICAL_LENGTH = :(sl.optical_length)
					where ID = :(sl.link_id)
					and NAME != :(sl.name)
					and PHYSICAL_LENGTH != :(sl.physical_length)
					and OPTICAL_LENGTH != :(sl.optical_length)
				};
				#sql { commit };
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme link " + sl.id + "!!!");
			ex.printStackTrace();
		}
	}

///////////////////////////////////////////////////////////////////
// CABLELINK
///////////////////////////////////////////////////////////////////

	static public String getCableLinkScheme(String link_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_ID into :s1
				from AMFICOM.CABLELINKSONSCHEME
				where SCHEME_CABLE_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable link " + link_id + " not on any scheme");
		}
/*
		try
		{
			#sql {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMECABLELINKS
				where SCHEME_CABLE_LINK_ID = :link_id
			};
			return getElementScheme(s2);
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
*/
		return null;
	}

	static public String getCableLinkMap(String link_id)
	{
		String s1;

		try
		{
			#sql {
				select MAP_ID into :s1
				from AMFICOM.MAPLINKLINKS
				where MAP_LINK_ID = :link_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map link " + link_id + " not on any map");
		}
		return null;
	}

	static public String getSchemeCablePort(String port_id)
	{
		String s1;

		try
		{
			#sql {
				select ID into :s1
				from AMFICOM.SCHEMECABLEPORTS
				where CABLE_PORT_ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("cable port " + port_id + " not on scheme");
		}
		return null;
	}

	static public String getCablePort(String port_id)
	{
		String s1;

		try
		{
			#sql {
				select CABLE_PORT_ID into :s1
				from AMFICOM.SCHEMECABLEPORTS
				where ID = :port_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not in catalog");
		}
		return null;
	}

	static public String getMapElement(String element_id)
	{
		String s1;

		try
		{
			#sql {
				select ID into :s1
				from AMFICOM.MAPELEMENTS
				where ELEMENT_ID = :element_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("map element " + element_id + " not on any map");
		}
		return null;
	}

	static public String getSchemePortElement(String port_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICEPORTS
				where SCHEME_PORT_ID = :port_id
			};
			#sql {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICE_ID = :s1
			};
			return s2;
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not on scheme element - may be cable port?..");
		}
		try
		{
			#sql {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICECABLEPORTS
				where SCHEME_CABLE_PORT_ID = :port_id
			};
			#sql {
				select SCHEME_ELEMENT_ID into :s2
				from AMFICOM.SCHEMEELEMENTDEVICES
				where SCHEME_DEVICe_ID = :s1
			};
			return s2;
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not on scheme element");
		}
		return null;
	}

	static public void cableLinkUpdated(CableLink_Transferable l)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			String s_p_id = getSchemeCablePort(l.start_port_id);
			if(s_p_id == null)
				s_p_id = "";
			String t_p_id = getSchemeCablePort(l.end_port_id);
			if(t_p_id == null)
				t_p_id = "";

//					SOURCE_PORT_ID = :s_p_id,
//					TARGET_PORT_ID = :t_p_id
			#sql idIt = {
				select ID from AMFICOM.SCHEMECABLELINKS
				where CABLE_LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			#sql {
				update AMFICOM.SCHEMECABLELINKS
				set
					NAME = :(l.name),
					PHYSICAL_LENGTH = :(l.physical_length),
					OPTICAL_LENGTH = :(l.optical_length)
				where CABLE_LINK_ID = :(l.id)
				and NAME != :(l.name)
				and PHYSICAL_LENGTH != :(l.physical_length)
				and OPTICAL_LENGTH != :(l.optical_length)
			};

			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s1 = getCableLinkScheme(s);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}

				#sql idIt2 = {
					select ID from AMFICOM.MAPPHYSICALLINKELEMENTS
					where LINK_ID = :s
					and NAME != :(l.name)
					and DESCRIPTION != :(l.description)
				};
				while(idIt2.next())
				{
					String s2 = idIt2.id();
					String s3 = getCableLinkMap(s2);

					String s_n_id = getMapElement(getSchemePortElement(s_p_id));
					String e_n_id = getMapElement(getSchemePortElement(t_p_id));

//							START_NODE_ID = :(s_n_id),
//							END_NODE_ID = :(e_n_id)
					#sql {
						update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							NAME = :(l.name),
							DESCRIPTION = :(l.description)
						where ID = :s2
					};
					#sql { commit };

					if(s3 != null)
					{
						#sql {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						#sql { commit };
					}
				}
				idIt2.close();
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(idIt2 != null) try {
			idIt2.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable link " + l.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemeCableLinkUpdated(SchemeCableLink_Transferable scl)
	{
		IdIterator idIt = null;

		try
		{
			if(scl.cable_link_id != null && !scl.cable_link_id.equals(""))
			{
				String s_p_id = getPort(scl.source_port_id);
				if(s_p_id == null)
					s_p_id = "";
				String t_p_id = getPort(scl.target_port_id);
				if(t_p_id == null)
					t_p_id = "";
				String s_e_id = getPortEquipment(s_p_id);
				if(s_e_id == null)
					s_e_id = "";
				String t_e_id = getPortEquipment(t_p_id);
				if(t_e_id == null)
					t_e_id = "";

//						START_PORT_ID = :s_p_id,
//						START_EQUIPMENT_ID = :s_e_id,
//						END_PORT_ID = :t_p_id,
//						END_EQUIPMENT_ID = :t_e_id
				#sql {
					update AMFICOM.CABLELINKS
					set
						NAME = :(scl.name),
						MODIFIED = SYSDATE,
						PHYSICAL_LENGTH = :(scl.physical_length),
						OPTICAL_LENGTH = :(scl.optical_length)
					where ID = :(scl.cable_link_id)
					and NAME != :(scl.name)
					and PHYSICAL_LENGTH != :(scl.physical_length)
					and OPTICAL_LENGTH != :(scl.optical_length)
				};
				#sql { commit };

				#sql idIt = {
					select ID from AMFICOM.MAPPHYSICALLINKELEMENTS
					where LINK_ID = :(scl.id)
					and NAME != :(scl.name)
				};
				while(idIt.next())
				{
					String s2 = idIt.id();
					String s3 = getCableLinkMap(s2);

					String s_n_id = getMapElement(getSchemePortElement(s_p_id));
					String e_n_id = getMapElement(getSchemePortElement(t_p_id));

//							START_NODE_ID = :(s_n_id),
//							END_NODE_ID = :(e_n_id)
					#sql {
						update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							NAME = :(scl.name)
						where ID = :s2
					};
					#sql { commit };

					if(s3 != null)
					{
						#sql {
							update AMFICOM.MAPCONTEXTS
							set MODIFIED = SYSDATE
							where ID = :s3
						};
						#sql { commit };
					}
				}
				idIt.close();
			}
		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated scheme cable link " + scl.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void mapLinkUpdated(MapPhysicalLinkElement_Transferable ml)
	{
		String s1;

		try
		{
			if(ml.link_id != null && !ml.link_id.equals(""))
			{
				#sql {
					update AMFICOM.SCHEMECABLELINKS
					set
						NAME = :(ml.name)
					where ID = :(ml.link_id)
					and NAME != :(ml.name)
				};
				#sql { commit };

				#sql {
					select CABLE_LINK_ID into :s1
						from AMFICOM.SCHEMECABLELINKS
						where ID = :(ml.link_id)
				};

				if(s1 != null && !s1.equals(""))
				{
					#sql {
						update AMFICOM.CABLELINKS
						set
							NAME = :(ml.name),
							MODIFIED = SYSDATE,
							DESCRIPTION = :(ml.description)
						where ID = :s1
						and NAME != :(ml.name)
						and DESCRIPTION != :(ml.description)
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated map link " + ml.id + "!!!");
			ex.printStackTrace();
		}
	}

///////////////////////////////////////////////////////////////////
// CABLELINKTHREAD
///////////////////////////////////////////////////////////////////

	static public String getThreadSchemeCable(String thread_id)
	{
		String s1;

		try
		{
			#sql {
				select SCHEME_CABLE_LINK_ID into :s1
				from AMFICOM.SCHEMECABLELINKTHREADS
				where SCHEME_CABLE_THREAD_ID = :thread_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("scheme thread " + thread_id + " not in scheme cable link");
			ex.printStackTrace();
		}
		return null;
	}

	static public String getThreadCableLink(String thread_id)
	{
		String s1;

		try
		{
			#sql {
				select CABLE_ID into :s1
				from AMFICOM.CABLELINKTHREADS
				where ID = :thread_id
			};
			return s1;
		}
		catch(Exception ex)
		{
			System.out.println("thread " + thread_id + " not in cable link");
		}
		return null;
	}

	static public void cableThreadUpdated(CableLinkThread_Transferable t)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			int count = 0;
				
			#sql {
				select count(*) into :count from AMFICOM.SCHEMECABLETHREADS
				where THREAD_ID = :(t.id)
				and NAME != :(t.name)
				and LINK_TYPE_ID != :(t.link_type_id)
			};

			if(count == 0)
				return;

			#sql {
				update AMFICOM.SCHEMECABLETHREADS
				set
					NAME = :(t.name),
					LINK_TYPE_ID = :(t.link_type_id)
				where THREAD_ID = :(t.id)
			};
			#sql { commit };

			#sql idIt = {
				select ID from AMFICOM.SCHEMELINKS
				where LINK_ID = :(t.id)
			};
			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getThreadSchemeCable(s);
				if(s2 == null)
					continue;
				String s1 = getCableLinkScheme(s2);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}
			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable thread " + t.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemeCableLinkThreadUpdated(SchemeCableThread_Transferable st)
	{
		IdIterator idIt = null;

		try
		{
			if(st.thread_id != null && !st.thread_id.equals(""))
			{
				int count = 0;
				
				#sql {
					select count(*) into :count from AMFICOM.CABLELINKTHREADS
					where ID = :(st.thread_id)
					and NAME != :(st.name)
					and LINK_TYPE_ID != :(st.link_type_id)
				};

				if(count == 0)
					return;

				#sql {
					update AMFICOM.CABLELINKTHREADS
					set
						NAME = :(st.name),
						LINK_TYPE_ID = :(st.link_type_id)
					where ID = :(st.thread_id)
				};
				#sql { commit };

				String s1 = getThreadCableLink(st.thread_id);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.CABLELINKS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme cable thread " + st.id + "!!!");
			ex.printStackTrace();
		}
	}

///////////////////////////////////////////////////////////////////
// PORT
///////////////////////////////////////////////////////////////////

	static public String getPortElement(String port_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICEPORTS
				where SCHEME_PORT_ID = :port_id
			};
			return getDeviceElement(s1);
		}
		catch(Exception ex)
		{
			System.out.println("scheme port " + port_id + " not on scheme");
		}
		return null;
	}

	static public void portUpdated(Port_Transferable p)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql idIt = {
				select ID from AMFICOM.SCHEMEPORTS
				where PORT_ID = :(p.id)
				and NAME != :(p.name)
			};

			#sql {
				update AMFICOM.SCHEMEPORTS
				set NAME = :(p.name)
				where PORT_ID = :(p.id)
				and NAME != :(p.name)
			};
			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getPortElement(s);
				String s1 = getElementScheme(s2);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated port " + p.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemePortUpdated(SchemePort_Transferable sp)
	{
		IdIterator idIt = null;

		try
		{
			if(sp.port_id != null && !sp.port_id.equals(""))
			{
				int count = 0;
				
				#sql {
					select count(*) into :count from AMFICOM.PORTS
					where ID = :(sp.port_id)
					and NAME != :(sp.name)
				};

				if(count == 0)
					return;

				#sql {
					update AMFICOM.PORTS
					set NAME = :(sp.name)
					where ID = :(sp.port_id)
					and NAME != :(sp.name)
				};
				#sql { commit };

				String s1 = getPortEquipment(sp.port_id);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.EQUIPMENTS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme port " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

///////////////////////////////////////////////////////////////////
// CABLEPORT
///////////////////////////////////////////////////////////////////

	static public String getCablePortElement(String port_id)
	{
		String s1;
		String s2;

		try
		{
			#sql {
				select SCHEME_DEVICE_ID into :s1
				from AMFICOM.SCHEMEDEVICECABLEPORTS
				where SCHEME_CABLE_PORT_ID = :port_id
			};
			return getDeviceElement(s1);
		}
		catch(Exception ex)
		{
			System.out.println("scheme cable port " + port_id + " not on scheme");
		}
		return null;
	}

	static public void cablePortUpdated(CablePort_Transferable p)
	{
		IdIterator idIt = null;
		IdIterator idIt2 = null;

		try
		{
			#sql idIt = {
				select ID from AMFICOM.SCHEMECABLEPORTS
				where CABLE_PORT_ID = :(p.id)
				and NAME != :(p.name)
			};

			#sql {
				update AMFICOM.SCHEMECABLEPORTS
				set NAME = :(p.name)
				where CABLE_PORT_ID = :(p.id)
				and NAME != :(p.name)
			};
			#sql { commit };

			while(idIt.next())
			{
				String s = idIt.id();
				String s2 = getCablePortElement(s);
				String s1 = getElementScheme(s2);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.SCHEMES
						set MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}

			}
			idIt.close();

		}
		catch(Exception ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error updated cable port " + p.id + "!!!");
			ex.printStackTrace();
		}
	}

	static public void schemeCablePortUpdated(SchemeCablePort_Transferable sp)
	{
		IdIterator idIt = null;

		try
		{
			if(sp.cable_port_id != null && !sp.cable_port_id.equals(""))
			{
				int count = 0;
				
				#sql {
					select count(*) into :count from AMFICOM.CABLEPORTS
					where ID = :(sp.cable_port_id)
					and NAME != :(sp.name)
				};

				if(count == 0)
					return;

				#sql {
					update AMFICOM.CABLEPORTS
					set NAME = :(sp.name)
					where ID = :(sp.cable_port_id)
					and NAME != :(sp.name)
				};
				#sql { commit };

				String s1 = getPortEquipment(sp.cable_port_id);
				if(s1 != null)
				{
					#sql {
						update AMFICOM.EQUIPMENTS
						set
							MODIFIED = SYSDATE
						where ID = :s1
					};
					#sql { commit };
				}
			}
		}
		catch(Exception ex)
		{
			System.out.println("error updated scheme cable port " + sp.id + "!!!");
			ex.printStackTrace();
		}
	}

	#sql public static iterator IdIterator ( String id );

	#sql public static iterator PathLinkIterator(
		int n,
		int is_cable,
		String link_id,
		String thread_id);


}

