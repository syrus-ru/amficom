/*
 * $Id: FilterTemplate.sqlj,v 1.1.2.2 2004/08/24 15:43:43 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Resource.Filter_Transferable;
import com.syrus.util.database.ByteArrayDatabase;
import java.sql.SQLException;
import oracle.sql.BLOB;
import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/24 15:43:43 $
 * @author $Author: bass $
 * @module server_v1
 */
public class FilterTemplate
{
	private String id;
	private String resource_typ;
	private byte[] logic_scheme;

	public FilterTemplate(Filter_Transferable filter)
			throws SQLException
	{
		this.id = filter.id; 
		this.resource_typ = filter.resource_typ;
		this.logic_scheme = filter.logic_scheme;
		
		#sql{ insert into AMFICOM.FILTERS(
				ID,
				RESOURCE_TYP,
				LOGIC_SCHEME)
			values(
				:(this.id),
				:(this.resource_typ),
				empty_blob())
		};

 		try
		{
			System.out.println("Saving " + this.logic_scheme.length + " bytes as blob:");

			ByteArrayDatabase bArr = new ByteArrayDatabase(this.logic_scheme);
      
			ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
			boolean autoc = connCtx2.getConnection().getAutoCommit();
      
			bArr.saveAsBlob(
				connCtx2.getConnection(),
				"AMFICOM.FILTERS",
				"LOGIC_SCHEME",
				"id = '" + this.id + "'");
        
		}
		catch(Exception ioe)
		{
			System.out.println("error saving FILTERS: " + ioe.getMessage());
			ioe.printStackTrace();
		}
		#sql { commit };
	}

	public FilterTemplate(String id)
			throws SQLException
	{
		FilterIterator fIt = null;

		try
		{
			#sql fIt = { 
				select
					ID,
					RESOURCE_TYP,
					LOGIC_SCHEME
				from AMFICOM.FILTERS
				where ID = :id
			};

			if(!fIt.next())
			{
				throw new SQLException("NO filter for id " + id);
			}

			try { this.id = fIt.id(); }
			catch(SQLException e) { }
			if(this.id == null) this.id = "";

			try { this.resource_typ = fIt.resource_typ(); }
			catch(SQLException e) { }
			if(this.resource_typ == null) this.resource_typ = "";

			byte[] logic_scheme_bytes = new byte[0];        
			try { logic_scheme_bytes = ByteArrayDatabase.toByteArray(fIt.logic_scheme()); }
			catch(SQLException e) { e.printStackTrace(); }
      
			fIt.close();
      
			this.logic_scheme = logic_scheme_bytes;
		}
		catch(SQLException e)
		{
			if(fIt != null)
			try
			{
				fIt.close();
			}
			catch(SQLException exe) {}
		
			System.out.println("error loading report template: " + e.getMessage());
			throw e;
		}
	}

	Filter_Transferable getTransferable() {
		return new Filter_Transferable(
			this.id,
			this.resource_typ,
			this.logic_scheme);
	}

	public String getId()
	{
		return this.id;
	}

	public void delete() throws Exception
	{
		#sql { delete from AMFICOM.FILTERS
			where ID = :(this.id)
		};
		#sql { commit };
	}

	public void update(Filter_Transferable filter) throws Exception
	{
		this.resource_typ = filter.resource_typ;
		this.logic_scheme = filter.logic_scheme;

		#sql{ update AMFICOM.FILTERS set
				ID = :(this.id),
				RESOURCE_TYP = :(this.resource_typ),
				LOGIC_SCHEME = empty_blob()
			where ID = :(this.id)
		};

 		try
		{
			System.out.println("Saving " + this.logic_scheme.length + " bytes as blob:");

			ByteArrayDatabase bArr = new ByteArrayDatabase(this.logic_scheme);
      
			ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
			boolean autoc = connCtx2.getConnection().getAutoCommit();
      
			bArr.saveAsBlob(
				connCtx2.getConnection(),
				"AMFICOM.FILTERS",
				"LOGIC_SCHEME",
				"id = '" + this.id + "'");
        
		}
		catch(Exception ioe)
		{
			System.out.println("error saving FILTERS: " + ioe.getMessage());
			ioe.printStackTrace();
		}

		#sql { commit };
	}

	#sql public static iterator IdIterator(
		String id);

	#sql public static iterator FilterIterator(
		String id,
		String resource_typ,
		BLOB logic_scheme);
}
