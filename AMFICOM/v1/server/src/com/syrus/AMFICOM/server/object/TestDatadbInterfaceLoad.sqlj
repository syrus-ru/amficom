/*
 * $Id: TestDatadbInterfaceLoad.sqlj,v 1.1.2.2 2004/08/20 17:12:10 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.octetSeqHolder;
import com.syrus.AMFICOM.CORBA.Resource.ResourceDescriptorSeq_TransferableHolder;
import com.syrus.AMFICOM.CORBA.Survey.*;
import java.sql.Timestamp;
import java.util.Vector;
import oracle.sql.BLOB;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/20 17:12:10 $
 * @author $Author: bass $
 * @module server_v1
 */
public class TestDatadbInterfaceLoad
{
	protected TestDatadbInterfaceLoad()
	{
	}

	public static Vector loadTestTypeParameters(
			String argTableName,
			String argFieldName,
			String testtype_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";

		byte val[] = new byte[0];

		Vector vector2 = new Vector();
		TestTypeArgumentIterator paramIt = null;
		return vector2;
	}

	public static Vector loadTestTypeArguments(
			String argTableName,
			String argFieldName,
			String argValueName,
			String testtype_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		BLOB It_value;
		octetSeqHolder osh;

		Vector vector2 = new Vector();
		TestTypeArgumentIterator argIt = null;
		return vector2;
	}

	public static int loadTestTypes(
			TestTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadTestTypes(
			String[] ids,
			TestTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadAnalysisTypes(
			AnalysisTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadAnalysisTypes(
			String[] ids,
			AnalysisTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadEvaluationTypes(
			EvaluationTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadEvaluationTypes(
			String[] ids,
			EvaluationTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadModelingTypes(
			ModelingTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadModelingTypes(
			String[] ids,
			ModelingTypeSeq_TransferableHolder testtypeseq)
	{
		return Constants.ERROR_NO_ERROR;
	}

	public static int getAlarmedTests(
			String domain_id,
			ResourceDescriptorSeq_TransferableHolder testids)
	{
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator AnalysisTypeIdIterator( String analysis_type_id );
	#sql public static iterator EvaluationTypeIdIterator( String evaluation_type_id );

	#sql public static iterator ResultParameterIterator(
		String id,
		String parameter_type_id,
		BLOB value);

	#sql public static iterator TestTypeArgumentIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id);

	#sql public static iterator TestTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);

	#sql public static iterator AnalysisTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);

	#sql public static iterator EvaluationTypeIterator(
		String id,
		String name,
		String description,
		String etalon_type_id,
		Timestamp modified);

	#sql public static iterator ModelingTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);
}
