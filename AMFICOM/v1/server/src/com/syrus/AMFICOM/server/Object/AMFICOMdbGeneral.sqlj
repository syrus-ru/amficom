/*
 * $Id: AMFICOMdbGeneral.sqlj,v 1.3 2004/07/05 06:21:43 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Admin.*;
import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.io.Rewriter;
import com.syrus.util.database.ByteArrayDatabase;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import oracle.sql.BLOB;
import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.3 $, $Date: 2004/07/05 06:21:43 $
 * @author $Author: bass $
 * @module server_v1
 */
public class AMFICOMdbGeneral
{
	private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");

	public static void CheckUserPrivileges(AccessIdentity_Transferable accessIdentity)
		throws AMFICOMRemoteException
	{
//		System.out.println("		check user " + accessIdentity.sess_id);

		try
		{
/*
			Timestamp acc;
			#sql {
				select ACCESSED into :acc from AMFICOM.LOGGEDUSERS
					where ID = :(accessIdentity.sess_id)
			};

			System.out.println("		(last accessed ) - " + SIMPLE_DATE_FORMAT.format(acc));
*/
			#sql {
				update AMFICOM.LOGGEDUSERS
					set ACCESSED = SYSDATE
					where ID = :(accessIdentity.sess_id)
			};
//			System.out.println("		Ok!");
			#sql { commit };
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new AMFICOMRemoteException(
					Constants.ERROR_INSUFFICIENT_PRIVILEGES,
					"Ошибка пользователя: " + e.getMessage());
		}
	}

	public static int Logon(String username, byte password[], String ior, AccessIdentity_TransferableHolder accessIdentity)
			throws AMFICOMRemoteException
	{
		try
		{
			String id = "";
			String sess = "sess";
			String sess_code = "";
			String pwd = "";
			long pwd_exp = 0;
			String type = "";
			BLOB pwd_blob = null;
			Timestamp tms = new Timestamp(System.currentTimeMillis());

//			oracle.aurora.net.SessionIdentifier si = oracle.aurora.mts.session.Session.THIS_SESSION().sessionID();
//			sess_code = si.toAsciiString();

			accessIdentity.value = new AccessIdentity_Transferable(0, "", "", "", "sysdomain");
//			System.out.println("logging on " + username + " pwd " + password);
			// проверить права доступа пользователя в систему
			try
			{
				#sql
				{
					select ID, TYPE into :id, :type from AMFICOM.USERS where LOGIN = :username
				};
			}
			catch (SQLException e)
			{
				System.out.println("id " + id + " type " + type);
				e.printStackTrace();
				int errorCode = e.getErrorCode();
				if (errorCode == 8000) // Нет контекста соединения с БД
					// невозможно соединиться с РИСД
					return Constants.ERROR_NO_CONNECT;
				else if (errorCode == 2000) // Не найдено записей
					// пользователь не имеет прав дост.
					return Constants.ERROR_WRONG_LOGIN;
				else if (errorCode == 8003) // Нет контекста выполнения SQL
					// сбой в работе РИСД
					return Constants.ERROR_RISD_ERROR;
				else
					throw e;
			}
			if (type.equals("operatorprofile"))
			{
				String op_id = "";
				try
				{
					#sql
					{
						select OPERATOR_ID into :op_id from AMFICOM.USERS where LOGIN = :username
					};
				}
				catch (SQLException ex1)
				{
					;
				}
				System.out.println("op_id " + op_id);

				try
				{
					#sql
					{
						select PASSWORD, PASSWORD_EXPIRY into :pwd_blob, :pwd_exp from AMFICOM.OPERATORPROFILES where ID = :op_id
					};
				}
				catch (Exception ex1)
				{
					ex1.printStackTrace();
					throw new AMFICOMRemoteException(Constants.ERROR_RISD_ERROR, "field PASSWORD cannot be updated");
				}

				byte pwd_bytes[] = ByteArrayDatabase.toByteArray(pwd_blob);
//				System.out.println("decode...");
				String decpwd = Rewriter.read(pwd_bytes);
				String logpwd = Rewriter.read(password);
//				System.out.println("pwd " + new String(pwd_bytes) + " decpwd " + decpwd + " compare to " + new String(password) + " logpwd " + logpwd + " pwd_exp " + pwd_exp + " curtime " + System.currentTimeMillis());
				if (!decpwd.equals(logpwd))
//				if (!pwd.equals(password))
					// неправильно указан пароль
					return Constants.ERROR_WRONG_PASSWORD;

				if ((!id.equals("sys")) && (pwd_exp != 0) && (pwd_exp < System.currentTimeMillis()))
//					return Constants.ERROR_PASSWORD_EXPIRED;
					throw new AMFICOMRemoteException(Constants.ERROR_PASSWORD_EXPIRED, "fn Logon: Ограниечение времени действия логина");
			}
			// выделить пользователю идентификатор сессии и занести
			// запись о нем в БД
			try
			{
				sess = ResourcedbInterface.getUId("loggeduser");

				ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
				Connection conn = connCtx2.getConnection();

				boolean autoc = conn.getAutoCommit();
				conn.setAutoCommit(false);

/*
				System.out.println("commit1");
				conn.createStatement().execute("COMMIT");

				String sql = "insert into amficom.iors (id, ior) values('" + sess + "', empty_blob())";

				System.out.println("EXECUTE: " + sql);

				conn.createStatement().execute(sql);
*/
				#sql
				{
					insert into AMFICOM.IORS (ID, IOR) values(:sess, empty_blob() )
				};

				ByteArrayDatabase bArr = new ByteArrayDatabase(ior.getBytes());// можно указать кодировку US-ASCII

//				conn.createStatement().execute("COMMIT");
				#sql
				{
					commit
				};

				conn.setAutoCommit(false);
				bArr.saveAsBlob(conn, "AMFICOM.IORS", "IOR", "id = '" + sess + "'");

				conn.createStatement().execute("COMMIT");
				conn.setAutoCommit(autoc);

				#sql
				{ 
					insert into AMFICOM.LOGGEDUSERS (ID, NAME, LOGGED, USER_ID, ACCESSED) values (:sess, :username, SYSDATE, :id, SYSDATE)
				};
				System.out.println("ok iserted!!");
				#sql
				{
					select LOGGED into :tms from AMFICOM.LOGGEDUSERS where ID = :sess
				};
			}
			catch (SQLException e)
			{
				System.out.println("error sess " + sess + " error is " + e.getErrorCode() + " " + e.getMessage());
				e.printStackTrace();
				if(e.getErrorCode() == 8003) // Нет контекста выполнения SQL
					// сбой в работе РИСД
					return Constants.ERROR_RISD_ERROR;
				else
					throw e;
			}
			catch (Exception e)
			{
				System.out.println("error sess " + sess + " error is " + e.getMessage());
				e.printStackTrace();
				throw e;
			}
			// вернуть пользователю идентификатор сессии
			#sql
			{
				commit
			};

//			tm = SIMPLE_DATE_FORMAT.format(tms);
			System.out.println("sess " + sess + " at " + SIMPLE_DATE_FORMAT.format(tms));
			accessIdentity.value = new AccessIdentity_Transferable(Calendar.getInstance().getTime().getTime(), username, id, sess, "sysdomain");

			return Constants.ERROR_NO_ERROR;
		}
		catch (Exception e)
		{
			throw new AMFICOMRemoteException(1, "fn Logon:" + e.getMessage());
		}
	}

	public static int Logoff(AccessIdentity_Transferable accessIdentity)
		throws AMFICOMRemoteException
	{
	try
	{
		int i = 0;
		int count;
		String nm;
		String sessid = accessIdentity.sess_id;

		// удалить запись о сессии пользователя
		#sql {delete from AMFICOM.IORS
			where ID = :sessid };

		#sql {delete from AMFICOM.LOGGEDUSERS
			where ID = :sessid };
		#sql { commit };

		return Constants.ERROR_NO_ERROR;
	}
	catch (Exception e)
	{
		e.printStackTrace();
		throw new AMFICOMRemoteException(1, "fn Logoff:" + e.getMessage ());
	}
	}

	public static int GetLoggedUserIds(
			AccessIdentity_Transferable accessIdentity,
			wstringSeqHolder userids)
		throws AMFICOMRemoteException
	{
		Vector vec = new Vector();
		userids.value = new String[0];

		UserIdIterator uIt = null;

		try
		{
			#sql uIt = { select USER_ID
				from AMFICOM.LOGGEDUSERS
			};
			while(uIt.next())
			{
				System.out.println("adding " + uIt.user_id());
				try { vec.add(uIt.user_id()); }
				catch(SQLException e) { }
			}
			uIt.close();
		}
		catch (Exception ex1)
		{
			if(uIt != null) try {
			uIt.close();
			}catch(Exception exe) {}
			ex1.printStackTrace();
			throw new AMFICOMRemoteException(1, "fn GetLoggedUserIds:" + ex1.getMessage ());
		}
		userids.value = new String[vec.size()];
		vec.copyInto(userids.value);

		return Constants.ERROR_NO_ERROR;
	}

	public static int ChangePassword(
			AccessIdentity_Transferable accessIdentity,
			byte[] oldpassword,	// пароль пользователя
			byte[] newpassword)	// новый пароль пользователя
		throws AMFICOMRemoteException
	{
		String user_id;
		String type;
		String op_id = "";
		String pwd = "";
		BLOB pwd_blob = null;
		long pwd_exp = 0;
		try
		{
			#sql {
				select USER_ID into :user_id
					from AMFICOM.LOGGEDUSERS
					where ID = :(accessIdentity.sess_id)
			};
			#sql { select TYPE into :type
				from AMFICOM.USERS
				where ID = :user_id };

			if(type.equals("operatorprofile"))
			{
				#sql { select OPERATOR_ID into :op_id
					from AMFICOM.USERS where ID = :user_id };
				System.out.println("op_id " + op_id);

				#sql { select PASSWORD, PASSWORD_EXPIRY into :pwd_blob, :pwd_exp
					from AMFICOM.OPERATORPROFILES where ID = :op_id };

				pwd = Rewriter.read(ByteArrayDatabase.toByteArray(pwd_blob));
				if(!pwd.equals(Rewriter.read(oldpassword)))
					return Constants.ERROR_WRONG_PASSWORD;

				ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
				Connection conn = connCtx2.getConnection();

				ByteArrayDatabase bad = new ByteArrayDatabase(newpassword);
				bad.saveAsBlob(
						conn,
						"AMFICOM.OPERATORPROFILES",
						"PASSWORD",
						"id = '" + op_id + "'");
//				#sql { update AMFICOM.OPERATORPROFILES
//						set PASSWORD = :newpassword
//						where ID = :op_id };
			}
			#sql { commit };
		}
		catch (Exception e)
		{
			throw new AMFICOMRemoteException(
					Constants.ERROR_SAVING,
					"Ошибка: " + e.getMessage());
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator UserIdIterator( String user_id );
}
