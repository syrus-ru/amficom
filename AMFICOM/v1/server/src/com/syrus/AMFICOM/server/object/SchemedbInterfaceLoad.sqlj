/*
 * $Id: SchemedbInterfaceLoad.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.General.ElementAttribute_Transferable;
import com.syrus.AMFICOM.CORBA.Resource.ImageResource_Transferable;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.database.JdbcBlobManager;
import java.sql.*;
import java.util.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemedbInterfaceLoad {
	private SchemedbInterfaceLoad() {
	}

	/**
	 * Retrieves all schemes within current domain. 
	 *
	 * @todo Error handling is absent. Exception should be thrown.
	 * @todo Conversion from a list to an array is a resource-consuming
	 *       operation.
	 * @todo Selection of all ids is unnecessary!
	 */
	static void getSchemes(final Connection conn, String domainId, SchemeSeq_TransferableHolder schemes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		IdIterator idIterator = null;
		ArrayList arrayList = new ArrayList();
		try {
			#sql [connCtx] idIterator = {
				select ID from AMFICOM.SCHEMES
			};
			while (idIterator.next())
				arrayList.add(loadScheme(conn, domainId, idIterator.id()));
		} catch (SQLException sqle) {
			sqle.printStackTrace();
		} finally {
			try {
				if (idIterator != null)
					idIterator.close();
			} catch (SQLException sqle) {
				sqle.printStackTrace();
			}
		}
		schemes.value = (Scheme_Transferable[]) (arrayList.toArray(new Scheme_Transferable[arrayList.size()]));
	}

	/**
	 * Retrieves schemes within current domain specified by their ids.
	 * 
	 * @todo Error handling is absent. One should either return an empty
	 *       array (not a partially filled one), or throw an exception.
	 * @todo Conversion from a list to an array is a resource-consuming
	 *       operation.
	 */
	static void getSchemes(final Connection conn, String domainId, String ids[], SchemeSeq_TransferableHolder schemes) {
		ArrayList arrayList = new ArrayList();
		for (int i = 0; i < ids.length; i++)
			try {
				arrayList.add(loadScheme(conn, domainId, ids[i]));
			} catch (Exception e) {
				e.printStackTrace();
			}
		schemes.value = (Scheme_Transferable[]) (arrayList.toArray(new Scheme_Transferable[arrayList.size()]));
	}

	static SchemePath_Transferable loadSchemePath(final Connection conn, String pathId) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_start_device_id = "";
		String It_end_device_id = "";
		String It_path_type_id = "";
		String It_path_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];
		Vector vector2 = new Vector();

		Vector vector = new Vector();
		PathElement_Transferable[] links = new PathElement_Transferable[0];
		PathElement_Transferable pathlink;

		int It_pl_n = 0;
		boolean It_pl_is_cable = false;
		String It_pl_link_id = "";
		String It_pl_thread_id = "";
		PathLinkIterator lidIt = null;

		SchemePath_Transferable lt_t;
		SchemePathIterator lIt = null;

		try
		{
			#sql [connCtx] lIt = { select
						ID,
						NAME,
						PATH_TYPE_ID,
						PATH_ID,
						START_DEVICE_ID,
						END_DEVICE_ID
					from AMFICOM.SCHEMEPATHS
					where ID = :pathId
			};

			lIt.next();

			try { It_id = lIt.id(); }
			catch (SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = lIt.name(); }
			catch (SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_path_type_id = lIt.path_type_id(); }
			catch (SQLException e) { }
			if(It_path_type_id == null) It_path_type_id = "";
			try { It_path_id = lIt.path_id(); }
			catch (SQLException e) { }
			if(It_path_id == null) It_path_id = "";
			try { It_start_device_id = lIt.start_device_id(); }
			catch (SQLException e) { }
			if(It_start_device_id == null) It_start_device_id = "";
			try { It_end_device_id = lIt.end_device_id(); }
			catch (SQLException e) { }
			if(It_end_device_id == null) It_end_device_id = "";

			lIt.close();

			vector = new Vector();
			try
			{
				#sql [connCtx] lidIt = { select N, IS_CABLE, LINK_ID, THREAD_ID
						from AMFICOM.SCHEMEPATHLINKS
						where SCHEME_PATH_ID = :It_id
				};
				while (lidIt.next())
				{
					try { It_pl_n = lidIt.n(); }
					catch (SQLException e) { }
					try { It_pl_is_cable = (lidIt.is_cable() == 0)?false : true; }
					catch (SQLException e) { }
					try { It_pl_link_id = lidIt.link_id(); }
					catch (SQLException e) { }
					if(It_pl_link_id == null) It_pl_link_id = "";
					try { It_pl_thread_id = lidIt.thread_id(); }
					catch (SQLException e) { }
					if(It_pl_thread_id == null) It_pl_thread_id = "";

					pathlink = new PathElement_Transferable(
							It_pl_n,
							It_pl_is_cable,
							It_pl_link_id,
							It_pl_thread_id);
					vector.add(pathlink);
				}
				lidIt.close();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			links = new PathElement_Transferable[vector.size()];
			vector.copyInto(links);

			vector2 = MapdbInterfaceLoad.loadAttributes(conn, "SCHEMEPATHATTRIBUTES", "SCHEME_PATH_ID", It_id);
			attributes = new ElementAttribute_Transferable[vector2.size()];
			vector2.copyInto(attributes);

			lt_t = new SchemePath_Transferable(
				It_id,
				It_name,
				It_path_type_id,
				It_start_device_id,
				It_end_device_id,
				It_path_id,
				links,
				attributes);

			return lt_t;
		}
		catch (SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			} catch (Exception exe) {}
			System.out.println("error loading path: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				lIt.close();
			} catch (Exception exe) {}
		}
		
	}

	private static Vector loadCableThreads(final Connection conn, String cable_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator idIt = null;
		String ct_id;
		String id;
		String name;
		String linkTypeId;
		String thread_id;
		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];
		Vector vector = new Vector();
		try {
			#sql [connCtx] idIt = {
				select SCHEME_CABLE_THREAD_ID from AMFICOM.SCHEMECABLELINKTHREADS where SCHEME_CABLE_LINK_ID = :cable_id
			};
			while (idIt.next()) {
				try {
					ct_id = idIt.scheme_cable_thread_id();
					#sql [connCtx] {
						select ID, NAME, LINK_TYPE_ID, THREAD_ID into :id, :name, :linkTypeId, :thread_id from AMFICOM.SCHEMECABLETHREADS where ID = :ct_id
					};
					if (name == null)
						name = "";
					if (thread_id == null)
						thread_id = "";

					vector.addElement(
						new SchemeCableThread_Transferable(
								id,
								name,
								linkTypeId,
								thread_id,
								attributes));
				}
				catch (SQLException e)
				{
					System.out.println("could not get threads for cable " + cable_id + ": " + e.getMessage());
					e.printStackTrace();
				}
			}
			idIt.close();
		}
		catch (SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			} catch (Exception exe) {}
			System.out.println("could not get threads for cable " + cable_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				idIt.close();
			}
			catch (Exception exe) {
				;
			}
		}
		return vector;
	}

	private static SchemeCableLink_Transferable loadSchemeCableLink(final Connection conn, String cable_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_source_port_id = "";
		String It_target_port_id = "";
		String It_cable_link_type_id = "";
		String It_cable_link_id = "";
		String It_physical_length = "";
		String It_optical_length = "";

		SchemeCableThread_Transferable cable_threads[];

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector = new Vector();

		SchemeCableLink_Transferable lt_t;
		SchemeCableLinkIterator lIt = null;
		Vector vector2;

		try
		{
			#sql [connCtx] lIt = { select
						ID,
						NAME,
						CABLE_LINK_TYPE_ID,
						CABLE_LINK_ID,
						SOURCE_PORT_ID,
						TARGET_PORT_ID,
						PHYSICAL_LENGTH,
						OPTICAL_LENGTH
					from AMFICOM.SCHEMECABLELINKS
					where ID = :cable_id
			};

			lIt.next();

			try { It_id = lIt.id(); }
			catch (SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = lIt.name(); }
			catch (SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_cable_link_type_id = lIt.cable_link_type_id(); }
			catch (SQLException e) { }
			if(It_cable_link_type_id == null) It_cable_link_type_id = "";
			try { It_cable_link_id = lIt.cable_link_id(); }
			catch (SQLException e) { }
			if(It_cable_link_id == null) It_cable_link_id = "";
			try { It_source_port_id = lIt.source_port_id(); }
			catch (SQLException e) { }
			if(It_source_port_id == null) It_source_port_id = "";
			try { It_target_port_id = lIt.target_port_id(); }
			catch (SQLException e) { }
			if(It_target_port_id == null) It_target_port_id = "";
			try { It_physical_length = lIt.physical_length(); }
			catch (SQLException e) { }
			if(It_physical_length == null) It_physical_length = "";
			try { It_optical_length = lIt.optical_length(); }
			catch (SQLException e) { }
			if(It_optical_length == null) It_optical_length = "";

			lIt.close();

			vector2 = loadCableThreads(conn, It_id);
			cable_threads = new SchemeCableThread_Transferable[vector2.size()];
			vector2.copyInto(cable_threads);

			vector2 = MapdbInterfaceLoad.loadAttributes(conn, "SCHEMECABLEATTRIBUTES", "SCHEME_CABLE_ID", It_id);
			attributes = new ElementAttribute_Transferable[vector2.size()];
			vector2.copyInto(attributes);

			lt_t = new SchemeCableLink_Transferable(
				It_id,
				It_name,
				It_source_port_id,
				It_target_port_id,
				It_cable_link_type_id,
				It_cable_link_id,
				It_physical_length,
				It_optical_length,
				cable_threads,
				attributes);

			return lt_t;
		}
		catch (SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			} catch (Exception exe) {}
			System.out.println("error loading cable: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				lIt.close();
			} catch (Exception exe) {}
		}
		
	}

	private static void loadElement(final Connection conn, String element_id, Vector elements) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_equipment_id = "";
		String It_proto_element_id = "";
		String It_scheme_id = "";
		String It_description = "";
		boolean It_is_scheme = false;
		String It_scheme_cell_id = "";
		String It_ugo_cell_id = "";

		byte[] It_img;
		byte[] It_img2;

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		SchemeDevice_Transferable[] devices;
		SchemeLink_Transferable[] links;
		String[] pe_ids;

		SchemeElement_Transferable e_t;
		SchemeElementIterator eIt = null;
		Vector vector2;

		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		ELIdIterator pidIt = null;

		try
		{
			#sql [connCtx] eIt = { select
					ID,
					NAME,
					EQUIPMENT_ID,
					SCHEME_ID,
					IS_SCHEME,
					DESCRIPTION,
					SCHEME_CELL_ID,
					UGO_CELL_ID,
					PROTO_ELEMENT_ID
				from AMFICOM.SCHEMEELEMENTS
				where ID = :element_id
			};

			eIt.next();

			try { It_id = eIt.id(); }
			catch (SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = eIt.name(); }
			catch (SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_equipment_id = eIt.equipment_id(); }
			catch (SQLException e) { }
			if(It_equipment_id == null) It_equipment_id = "";
			try { It_description = eIt.description(); }
			catch (SQLException e) { }
			if(It_description == null) It_description = "";
			try { It_scheme_cell_id = eIt.scheme_cell_id(); }
			catch (SQLException e) { }
			if(It_scheme_cell_id == null) It_scheme_cell_id = "";
			try { It_ugo_cell_id = eIt.ugo_cell_id(); }
			catch (SQLException e) { }
			if(It_ugo_cell_id == null) It_ugo_cell_id = "";
			try { It_proto_element_id = eIt.proto_element_id(); }
			catch (SQLException e) { }
			if(It_proto_element_id == null) It_proto_element_id = "";
			try { It_scheme_id = eIt.scheme_id(); }
			catch (SQLException e) { }
			if(It_scheme_id == null) It_scheme_id = "";
			try { It_is_scheme = (eIt.is_scheme() == 1) ? true : false; }
			catch (SQLException e) { }

			eIt.close();

			vector2 = new Vector();
			try
			{
				#sql [connCtx] didIt = { select SCHEME_DEVICE_ID
						from AMFICOM.SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :It_id
				};
				while (didIt.next())
				{
					vector2.add(SchemedbInterfaceProtoLoad.loadSchemeDevice(conn, didIt.scheme_device_id()));
				}
				didIt.close();
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			devices = new SchemeDevice_Transferable[vector2.size()];
			vector2.copyInto(devices);

			vector2 = new Vector();
			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from AMFICOM.SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :It_id
				};
				while (lidIt.next())
				{
					vector2.add(SchemedbInterfaceProtoLoad.loadSchemeLink(conn, lidIt.scheme_link_id()));
				}
				lidIt.close();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			links = new SchemeLink_Transferable[vector2.size()];
			vector2.copyInto(links);

			vector2 = new Vector();
			try
			{
				#sql [connCtx] pidIt = { select SCHEME_EL_ID
						from AMFICOM.SCHEMEELEMENTELEMENTS
						where SCHEME_ELEMENT_ID = :It_id
				};
				while (pidIt.next())
				{
					vector2.add(pidIt.scheme_el_id());
					loadElement(conn, pidIt.scheme_el_id(), elements);
				}
				pidIt.close();
			}
			catch (Exception e)
			{
				pidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			pe_ids = new String[vector2.size()];
			vector2.copyInto(pe_ids);

			try
			{
				ImageResource_Transferable im_r = ResourcedbInterface.getImage(conn, It_scheme_cell_id);
				if(im_r != null)
					It_img = im_r.image;
				else
					It_img = new byte[0];
			}
			catch (Exception e)
			{
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
				It_img = new byte[0];
			}

			try
			{
				ImageResource_Transferable im_r = ResourcedbInterface.getImage(conn, It_ugo_cell_id);
				if(im_r != null)
					It_img2 = im_r.image;
				else
					It_img2 = new byte[0];
			}
			catch (Exception e)
			{
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
				It_img2 = new byte[0];
			}

			vector2 = MapdbInterfaceLoad.loadAttributes(conn, "SCHEMEELEMENTATTRIBUTES", "SCHEME_ELEMENT_ID", It_id);
			attributes = new ElementAttribute_Transferable[vector2.size()];
			vector2.copyInto(attributes);

			e_t = new SchemeElement_Transferable(
				It_id,
				It_name,
				It_proto_element_id,
				It_equipment_id,
				devices,
				links,
				pe_ids,
				It_scheme_id,
				It_is_scheme,
				It_description,
				It_img2,
				It_img,
				attributes);
			elements.add(e_t);
		}
		catch (SQLException e)
		{
			if(eIt != null) try {
			eIt.close();
			} catch (Exception exe) {}
			System.out.println("error loading element: " + e.getMessage());
			e.printStackTrace();
			return;
		}
		finally
		{
			try {
				eIt.close();
			} catch (Exception exe) {}
		}
		
	}

	private static Scheme_Transferable loadScheme(final Connection conn, String domain_id, String scheme_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_scheme_type = "";
		String It_description = "";
		String It_symbol_id = "";
		String It_label = "";
		String It_ugo_cell_id = "";
		String It_scheme_cell_id = "";
		long It_created = 0;
		long It_modified = 0;
		String It_created_by = "";
		String It_modified_by = "";
		String It_domain_id = "";
		String It_owner_id = "";

		byte[] It_img;
		byte[] It_img2;

		int It_width = 0;
		int It_height = 0;
		byte[] It_clonez;

		String[] element_ids;
		SchemeElement_Transferable[] elements;
		SchemeLink_Transferable[] links;
		SchemeCableLink_Transferable[] cablelinks;
		SchemePath_Transferable[] paths;

		Scheme_Transferable s_t;
		SchemeIterator sIt = null;
		Vector vector2;
		Vector vector3;

		ElementIdIterator eidIt = null;
		LinkIdIterator lidIt = null;
		CableLinkIdIterator clidIt = null;
		PathIdIterator pidIt = null;

		try
		{
			#sql [connCtx] sIt =
			{
				select ID, NAME, SCHEME_TYPE, DESCRIPTION, SYMBOL_ID, LABEL, UGO_CELL_ID, SCHEME_CELL_ID, CREATED, MODIFIED, CREATED_BY, MODIFIED_BY, DOMAIN_ID, OWNER_ID, WIDTH, HEIGHT, CLONEZ from AMFICOM.SCHEMES where ID = :scheme_id
			};

			sIt.next();

			try {
				It_id = sIt.id();
			} catch (SQLException sqle) {
			}
			if(It_id == null) It_id = "";
			try { It_name = sIt.name(); }
			catch (SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_scheme_type = sIt.scheme_type(); }
			catch (SQLException e) { }
			if(It_scheme_type == null) It_scheme_type = "";
			try { It_description = sIt.description(); }
			catch (SQLException e) { }
			if(It_description == null) It_description = "";
			try { It_symbol_id = sIt.symbol_id(); }
			catch (SQLException e) { }
			if(It_symbol_id == null) It_symbol_id = "";
			try { It_label = sIt.label(); }
			catch (SQLException e) { }
			if(It_label == null) It_label = "";
			try { It_ugo_cell_id = sIt.ugo_cell_id(); }
			catch (SQLException e) { }
			if(It_ugo_cell_id == null) It_ugo_cell_id = "";
			try { It_scheme_cell_id = sIt.scheme_cell_id(); }
			catch (SQLException e) { }
			if(It_scheme_cell_id == null) It_scheme_cell_id = "";
			try { It_created = sIt.created().getTime(); }
			catch (SQLException e) { }
			try { It_modified = sIt.modified().getTime(); }
			catch (SQLException e) { }
			try { It_created_by = sIt.created_by(); }
			catch (SQLException e) { }
			if(It_created_by == null) It_created_by = "";
			try { It_modified_by = sIt.modified_by(); }
			catch (SQLException e) { }
			if(It_modified_by == null) It_modified_by = "";
			try { It_owner_id = sIt.owner_id(); }
			catch (SQLException e) { }
			if(It_owner_id == null) It_owner_id = "";
			try { It_domain_id = sIt.domain_id(); }
			catch (SQLException e) { }
			if(It_domain_id == null) It_domain_id = "";
			try { It_width = sIt.width(); }
			catch (SQLException e) { }
			try { It_height = sIt.height(); }
			catch (SQLException e) { }
			try {
				It_clonez = JdbcBlobManager.getData(sIt.clonez());
			} catch (SQLException sqle) {
				It_clonez = new byte[0];
			}

			sIt.close();

			vector2 = new Vector();
			vector3 = new Vector();
			try
			{
				#sql [connCtx] eidIt = { select SCHEME_ELEMENT_ID
						from AMFICOM.ELEMENTSONSCHEME
						where SCHEME_ID = :It_id
				};
				while (eidIt.next())
				{
					vector3.add(eidIt.scheme_element_id());
					loadElement(conn, eidIt.scheme_element_id(), vector2);
				}
				eidIt.close();
			}
			catch (Exception e)
			{
				eidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			elements = new SchemeElement_Transferable[vector2.size()];
			vector2.copyInto(elements);
			element_ids = new String[vector3.size()];
			vector3.copyInto(element_ids);

			vector2 = new Vector();
			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from AMFICOM.LINKSONSCHEME
						where SCHEME_ID = :It_id
				};
				while (lidIt.next())
				{
					vector2.add(SchemedbInterfaceProtoLoad.loadSchemeLink(conn, lidIt.scheme_link_id()));
				}
				lidIt.close();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			links = new SchemeLink_Transferable[vector2.size()];
			vector2.copyInto(links);

			vector2 = new Vector();
			try
			{
				#sql [connCtx] clidIt = { select SCHEME_CABLE_LINK_ID
						from AMFICOM.CABLELINKSONSCHEME
						where SCHEME_ID = :It_id
				};
				while (clidIt.next())
				{
					vector2.add(loadSchemeCableLink(conn, clidIt.scheme_cable_link_id()));
				}
				clidIt.close();
			}
			catch (Exception e)
			{
				clidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			cablelinks = new SchemeCableLink_Transferable[vector2.size()];
			vector2.copyInto(cablelinks);

			vector2 = new Vector();
			try
			{
				#sql [connCtx] pidIt = { select SCHEME_PATH_ID
						from AMFICOM.PATHSONSCHEME
						where SCHEME_ID = :It_id
				};
				while (pidIt.next())
					vector2.add(loadSchemePath(conn, pidIt.scheme_path_id()));
				pidIt.close();
			}
			catch (Exception e)
			{
				pidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			paths = new SchemePath_Transferable[vector2.size()];
			vector2.copyInto(paths);

			try
			{
				ImageResource_Transferable im_r = ResourcedbInterface.getImage(conn, It_ugo_cell_id);
				if(im_r != null)
					It_img2 = im_r.image;
				else
					It_img2 = new byte[0];
			}
			catch (Exception e)
			{
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
				It_img2 = new byte[0];
			}

			try
			{
				ImageResource_Transferable im_r = ResourcedbInterface.getImage(conn, It_scheme_cell_id);
				if(im_r != null)
					It_img = im_r.image;
				else
					It_img = new byte[0];
			}
			catch (Exception e)
			{
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
				It_img = new byte[0];
			}

			s_t = new Scheme_Transferable(
				It_id,
				It_name,
				It_scheme_type,
				It_created,
				It_modified,
				It_created_by,
				It_modified_by,
				It_owner_id,
				It_domain_id,
				It_description,
				elements,
				links,
				cablelinks,
				paths,
				element_ids,
				It_symbol_id,
				It_label,
				It_img2,
				It_img,
			It_width,
				It_height,
				It_clonez);

			return s_t;
		}
		catch (SQLException e)
		{
			if (sIt != null)
				try {
					sIt.close();
				} catch (Exception exe) {
				}
			System.out.println("error loading proto element: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
	}

	#sql public static iterator IdIterator(
		String id);

	#sql public static iterator ElementIdIterator(
		String scheme_element_id);

	#sql public static iterator DeviceIdIterator(
		String scheme_device_id);

	#sql public static iterator LinkIdIterator(
		String scheme_link_id);

	#sql public static iterator CableLinkIdIterator(
		String scheme_cable_link_id);

	#sql public static iterator PathIdIterator(
		String scheme_path_id);

	#sql public static iterator ELIdIterator(
		String scheme_el_id);

	#sql public static iterator CableThreadIdIterator(
		String scheme_cable_thread_id);

	#sql public static iterator PathLinkIterator(
		int n,
		int is_cable,
		String link_id,
		String thread_id);

	#sql public static iterator SchemePathIterator(
		String id,
		String name,
		String path_type_id,
		String path_id,
		String start_device_id,
		String end_device_id);

	#sql public static iterator SchemeCableLinkIterator(
		String id,
		String name,
		String cable_link_type_id,
		String cable_link_id,
		String source_port_id,
		String target_port_id,
		String physical_length,
		String optical_length);

	#sql public static iterator SchemeElementIterator(
		String id,
		String name,
		String equipment_id,
		String scheme_id,
		int is_scheme,
		String description,
		String scheme_cell_id,
		String ugo_cell_id,
		String proto_element_id);

	#sql public static iterator SchemeIterator(
		String id,
		String name,
		String scheme_type,
		String description,
		String symbol_id,
		String label,
		String ugo_cell_id,
		String scheme_cell_id,
		Timestamp created,
		Timestamp modified,
		String created_by,
		String modified_by,
		String domain_id,
		String owner_id,
		int width,
		int height,
		Blob clonez);
}
