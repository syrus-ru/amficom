package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import sqlj.runtime.profile.*;
import java.sql.*;
import oracle.sql.*;
import oracle.jdbc.driver.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Survey.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.General.*;

import com.syrus.AMFICOM.server.*;

public class TestDatadbInterfaceLoad
{
	protected TestDatadbInterfaceLoad()
	{
	}

	static public Vector loadTestTypeParameters(
			String argTableName,
			String argFieldName,
			String testtype_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";

		byte val[] = new byte[0];

		Vector vector2 = new Vector();
		TestTypeArgumentIterator paramIt = null;
/*
		String qry = "select ID, NAME, CODENAME, PARAMETER_TYPE_ID " +
							"from AMFICOM." + argTableName +
								" where " + argFieldName +
								" = '" + testtype_id + "'";

//		System.out.println("Executing " + qry);

		try
		{
			#sql
			{
				BEGIN
					open :OUT paramIt for :qry;
				END;
			};

			while (paramIt.next())
			{
				try { It_id = paramIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = paramIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = paramIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_parameter_type_id = paramIt.parameter_type_id(); }
				catch(SQLException e) { }
				if(It_parameter_type_id == null) It_parameter_type_id = "";

				try
				{
					#sql {
						select NAME, TYPE_ID into
							:It_parameter_type_name, :It_data_type
						from AMFICOM.PARAMETERTYPES
						where ID = :It_parameter_type_id };

					Parameter_Transferable param =
						new Parameter_Transferable(
								It_id,
								It_name,
								It_codename,
								It_parameter_type_name,
								It_parameter_type_id,
								It_data_type,
								It_action_id,
								val);
						vector2.addElement(param);
				}
				catch(SQLException e)
				{
					System.out.println("could not get parameter " + It_id + ": " + e.getMessage());
				}
			}// while(paramIt)
			paramIt.close();
		}
		catch(SQLException e)
		{
			System.out.println("could not get parameters for testtype " + testtype_id + ": " + e.getMessage());
			e.printStackTrace();
		}
*/
		return vector2;
	}

	static public Vector loadTestTypeArguments(
			String argTableName,
			String argFieldName,
			String argValueName,
			String testtype_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		BLOB It_value;
		OctetSequenceHolder osh;

		Vector vector2 = new Vector();
		TestTypeArgumentIterator argIt = null;
/*
		String qry = "select ID, NAME, CODENAME, PARAMETER_TYPE_ID " +
							"from AMFICOM." + argTableName +
								" where " + argFieldName +
								" = '" + testtype_id + "'";

//		System.out.println("Executing " + qry);

		try
		{
			#sql
			{
				BEGIN
					open :OUT argIt for :qry;
				END;
			};

			while (argIt.next())
			{
				try { It_id = argIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = argIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = argIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_parameter_type_id = argIt.parameter_type_id(); }
				catch(SQLException e) { }
				if(It_parameter_type_id == null) It_parameter_type_id = "";

				osh = new OctetSequenceHolder();
				osh.value = new byte[0];
				try
				{
					ConnectionContext connCtx = DefaultContext.getDefaultContext();

					Statement statement = null;
					try
					{
						statement = connCtx.getConnection().createStatement();
					}
					catch(SQLException sqlexception)
					{
//						Log.systemLog.logDebugMessage("CharacterizationDatabase: Error (3)", 200);
//						Log.systemLog.logErrorException(sqlexception);
						System.out.println("Лажа" + ": " + sqlexception.getMessage());
					}

					String qry2 = "select " + argValueName +
							" from AMFICOM." + argTableName +
								" where " + argFieldName +
								" = '" + testtype_id + "'";

//					System.out.println("Executing " + qry2);

					OracleResultSet resultset = null;
					try
					{
						resultset = (OracleResultSet )statement.executeQuery(qry2);
						if(resultset.next())
						{
							It_value = resultset.getBLOB(argValueName);
							if(ResourcedbInterface.GetBlob(It_value, osh) == 0)
							{
//								System.out.println("blob loaded ok!");
							}
						}
						else
						{
							System.out.println("Characterization does not exist");
							return vector2;
						}
					}
					catch(SQLException sqlexception1)
					{
						System.out.println("CharacterizationDatabase: Error (4)" + ": " + sqlexception1.getMessage());
					}
					finally
					{
						try
						{
							if(resultset != null)
								resultset.close();
							resultset = null;
							if(statement != null)
								statement.close();
							statement = null;
						}
						catch(SQLException _ex) { }
					}

					#sql {
						select NAME, TYPE_ID into
							:It_parameter_type_name, :It_data_type
						from AMFICOM.PARAMETERTYPES
						where ID = :It_parameter_type_id };

					Parameter_Transferable arg =
						new Parameter_Transferable(
								It_id,
								It_name,
								It_codename,
								It_parameter_type_name,
								It_parameter_type_id,
								It_data_type,
								It_action_id,
								osh.value);
						vector2.addElement(arg);
				}
				catch(SQLException e)
				{
					System.out.println("could not get argument " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				catch(Exception e)
				{
					System.out.println("could not get argument " + It_id + ": " + e.getMessage());
				}
			}// while(argIt)
			argIt.close();
		}
		catch(SQLException e)
		{
			System.out.println("could not get arguments for testtype " + testtype_id + ": " + e.getMessage());
			e.printStackTrace();
		}
*/
		return vector2;
	}

	static public int loadTestTypes(
			TestTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		TestType_Transferable tt_t;
		TestType_Transferable[] tt_ts;
		TestTypeIterator ttIt = null;
		Vector vector2;

		String[] analysis_type_ids;
		String[] evaluation_type_ids;

		AnalysisTypeIdIterator atIt = null;
		EvaluationTypeIdIterator etIt = null;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];

		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.TESTTYPES
			};

			while (ttIt.next())
			{
				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadActionArguments(
						"TESTTYPEARGUMENTS",
						"TEST_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadActionParameters(
						"TESTTYPEARGUMENTS",
						"TEST_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = new Vector();
				try
				{
					#sql atIt = { select ANALYSIS_TYPE_ID
						from AMFICOM.ANALYSISTESTTYPELINKS
							where TEST_TYPE_ID = :It_id };
					while (atIt.next())
					{
						try { vector2.addElement(atIt.analysis_type_id()); }
						catch(SQLNullException e) { }
					}
					atIt.close();
				}
				catch(SQLException e)
				{
					System.out.println("could not get analysis types for test type " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				analysis_type_ids = new String[vector2.size()];
				vector2.copyInto(analysis_type_ids);

				vector2 = new Vector();
				try
				{
					#sql etIt = { select EVALUATION_TYPE_ID
						from AMFICOM.EVALUATIONTESTTYPELINKS
							where TEST_TYPE_ID = :It_id };
					while (etIt.next())
					{
						try { vector2.addElement(etIt.evaluation_type_id()); }
						catch(SQLNullException e) { }
					}
					etIt.close();
				}
				catch(SQLException e)
				{
					System.out.println("could not get evaluation types for test type " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				evaluation_type_ids = new String[vector2.size()];
				vector2.copyInto(evaluation_type_ids);

				tt_t = new TestType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeargs,
					testtypeparams,
					analysis_type_ids,
					evaluation_type_ids);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new TestType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading test types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadTestTypes(
			String[] ids,
			TestTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		TestType_Transferable tt_t;
		TestType_Transferable[] tt_ts;
		TestTypeIterator ttIt = null;
		Vector vector2;

		String[] analysis_type_ids;
		String[] evaluation_type_ids;

		AnalysisTypeIdIterator atIt = null;
		EvaluationTypeIdIterator etIt = null;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.TESTTYPES
			};

			while (ttIt.next())
			{
				if(! loadvec.contains(ttIt.id()))
					continue;

				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadTestTypeArguments(
						"TESTTYPEARGUMENTS",
						"TEST_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadTestTypeParameters(
						"TESTTYPEARGUMENTS",
						"TEST_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);


				vector2 = new Vector();
				try
				{
					#sql atIt = { select ANALYSIS_TYPE_ID
						from AMFICOM.ANALYSISTESTTYPELINKS
							where TEST_TYPE_ID = :It_id };
					while (atIt.next())
					{
						try { vector2.addElement(atIt.analysis_type_id()); }
						catch(SQLNullException e) { }
					}
					atIt.close();
				}
				catch(SQLException e)
				{
					System.out.println("could not get analysis types for test type " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				analysis_type_ids = new String[vector2.size()];
				vector2.copyInto(analysis_type_ids);

				vector2 = new Vector();
				try
				{
					#sql etIt = { select EVALUATION_TYPE_ID
						from AMFICOM.EVALUATIONTESTTYPELINKS
							where TEST_TYPE_ID = :It_id };
					while (etIt.next())
					{
						try { vector2.addElement(etIt.evaluation_type_id()); }
						catch(SQLNullException e) { }
					}
					etIt.close();
				}
				catch(SQLException e)
				{
					System.out.println("could not get evaluation types for test type " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				evaluation_type_ids = new String[vector2.size()];
				vector2.copyInto(evaluation_type_ids);

				tt_t = new TestType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeargs,
					testtypeparams,
					analysis_type_ids,
					evaluation_type_ids);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new TestType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading test types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadAnalysisTypes(
			AnalysisTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		AnalysisType_Transferable tt_t;
		AnalysisType_Transferable[] tt_ts;
		AnalysisTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypecriterias[] = new ActionParameterType_Transferable[0];

		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.ANALYSISTYPES
			};

			while (ttIt.next())
			{
				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadAnalysisTypeArguments(
						"ANALYSISTYPEARGUMENTS",
						"ANALYSIS_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadAnalysisTypeParameters(
						"ANALYSISTYPEARGUMENTS",
						"ANALYSIS_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadAnalysisTypeCriterias(
						"ANALYSISTYPECRITERIAS",
						"ANALYSIS_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);


				tt_t = new AnalysisType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeparams,
					testtypeargs,
					testtypecriterias);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new AnalysisType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadAnalysisTypes(
			String[] ids,
			AnalysisTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		AnalysisType_Transferable tt_t;
		AnalysisType_Transferable[] tt_ts;
		AnalysisTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypecriterias[] = new ActionParameterType_Transferable[0];

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.ANALYSISTYPES
			};

			while (ttIt.next())
			{
				if(! loadvec.contains(ttIt.id()))
					continue;

				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadAnalysisTypeArguments(
						"ANALYSISTYPEARGUMENTS",
						"ANALYSIS_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadAnalysisTypeParameters(
						"ANALYSISTYPEARGUMENTS",
						"ANALYSIS_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadAnalysisTypeCriterias(
						"ANALYSISTYPECRITERIAS",
						"ANALYSIS_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);

				tt_t = new AnalysisType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeparams,
					testtypeargs,
					testtypecriterias);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new AnalysisType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadEvaluationTypes(
			EvaluationTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_etalon_type_id = "";
		String It_etalon_type_name = "";
		long It_modified = 0;

		Vector vector = new Vector();

		EvaluationType_Transferable tt_t;
		EvaluationType_Transferable[] tt_ts;
		EvaluationTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypethresholds[] = new ActionParameterType_Transferable[0];

		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						ETALON_TYPE_ID,
						MODIFIED
					from AMFICOM.EVALUATIONTYPES
			};

			while (ttIt.next())
			{
				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadEvaluationTypeArguments(
						"EVALUATIONTYPEARGUMENTS",
						"EVALUATION_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadEvaluationTypeParameters(
						"EVALUATIONTYPEARGUMENTS",
						"EVALUATION_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadEvaluationTypeThresholds(
						"EVALUATIONTYPECRITERIAS",
						"EVALUATION_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);

				try
				{
					#sql {
						select NAME into :It_etalon_type_name
						from AMFICOM.ETALONTYPES
						where ID = :It_etalon_type_id };
				}
				catch(Exception e)
				{
					It_etalon_type_name = "";
				}
				if(It_etalon_type_name == null)
					It_etalon_type_name = "";

				tt_t = new EvaluationType_Transferable(
					It_id,
					It_name,
					It_description,
					It_etalon_type_id,
					It_etalon_type_name,
					It_modified,
					testtypeparams,
					testtypeargs,
					testtypethresholds);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new EvaluationType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadEvaluationTypes(
			String[] ids,
			EvaluationTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_etalon_type_id = "";
		String It_etalon_type_name = "";
		long It_modified = 0;

		Vector vector = new Vector();

		EvaluationType_Transferable tt_t;
		EvaluationType_Transferable[] tt_ts;
		EvaluationTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypethresholds[] = new ActionParameterType_Transferable[0];

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						ETALON_TYPE_ID,
						MODIFIED
					from AMFICOM.EVALUATIONTYPES
			};

			while (ttIt.next())
			{
				if(! loadvec.contains(ttIt.id()))
					continue;

				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadEvaluationTypeArguments(
						"EVALUATIONTYPEARGUMENTS",
						"EVALUATION_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadEvaluationTypeParameters(
						"EVALUATIONTYPEARGUMENTS",
						"EVALUATION_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadEvaluationTypeThresholds(
						"EVALUATIONTYPECRITERIAS",
						"EVALUATION_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);

				try
				{
					#sql {
						select NAME into :It_etalon_type_name
						from AMFICOM.ETALONTYPES
						where ID = :It_etalon_type_id };
				}
				catch(Exception ex)
				{
					It_etalon_type_name = "";
				}

				tt_t = new EvaluationType_Transferable(
					It_id,
					It_name,
					It_description,
					It_etalon_type_id,
					It_etalon_type_name,
					It_modified,
					testtypeparams,
					testtypeargs,
					testtypethresholds);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new EvaluationType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadModelingTypes(
			ModelingTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		ModelingType_Transferable tt_t;
		ModelingType_Transferable[] tt_ts;
		ModelingTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];

		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.MODELINGTYPES
			};

			while (ttIt.next())
			{
				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadModelingTypeArguments(
						"MODELINGTYPEARGUMENTS",
						"MODELING_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadModelingTypeParameters(
						"MODELINGTYPEARGUMENTS",
						"MODELING_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadModelingTypeCriterias(
						"MODELINGTYPECRITERIAS",
						"MODELING_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);

				tt_t = new ModelingType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeparams,
					testtypeargs);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new ModelingType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadModelingTypes(
			String[] ids,
			ModelingTypeSeq_TransferableHolder testtypeseq)
	{
/*
		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Vector vector = new Vector();

		ModelingType_Transferable tt_t;
		ModelingType_Transferable[] tt_ts;
		ModelingTypeIterator ttIt = null;
		Vector vector2;

		ActionParameterType_Transferable testtypeargs[] = new ActionParameterType_Transferable[0];
		ActionParameterType_Transferable testtypeparams[] = new ActionParameterType_Transferable[0];

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql ttIt = {
				select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.MODELINGTYPES
			};

			while (ttIt.next())
			{
				if(! loadvec.contains(ttIt.id()))
					continue;

				try { It_id = ttIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ttIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ttIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ttIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadModelingTypeArguments(
						"MODELINGTYPEARGUMENTS",
						"MODELING_TYPE_ID",
						"DEFAULT_VALUE",
						It_id);
				testtypeargs = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeargs);

				vector2 = loadModelingTypeParameters(
						"MODELINGTYPEARGUMENTS",
						"MODELING_TYPE_ID",
						It_id);
				testtypeparams = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypeparams);

				vector2 = loadModelingTypeCriterias(
						"MODELINGTYPECRITERIAS",
						"MODELING_TYPE_ID",
						It_id);
				testtypecriterias = new ActionTypeParameter_Transferable[vector2.size()];
				vector2.copyInto(testtypecriterias);

				tt_t = new ModelingType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified,
					testtypeparams,
					testtypeargs);

				vector.add(tt_t);
			}// while(ttIt)
			ttIt.close();
			tt_ts = new ModelingType_Transferable[vector.size()];
			vector.copyInto(tt_ts);
			testtypeseq.value = tt_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading analysis types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	static public int getAlarmedTests(
			String domain_id,
			ResourceDescriptorSeq_TransferableHolder testids)
//			wstringSeqHolder testids)
	{
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator AnalysisTypeIdIterator( String analysis_type_id );
	#sql public static iterator EvaluationTypeIdIterator( String evaluation_type_id );

	#sql public static iterator ResultParameterIterator(
		String id,
		String parameter_type_id,
		BLOB value);

	#sql public static iterator TestTypeArgumentIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id);

	#sql public static iterator TestTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);

	#sql public static iterator AnalysisTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);

	#sql public static iterator EvaluationTypeIterator(
		String id,
		String name,
		String description,
		String etalon_type_id,
		Timestamp modified);

	#sql public static iterator ModelingTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);

}

