package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.CORBA.ISM.*;
import com.syrus.AMFICOM.CORBA.ISMDirectory.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class  ISMdbInterfaceLoad
{
	protected ISMdbInterfaceLoad()
	{
	}

	static public Vector loadAccessPortTestTypes(String aport_id)
	{
		TestTypeIdIterator idIt = null;
		Vector vector = new Vector();
		try
		{
			#sql idIt = { select TEST_TYPE_ID
				from AMFICOM.ACCESSPORTTYPETESTTYPES
					where ACCESS_PORT_TYPE_ID = :aport_id };

			while (idIt.next())
			{
				try { vector.addElement(idIt.test_type_id()); }
				catch(SQLNullException e) { }
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("could not get test types for aport type " + aport_id + ":" + e.getMessage());
			e.printStackTrace();
		}
		return vector;
	}

	static public Vector loadKISAccessPorts(String element_id)
	{
		IdIterator idIt = null;
		Vector vector = new Vector();
		try
		{
			#sql idIt = { select ID
				from AMFICOM.ACCESSPORTS
					where KIS_ID = :element_id };

			while (idIt.next())
			{
				try { vector.addElement(idIt.id()); }
				catch(SQLNullException e) { }
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("could not get access ports for kis " + element_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		return vector;
	}

	static public Object loadAccessPort(String aport_id)
	{
		String It_id = "";
		String It_name = "";
		String It_type_id = "";
		String It_local_id = "";
		String It_kis_id = "";
		String It_port_id = "";
		String It_domain_id = "";

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		AccessPort_Transferable apt_t;
		AccessPortIterator ptIt = null;
		Vector vector2;

		try
		{
			#sql ptIt = { select
						ID,
						NAME,
						TYPE_ID,
						LOCAL_ID,
						KIS_ID,
						PORT_ID,
						DOMAIN_ID
					from AMFICOM.ACCESSPORTS
					where ID = :aport_id
			};

			ptIt.next();

			try { It_id = ptIt.id(); }
			catch(SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = ptIt.name(); }
			catch(SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_type_id = ptIt.type_id(); }
			catch(SQLException e) { }
			if(It_type_id == null) It_type_id = "";
			try { It_local_id = ptIt.local_id(); }
			catch(SQLException e) { }
			if(It_local_id == null) It_local_id = "";
			try { It_kis_id = ptIt.kis_id(); }
			catch(SQLException e) { }
			if(It_kis_id == null) It_kis_id = "";
			try { It_port_id = ptIt.port_id(); }
			catch(SQLException e) { }
			if(It_port_id == null) It_port_id = "";
			try { It_domain_id = ptIt.domain_id(); }
			catch(SQLException e) { }
			if(It_domain_id == null) It_domain_id = "";

			ptIt.close();

			vector2 = NetdbInterfaceLoad.loadCharacteristics(
					"ACCESSPORTCHARACTERISTICS",
					"ACCESS_PORT_ID",
					It_id);
			characteristics = new Characteristic_Transferable[vector2.size()];
			vector2.copyInto(characteristics);

			apt_t = new AccessPort_Transferable(
				It_id,
				It_name,
				It_type_id,
				It_port_id,
				It_kis_id,
				It_local_id,
				It_domain_id,
				characteristics);

			return apt_t;
		}
		catch(Exception e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading Access port: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
	}

	static public int loadAccessPorts(
			AccessPortSeq_TransferableHolder aportseq)
	{
		String It_id = "";
		String It_name = "";
		String It_type_id = "";
		String It_local_id = "";
		String It_kis_id = "";
		String It_port_id = "";
		String It_domain_id = "";

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		AccessPort_Transferable apt_t;
		AccessPort_Transferable[] apt_ts;
		AccessPortIterator ptIt = null;
		Vector vector2;

		try
		{
			#sql ptIt = { select
						ID,
						NAME,
						TYPE_ID,
						LOCAL_ID,
						KIS_ID,
						PORT_ID,
						DOMAIN_ID
					from AMFICOM.ACCESSPORTS
			};

			while (ptIt.next())
			{
				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_type_id = ptIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_local_id = ptIt.local_id(); }
				catch(SQLException e) { }
				if(It_local_id == null) It_local_id = "";
				try { It_kis_id = ptIt.kis_id(); }
				catch(SQLException e) { }
				if(It_kis_id == null) It_kis_id = "";
				try { It_port_id = ptIt.port_id(); }
				catch(SQLException e) { }
				if(It_port_id == null) It_port_id = "";
				try { It_domain_id = ptIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"ACCESSPORTCHARACTERISTICS",
						"ACCESS_PORT_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				apt_t = new AccessPort_Transferable(
					It_id,
					It_name,
					It_type_id,
					It_port_id,
					It_kis_id,
					It_local_id,
					It_domain_id,
					characteristics);

				vector.add(apt_t);
			}// while(ptIt)
			ptIt.close();
			apt_ts = new AccessPort_Transferable[vector.size()];
			vector.copyInto(apt_ts);
			aportseq.value = apt_ts;

		}
		catch(Exception e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading Access ports: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadKISs(
			String domain_id,
			EquipmentSeq_TransferableHolder kiss,
			Vector port_vec,
			Vector cport_vec,
			Vector access_port_vec)
	{
		int k;

		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_type_id = "";
		String It_longitude = "";
		String It_latitude = "";

		String It_hw_serial = "";
		String It_sw_serial = "";
		String It_hw_version = "";
		String It_sw_version = "";
		String It_inventory_nr = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		String It_supplier = "";
		String It_supplier_code = "";

		String It_eq_class = "";
		String It_image_id = "";

		String It_agent_id = "";
		String It_domain_id = "";
		boolean It_is_kis = false;
		long It_modified = 0;

		Characteristic_Transferable characteristics[];
		String[] port_ids;
		String[] cport_ids;
		String[] access_port_ids;

		Vector vector = new Vector();

		Equipment_Transferable e_t;
		Equipment_Transferable[] e_ts;
		EquipmentIterator eIt = null;
		Vector vector2;

		try
		{
			#sql eIt = { select
						ID,
						NAME,
						DESCRIPTION,
						TYPE_ID,
						LONGITUDE,
						LATITUDE,
						HW_SERIAL,
						SW_SERIAL,
						HW_VERSION,
						SW_VERSION,
						INVENTORY_NR,
						MANUFACTURER,
						MANUFACTURER_CODE,
						SUPPLIER,
						SUPPLIER_CODE,
						EQ_CLASS,
						IMAGE_ID,
						AGENT_ID,
						DOMAIN_ID,
						IS_KIS,
						MODIFIED
					from AMFICOM.EQUIPMENTS
					where IS_KIS = 1
					and DOMAIN_ID = :domain_id
			};

			while (eIt.next())
			{
				try { It_id = eIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = eIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = eIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_type_id = eIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_longitude = eIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_latitude = eIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_hw_serial = eIt.hw_serial(); }
				catch(SQLException e) { }
				if(It_hw_serial == null) It_hw_serial = "";
				try { It_sw_serial = eIt.sw_serial(); }
				catch(SQLException e) { }
				if(It_sw_serial == null) It_sw_serial = "";
				try { It_hw_version = eIt.hw_version(); }
				catch(SQLException e) { }
				if(It_hw_version == null) It_hw_version = "";
				try { It_sw_version = eIt.sw_version(); }
				catch(SQLException e) { }
				if(It_sw_version == null) It_sw_version = "";
				try { It_inventory_nr = eIt.inventory_nr(); }
				catch(SQLException e) { }
				if(It_inventory_nr == null) It_inventory_nr = "";
				try { It_manufacturer = eIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = eIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_supplier = eIt.supplier(); }
				catch(SQLException e) { }
				if(It_supplier == null) It_supplier = "";
				try { It_supplier_code = eIt.supplier_code(); }
				catch(SQLException e) { }
				if(It_supplier_code == null) It_supplier_code = "";
				try { It_eq_class = eIt.eq_class(); }
				catch(SQLException e) { }
				if(It_eq_class == null) It_eq_class = "";
				try { It_image_id = eIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_agent_id = eIt.agent_id(); }
				catch(SQLException e) { }
				if(It_agent_id == null) It_agent_id = "";
				try { It_domain_id = eIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_is_kis = (eIt.is_kis() == 0)? false : true; }
				catch(SQLException e) { }
				try { It_modified = eIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"EQUIPMENTCHARACTERISTICS",
						"EQUIPMENT_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = NetdbInterfaceLoad.loadElementPorts(It_id);
				port_ids = new String[vector2.size()];
				vector2.copyInto(port_ids);
				for(k = 0; k < port_ids.length; k++)
					port_vec.add(NetdbInterfaceLoad.loadPort(port_ids[k]));

				vector2 = NetdbInterfaceLoad.loadElementCablePorts(It_id);
				cport_ids = new String[vector2.size()];
				vector2.copyInto(cport_ids);
				for(k = 0; k < cport_ids.length; k++)
					cport_vec.add(NetdbInterfaceLoad.loadCablePort(cport_ids[k]));

				vector2 = loadKISAccessPorts(It_id);
				access_port_ids = new String[vector2.size()];
				vector2.copyInto(access_port_ids);
				for(k = 0; k < access_port_ids.length; k++)
					access_port_vec.add(loadAccessPort(access_port_ids[k]));

				e_t = new Equipment_Transferable(
					It_id,
					It_name,
					It_description,
					It_type_id,
					It_longitude,
					It_latitude,

					It_hw_serial,
					It_sw_serial,
					It_hw_version,
					It_sw_version,
					It_inventory_nr,
					It_manufacturer,
					It_manufacturer_code,
					It_supplier,
					It_supplier_code,

					It_eq_class,
					It_image_id,

					It_agent_id,
					It_domain_id,
					It_is_kis,

					It_modified,

					port_ids,
					cport_ids,
					access_port_ids,
					characteristics);

				vector.add(e_t);
			}// while(ptIt)
			eIt.close();
			e_ts = new Equipment_Transferable[vector.size()];
			vector.copyInto(e_ts);
			kiss.value = e_ts;

		}
		catch(Exception e)
		{
			if(eIt != null) try {
			eIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading equipments: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}

		return Constants.ERROR_NO_ERROR;
	}

	static public int loadTransmissionPaths(
			String domain_id,
			TransmissionPathSeq_TransferableHolder pathseq)
	{
		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_kis_id = "";
		String It_local_address = "";

		String It_access_port_id = "";
		String It_me_id = "";
		String It_domain_id = "";

		long It_modified = 0;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		TransmissionPath_Transferable tp_t;
		TransmissionPath_Transferable[] tp_ts;
		TransmissionPathIterator tpIt = null;

		int It_pl_n = 0;
		boolean It_pl_is_cable = false;
		String It_pl_link_id = "";
		String It_pl_thread_id = "";
		TransmissionPathLinkIterator lidIt = null;
		TransmissionPathElement_Transferable[] links = new TransmissionPathElement_Transferable[0];
		TransmissionPathElement_Transferable pathlink;

		IdIterator idIt = null;
		Vector vector2;
		String[] link_ids = new String[0];

		try
		{
			#sql tpIt = { select
						ID,
						NAME,
						DESCRIPTION,
						KIS_ID,
						LOCAL_ADDRESS,
						MODIFIED,
						DOMAIN_ID
					from AMFICOM.TRANSMISSIONPATHS
					where DOMAIN_ID = :domain_id
			};

			while (tpIt.next())
			{
				try { It_id = tpIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = tpIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = tpIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_kis_id = tpIt.kis_id(); }
				catch(SQLException e) { }
				if(It_kis_id == null) It_kis_id = "";
				try { It_local_address = tpIt.local_address(); }
				catch(SQLException e) { }
				if(It_local_address == null) It_local_address = "";
				try { It_modified = tpIt.modified().getTime(); }
				catch(SQLException e) { }
				try { It_domain_id = tpIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				try
				{

					vector2 = new Vector();
					try
					{
						#sql lidIt = { select N, IS_CABLE, LINK_ID, THREAD_ID
								from AMFICOM.PATHLINKS
								where PATH_ID = :It_id
						};
						while(lidIt.next())
						{
							try { It_pl_n = lidIt.n(); }
							catch(SQLException e) { }
							try { It_pl_is_cable = (lidIt.is_cable() == 0)?false : true; }
							catch(SQLException e) { }
							try { It_pl_link_id = lidIt.link_id(); }
							catch(SQLException e) { }
							if(It_pl_link_id == null) It_pl_link_id = "";
							try { It_pl_thread_id = lidIt.thread_id(); }
							catch(SQLException e) { }
							if(It_pl_thread_id == null) It_pl_thread_id = "";

							pathlink = new TransmissionPathElement_Transferable(
									It_pl_n,
									It_pl_is_cable,
									It_pl_link_id,
									It_pl_thread_id);
							vector2.add(pathlink);
						}
						lidIt.close();
					}
					catch (Exception e)
					{
						lidIt.close();
						System.out.println("Oblazhalis' - " + e.getMessage());
						e.printStackTrace();
					}
					links = new TransmissionPathElement_Transferable[vector2.size()];
					vector2.copyInto(links);
/*
					vector2 = new Vector();
					#sql idIt = {
						select ID from AMFICOM.PATHLINKS where PATH_ID = :It_id };
					while(idIt.next())
					{
						try { vector2.add(tpIt.id()); }
						catch(SQLException e) { }
					}
					idIt.close();
					link_ids = new String[vector2.size()];
					vector2.copyInto(link_ids);
*/
					try
					{
						#sql { select ID, LOCAL_ADDRESS
							into :It_me_id, :It_local_address
							from AMFICOM.MONITOREDELEMENTS
							where PATH_ID = :It_id };
					}
					catch(Exception ee)
					{
						It_me_id = "";
						It_local_address = "";
					}
					if(It_me_id == null) It_me_id = "";
					if(It_local_address == null) It_local_address = "";

					try
					{
						#sql {select ACCESS_PORT_ID into :It_access_port_id
								from AMFICOM.MONITOREDELEMENTATTACHMENTS
								where MONITORED_ELEMENT_ID = :It_me_id };
					}
					catch(Exception ee)
					{
						It_access_port_id = "";
					}
					if(It_access_port_id == null) It_access_port_id = "";

					vector2 = NetdbInterfaceLoad.loadCharacteristics(
							"TRANSMISSIONPATHCHARS",
							"PATH_ID",
							It_id);
					characteristics = new Characteristic_Transferable[vector2.size()];
					vector2.copyInto(characteristics);

					System.out.println("return TP: id " +
						" " + It_id +
						" name " + It_name +
						" descr " + It_description +
						" kis " + It_kis_id +
						" ap " + It_access_port_id +
						" localaddress " + It_local_address +
						" me " + It_me_id);

					tp_t = new TransmissionPath_Transferable(
						It_id,
						It_name,
						It_description,
						It_kis_id,
						It_access_port_id,
						It_local_address,
						It_me_id,
						It_domain_id,
						It_modified,
						links,
						characteristics);

					vector.add(tp_t);
				}
				catch(Exception e)
				{
					System.out.println("Transmission path  " + It_id + " could not be loaded: " + e.getMessage());
					e.printStackTrace();
				}
			}// while(tpIt)
			tpIt.close();
			tp_ts = new TransmissionPath_Transferable[vector.size()];
			vector.copyInto(tp_ts);
			pathseq.value = tp_ts;
		}
		catch(Exception e)
		{
			if(tpIt != null) try {
			tpIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading Transmission paths: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int loadMonitoredElements(
			String domain_id,
			MonitoredElementSeq_TransferableHolder meseq)
	{
		String It_id = "";
		String It_element_id = "";
		String It_element_name = "";
		String It_element_type = "";
		String It_local_address = "";
		String It_access_port_id = "";
		String It_domain_id = "";
		long It_modified = 0;

		MonitoredElement_Transferable me_t;
		MonitoredElement_Transferable[] me_ts;
		MonitoredElementIterator meIt = null;

		Vector vector = new Vector();

		try
		{
			#sql meIt = { select
						ID,
						PATH_ID,
						EQUIPMENT_ID,
						ELEMENT_TYPE,
						LOCAL_ADDRESS,
						MODIFIED,
						DOMAIN_ID
					from AMFICOM.MONITOREDELEMENTS
					where DOMAIN_ID = :domain_id
			};

			while (meIt.next())
			{
				try { It_id = meIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_element_type = meIt.element_type(); }
				catch(SQLException e) { }
				if(It_element_type == null) It_element_type = "";
				try { It_modified = meIt.modified().getTime(); }
				catch(SQLException e) { }

				if(It_element_type.equals("path"))
				{
					try
					{
						It_element_id = meIt.path_id();
						#sql {
							select NAME into :It_element_name
							from AMFICOM.TRANSMISSIONPATHS
							where ID = :It_element_id
						};
						if(It_element_name == null)
							It_element_name = "";
					}
					catch(SQLException e) { }
				}
				else
				if(It_element_type.equals("equipment"))
				{
					try
					{
						It_element_id = meIt.equipment_id();
						#sql {
							select NAME into :It_element_name
							from AMFICOM.EQUIPMENTS
							where ID = :It_element_id
						};
						if(It_element_name == null)
							It_element_name = "";
					}
					catch(SQLException e) { }
				}
				if(It_element_id == null) It_element_id = "";

				try { It_local_address = meIt.local_address(); }
				catch(SQLException e) { }
				if(It_local_address == null) It_local_address = "";
				try { It_domain_id = meIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				try
				{
					#sql {select ACCESS_PORT_ID into :It_access_port_id
							from AMFICOM.MONITOREDELEMENTATTACHMENTS
							where MONITORED_ELEMENT_ID = :It_id };
				}
				catch(Exception ee)
				{
					It_access_port_id = "";
				}
				if(It_access_port_id == null) It_access_port_id = "";

				me_t = new MonitoredElement_Transferable(
						It_id,
						It_element_name,
						It_element_id,
						It_element_type,
						It_local_address,
						It_access_port_id,
						It_domain_id,
						It_modified);

				vector.add(me_t);
			}// while(meIt)
			meIt.close();
			me_ts = new MonitoredElement_Transferable[vector.size()];
			vector.copyInto(me_ts);
			meseq.value = me_ts;
		}
		catch(Exception e)
		{
			if(meIt != null) try {
			meIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading MonitoredElements: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator ( String id );
	#sql public static iterator TestTypeIdIterator ( String test_type_id );

	#sql public static iterator KISTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String manufacturer,
		String eq_class,
		boolean is_holder,
		String image_id);

	#sql public static iterator AccessPortIterator(
		String id,
		String name,
		String type_id,
		String local_id,
		String kis_id,
		String port_id,
		String domain_id);

	#sql public static iterator EquipmentIterator(
		String id,
		String name,
		String description,
		String type_id,
		String longitude,
		String latitude,
		String hw_serial,
		String sw_serial,
		String hw_version,
		String sw_version,
		String inventory_nr,
		String manufacturer,
		String manufacturer_code,
		String supplier,
		String supplier_code,
		String eq_class,
		String image_id,
		String agent_id,
		String domain_id,
		int is_kis,
		Timestamp modified);

	#sql public static iterator TransmissionPathLinkIterator(
		int n,
		int is_cable,
		String link_id,
		String thread_id);

	#sql public static iterator TransmissionPathIterator(
		String id,
		String name,
		String description,
		String local_address,
		String kis_id,
		Timestamp modified,
		String domain_id);

	#sql public static iterator MonitoredElementIterator(
		String id,
		String path_id,
		String equipment_id,
		String element_type,
		String local_address,
		Timestamp modified,
		String domain_id);

}

