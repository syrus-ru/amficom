package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.CORBA.ISM.*;
import com.syrus.AMFICOM.CORBA.ISMDirectory.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;
import com.syrus.AMFICOM.server.event.*;

public class  ISMdbInterfaceRemove
{
	protected ISMdbInterfaceRemove()
	{
	}

	static public int removeAccessPorts(String[] accessport_ids)
	{
		int len = accessport_ids.length;
		for (int i = 0; i < len; i++)
		{
			try
			{
				#sql {
					delete from AMFICOM.ACCESSPORTCHARACTERISTICS
						where ACCESS_PORT_ID = :(accessport_ids[i])
				};
				#sql {
					delete from AMFICOM.ACCESSPORTS
						where ID = :(accessport_ids[i])
				};
				#sql { commit; };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing accessport: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeKISs(String[] kis_ids)
	{
		for(int i = 0; i < kis_ids.length; i++)
		{
			System.out.println("delete eventsource for kis " + kis_ids[i]);
			try
			{
				EventSource es = new EventSource(EventSource.getIdByObjectId(kis_ids[i]));
				System.out.println("delete eventsource " + es.getId());
				es.delete();
//				EventSource.delete(es);
			}
			catch(SQLException ex)
			{
				System.out.println("error deleting eventsource: " + ex.getMessage());
				ex.printStackTrace();
//				return Constants.ERROR_SAVING;
			}
		}
		return NetdbInterfaceRemove.removeEquipments(kis_ids);
	}

	static public int removeTransmissionPaths(String[] path_ids)
	{
		String me_id;
		int len = path_ids.length;
		for (int i = 0; i < len; i++)
		{
			try
			{
				try
				{
					#sql {
						select ID into :me_id
						from AMFICOM.MONITOREDELEMENTS
						where PATH_ID = :(path_ids[i])
					};
					#sql {
						delete from AMFICOM.MONITOREDELEMENTATTACHMENTS
							where MONITORED_ELEMENT_ID = :me_id
					};
					#sql {
						delete from AMFICOM.MONITOREDELEMENTS
						where PATH_ID = :(path_ids[i])
					};
					#sql { commit; };
				}
				catch(SQLException e)
				{
					System.out.println("removing path - no ME");
				}
				#sql {
					delete from AMFICOM.TRANSMISSIONPATHCHARS
						where PATH_ID = :(path_ids[i])
				};
				#sql {
					delete from AMFICOM.PATHLINKS
						where PATH_ID = :(path_ids[i])
				};
				#sql {
					delete from AMFICOM.TRANSMISSIONPATHS
						where ID = :(path_ids[i])
				};
				#sql { commit; };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing path: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}

