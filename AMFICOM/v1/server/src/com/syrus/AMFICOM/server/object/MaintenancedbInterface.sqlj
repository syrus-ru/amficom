/*
 * $Id: MaintenancedbInterface.sqlj,v 1.1.2.3 2004/08/25 15:24:30 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Alarm.*;
import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.*;
import sqlj.runtime.SQLNullException;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/08/25 15:24:30 $
 * @author $Author: bass $
 * @module server_v1
 */
final class MaintenancedbInterface {
	private MaintenancedbInterface() {
	}

	static Vector getEventSourceTypes() {
		EventSourceType_Transferable est;
		Vector vec = new Vector();

		String It_id = "";
		String It_name = "";
		String default_reaction_substring;

		EventSourceTypeIterator estIt = null;

		Rule_Transferable []rules;
		STETIterator rIt = null;
		ArrayList arrayList;

		try
		{
			#sql estIt = {
				select
					ID,
					NAME
				from AMFICOM.EVENTSOURCETYPES
			};

			while (estIt.next())
			{
				try { It_id = estIt.id(); }
				catch (SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = estIt.name(); }
				catch (SQLException e) { }
				if(It_name == null) It_name = "";

				arrayList = new ArrayList();
				try
				{
					#sql rIt = {
						select
							IS_GENERATED,
							DEFAULT_REACTION_SUBSTRING,
							SOURCE_TYPE_ID,
							EVENT_TYPE_ID
						from AMFICOM.SOURCETYPEEVENTTYPELINKS
						where SOURCE_TYPE_ID = :It_id
					};
					while (rIt.next())
					{
						try
						{
							/*
							 * default_reaction_substring in
							 * amficom.sourcetypeeventtypelinks can be null.
							 */
							default_reaction_substring = rIt.default_reaction_substring();
							if (default_reaction_substring == null)
								default_reaction_substring = "";
							/*
							 * Rule_Transferable (as well as Rule) is
							 * constructed based on either event source of a
							 * certain type (source_type_id) or a certain
							 * event source (source_id). Here, the former is
							 * specified, and hence the latter is empty.
							 */
							arrayList.add(
								new Rule_Transferable(
									rIt.event_type_id(),
									rIt.source_type_id(),
									default_reaction_substring,
									"",
									(rIt.is_generated() == 0) ? false : true ));
						}
						catch (SQLNullException e) {
						}
					}
				} catch (SQLException e) {
					System.out.println("could not get rules for source type " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				} finally {
					try {
						rIt.close();
					} catch (NullPointerException npe) {
					} catch (SQLException sqle) {
					}
				}
				rules = new Rule_Transferable[arrayList.size()];
				rules = (Rule_Transferable[]) arrayList.toArray(rules);

				est = new EventSourceType_Transferable(
					It_id,
					It_name,
					rules);

				vec.add(est);
			}
		}
		catch (SQLException e)
		{
			System.out.println("error loading source types: " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try
			{
				estIt.close();
			}
			catch (NullPointerException npe)
			{
			}
			catch (SQLException sqle)
			{
			}
		}

		return vec;
	}

	static Vector getAlertingMessages() {
		AlertingMessage_Transferable am;
		Vector vec = new Vector();

		String It_id = "";
		String It_text = "";
		String It_message_type_id = "";
		String It_event_type_id = "";

		AlertingMessageIterator amIt = null;

		try
		{
			#sql amIt = {
				select
					EVENT_TYPE_ID,
					TEXT,
					ID,
					MESSAGE_TYPE_ID
				from AMFICOM.ALERTINGMESSAGETEXTS
			};

			while (amIt.next())
			{
				try { It_id = amIt.id(); }
				catch (SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_text = amIt.text(); }
				catch (SQLException e) { }
				if(It_text == null) It_text = "";
				try { It_event_type_id = amIt.event_type_id(); }
				catch (SQLException e) { }
				if(It_event_type_id == null) It_event_type_id = "";
				try { It_message_type_id = amIt.message_type_id(); }
				catch (SQLException e) { }
				if(It_message_type_id == null) It_message_type_id = "";

				am = new AlertingMessage_Transferable(
					It_id,
					It_text,
					It_event_type_id,
					It_message_type_id);

				vec.add(am);
			}
		}
		catch (SQLException e)
		{
			System.out.println("error loading messages: " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try
			{
				amIt.close();
			}
			catch (NullPointerException npe)
			{
			}
			catch (SQLException sqle)
			{
			}
		}

		return vec;
	}

	static Vector getAlertingMessageUsers() {
		AlertingMessageUser_Transferable amu;
		Vector vec = new Vector();

		String It_id = "";
		String It_user_id = "";
		String It_alerting_message_id = "";
		String It_alerting_type_id = "";

		AlertingMessageUserIterator amuIt = null;

		try
		{
			#sql amuIt = {
				select
					ALERTING_MESSAGE_ID,
					ID,
					ALERTING_TYPE_ID,
					USER_ID
				from AMFICOM.ALERTINGMESSAGEUSERLINKS
			};

			while (amuIt.next())
			{
				try { It_id = amuIt.id(); }
				catch (SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_user_id = amuIt.user_id(); }
				catch (SQLException e) { }
				if(It_user_id == null) It_user_id = "";
				try { It_alerting_message_id = amuIt.alerting_message_id(); }
				catch (SQLException e) { }
				if(It_alerting_message_id == null) It_alerting_message_id = "";
				try { It_alerting_type_id = amuIt.alerting_type_id(); }
				catch (SQLException e) { }
				if(It_alerting_type_id == null) It_alerting_type_id = "";

				amu = new AlertingMessageUser_Transferable(
					It_id,
					It_user_id,
					It_alerting_type_id,
					It_alerting_message_id);

				vec.add(amu);
			}
		}
		catch (SQLException e)
		{
			System.out.println("error loading alerted users: " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try
			{
				amuIt.close();
			}
			catch (NullPointerException npe)
			{
			}
			catch (SQLException sqle)
			{
			}
		}

		return vec;
	}

	static void saveAlertingMessages(AlertingMessage_Transferable am) {
		try
		{
			System.out.println("save AlertingMessage ID: " + am.id + ", TEXT: " + am.text + ", MESSAGE_TYPE_ID: " + am.message_type_id + ", EVENT_TYPE_ID: " + am.event_type_id + "");
			#sql
			{
				insert into AMFICOM.ALERTINGMESSAGETEXTS(
						ID,
						TEXT,
						MESSAGE_TYPE_ID,
						EVENT_TYPE_ID)
					values(
						:(am.id),
						:(am.text),
						:(am.message_type_id),
						:(am.event_type_id) )
			};
			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("AlertingMessage exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.ALERTINGMESSAGETEXTS set
							TEXT = :(am.text),
							MESSAGE_TYPE_ID = :(am.message_type_id),
							EVENT_TYPE_ID = :(am.event_type_id)
						where ID = :(am.id)
				};
				#sql { commit };
			}
			catch (SQLException ex)
			{
				System.out.println("could not save AlertingMessage: " + ex.getMessage());
				e.printStackTrace();
				return;
			}
		}
	}

	static void saveAlertingMessageUsers(AlertingMessageUser_Transferable amu)
	{
		try
		{
			System.out.println("save AlertingMessageUser ID: " + amu.id + ", USER_ID: " + amu.user_id + ", ALERTING_MESSAGE_ID: " + amu.alerting_message_id + ", ALERTING_TYPE_ID: " + amu.alerting_type_id + "");
			#sql
			{
				insert into AMFICOM.ALERTINGMESSAGEUSERLINKS(
						ID,
						USER_ID,
						ALERTING_MESSAGE_ID,
						ALERTING_TYPE_ID)
					values(
						:(amu.id),
						:(amu.user_id),
						:(amu.alerting_message_id),
						:(amu.alerting_type_id) )
			};
			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("AlertingMessageUser exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.ALERTINGMESSAGEUSERLINKS set
							USER_ID = :(amu.user_id),
							ALERTING_MESSAGE_ID = :(amu.alerting_message_id),
							ALERTING_TYPE_ID = :(amu.alerting_type_id)
						where ID = :(amu.id)
				};
				#sql { commit };
			}
			catch (SQLException ex)
			{
				System.out.println("could not save AlertingMessageUser: " + ex.getMessage());
				e.printStackTrace();
				return;
			}
		}
	}

	static void removeAlertingMessageUser(String amu_id)
	{
		try
		{
			#sql
			{
				delete from AMFICOM.ALERTINGMESSAGEUSERLINKS
					where ID = :amu_id
			};
			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("error deleting AlertingMessageUser");
			e.printStackTrace();
		}
	}

	static String doEvent(String source_id, String event_type, String descriptor) {
		try {
		String id_v = ResourcedbInterface.getUId("systemevent");

		String src_id = source_id;
		System.out.println("Regevent: " + id_v + " on " + src_id + " type " + event_type);
		#sql {
			insert into EVENTS(ID, CREATED, SOURCE_ID, TYPE_ID, DESCRIPTOR, STATUS)
				values(:id_v, SYSDATE, :src_id, :event_type, :descriptor, 0)
		};

		return id_v;
	}
	catch (Exception e)
	{
		System.out.println("Error event: " + e.getMessage());
		e.printStackTrace();
		return null;
	}
	}

	static int getAlarmIdsForMonitoredElement(String me_id, ResourceDescriptorSeq_TransferableHolder alarmids) throws AMFICOMRemoteException {
		int ret = Constants.ERROR_NO_ERROR;
		IdIterator idIt = null;
		IdIterator residIt = null;
		ResourceIdIterator idIt2 = null;

		alarmids.value = new ResourceDescriptor_Transferable[0];
		try
		{
			ArrayList arrayList = new ArrayList();

			#sql idIt = { select ID from AMFICOM.EVALUATIONS
				where MONITORED_ELEMENT_ID = :me_id
				and USER_ID IS NULL
				and DELETED IS NULL
			};
			while(idIt.next())
			{
				try
				{
					String eval_id = idIt.id();
					String res_id;
					#sql residIt = { select ID from AMFICOM.RESULTS
						where EVALUATION_ID = :eval_id
					};
					while(residIt.next())
					{
						try
						{
							res_id = residIt.id();
							String ev_id;
							#sql { select ID into :ev_id from AMFICOM.EVENTS
								where DESCRIPTOR = :res_id
							};

							#sql idIt2 = { select ID, MODIFIED from AMFICOM.ALARMS
								where EVENT_ID = :ev_id
								and STATUS != :(AlarmStatus._ALARM_STATUS_DELETED)
							};
							while(idIt2.next())
								arrayList.add(new ResourceDescriptor_Transferable(idIt2.id(), idIt2.modified().getTime()));
						}
						catch (Exception e)
						{
						}
						finally
						{
							try
							{
								idIt2.close();
							}
							catch (NullPointerException npe)
							{
							}
							catch (SQLException sqle)
							{
							}
						}
					}
				}
				catch (Exception e)
				{
				}
				finally
				{
					try
					{
						residIt.close();
					}
					catch (NullPointerException npe)
					{
					} 
					catch (SQLException sqle)
					{
					}
				}
			}

			alarmids.value = new ResourceDescriptor_Transferable[arrayList.size()];
			alarmids.value = (ResourceDescriptor_Transferable[]) arrayList.toArray(alarmids.value);
		}
		catch (SQLException sqle)
		{
			sqle.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, "Невозможно загрузить тест: " + sqle.getMessage());
		}
		finally
		{
			try
			{
				idIt.close();
			}
			catch (NullPointerException npe)
			{
			}
			catch (SQLException sqle)
			{
			}
		}
		return ret;
	}

	#sql private static iterator IdIterator(
		String id);

	#sql private static iterator ResourceIdIterator(
		String id,
		Timestamp modified);

	#sql private static iterator EventSourceTypeIterator(
		String id,
		String name );

	#sql private static iterator STETIterator(
		int is_generated,
		String default_reaction_substring,
		String source_type_id,
		String event_type_id );

	#sql private static iterator AlertingMessageIterator(
		String event_type_id,
		String text,
		String id,
		String message_type_id );

	#sql private static iterator AlertingMessageUserIterator(
		String alerting_message_id,
		String id,
		String alerting_type_id,
		String user_id );
}
