/*
 * $Id: SchemedbInterfaceSave.sqlj,v 1.1.2.6 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.AMFICOMRemoteException;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.database.JdbcBlobManager;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.6 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemedbInterfaceSave {
	private SchemedbInterfaceSave() {
	}

	private static int saveCableThreads(final Connection conn, String cable_id, SchemeCableThread_Transferable[] threads) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator idIt = null;

		int i;
		int len;
		int index = 0;

		Vector vec = new Vector();
		Vector id_vec = new Vector();
		Vector del_vec = new Vector();

		for (i = 0; i < threads.length; i++)
		{
			vec.add(threads[i]);
			id_vec.add(threads[i].id);
		}

		try
		{
			#sql [connCtx] idIt = { select SCHEME_CABLE_THREAD_ID
				from AMFICOM.SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_LINK_ID = :cable_id };

			while (idIt.next())
			{
				if(id_vec.contains(idIt.scheme_cable_thread_id()))
				{
					index = id_vec.indexOf(idIt.scheme_cable_thread_id());
					System.out.println("update cable thread " + threads[index].id);
					try
					{
						#sql [connCtx] {
							update AMFICOM.SCHEMECABLETHREADS
								set
									NAME = :(threads[index].name),
									THREAD_ID = :(threads[index].threadId),
									LINK_TYPE_ID = :(threads[index].linkTypeId)
								where ID = :(threads[index].id)
						};
						CatalogSchemeMapUpdater.schemeCableLinkThreadUpdated(conn, threads[index]);
					}
					catch(SQLException e)
					{
						System.out.println("error saVing scheme cable link: " + e.getMessage());
						e.printStackTrace();
						return Constants.ERROR_UPDATING;
					}
					conn.commit();
					vec.remove(threads[index]);
				}
				else
					del_vec.add(idIt.scheme_cable_thread_id());
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
		}

		len = vec.size();
		for (i = 0; i < len; i++)
		{
			SchemeCableThread_Transferable thread = (SchemeCableThread_Transferable )vec.get(i);
			System.out.println("insert new cable thread " + thread.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.SCHEMECABLETHREADS(
							ID,
							NAME,
							THREAD_ID,
							LINK_TYPE_ID)
						values(
							 :(thread.id),
							 :(thread.name),
							 :(thread.threadId),
							 :(thread.linkTypeId) )
				};

				String at_s = ResourcedbInterface.getUid(conn, "cablethread");
				#sql [connCtx] {
					insert into AMFICOM.SCHEMECABLELINKTHREADS(
							ID,
							SCHEME_CABLE_LINK_ID,
							SCHEME_CABLE_THREAD_ID)
						values(
							:at_s,
							:(cable_id),
							:(thread.id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing cable thread: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			catch(Exception exx)
			{
				System.out.println("error generating cable thread: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}
		}

		len = del_vec.size();
		for (i = 0; i < len; i++)
		{
			try
			{
				String s = (String )del_vec.get(i);
				#sql [connCtx] {
					delete from AMFICOM.SCHEMECABLELINKTHREADS
						where SCHEME_CABLE_LINK_ID = :s
				};
				#sql [connCtx] {
					delete from AMFICOM.SCHEMECABLETHREADS
						where ID = :s
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("could not delete cable threads for cable " + cable_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveCableLinks(final Connection conn, SchemeCableLink_Transferable[] links) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;
		int count = 0;

		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.SCHEMECABLELINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link " + links[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMECABLELINKS
							set
								NAME = :(links[i].name),
								CABLE_LINK_TYPE_ID = :(links[i].cableLinkTypeId),
								CABLE_LINK_ID = :(links[i].cableLinkId),
								SOURCe_PORT_ID = :(links[i].sourcePortId),
								TARGET_PORT_ID = :(links[i].targetPortId),
								PHYSICAL_LENGTH = :(links[i].physicalLength),
								OPTICAL_LENGTH = :(links[i].opticalLength)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable link " + links[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.SCHEMECABLELINKS(
								ID,
								NAME,
								CABLE_LINK_TYPE_ID,
								CABLE_LINK_ID,
								SOURCE_PORT_ID,
								TARGET_PORT_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								:(links[i].id),
								:(links[i].name),
								:(links[i].cableLinkTypeId),
								:(links[i].cableLinkId),
								:(links[i].sourcePortId),
								:(links[i].targetPortId),
								:(links[i].physicalLength),
								:(links[i].opticalLength) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable_link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			MapdbInterfaceSave.saveAttributes(conn, "SCHEMECABLEATTRIBUTES", "SCHEME_CABLE_ID", links[i].id, links[i].attributes);

			CatalogSchemeMapUpdater.schemeCableLinkUpdated(conn, links[i]);
			saveCableThreads(conn, links[i].id, links[i].cableThreads);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveSchemePaths(final Connection conn, SchemePath_Transferable[] paths) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;
		int count = 0;

		len = paths.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.SCHEMEPATHS
						where ID = :(paths[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update path " + paths[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMEPATHS
							set
								NAME = :(paths[i].name),
								PATH_TYPE_ID = :(paths[i]._typeId),
								PATH_ID = :(paths[i].pathId),
								START_DEVICE_ID = :(paths[i].startDeviceId),
								END_DEVICE_ID = :(paths[i].endDeviceId)
							where ID = :(paths[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing path: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new path " + paths[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.SCHEMEPATHS(
								ID,
								NAME,
								PATH_TYPE_ID,
								PATH_ID,
								START_DEVICE_ID,
								END_DEVICE_ID)
							values(
								 :(paths[i].id),
								 :(paths[i].name),
								 :(paths[i]._typeId),
								 :(paths[i].pathId),
								 :(paths[i].startDeviceId),
								 :(paths[i].endDeviceId) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing path: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			MapdbInterfaceSave.saveAttributes(conn, "SCHEMEPATHATTRIBUTES", "SCHEME_PATH_ID", paths[i].id, paths[i].attributes);

			try
			{
				#sql [connCtx] { delete from SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :(paths[i].id)
				};

				for (int j = 0; j < paths[i].links.length; j++)
				{
					int is_cable = (paths[i].links[j].isCable) ? 1 : 0;
					String a_id = ResourcedbInterface.getUid(conn, "schemepathlink");
					#sql [connCtx] {
						insert into SCHEMEPATHLINKS(
							ID,
							SCHEME_PATH_ID,
							N,
							IS_CABLE,
							LINK_ID,
							THREAD_ID)
						values(
							:a_id,
							:(paths[i].id),
							:(paths[i].links[j].n),
							:is_cable,
							:(paths[i].links[j].linkId),
							:(paths[i].links[j].threadId) )
					};
				}
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing path link: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			CatalogSchemeMapUpdater.schemePathUpdated(conn, paths[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveElement(final Connection conn, SchemeElement_Transferable element) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		String scheme_cell_id = "";
		String ugo_cell_id = "";

		int is_scheme = (element.isScheme) ? 1 : 0;
		
		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.SCHEMEELEMENTS
					where ID = :(element.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update element " + element.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.SCHEMEELEMENTS
						set
							NAME = :(element.name),
							EQUIPMENT_ID = :(element.equipmentId),
							PROTO_ELEMENT_ID = :(element.protoElementId),
							SCHEME_ID = :(element.schemeId),
							IS_SCHEME = :is_scheme,
							DESCRIPTION = :(element.description)
						where ID = :(element.id)
				};
				#sql [connCtx] {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(element.id)
				};
				ResourcedbInterface.setImage(conn, scheme_cell_id, element.schemecell);
				#sql [connCtx] {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(element.id)
				};
				ResourcedbInterface.setImage(conn, ugo_cell_id, element.ugocell);
			}
			catch(SQLException e)
			{
				System.out.println("error saVing element: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("insert new element " + element.id);
			try
			{
				scheme_cell_id = ResourcedbInterface.setImage(conn, element.schemecell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :scheme_cell_id
				};
				ugo_cell_id = ResourcedbInterface.setImage(conn, element.ugocell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :ugo_cell_id
				};
				#sql [connCtx] {
					insert into AMFICOM.SCHEMEELEMENTS(
							ID,
							NAME,
							EQUIPMENT_ID,
							SCHEME_ID,
							IS_SCHEME,
							DESCRIPTION,
							SCHEME_CELL_ID,
							UGO_CELL_ID,
							PROTO_ELEMENT_ID)
						values(
							:(element.id),
							:(element.name),
							:(element.equipmentId),
							:(element.schemeId),
							:is_scheme,
							:(element.description),
							:scheme_cell_id,
							:ugo_cell_id,
							:(element.protoElementId) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing element: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}

		MapdbInterfaceSave.saveAttributes(conn, "SCHEMEELEMENTATTRIBUTES", "SCHEME_ELEMENT_ID", element.id, element.attributes);

		CatalogSchemeMapUpdater.schemeElementUpdated(conn, element);
		SchemedbInterfaceProtoSave.saveSchemeDevices(conn, element.devices);

		try
		{
			#sql [connCtx] { delete from SCHEMEELEMENTDEVICES
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.devices.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemedevice");
				#sql [connCtx] { insert into SCHEMEELEMENTDEVICES(ID, SCHEME_ELEMENT_ID, SCHEME_DEVICE_ID)
					values(:a_id, :(element.id), :(element.devices[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		SchemedbInterfaceProtoSave.saveLinks(conn, element.links);
		try
		{
			#sql [connCtx] { delete from SCHEMEELEMENTLINKS
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.links.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemeelementlink");
				System.out.println("saving: [" + a_id + "] element " + element.id + " link " + element.links[i].id );
				#sql [connCtx] { insert into SCHEMEELEMENTLINKS(ID, SCHEME_ELEMENT_ID, SCHEME_LINK_ID)
					values(:a_id, :(element.id), :(element.links[i].id) )
				};
				System.out.println("save ok");
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		try
		{
			#sql [connCtx] { delete from SCHEMEELEMENTELEMENTS
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.elementIds.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemeelement");
				#sql [connCtx] { insert into SCHEMEELEMENTELEMENTS(ID, SCHEME_ELEMENT_ID, SCHEME_EL_ID)
					values(:a_id, :(element.id), :(element.elementIds[i]) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing element: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveSchemeElements(final Connection conn, SchemeElement_Transferable[] elements) throws SQLException {
		int i;
		int len;

		String id = "";
		len = elements.length;
		for (i = 0; i < len; i++)
		{
			saveElement(conn, elements[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveScheme(final Connection conn, String domain_id, Scheme_Transferable scheme) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		String scheme_cell_id = "";
		String ugo_cell_id = "";
		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.SCHEMES
					where ID = :(scheme.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update scheme " + scheme.id);
			try
			{
				Timestamp ts = new Timestamp(scheme.created);
				#sql [connCtx] {
					update AMFICOM.SCHEMES
						set
							NAME = :(scheme.name),
							SCHEME_TYPE = :(scheme.schemeType),
							DESCRIPTION = :(scheme.description),
							CREATED = :ts,
							MODIFIED = SYSDATE,
							CREATED_BY = :(scheme.createdBy),
							MODIFIED_BY = :(scheme.modifiedBy),
							DOMAIN_ID = :(scheme.domainId),
							OWNER_ID = :(scheme.ownerId),
							SYMBOL_ID = :(scheme.symbolId),
							LABEL = :(scheme.label),
			    WIDTH = :(scheme.width),
			    HEIGHT = :(scheme.height)
						where ID = :(scheme.id)
				};
				#sql [connCtx] {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMES
						where ID = :(scheme.id)
				};
				ResourcedbInterface.setImage(conn, scheme_cell_id, scheme.schemecell);

				#sql [connCtx] {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMES
						where ID = :(scheme.id)
				};
				ResourcedbInterface.setImage(conn, ugo_cell_id, scheme.ugocell);
			}
			catch(SQLException e)
			{
				System.out.println("error saVing scheme: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			conn.commit();
		}
		catch (SQLException sqle) {
			System.out.println("insert new scheme " + scheme.id);
			try
			{
				scheme_cell_id = ResourcedbInterface.setImage(conn, scheme.schemecell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :scheme_cell_id
				};

				ugo_cell_id = ResourcedbInterface.setImage(conn, scheme.ugocell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :ugo_cell_id
				};
				#sql [connCtx] {
					insert into AMFICOM.SCHEMES(
							ID,
							NAME,
							SCHEME_TYPE,
							DESCRIPTION,
							UGO_CELL_ID,
							SCHEME_CELL_ID,
							CREATED,
							MODIFIED,
							CREATED_BY,
							MODIFIED_BY,
							DOMAIN_ID,
							OWNER_ID,
							SYMBOL_ID,
							LABEL,
			    WIDTH,
			    HEIGHT,
			    CLONEZ)
						values(
							:(scheme.id),
							:(scheme.name),
							:(scheme.schemeType),
							:(scheme.description),
							:ugo_cell_id,
							:scheme_cell_id,
							SYSDATE,
							SYSDATE,
							:(scheme.createdBy),
							:(scheme.modifiedBy),
							:(scheme.domainId),
							:(scheme.ownerId),
							:(scheme.symbolId),
							:(scheme.label),
			    :(scheme.width),
			    :(scheme.height),
			    empty_blob() )
				};
				JdbcBlobManager.setData(conn, "clonez", "amficom.schemes", "id = '" + scheme.id + '\'', false, scheme.clonez);
				conn.commit();
			} catch (Exception e) {
				throw new AMFICOMRemoteException(Constants.ERROR_SAVING, e.toString());
			}
		}
		saveSchemeElements(conn, scheme.elements);
		try
		{
			#sql [connCtx] { delete from ELEMENTSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.elementIds.length; i++)
			{
				System.out.println("save top level element " + scheme.elementIds[i] + " for scheme " + scheme.id);
				String a_id = ResourcedbInterface.getUid(conn, "schemeelement");
				#sql [connCtx] { insert into ELEMENTSONSCHEME(ID, SCHEME_ID, SCHEME_ELEMENT_ID)
					values(:a_id, :(scheme.id), :(scheme.elementIds[i]) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		SchemedbInterfaceProtoSave.saveLinks(conn, scheme.links);
		try
		{
			#sql [connCtx] { delete from LINKSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.links.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemelink");
				#sql [connCtx] { insert into LINKSONSCHEME(ID, SCHEME_ID, SCHEME_LINK_ID)
					values(:a_id, :(scheme.id), :(scheme.links[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		saveCableLinks(conn, scheme.cableLinks);
		try
		{
			#sql [connCtx] { delete from CABLELINKSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.cableLinks.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemecablelink");
				#sql [connCtx] { insert into CABLELINKSONSCHEME(ID, SCHEME_ID, SCHEME_CABLE_LINK_ID)
					values(:a_id, :(scheme.id), :(scheme.cableLinks[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		saveSchemePaths(conn, scheme.paths);
		try
		{
			#sql [connCtx] { delete from PATHSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.paths.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemepath");
				#sql [connCtx] { insert into PATHSONSCHEME(ID, SCHEME_ID, SCHEME_PATH_ID)
					values(:a_id, :(scheme.id), :(scheme.paths[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		return Constants.ERROR_NO_ERROR;
	}

	static int saveSchemes(final Connection conn, String domain_id, Scheme_Transferable[] schemes) throws SQLException, AMFICOMRemoteException {
		int i;
		int len;

		String id = "";
		len = schemes.length;
		for (i = 0; i < len; i++)
		{
			saveScheme(conn, domain_id, schemes[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeCableThread(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator tidIt = null;
		try
		{
			#sql [connCtx] { delete from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_THREAD_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLETHREADS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeCableLink(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator tidIt = null;
		try {
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMECABLEATTRIBUTES", "SCHEME_CABLE_ID", id);

			#sql [connCtx] tidIt = { select SCHEME_CABLE_THREAD_ID
					from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_LINK_ID = :id
			};
			while(tidIt.next())
			{
				removeCableThread(conn, tidIt.scheme_cable_thread_id());
			}
			tidIt.close();

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLELINKS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			if(tidIt != null) try {
			tidIt.close();
			}catch(Exception exe) {}
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeCableLinks(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeCableLink(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemePath(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPATHATTRIBUTES", "SCHEME_PATH_ID", id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPATHS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeSchemeElement(final Connection conn, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		MapProtoIdIterator mpIt = null;

		try
		{
			#sql [connCtx] {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql [connCtx] {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			#sql [connCtx] { delete from SCHEMEELEMENTELEMENTS
				where SCHEME_ELEMENT_ID = :(element_id)
			};

			try
			{
				#sql [connCtx] didIt = { select SCHEME_DEVICE_ID
						from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql [connCtx] { delete from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(didIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeDevice(conn, didIt.scheme_device_id());
				}
				didIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql [connCtx] { delete from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(conn, lidIt.scheme_link_id());
				}
				lidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEELEMENTATTRIBUTES", "SCHEME_ELEMENT_ID", element_id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error removing element: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeElements(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeSchemeElement(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeScheme(final Connection conn, String scheme_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		ElementIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		CableLinkIdIterator clidIt = null;
		PathIdIterator mpIt = null;

		try
		{
			#sql [connCtx] {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql [connCtx] {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			try
			{
				#sql [connCtx] didIt = { select SCHEME_ELEMENT_ID
						from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(didIt.next())
				{
					removeSchemeElement(conn, didIt.scheme_element_id());
				}
				didIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(conn, lidIt.scheme_link_id());
				}
				lidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] clidIt = { select SCHEME_CABLE_LINK_ID
						from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(clidIt.next())
				{
					removeCableLink(conn, clidIt.scheme_cable_link_id());
				}
				clidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				clidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] mpIt = { select SCHEME_PATH_ID
						from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(mpIt.next())
				{
					removeSchemePath(conn, mpIt.scheme_path_id());
				}
				mpIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				mpIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			#sql [connCtx] {
				delete from AMFICOM.SCHEMES
					where ID = :scheme_id
			};

			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error removint scheme: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemes(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeScheme(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	#sql private static iterator DeviceIdIterator(String scheme_device_id);
	#sql private static iterator LinkIdIterator(String scheme_link_id);
	#sql private static iterator CableLinkIdIterator(String scheme_cable_link_id);
	#sql private static iterator MapProtoIdIterator(String map_proto_element_id);
	#sql private static iterator ElementIdIterator(String scheme_element_id);
	#sql private static iterator PathIdIterator(String scheme_path_id);
	#sql private static iterator CableThreadIdIterator(String scheme_cable_thread_id);
}
