/*
 * $Id: SchemedbInterfaceSave.sqlj,v 1.1.2.2 2004/08/20 17:12:10 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.database.ByteArrayDatabase;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/20 17:12:10 $
 * @author $Author: bass $
 * @module server_v1
 */
public class SchemedbInterfaceSave
{
	protected SchemedbInterfaceSave()
	{
	}

	public static int saveCableThreads(String cable_id, SchemeCableThread_Transferable[] threads)
	{
		CableThreadIdIterator idIt = null;

		int i;
		int len;
		int index = 0;

		Vector vec = new Vector();
		Vector id_vec = new Vector();
		Vector del_vec = new Vector();

		for (i = 0; i < threads.length; i++)
		{
			vec.add(threads[i]);
			id_vec.add(threads[i].id);
		}

		try
		{
			#sql idIt = { select SCHEME_CABLE_THREAD_ID
				from AMFICOM.SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_LINK_ID = :cable_id };

			while (idIt.next())
			{
				if(id_vec.contains(idIt.scheme_cable_thread_id()))
				{
					index = id_vec.indexOf(idIt.scheme_cable_thread_id());
					System.out.println("update cable thread " + threads[index].id);
					try
					{
						#sql {
							update AMFICOM.SCHEMECABLETHREADS
								set
									NAME = :(threads[index].name),
									THREAD_ID = :(threads[index].thread_id),
									LINK_TYPE_ID = :(threads[index].link_type_id)
								where ID = :(threads[index].id)
						};
						CatalogSchemeMapUpdater.schemeCableLinkThreadUpdated(threads[index]);
					}
					catch(SQLException e)
					{
						System.out.println("error saVing scheme cable link: " + e.getMessage());
						e.printStackTrace();
						return Constants.ERROR_UPDATING;
					}
					#sql { commit };
					vec.remove(threads[index]);
				}
				else
					del_vec.add(idIt.scheme_cable_thread_id());
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
		}

		len = vec.size();
		for (i = 0; i < len; i++)
		{
			SchemeCableThread_Transferable thread = (SchemeCableThread_Transferable )vec.get(i);
			System.out.println("insert new cable thread " + thread.id);
			try
			{
				#sql {
					insert into AMFICOM.SCHEMECABLETHREADS(
							ID,
							NAME,
							THREAD_ID,
							LINK_TYPE_ID)
						values(
							 :(thread.id),
							 :(thread.name),
							 :(thread.thread_id),
							 :(thread.link_type_id) )
				};

				String at_s = ResourcedbInterface.getUId("cablethread");
				#sql {
					insert into AMFICOM.SCHEMECABLELINKTHREADS(
							ID,
							SCHEME_CABLE_LINK_ID,
							SCHEME_CABLE_THREAD_ID)
						values(
							:at_s,
							:(cable_id),
							:(thread.id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing cable thread: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			catch(Exception exx)
			{
				System.out.println("error generating cable thread: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}
		}

		len = del_vec.size();
		for (i = 0; i < len; i++)
		{
			try
			{
				String s = (String )del_vec.get(i);
				#sql {
					delete from AMFICOM.SCHEMECABLELINKTHREADS
						where SCHEME_CABLE_LINK_ID = :s
				};
				#sql {
					delete from AMFICOM.SCHEMECABLETHREADS
						where ID = :s
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("could not delete cable threads for cable " + cable_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveCableLinks(SchemeCableLink_Transferable[] links)
	{
		int i;
		int len;
		int count = 0;

		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.SCHEMECABLELINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link " + links[i].id);
				try
				{
					#sql {
						update AMFICOM.SCHEMECABLELINKS
							set
								NAME = :(links[i].name),
								CABLE_LINK_TYPE_ID = :(links[i].cable_link_type_id),
								CABLE_LINK_ID = :(links[i].cable_link_id),
								SOURCe_PORT_ID = :(links[i].source_port_id),
								TARGET_PORT_ID = :(links[i].target_port_id),
								PHYSICAL_LENGTH = :(links[i].physical_length),
								OPTICAL_LENGTH = :(links[i].optical_length)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable link " + links[i].id);
				try
				{
					#sql {
						insert into AMFICOM.SCHEMECABLELINKS(
								ID,
								NAME,
								CABLE_LINK_TYPE_ID,
								CABLE_LINK_ID,
								SOURCE_PORT_ID,
								TARGET_PORT_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								:(links[i].id),
								:(links[i].name),
								:(links[i].cable_link_type_id),
								:(links[i].cable_link_id),
								:(links[i].source_port_id),
								:(links[i].target_port_id),
								:(links[i].physical_length),
								:(links[i].optical_length) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable_link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			MapdbInterfaceSave3.saveAttributes(
				"SCHEMECABLEATTRIBUTES",
				"SCHEME_CABLE_ID",
				links[i].id,
				links[i].attributes);

			CatalogSchemeMapUpdater.schemeCableLinkUpdated(links[i]);
			saveCableThreads(links[i].id, links[i].cable_threads);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveSchemePaths(SchemePath_Transferable[] paths)
	{
		int i;
		int len;
		int count = 0;

		len = paths.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.SCHEMEPATHS
						where ID = :(paths[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update path " + paths[i].id);
				try
				{
					#sql {
						update AMFICOM.SCHEMEPATHS
							set
								NAME = :(paths[i].name),
								PATH_TYPE_ID = :(paths[i].type_id),
								PATH_ID = :(paths[i].path_id),
								START_DEVICE_ID = :(paths[i].start_device_id),
								END_DEVICE_ID = :(paths[i].end_device_id)
							where ID = :(paths[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing path: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new path " + paths[i].id);
				try
				{
					#sql {
						insert into AMFICOM.SCHEMEPATHS(
								ID,
								NAME,
								PATH_TYPE_ID,
								PATH_ID,
								START_DEVICE_ID,
								END_DEVICE_ID)
							values(
								 :(paths[i].id),
								 :(paths[i].name),
								 :(paths[i].type_id),
								 :(paths[i].path_id),
								 :(paths[i].start_device_id),
								 :(paths[i].end_device_id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing path: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			MapdbInterfaceSave3.saveAttributes(
				"SCHEMEPATHATTRIBUTES",
				"SCHEME_PATH_ID",
				paths[i].id,
				paths[i].attributes);

			try
			{
				#sql { delete from SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :(paths[i].id)
				};

				for (int j = 0; j < paths[i].links.length; j++)
				{
					int is_cable = (paths[i].links[j].is_cable) ? 1 : 0;
					String a_id = ResourcedbInterface.getUId("schemepathlink");
					#sql {
						insert into SCHEMEPATHLINKS(
							ID,
							SCHEME_PATH_ID,
							N,
							IS_CABLE,
							LINK_ID,
							THREAD_ID)
						values(
							:a_id,
							:(paths[i].id),
							:(paths[i].links[j].n),
							:is_cable,
							:(paths[i].links[j].link_id),
							:(paths[i].links[j].thread_id) )
					};
				}
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing path link: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			CatalogSchemeMapUpdater.schemePathUpdated(paths[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveElement(SchemeElement_Transferable element)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		String scheme_cell_id = "";
		String ugo_cell_id = "";

		int is_scheme = (element.is_scheme) ? 1 : 0;
		
		try
		{
			#sql {
				select count(*) into :count from AMFICOM.SCHEMEELEMENTS
					where ID = :(element.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update element " + element.id);
			try
			{
				#sql {
					update AMFICOM.SCHEMEELEMENTS
						set
							NAME = :(element.name),
							EQUIPMENT_ID = :(element.equipment_id),
							PROTO_ELEMENT_ID = :(element.proto_element_id),
							SCHEME_ID = :(element.scheme_id),
							IS_SCHEME = :is_scheme,
							DESCRIPTION = :(element.description)
						where ID = :(element.id)
				};
				#sql {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(element.id)
				};
				ResourcedbInterface.updateImage(scheme_cell_id, element.schemecell);
				#sql {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMEELEMENTS
						where ID = :(element.id)
				};
				ResourcedbInterface.updateImage(ugo_cell_id, element.ugocell);
			}
			catch(SQLException e)
			{
				System.out.println("error saVing element: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("insert new element " + element.id);
			try
			{
				scheme_cell_id = ResourcedbInterface.saveImage(element.schemecell);
				#sql {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :scheme_cell_id
				};
				ugo_cell_id = ResourcedbInterface.saveImage(element.ugocell);
				#sql {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :ugo_cell_id
				};
				#sql {
					insert into AMFICOM.SCHEMEELEMENTS(
							ID,
							NAME,
							EQUIPMENT_ID,
							SCHEME_ID,
							IS_SCHEME,
							DESCRIPTION,
							SCHEME_CELL_ID,
							UGO_CELL_ID,
							PROTO_ELEMENT_ID)
						values(
							:(element.id),
							:(element.name),
							:(element.equipment_id),
							:(element.scheme_id),
							:is_scheme,
							:(element.description),
							:scheme_cell_id,
							:ugo_cell_id,
							:(element.proto_element_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing element: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}

		MapdbInterfaceSave3.saveAttributes(
			"SCHEMEELEMENTATTRIBUTES",
			"SCHEME_ELEMENT_ID",
			element.id,
			element.attributes);

		CatalogSchemeMapUpdater.schemeElementUpdated(element);
		SchemedbInterfaceProtoSave.saveSchemeDevices(element.devices);

		try
		{
			#sql { delete from SCHEMEELEMENTDEVICES
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.devices.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemedevice");
				#sql { insert into SCHEMEELEMENTDEVICES(ID, SCHEME_ELEMENT_ID, SCHEME_DEVICE_ID)
					values(:a_id, :(element.id), :(element.devices[i].id) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		SchemedbInterfaceProtoSave.saveLinks(element.links);
		try
		{
			#sql { delete from SCHEMEELEMENTLINKS
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.links.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemeelementlink");
				System.out.println("saving: [" + a_id + "] element " + element.id + " link " + element.links[i].id );
				#sql { insert into SCHEMEELEMENTLINKS(ID, SCHEME_ELEMENT_ID, SCHEME_LINK_ID)
					values(:a_id, :(element.id), :(element.links[i].id) )
				};
				System.out.println("save ok");
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		try
		{
			#sql { delete from SCHEMEELEMENTELEMENTS
				where SCHEME_ELEMENT_ID = :(element.id)
			};

			for (i = 0; i < element.element_ids.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemeelement");
				#sql { insert into SCHEMEELEMENTELEMENTS(ID, SCHEME_ELEMENT_ID, SCHEME_EL_ID)
					values(:a_id, :(element.id), :(element.element_ids[i]) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing element: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveSchemeElements(SchemeElement_Transferable[] elements)
	{
		int i;
		int len;

		String id = "";
		len = elements.length;
		for (i = 0; i < len; i++)
		{
			saveElement(elements[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveScheme(
			String domain_id,
			Scheme_Transferable scheme)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		String scheme_cell_id = "";
		String ugo_cell_id = "";
		try
		{
			#sql {
				select count(*) into :count from AMFICOM.SCHEMES
					where ID = :(scheme.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update scheme " + scheme.id);
			try
			{
				Timestamp ts = new Timestamp(scheme.created);
				#sql {
					update AMFICOM.SCHEMES
						set
							NAME = :(scheme.name),
							SCHEME_TYPE = :(scheme.scheme_type),
							DESCRIPTION = :(scheme.description),
							CREATED = :ts,
							MODIFIED = SYSDATE,
							CREATED_BY = :(scheme.created_by),
							MODIFIED_BY = :(scheme.modified_by),
							DOMAIN_ID = :(scheme.domain_id),
							OWNER_ID = :(scheme.owner_id),
							SYMBOL_ID = :(scheme.symbol_id),
							LABEL = :(scheme.label),
                            WIDTH = :(scheme.width),
                            HEIGHT = :(scheme.height)
						where ID = :(scheme.id)
				};
				#sql {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMES
						where ID = :(scheme.id)
				};
				ResourcedbInterface.updateImage(scheme_cell_id, scheme.schemecell);

				#sql {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMES
						where ID = :(scheme.id)
				};
				ResourcedbInterface.updateImage(ugo_cell_id, scheme.ugocell);
			}
			catch(SQLException e)
			{
				System.out.println("error saVing scheme: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("insert new scheme " + scheme.id);
			try
			{
				scheme_cell_id = ResourcedbInterface.saveImage(scheme.schemecell);
				#sql {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :scheme_cell_id
				};

				ugo_cell_id = ResourcedbInterface.saveImage(scheme.ugocell);
				#sql {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :ugo_cell_id
				};
				#sql {
					insert into AMFICOM.SCHEMES(
							ID,
							NAME,
							SCHEME_TYPE,
							DESCRIPTION,
							UGO_CELL_ID,
							SCHEME_CELL_ID,
							CREATED,
							MODIFIED,
							CREATED_BY,
							MODIFIED_BY,
							DOMAIN_ID,
							OWNER_ID,
							SYMBOL_ID,
							LABEL,
                            WIDTH,
                            HEIGHT,
                            CLONEZ)
						values(
							:(scheme.id),
							:(scheme.name),
							:(scheme.scheme_type),
							:(scheme.description),
							:ugo_cell_id,
							:scheme_cell_id,
							SYSDATE,
							SYSDATE,
							:(scheme.created_by),
							:(scheme.modified_by),
							:(scheme.domain_id),
							:(scheme.owner_id),
							:(scheme.symbol_id),
							:(scheme.label),
                            :(scheme.width),
                            :(scheme.height),
                            empty_blob() )
				};
				ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
				ByteArrayDatabase bArr = new ByteArrayDatabase(scheme.clonez);
				bArr.saveAsBlob(
						connCtx2.getConnection(),
						"AMFICOM.SCHEMES",
						"CLONEZ",
						"id = '" + scheme.id + "'");
				#sql { commit };
			}
			catch(Exception ex)
			{
				System.out.println("error saVing scheme: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}

		saveSchemeElements(scheme.elements);

		try
		{
			#sql { delete from ELEMENTSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.element_ids.length; i++)
			{
				System.out.println("save top level element " + scheme.element_ids[i] + " for scheme " + scheme.id);
				String a_id = ResourcedbInterface.getUId("schemeelement");
				#sql { insert into ELEMENTSONSCHEME(ID, SCHEME_ID, SCHEME_ELEMENT_ID)
					values(:a_id, :(scheme.id), :(scheme.element_ids[i]) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		SchemedbInterfaceProtoSave.saveLinks(scheme.links);
		try
		{
			#sql { delete from LINKSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.links.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemelink");
				#sql { insert into LINKSONSCHEME(ID, SCHEME_ID, SCHEME_LINK_ID)
					values(:a_id, :(scheme.id), :(scheme.links[i].id) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		saveCableLinks(scheme.cable_links);
		try
		{
			#sql { delete from CABLELINKSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.cable_links.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemecablelink");
				#sql { insert into CABLELINKSONSCHEME(ID, SCHEME_ID, SCHEME_CABLE_LINK_ID)
					values(:a_id, :(scheme.id), :(scheme.cable_links[i].id) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		saveSchemePaths(scheme.paths);
		try
		{
			#sql { delete from PATHSONSCHEME
				where SCHEME_ID = :(scheme.id)
			};

			for (i = 0; i < scheme.paths.length; i++)
			{
				String a_id = ResourcedbInterface.getUId("schemepath");
				#sql { insert into PATHSONSCHEME(ID, SCHEME_ID, SCHEME_PATH_ID)
					values(:a_id, :(scheme.id), :(scheme.paths[i].id) )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing scheme: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		return Constants.ERROR_NO_ERROR;
	}

	public static int saveSchemes(
			String domain_id,
			Scheme_Transferable[] schemes)
	{
		int i;
		int len;

		String id = "";
		len = schemes.length;
		for (i = 0; i < len; i++)
		{
			saveScheme(domain_id, schemes[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeCableThread(String id)
	{
		SchemedbInterfaceLoad.CableThreadIdIterator tidIt = null;
		try
		{
			#sql { delete from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_THREAD_ID = :id
			};

			#sql {
				delete from AMFICOM.SCHEMECABLETHREADS
					where ID = :id
			};
			#sql { commit };
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeCableLink(String id)
	{
		CableThreadIdIterator tidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(
					"SCHEMECABLEATTRIBUTES",
					"SCHEME_CABLE_ID",
					id);

			#sql tidIt = { select SCHEME_CABLE_THREAD_ID
					from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_LINK_ID = :id
			};
			while(tidIt.next())
			{
				removeCableThread(tidIt.scheme_cable_thread_id());
			}
			tidIt.close();

			#sql {
				delete from AMFICOM.SCHEMECABLELINKS
					where ID = :id
			};
			#sql { commit };
		}
		catch (Exception e)
		{
			if(tidIt != null) try {
			tidIt.close();
			}catch(Exception exe) {}
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeCableLinks(String[] ids)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ids.length;
		for (i = 0; i < len; i++)
		{
			removeCableLink(ids[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeSchemePath(String id)
	{
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(
					"SCHEMEPATHATTRIBUTES",
					"SCHEME_PATH_ID",
					id);

			#sql {
				delete from AMFICOM.SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :id
			};

			#sql {
				delete from AMFICOM.SCHEMEPATHS
					where ID = :id
			};
			#sql { commit };
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeSchemePaths(String[] ids)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ids.length;
		for (i = 0; i < len; i++)
		{
			removeSchemePath(ids[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeSchemeElement(String element_id)
	{
		String scheme_cell_id = "";
		String ugo_cell_id = "";
		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		MapProtoIdIterator mpIt = null;

		try
		{
			#sql {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			#sql { delete from SCHEMEELEMENTELEMENTS
				where SCHEME_ELEMENT_ID = :(element_id)
			};

			try
			{
				#sql didIt = { select SCHEME_DEVICE_ID
						from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql { delete from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(didIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeDevice(didIt.scheme_device_id());
				}
				didIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql lidIt = { select SCHEME_LINK_ID
						from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql { delete from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(lidIt.scheme_link_id());
				}
				lidIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			MapdbInterfaceRemove.removeElementAttributes(
				"SCHEMEELEMENTATTRIBUTES",
				"SCHEME_ELEMENT_ID",
				element_id);

			#sql {
				delete from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("error removing element: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeSchemeElements(String[] ids)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ids.length;
		for (i = 0; i < len; i++)
		{
			removeSchemeElement(ids[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeScheme(String scheme_id)
	{
		String scheme_cell_id = "";
		String ugo_cell_id = "";
		ElementIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		CableLinkIdIterator clidIt = null;
		PathIdIterator mpIt = null;

		try
		{
			#sql {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			try
			{
				#sql didIt = { select SCHEME_ELEMENT_ID
						from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql { delete from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(didIt.next())
				{
					removeSchemeElement(didIt.scheme_element_id());
				}
				didIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql lidIt = { select SCHEME_LINK_ID
						from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql { delete from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(lidIt.scheme_link_id());
				}
				lidIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql clidIt = { select SCHEME_CABLE_LINK_ID
						from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql { delete from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(clidIt.next())
				{
					removeCableLink(clidIt.scheme_cable_link_id());
				}
				clidIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				clidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql mpIt = { select SCHEME_PATH_ID
						from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql { delete from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(mpIt.next())
				{
					removeSchemePath(mpIt.scheme_path_id());
				}
				mpIt.close();
				#sql { commit };
			}
			catch (Exception e)
			{
				mpIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			#sql {
				delete from AMFICOM.SCHEMES
					where ID = :scheme_id
			};

			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("error removint scheme: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int removeSchemes(String[] ids)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ids.length;
		for (i = 0; i < len; i++)
		{
			removeScheme(ids[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator DeviceIdIterator ( String scheme_device_id );
	#sql public static iterator LinkIdIterator ( String scheme_link_id );
	#sql public static iterator CableLinkIdIterator ( String scheme_cable_link_id );
	#sql public static iterator PortIdIterator ( String scheme_port_id );
	#sql public static iterator MapProtoIdIterator ( String map_proto_element_id );
	#sql public static iterator ElementIdIterator ( String scheme_element_id );
	#sql public static iterator PathIdIterator ( String scheme_path_id );
	#sql public static iterator CableThreadIdIterator ( String scheme_cable_thread_id );
}
