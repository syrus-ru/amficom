/*
 * $Id: SchemedbInterfaceSave.sqlj,v 1.1.2.7 2004/12/23 12:06:02 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.7 $, $Date: 2004/12/23 12:06:02 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemedbInterfaceSave {
	private SchemedbInterfaceSave() {
	}

	private static int removeCableThread(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator tidIt = null;
		try
		{
			#sql [connCtx] { delete from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_THREAD_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLETHREADS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeCableLink(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CableThreadIdIterator tidIt = null;
		try {
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMECABLEATTRIBUTES", "SCHEME_CABLE_ID", id);

			#sql [connCtx] tidIt = { select SCHEME_CABLE_THREAD_ID
					from SCHEMECABLELINKTHREADS
					where SCHEME_CABLE_LINK_ID = :id
			};
			while(tidIt.next())
			{
				removeCableThread(conn, tidIt.scheme_cable_thread_id());
			}
			tidIt.close();

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLELINKS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			if(tidIt != null) try {
			tidIt.close();
			}catch(Exception exe) {}
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeCableLinks(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeCableLink(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemePath(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPATHATTRIBUTES", "SCHEME_PATH_ID", id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPATHLINKS
					where SCHEME_PATH_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPATHS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeSchemeElement(final Connection conn, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		MapProtoIdIterator mpIt = null;

		try
		{
			#sql [connCtx] {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql [connCtx] {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			#sql [connCtx] { delete from SCHEMEELEMENTELEMENTS
				where SCHEME_ELEMENT_ID = :(element_id)
			};

			try
			{
				#sql [connCtx] didIt = { select SCHEME_DEVICE_ID
						from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql [connCtx] { delete from SCHEMEELEMENTDEVICES
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(didIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeDevice(conn, didIt.scheme_device_id());
				}
				didIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				#sql [connCtx] { delete from SCHEMEELEMENTLINKS
						where SCHEME_ELEMENT_ID = :(element_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(conn, lidIt.scheme_link_id());
				}
				lidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEELEMENTATTRIBUTES", "SCHEME_ELEMENT_ID", element_id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEELEMENTS
					where ID = :(element_id)
			};
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error removing element: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeElements(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeSchemeElement(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeScheme(final Connection conn, String scheme_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		ElementIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		CableLinkIdIterator clidIt = null;
		PathIdIterator mpIt = null;

		try
		{
			#sql [connCtx] {
				select SCHEME_CELL_ID into :scheme_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :scheme_cell_id
			};

			#sql [connCtx] {
				select UGO_CELL_ID into :ugo_cell_id
					from AMFICOM.SCHEMES
					where ID = :(scheme_id)
			};
			#sql [connCtx] {
				delete from AMFICOM.IMAGERESOURCES
					where ID = :ugo_cell_id
			};

			try
			{
				#sql [connCtx] didIt = { select SCHEME_ELEMENT_ID
						from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from ELEMENTSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(didIt.next())
				{
					removeSchemeElement(conn, didIt.scheme_element_id());
				}
				didIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				didIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] lidIt = { select SCHEME_LINK_ID
						from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from LINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(lidIt.next())
				{
					SchemedbInterfaceProtoSave.removeSchemeLink(conn, lidIt.scheme_link_id());
				}
				lidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				lidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] clidIt = { select SCHEME_CABLE_LINK_ID
						from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from CABLELINKSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(clidIt.next())
				{
					removeCableLink(conn, clidIt.scheme_cable_link_id());
				}
				clidIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				clidIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			try
			{
				#sql [connCtx] mpIt = { select SCHEME_PATH_ID
						from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				#sql [connCtx] { delete from PATHSONSCHEME
						where SCHEME_ID = :(scheme_id)
				};
				while(mpIt.next())
				{
					removeSchemePath(conn, mpIt.scheme_path_id());
				}
				mpIt.close();
				conn.commit();
			}
			catch (Exception e)
			{
				mpIt.close();
				System.out.println("Oblazhalis' - " + e.getMessage());
				e.printStackTrace();
			}

			#sql [connCtx] {
				delete from AMFICOM.SCHEMES
					where ID = :scheme_id
			};

			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error removint scheme: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_UPDATING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemes(final Connection conn, String[] ids) throws SQLException {
		for (int i = 0; i < ids.length; i++)
			removeScheme(conn, ids[i]);
		return Constants.ERROR_NO_ERROR;
	}

	#sql private static iterator DeviceIdIterator(String scheme_device_id);
	#sql private static iterator LinkIdIterator(String scheme_link_id);
	#sql private static iterator CableLinkIdIterator(String scheme_cable_link_id);
	#sql private static iterator MapProtoIdIterator(String map_proto_element_id);
	#sql private static iterator ElementIdIterator(String scheme_element_id);
	#sql private static iterator PathIdIterator(String scheme_path_id);
	#sql private static iterator CableThreadIdIterator(String scheme_cable_thread_id);
}
