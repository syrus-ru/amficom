/*
 * $Id: NetdbInterfaceLoad2.sqlj,v 1.1.2.1 2004/08/20 14:03:48 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Network.*;
import java.sql.*;
import java.util.Vector;

/**
 * @version $Revision: 1.1.2.1 $, $Date: 2004/08/20 14:03:48 $
 * @author $Author: bass $
 * @module server_v1
 */
public class NetdbInterfaceLoad2
{
	protected NetdbInterfaceLoad2()
	{
	}

	public static int loadPorts(
			String[] ids,
			PortSeq_TransferableHolder portseq)
	{
		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_interface_id = "";
		String It_address_id = "";
		String It_local_id = "";
		String It_type_id = "";
		String It_equipment_id = "";
		String It_link_id = "";
		String It_domain_id = "";

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		Port_Transferable pt_t;
		Port_Transferable[] pt_ts;
		PortIterator ptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql ptIt = { select
						ID,
						NAME,
						DESCRIPTION,
						INTERFACE_ID,
						ADDRESS_ID,
						LOCAL_ID,
						TYPE_ID,
						EQUIPMENT_ID,
						DOMAIN_ID
					from AMFICOM.PORTS
			};

			while (ptIt.next())
			{
				if(! loadvec.contains(ptIt.id()))
					continue;

				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_interface_id = ptIt.interface_id(); }
				catch(SQLException e) { }
				if(It_interface_id == null) It_interface_id = "";

				try { It_address_id = ptIt.address_id(); }
				catch(Exception e) { }
				if(It_address_id == null) It_address_id = "";
				try { It_local_id = ptIt.local_id(); }
				catch(SQLException e) { }
				if(It_local_id == null) It_local_id = "";
				try { It_type_id = ptIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_equipment_id = ptIt.equipment_id(); }
				catch(SQLException e) { }
				if(It_equipment_id == null) It_equipment_id = "";
				try { It_domain_id = ptIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"PORTCHARACTERISTICS",
						"PORT_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				pt_t = new Port_Transferable(
					It_id,
					It_name,
					It_description,
					It_interface_id,
					It_address_id,
					It_local_id,
					It_type_id,
					It_equipment_id,
					It_domain_id,
					characteristics);

				vector.add(pt_t);
			}// while(ptIt)
			ptIt.close();
			pt_ts = new Port_Transferable[vector.size()];
			vector.copyInto(pt_ts);
			portseq.value = pt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading port: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadEquipments(
			String domain_id,
			String[] ids,
			EquipmentSeq_TransferableHolder equipments,
			Vector port_vec,
			Vector cport_vec,
			Vector test_port_vec)
	{
		int k;

		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_type_id = "";
		String It_longitude = "";
		String It_latitude = "";

		String It_hw_serial = "";
		String It_sw_serial = "";
		String It_hw_version = "";
		String It_sw_version = "";
		String It_inventory_nr = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		String It_supplier = "";
		String It_supplier_code = "";

		String It_eq_class = "";
		String It_image_id = "";

		String It_agent_id = "";
		String It_domain_id = "";
		boolean It_is_kis = false;
		long It_modified = 0;

		Characteristic_Transferable characteristics[];
		String[] port_ids;
		String[] cport_ids;
		String[] test_port_ids;

		Vector vector = new Vector();

		Equipment_Transferable e_t;
		Equipment_Transferable[] e_ts;
		EquipmentIterator eIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql eIt = { select
						ID,
						NAME,
						DESCRIPTION,
						TYPE_ID,
						LONGITUDE,
						LATITUDE,
						HW_SERIAL,
						SW_SERIAL,
						HW_VERSION,
						SW_VERSION,
						INVENTORY_NR,
						MANUFACTURER,
						MANUFACTURER_CODE,
						SUPPLIER,
						SUPPLIER_CODE,
						EQ_CLASS,
						IMAGE_ID,
						AGENT_ID,
						DOMAIN_ID,
						IS_KIS,
						MODIFIED
					from AMFICOM.EQUIPMENTS
					where IS_KIS = 0
					and DOMAIN_ID = :domain_id
			};

			while (eIt.next())
			{
				if(! loadvec.contains(eIt.id()))
					continue;

				try { It_id = eIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = eIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = eIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_type_id = eIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_longitude = eIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_latitude = eIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_hw_serial = eIt.hw_serial(); }
				catch(SQLException e) { }
				if(It_hw_serial == null) It_hw_serial = "";
				try { It_sw_serial = eIt.sw_serial(); }
				catch(SQLException e) { }
				if(It_sw_serial == null) It_sw_serial = "";
				try { It_hw_version = eIt.hw_version(); }
				catch(SQLException e) { }
				if(It_hw_version == null) It_hw_version = "";
				try { It_sw_version = eIt.sw_version(); }
				catch(SQLException e) { }
				if(It_sw_version == null) It_sw_version = "";
				try { It_inventory_nr = eIt.inventory_nr(); }
				catch(SQLException e) { }
				if(It_inventory_nr == null) It_inventory_nr = "";
				try { It_manufacturer = eIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = eIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_supplier = eIt.supplier(); }
				catch(SQLException e) { }
				if(It_supplier == null) It_supplier = "";
				try { It_supplier_code = eIt.supplier_code(); }
				catch(SQLException e) { }
				if(It_supplier_code == null) It_supplier_code = "";
				try { It_eq_class = eIt.eq_class(); }
				catch(SQLException e) { }
				if(It_eq_class == null) It_eq_class = "";
				try { It_image_id = eIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_agent_id = eIt.agent_id(); }
				catch(SQLException e) { }
				if(It_agent_id == null) It_agent_id = "";
				try { It_domain_id = eIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_is_kis = (eIt.is_kis() == 0)? false : true; }
				catch(SQLException e) { }
				try { It_modified = eIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"EQUIPMENTCHARACTERISTICS",
						"EQUIPMENT_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = NetdbInterfaceLoad.loadElementPorts(It_id);
				port_ids = new String[vector2.size()];
				vector2.copyInto(port_ids);
				for(k = 0; k < port_ids.length; k++)
					port_vec.add(NetdbInterfaceLoad.loadPort(port_ids[k]));

				vector2 = NetdbInterfaceLoad.loadElementCablePorts(It_id);
				cport_ids = new String[vector2.size()];
				vector2.copyInto(cport_ids);
				for(k = 0; k < cport_ids.length; k++)
					cport_vec.add(NetdbInterfaceLoad.loadCablePort(cport_ids[k]));

				vector2 = NetdbInterfaceLoad.loadElementTestPorts(It_id);
				test_port_ids = new String[vector2.size()];
				vector2.copyInto(test_port_ids);
				for(k = 0; k < test_port_ids.length; k++)
					test_port_vec.add(NetdbInterfaceLoad.loadTestPort(test_port_ids[k]));

				e_t = new Equipment_Transferable(
					It_id,
					It_name,
					It_description,
					It_type_id,
					It_longitude,
					It_latitude,

					It_hw_serial,
					It_sw_serial,
					It_hw_version,
					It_sw_version,
					It_inventory_nr,
					It_manufacturer,
					It_manufacturer_code,
					It_supplier,
					It_supplier_code,

					It_eq_class,
					It_image_id,

					It_agent_id,
					It_domain_id,
					It_is_kis,
					It_modified,

					port_ids,
					cport_ids,
					test_port_ids,
					characteristics);

				vector.add(e_t);
			}// while(ptIt)
			eIt.close();
			e_ts = new Equipment_Transferable[vector.size()];
			vector.copyInto(e_ts);
			equipments.value = e_ts;

		}
		catch(SQLException e)
		{
			if(eIt != null) try {
			eIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading equipments: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				eIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	public static int loadLinks(
			String domain_id,
			String[] ids,
			LinkSeq_TransferableHolder links)
	{
		int k;

		String It_id = "";
		String It_name = "";
		String It_type_id = "";
		String It_description = "";
		String It_inventory_nr = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		String It_supplier = "";
		String It_supplier_code = "";
		String It_link_class = "";
		String It_holder_id = "";
		String It_start_equipment_id = "";
		String It_start_port_id = "";
		String It_end_equipment_id = "";
		String It_end_port_id = "";
		boolean It_is_holder = false;
		String It_image_id = "";
		String It_domain_id = "";
		long It_modified = 0;
		String It_physical_length = "";
		String It_optical_length = "";

		String[] link_ids;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		Link_Transferable lt_t;
		Link_Transferable[] lt_ts;
		LinkIterator lIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql lIt = { select
						ID,
						NAME,
						TYPE_ID,
						DESCRIPTION,
						INVENTORY_NR,
						MANUFACTURER,
						MANUFACTURER_CODE,
						SUPPLIER,
						SUPPLIER_CODE,
						LINK_CLASS,
						START_EQUIPMENT_ID,
						START_PORT_ID,
						END_EQUIPMENT_ID,
						END_PORT_ID,
						IMAGE_ID,
						MODIFIED,
						DOMAIN_ID,
						PHYSICAL_LENGTH,
						OPTICAL_LENGTH
					from AMFICOM.LINKS
					where DOMAIN_ID = :domain_id
			};

			while (lIt.next())
			{
				if(! loadvec.contains(lIt.id()))
					continue;

				try { It_id = lIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = lIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_type_id = lIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_description = lIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_inventory_nr = lIt.inventory_nr(); }
				catch(SQLException e) { }
				if(It_inventory_nr == null) It_inventory_nr = "";
				try { It_manufacturer = lIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = lIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_supplier = lIt.supplier(); }
				catch(SQLException e) { }
				if(It_supplier == null) It_supplier = "";
				try { It_supplier_code = lIt.supplier_code(); }
				catch(SQLException e) { }
				if(It_supplier_code == null) It_supplier_code = "";
				try { It_link_class = lIt.link_class(); }
				catch(SQLException e) { }
				if(It_link_class == null) It_link_class = "";
				try { It_start_equipment_id = lIt.start_equipment_id(); }
				catch(SQLException e) { }
				if(It_start_equipment_id == null) It_start_equipment_id = "";
				try { It_start_port_id = lIt.start_port_id(); }
				catch(SQLException e) { }
				if(It_start_port_id == null) It_start_port_id = "";
				try { It_end_equipment_id = lIt.end_equipment_id(); }
				catch(SQLException e) { }
				if(It_end_equipment_id == null) It_end_equipment_id = "";
				try { It_end_port_id = lIt.end_port_id(); }
				catch(SQLException e) { }
				if(It_end_port_id == null) It_end_port_id = "";
				try { It_image_id = lIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_modified = lIt.modified().getTime(); }
				catch(SQLException e) { }
				try { It_domain_id = lIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_physical_length = lIt.physical_length(); }
				catch(SQLException e) { }
				if(It_physical_length == null) It_physical_length = "";
				try { It_optical_length = lIt.optical_length(); }
				catch(SQLException e) { }
				if(It_optical_length == null) It_optical_length = "";

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"LINKCHARACTERISTICS",
						"LINK_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				lt_t = new Link_Transferable(
					It_id,
					It_name,
					It_type_id,
					It_description,
					It_inventory_nr,
					It_manufacturer,
					It_manufacturer_code,
					It_supplier,
					It_supplier_code,
					It_link_class,
					It_image_id,
					It_start_equipment_id,
					It_start_port_id,
					It_end_equipment_id,
					It_end_port_id,
					It_domain_id,
					It_modified,
					It_physical_length,
					It_optical_length,
					characteristics);

				vector.add(lt_t);
			}// while(lIt)
			lIt.close();
			lt_ts = new Link_Transferable[vector.size()];
			vector.copyInto(lt_ts);
			links.value = lt_ts;

		}
		catch(SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading links: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				lIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadCableLinks(
			String domain_id,
			String[] ids,
			CableLinkSeq_TransferableHolder links)
	{
		int k;

		String It_id = "";
		String It_name = "";
		String It_type_id = "";
		String It_description = "";
		String It_inventory_nr = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		String It_supplier = "";
		String It_supplier_code = "";
		String It_link_class = "";
		String It_start_equipment_id = "";
		String It_start_port_id = "";
		String It_end_equipment_id = "";
		String It_end_port_id = "";
		String It_image_id = "";
		String It_domain_id = "";
		long It_modified = 0;
		String It_physical_length = "";
		String It_optical_length = "";

		CableLinkThread_Transferable[] threads;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		CableLink_Transferable lt_t;
		CableLink_Transferable[] lt_ts;
		CableLinkIterator lIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql lIt = { select
						ID,
						NAME,
						TYPE_ID,
						DESCRIPTION,
						INVENTORY_NR,
						MANUFACTURER,
						MANUFACTURER_CODE,
						SUPPLIER,
						SUPPLIER_CODE,
						LINK_CLASS,
						START_EQUIPMENT_ID,
						START_PORT_ID,
						END_EQUIPMENT_ID,
						END_PORT_ID,
						IMAGE_ID,
						MODIFIED,
						DOMAIN_ID,
						PHYSICAL_LENGTH,
						OPTICAL_LENGTH
					from AMFICOM.CABLELINKS
					where DOMAIN_ID = :domain_id
			};

			while (lIt.next())
			{
				if(! loadvec.contains(lIt.id()))
					continue;

				try { It_id = lIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = lIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_type_id = lIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_description = lIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_inventory_nr = lIt.inventory_nr(); }
				catch(SQLException e) { }
				if(It_inventory_nr == null) It_inventory_nr = "";
				try { It_manufacturer = lIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = lIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_supplier = lIt.supplier(); }
				catch(SQLException e) { }
				if(It_supplier == null) It_supplier = "";
				try { It_supplier_code = lIt.supplier_code(); }
				catch(SQLException e) { }
				if(It_supplier_code == null) It_supplier_code = "";
				try { It_link_class = lIt.link_class(); }
				catch(SQLException e) { }
				if(It_link_class == null) It_link_class = "";
				try { It_start_equipment_id = lIt.start_equipment_id(); }
				catch(SQLException e) { }
				if(It_start_equipment_id == null) It_start_equipment_id = "";
				try { It_start_port_id = lIt.start_port_id(); }
				catch(SQLException e) { }
				if(It_start_port_id == null) It_start_port_id = "";
				try { It_end_equipment_id = lIt.end_equipment_id(); }
				catch(SQLException e) { }
				if(It_end_equipment_id == null) It_end_equipment_id = "";
				try { It_end_port_id = lIt.end_port_id(); }
				catch(SQLException e) { }
				if(It_end_port_id == null) It_end_port_id = "";
				try { It_image_id = lIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_modified = lIt.modified().getTime(); }
				catch(SQLException e) { }
				try { It_domain_id = lIt.domain_id(); }
				catch(SQLException e) { }
				if(It_domain_id == null) It_domain_id = "";
				try { It_physical_length = lIt.physical_length(); }
				catch(SQLException e) { }
				if(It_physical_length == null) It_physical_length = "";
				try { It_optical_length = lIt.optical_length(); }
				catch(SQLException e) { }
				if(It_optical_length == null) It_optical_length = "";

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"CABLELINKCHARACTERISTICS",
						"CABLE_LINK_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = NetdbInterfaceLoad.loadCableThreads(It_id);
				threads = new CableLinkThread_Transferable[vector2.size()];
				vector2.copyInto(threads);

				lt_t = new CableLink_Transferable(
					It_id,
					It_name,
					It_type_id,
					It_description,
					It_inventory_nr,
					It_manufacturer,
					It_manufacturer_code,
					It_supplier,
					It_supplier_code,
					It_link_class,
					It_image_id,
					It_start_equipment_id,
					It_start_port_id,
					It_end_equipment_id,
					It_end_port_id,
					It_domain_id,
					It_modified,
					It_physical_length,
					It_optical_length,
					threads,
					characteristics);

				vector.add(lt_t);
			}// while(lIt)
			lIt.close();
			lt_ts = new CableLink_Transferable[vector.size()];
			vector.copyInto(lt_ts);
			links.value = lt_ts;

		}
		catch(SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading links: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				lIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadTestPorts(
			String[] ids,
			TestPortSeq_TransferableHolder tportseq)
	{
		String It_id = "";
		String It_name = "";
		String It_type_id = "";
		String It_equipment_id = "";
		String It_port_id = "";

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		TestPort_Transferable tpt_t;
		TestPort_Transferable[] tpt_ts;
		TestPortIterator tptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql tptIt = { select
						ID,
						NAME,
						TYPE_ID,
						EQUIPMENT_ID,
						PORT_ID
					from AMFICOM.TESTPORTS
			};

			while (tptIt.next())
			{
				if(! loadvec.contains(tptIt.id()))
					continue;

				try { It_id = tptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = tptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_type_id = tptIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_equipment_id = tptIt.equipment_id(); }
				catch(SQLException e) { }
				if(It_equipment_id == null) It_equipment_id = "";
				try { It_port_id = tptIt.port_id(); }
				catch(SQLException e) { }
				if(It_port_id == null) It_port_id = "";

				vector2 = NetdbInterfaceLoad.loadCharacteristics(
						"TESTPORTCHARACTERISTICS",
						"TEST_PORT_ID",
						It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				tpt_t = new TestPort_Transferable(
					It_id,
					It_name,
					It_type_id,
					It_equipment_id,
					It_port_id,
					characteristics);

				vector.add(tpt_t);
			}// while(tptIt)
			tptIt.close();
			tpt_ts = new TestPort_Transferable[vector.size()];
			vector.copyInto(tpt_ts);
			tportseq.value = tpt_ts;

		}
		catch(SQLException e)
		{
			if(tptIt != null) try {
			tptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading test ports: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				tptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator ( String id );

	#sql public static iterator CharacteristicIterator (
		String id,
		String characteristic_type_id,
		String value);

	#sql public static iterator PortIterator(
		String id,
		String name,
		String description,
		String interface_id,
		String address_id,
		String local_id,
		String type_id,
		String equipment_id,
		String domain_id);

	#sql public static iterator CablePortIterator(
		String id,
		String name,
		String description,
		String interface_id,
		String address_id,
		String local_id,
		String type_id,
		String equipment_id,
		String domain_id);

	#sql public static iterator EquipmentIterator(
		String id,
		String name,
		String description,
		String type_id,
		String longitude,
		String latitude,
		String hw_serial,
		String sw_serial,
		String hw_version,
		String sw_version,
		String inventory_nr,
		String manufacturer,
		String manufacturer_code,
		String supplier,
		String supplier_code,
		String eq_class,
		String image_id,
		String agent_id,
		String domain_id,
		int is_kis,
		Timestamp modified);

	#sql public static iterator LinkIterator(
		String id,
		String name,
		String type_id,
		String description,
		String inventory_nr,
		String manufacturer,
		String manufacturer_code,
		String supplier,
		String supplier_code,
		String link_class,
		String start_equipment_id,
		String start_port_id,
		String end_equipment_id,
		String end_port_id,
		String image_id,
		Timestamp modified,
		String domain_id,
		String physical_length,
		String optical_length);

	#sql public static iterator CableLinkIterator(
		String id,
		String name,
		String type_id,
		String description,
		String inventory_nr,
		String manufacturer,
		String manufacturer_code,
		String supplier,
		String supplier_code,
		String link_class,
		String start_equipment_id,
		String start_port_id,
		String end_equipment_id,
		String end_port_id,
		String image_id,
		Timestamp modified,
		String domain_id,
		String physical_length,
		String optical_length);

	#sql public static iterator TestPortIterator(
		String id,
		String name,
		String type_id,
		String equipment_id,
		String port_id);

	#sql public static iterator ThreadIterator(
		String id,
		String name,
		String color,
		String mark,
		String link_type_id);
}
