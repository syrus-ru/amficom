/*
 * $Id: SchemedbInterfaceProtoSave.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import java.util.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemedbInterfaceProtoSave {
	private SchemedbInterfaceProtoSave() {
	}

	private static int saveDevicePorts(final Connection conn, String device_id, SchemePort_Transferable[] ports) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator idIt = null;

		int i;
		int len;
		int index = 0;

		Vector vec = new Vector();
		Vector id_vec = new Vector();
		Vector del_vec = new Vector();

		for (i = 0; i < ports.length; i++)
		{
			vec.add(ports[i]);
			id_vec.add(ports[i].id);
		}

		try
		{
			#sql [connCtx] idIt = { select SCHEME_PORT_ID
				from AMFICOM.SCHEMEDEVICEPORTS
					where SCHEME_DEVICE_ID = :device_id };

			while (idIt.next())
			{
				if(id_vec.contains(idIt.scheme_port_id()))
				{
					index = id_vec.indexOf(idIt.scheme_port_id());
					System.out.println("update port " + ports[index].id);
					try
					{
						#sql [connCtx] {
							update AMFICOM.SCHEMEPORTS
								set
									NAME = :(ports[index].name),
									PORT_TYPE_ID = :(ports[index].portTypeId),
									PORT_ID = :(ports[index].portId),
									IS_ACCESS_PORT = :(ports[index].isMeasurementPort ? 1 : 0),
									ACCESS_PORT_TYPE_ID = :(ports[index].measurementPortTypeId),
									ACCESS_PORT_ID = :(ports[index].measurementPortId),
									DIRECTION_TYPE = :(ports[index].directionType)
								where ID = :(ports[index].id)
						};
						MapdbInterfaceSave.saveAttributes(conn, "SCHEMEPORTATTRIBUTES", "SCHEME_PORT_ID", ports[index].id, ports[index].attributes);
						CatalogSchemeMapUpdater.schemePortUpdated(conn, ports[index]);
					}
					catch(SQLException e)
					{
						System.out.println("error saVing scheme port: " + e.getMessage());
						e.printStackTrace();
						return Constants.ERROR_UPDATING;
					}
					conn.commit();
					vec.remove(ports[index]);
				}
				else
					del_vec.add(idIt.scheme_port_id());
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
		}

		len = vec.size();
		for (i = 0; i < len; i++)
		{
			SchemePort_Transferable port = (SchemePort_Transferable )vec.get(i);
			System.out.println("insert new port " + port.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.SCHEMEPORTS(
							ID,
							NAME,
							PORT_TYPE_ID,
							PORT_ID,
							IS_ACCESS_PORT,
							ACCESS_PORT_TYPE_ID,
							ACCESS_PORT_ID,
							DIRECTION_TYPE)
						values(
							 :(port.id),
							 :(port.name),
							 :(port.portTypeId),
							 :(port.portId),
							 :(port.isMeasurementPort ? 1 : 0),
							 :(port.measurementPortTypeId),
							 :(port.measurementPortId),
							 :(port.directionType) )
				};

				MapdbInterfaceSave.saveAttributes(conn, "SCHEMEPORTATTRIBUTES", "SCHEME_PORT_ID", port.id, port.attributes);
				String at_s = ResourcedbInterface.getUid(conn, "deviceport");
				#sql [connCtx] {
					insert into AMFICOM.SCHEMEDEVICEPORTS(
							ID,
							SCHEME_DEVICE_ID,
							SCHEME_PORT_ID)
						values(
							:at_s,
							:(device_id),
							:(port.id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing port: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			catch(Exception exx)
			{
				System.out.println("error generating port: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}
		}

		len = del_vec.size();
		for (i = 0; i < len; i++)
		{
			try
			{
				String s = (String )del_vec.get(i);
				#sql [connCtx] {
					delete from AMFICOM.SCHEMEDEVICEPORTS
						where SCHEME_PORT_ID = :s
				};
				#sql [connCtx] {
					delete from AMFICOM.SCHEMEPORTS
						where ID = :s
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("could not delete ports for device " + device_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveDeviceCablePorts(final Connection conn, String device_id, SchemeCablePort_Transferable[] ports) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CablePortIdIterator idIt = null;

		int i;
		int len;
		int index = 0;

		Vector vec = new Vector();
		Vector id_vec = new Vector();
		Vector del_vec = new Vector();

		for (i = 0; i < ports.length; i++)
		{
			vec.add(ports[i]);
			id_vec.add(ports[i].id);
		}

		try
		{
			#sql [connCtx] idIt = { select SCHEME_CABLE_PORT_ID
				from AMFICOM.SCHEMEDEVICECABLEPORTS
					where SCHEME_DEVICE_ID = :device_id };

			while (idIt.next())
			{
				if(id_vec.contains(idIt.scheme_cable_port_id()))
				{
					index = id_vec.indexOf(idIt.scheme_cable_port_id());
					System.out.println("update port " + ports[index].id);
					try
					{
						#sql [connCtx] {
							update AMFICOM.SCHEMECABLEPORTS
								set
									NAME = :(ports[index].name),
									CABLE_PORT_TYPE_ID = :(ports[index].cablePortTypeId),
									CABLE_PORT_ID = :(ports[index].cablePortId),
									IS_ACCESS_PORT = :(ports[index].isMeasurementPort ? 1 : 0),
									ACCESS_PORT_TYPE_ID = :(ports[index].measurementPortTypeId),
									ACCESS_PORT_ID = :(ports[index].measurementPortId),
									DIRECTION_TYPE = :(ports[index].directionType)
								where ID = :(ports[index].id)
						};
						MapdbInterfaceSave.saveAttributes(conn, "SCHEMECABLEPORTATTRIBUTES", "SCHEME_CABLE_PORT_ID", ports[index].id, ports[index].attributes);
						CatalogSchemeMapUpdater.schemeCablePortUpdated(conn, ports[index]);
					}
					catch(SQLException e)
					{
						System.out.println("error saVing scheme cable port: " + e.getMessage());
						e.printStackTrace();
						return Constants.ERROR_UPDATING;
					}
					conn.commit();
					vec.remove(ports[index]);
				}
				else
					del_vec.add(idIt.scheme_cable_port_id());
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
		}

		len = vec.size();
		for (i = 0; i < len; i++)
		{
			SchemeCablePort_Transferable port = (SchemeCablePort_Transferable )vec.get(i);
			System.out.println("insert new cable port " + port.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.SCHEMECABLEPORTS(
							ID,
							NAME,
							CABLE_PORT_TYPE_ID,
							CABLE_PORT_ID,
							IS_ACCESS_PORT,
							ACCESS_PORT_TYPE_ID,
							ACCESS_PORT_ID,
							DIRECTION_TYPE)
						values(
							 :(port.id),
							 :(port.name),
							 :(port.cablePortTypeId),
							 :(port.cablePortId),
							 :(port.isMeasurementPort ? 1 : 0),
							 :(port.measurementPortTypeId),
							 :(port.measurementPortId),
							 :(port.directionType) )
				};

				MapdbInterfaceSave.saveAttributes(conn, "SCHEMECABLEPORTATTRIBUTES", "SCHEME_CABLE_PORT_ID", port.id, port.attributes);
				String at_s = ResourcedbInterface.getUid(conn, "schemecableport");
				#sql [connCtx] {
					insert into AMFICOM.SCHEMEDEVICECABLEPORTS(
							ID,
							SCHEME_DEVICE_ID,
							SCHEME_CABLE_PORT_ID)
						values(
							:at_s,
							:(device_id),
							:(port.id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing cable port: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			catch(Exception exx)
			{
				System.out.println("error generating cable port: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}
		}

		len = del_vec.size();
		for (i = 0; i < len; i++)
		{
			try
			{
				String s = (String )del_vec.get(i);
				#sql [connCtx] {
					delete from AMFICOM.SCHEMEDEVICECABLEPORTS
						where SCHEME_CABLE_PORT_ID = :s
				};
				#sql [connCtx] {
					delete from AMFICOM.SCHEMECABLEPORTS
						where ID = :s
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("could not cable delete ports for device " + device_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveLinks(final Connection conn, SchemeLink_Transferable[] links) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;
		int count = 0;

		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.SCHEMELINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update link " + links[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMELINKS
							set
								NAME = :(links[i].name),
								LINK_TYPE_ID = :(links[i].linkTypeId),
								LINK_ID = :(links[i].linkId),
								SOURCe_PORT_ID = :(links[i].sourcePortId),
								TARGET_PORT_ID = :(links[i].targetPortId),
								PHYSICAL_LENGTH = :(links[i].physicalLength),
								OPTICAL_LENGTH = :(links[i].opticalLength)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new link " + links[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.SCHEMELINKS(
								ID,
								NAME,
								LINK_TYPE_ID,
								LINK_ID,
								SOURCE_PORT_ID,
								TARGET_PORT_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								:(links[i].id),
								:(links[i].name),
								:(links[i].linkTypeId),
								:(links[i].linkId),
								:(links[i].sourcePortId),
								:(links[i].targetPortId),
								:(links[i].physicalLength),
								:(links[i].opticalLength) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			MapdbInterfaceSave.saveAttributes(conn, "SCHEMELINKATTRIBUTES", "SCHEME_LINK_ID", links[i].id, links[i].attributes);
			CatalogSchemeMapUpdater.schemeLinkUpdated(conn, links[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveSchemeDevices(final Connection conn, SchemeDevice_Transferable[] devices) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = devices.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.SCHEMEDEVICES
						where ID = :(devices[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update device " + devices[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.SCHEMEDEVICES
							set
								NAME = :(devices[i].name)
							where ID = :(devices[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing device: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new device " + devices[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.SCHEMEDEVICES(ID, NAME)
							values(:(devices[i].id), :(devices[i].name) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing device: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			MapdbInterfaceSave.saveAttributes(conn, "SCHEMEDEVICEATTRIBUTES", "SCHEME_DEVICE_ID", devices[i].id, devices[i].attributes);

			saveDevicePorts(conn, devices[i].id, devices[i].ports);
			saveDeviceCablePorts(conn, devices[i].id, devices[i].cableports);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveProtoElement(final Connection conn, String domain_id, SchemeProtoElement_Transferable proto, Hashtable other_protos) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		String scheme_cell_id = "";
		String ugo_cell_id = "";
		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.SCHEMEPROTOELEMENTS
					where ID = :(proto.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update proto " + proto.id);
			try
			{
				Timestamp ts = new Timestamp(proto.modified);
				#sql [connCtx] {
					update AMFICOM.SCHEMEPROTOELEMENTS
						set
							NAME = :(proto.name),
							EQUIPMENT_TYPE_ID = :(proto.equipmentTypeId),
							IS_TOP_LEVEL = 1,
							MODIFIED = :ts,
							SYMBOL_ID = :(proto.symbolId),
							LABEL = :(proto.label),
							DOMAIN_ID = :domain_id
						where ID = :(proto.id)
				};
				#sql [connCtx] {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto.id)
				};
				ResourcedbInterface.setImage(conn, scheme_cell_id, proto.schemecell);
				#sql [connCtx] {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto.id)
				};
				ResourcedbInterface.setImage(conn, ugo_cell_id, proto.ugocell);
			}
			catch(SQLException e)
			{
				System.out.println("error saVing proto: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("insert new proto " + proto.id);
			try
			{
				scheme_cell_id = ResourcedbInterface.setImage(conn, proto.schemecell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :scheme_cell_id
				};
				ugo_cell_id = ResourcedbInterface.setImage(conn, proto.ugocell);
				#sql [connCtx] {
					update AMFICOM.IMAGERESOURCES
						set SOURCE_STRING = 'scheme'
						where ID = :ugo_cell_id
				};
				#sql [connCtx] {
					insert into AMFICOM.SCHEMEPROTOELEMENTS(
							ID,
							NAME,
							EQUIPMENT_TYPE_ID,
							IS_TOP_LEVEL,
							SCHEME_CELL_ID,
							UGO_CELL_ID,
							SYMBOL_ID,
							LABEL,
							MODIFIED,
							DOMAIN_ID)
						values(
							:(proto.id),
							:(proto.name),
							:(proto.equipmentTypeId),
							1,
							:scheme_cell_id,
							:ugo_cell_id,
							:(proto.symbolId),
							:(proto.label),
							SYSDATE,
							:domain_id )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing proto: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		MapdbInterfaceSave.saveAttributes(conn, "SCHEMEPROTOELEMENTATTRIBUTES", "SCHEME_PROTO_ELEMENT_ID", proto.id, proto.attributes);
		saveSchemeDevices(conn, proto.devices);
		try
		{
			#sql [connCtx] { delete from SCHEMEPROTOELEMENTDEVICES
				where SCHEME_PROTO_ELEMENT_ID = :(proto.id)
			};

			for (i = 0; i < proto.devices.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemedevice");
				#sql [connCtx] { insert into SCHEMEPROTOELEMENTDEVICES(ID, SCHEME_PROTO_ELEMENT_ID, SCHEME_DEVICE_ID)
					values(:a_id, :(proto.id), :(proto.devices[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		saveLinks(conn, proto.links);
		try
		{
			#sql [connCtx] { delete from SCHEMEPROTOELEMENTLINKS
				where SCHEME_PROTO_ELEMENT_ID = :(proto.id)
			};

			for (i = 0; i < proto.links.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "schemelink");
				#sql [connCtx] { insert into SCHEMEPROTOELEMENTLINKS(ID, SCHEME_PROTO_ELEMENT_ID, SCHEME_LINK_ID)
					values(:a_id, :(proto.id), :(proto.links[i].id) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}

		try
		{
			#sql [connCtx] { delete from SCHEMEPROTOELEMENTPES
				where SCHEME_PROTO_ELEMENT_ID = :(proto.id)
			};

			for (i = 0; i < proto.protoElementIds.length; i++)
			{
				String a_id = ResourcedbInterface.getUid(conn, "proto");
				#sql [connCtx] { insert into SCHEMEPROTOELEMENTPES(ID, SCHEME_PROTO_ELEMENT_ID, SCHEME_PE_ID)
					values(:a_id, :(proto.id), :(proto.protoElementIds[i]) )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing proto: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveProtoElements(final Connection conn, String domain_id, SchemeProtoElement_Transferable[] protos) throws SQLException {
		for (int i = 0; i < protos.length; i++)
			saveProtoElement(conn, domain_id, protos[i], new Hashtable());
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeSchemePort(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		try {
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPORTATTRIBUTES", "SCHEME_PORT_ID", id);

			#sql [connCtx] { delete from SCHEMEDEVICEPORTS
					where SCHEME_PORT_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPORTS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeSchemeCablePort(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CablePortIdIterator pidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMECABLEPORTATTRIBUTES", "SCHEME_CABLE_PORT_ID", id);

			#sql [connCtx] { delete from SCHEMEDEVICECABLEPORTS
					where SCHEME_CABLE_PORT_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLEPORTS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeDevice(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		CablePortIdIterator cpidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEDEVICEATTRIBUTES", "SCHEME_DEVICE_ID", id);

			#sql [connCtx] pidIt = { select SCHEME_PORT_ID
					from SCHEMEDEVICEPORTS
					where SCHEME_DEVICE_ID = :id
			};
			while(pidIt.next())
			{
				removeSchemePort(conn, pidIt.scheme_port_id());
			}
			pidIt.close();

			#sql [connCtx] cpidIt = { select SCHEME_CABLE_PORT_ID
					from SCHEMEDEVICECABLEPORTS
					where SCHEME_DEVICE_ID = :id
			};
			while(cpidIt.next())
			{
				removeSchemeCablePort(conn, cpidIt.scheme_cable_port_id());
			}
			cpidIt.close();

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEDEVICES
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			if(pidIt != null) try {
			pidIt.close();
			}catch(Exception exe) {}
			if(cpidIt != null) try {
			cpidIt.close();
			}catch(Exception exe) {}
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeLink(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMELINKATTRIBUTES", "SCHEME_LINK_ID", id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMELINKS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeProtoElements(final Connection conn, String[] proto_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		MapProtoIdIterator mpIt = null;

		for(int i = 0; i < proto_ids.length; i++)
		{
			try
			{
				#sql [connCtx] {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				#sql [connCtx] {
					delete from AMFICOM.IMAGERESOURCES
						where ID = :scheme_cell_id
				};

				#sql [connCtx] {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				#sql [connCtx] {
					delete from AMFICOM.IMAGERESOURCES
						where ID = :ugo_cell_id
				};

				#sql [connCtx] { delete from SCHEMEPROTOELEMENTPES
					where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
				};

				try
				{
					#sql [connCtx] didIt = { select SCHEME_DEVICE_ID
							from SCHEMEPROTOELEMENTDEVICES
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from SCHEMEPROTOELEMENTDEVICES
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(didIt.next())
					{
						removeSchemeDevice(conn, didIt.scheme_device_id());
					}
					didIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					didIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					#sql [connCtx] lidIt = { select SCHEME_LINK_ID
							from SCHEMEPROTOELEMENTLINKS
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from SCHEMEPROTOELEMENTLINKS
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(lidIt.next())
					{
						removeSchemeLink(conn, lidIt.scheme_link_id());
					}
					lidIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					lidIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					#sql [connCtx] mpIt = { select MAP_PROTO_ELEMENT_ID
							from AMFICOM.MAPPROTOELEMENTPELINKS
							where PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from AMFICOM.MAPPROTOELEMENTPELINKS
							where PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(mpIt.next())
					{
						String mp_id = mpIt.map_proto_element_id();
						#sql [connCtx] { update AMFICOM.MAPPROTOELEMENTS
							set MODIFIED = SYSDATE
							where ID = :mp_id
						};
					}
					mpIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					mpIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPROTOELEMENTATTRIBUTES", "SCHEME_PROTO_ELEMENT_ID", proto_ids[i]);

				#sql [connCtx] {
					delete from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing proto: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql private static iterator DeviceIdIterator(String scheme_device_id);
	#sql private static iterator LinkIdIterator(String scheme_link_id);
	#sql private static iterator PortIdIterator(String scheme_port_id);
	#sql private static iterator CablePortIdIterator(String scheme_cable_port_id);
	#sql private static iterator MapProtoIdIterator(String map_proto_element_id);
}
