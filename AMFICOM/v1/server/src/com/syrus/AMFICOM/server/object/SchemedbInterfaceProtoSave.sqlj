/*
 * $Id: SchemedbInterfaceProtoSave.sqlj,v 1.1.2.6 2004/12/23 12:06:02 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.6 $, $Date: 2004/12/23 12:06:02 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SchemedbInterfaceProtoSave {
	private SchemedbInterfaceProtoSave() {
	}

	private static int removeSchemePort(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		try {
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPORTATTRIBUTES", "SCHEME_PORT_ID", id);

			#sql [connCtx] { delete from SCHEMEDEVICEPORTS
					where SCHEME_PORT_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEPORTS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int removeSchemeCablePort(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		CablePortIdIterator pidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMECABLEPORTATTRIBUTES", "SCHEME_CABLE_PORT_ID", id);

			#sql [connCtx] { delete from SCHEMEDEVICECABLEPORTS
					where SCHEME_CABLE_PORT_ID = :id
			};

			#sql [connCtx] {
				delete from AMFICOM.SCHEMECABLEPORTS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeDevice(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		CablePortIdIterator cpidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEDEVICEATTRIBUTES", "SCHEME_DEVICE_ID", id);

			#sql [connCtx] pidIt = { select SCHEME_PORT_ID
					from SCHEMEDEVICEPORTS
					where SCHEME_DEVICE_ID = :id
			};
			while(pidIt.next())
			{
				removeSchemePort(conn, pidIt.scheme_port_id());
			}
			pidIt.close();

			#sql [connCtx] cpidIt = { select SCHEME_CABLE_PORT_ID
					from SCHEMEDEVICECABLEPORTS
					where SCHEME_DEVICE_ID = :id
			};
			while(cpidIt.next())
			{
				removeSchemeCablePort(conn, cpidIt.scheme_cable_port_id());
			}
			cpidIt.close();

			#sql [connCtx] {
				delete from AMFICOM.SCHEMEDEVICES
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			if(pidIt != null) try {
			pidIt.close();
			}catch(Exception exe) {}
			if(cpidIt != null) try {
			cpidIt.close();
			}catch(Exception exe) {}
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeSchemeLink(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		PortIdIterator pidIt = null;
		try
		{
			MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMELINKATTRIBUTES", "SCHEME_LINK_ID", id);

			#sql [connCtx] {
				delete from AMFICOM.SCHEMELINKS
					where ID = :id
			};
			conn.commit();
		}
		catch (Exception e)
		{
			System.out.println("Oblazhalis' - " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeProtoElements(final Connection conn, String[] proto_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String scheme_cell_id = "";
		String ugo_cell_id = "";
		DeviceIdIterator didIt = null;
		LinkIdIterator lidIt = null;
		MapProtoIdIterator mpIt = null;

		for(int i = 0; i < proto_ids.length; i++)
		{
			try
			{
				#sql [connCtx] {
					select SCHEME_CELL_ID into :scheme_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				#sql [connCtx] {
					delete from AMFICOM.IMAGERESOURCES
						where ID = :scheme_cell_id
				};

				#sql [connCtx] {
					select UGO_CELL_ID into :ugo_cell_id
						from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				#sql [connCtx] {
					delete from AMFICOM.IMAGERESOURCES
						where ID = :ugo_cell_id
				};

				#sql [connCtx] { delete from SCHEMEPROTOELEMENTPES
					where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
				};

				try
				{
					#sql [connCtx] didIt = { select SCHEME_DEVICE_ID
							from SCHEMEPROTOELEMENTDEVICES
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from SCHEMEPROTOELEMENTDEVICES
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(didIt.next())
					{
						removeSchemeDevice(conn, didIt.scheme_device_id());
					}
					didIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					didIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					#sql [connCtx] lidIt = { select SCHEME_LINK_ID
							from SCHEMEPROTOELEMENTLINKS
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from SCHEMEPROTOELEMENTLINKS
							where SCHEME_PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(lidIt.next())
					{
						removeSchemeLink(conn, lidIt.scheme_link_id());
					}
					lidIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					lidIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				try
				{
					#sql [connCtx] mpIt = { select MAP_PROTO_ELEMENT_ID
							from AMFICOM.MAPPROTOELEMENTPELINKS
							where PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					#sql [connCtx] { delete from AMFICOM.MAPPROTOELEMENTPELINKS
							where PROTO_ELEMENT_ID = :(proto_ids[i])
					};
					while(mpIt.next())
					{
						String mp_id = mpIt.map_proto_element_id();
						#sql [connCtx] { update AMFICOM.MAPPROTOELEMENTS
							set MODIFIED = SYSDATE
							where ID = :mp_id
						};
					}
					mpIt.close();
					conn.commit();
				}
				catch (Exception e)
				{
					mpIt.close();
					System.out.println("Oblazhalis' - " + e.getMessage());
					e.printStackTrace();
				}

				MapdbInterfaceRemove.removeElementAttributes(conn, "SCHEMEPROTOELEMENTATTRIBUTES", "SCHEME_PROTO_ELEMENT_ID", proto_ids[i]);

				#sql [connCtx] {
					delete from AMFICOM.SCHEMEPROTOELEMENTS
						where ID = :(proto_ids[i])
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing proto: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql private static iterator DeviceIdIterator(String scheme_device_id);
	#sql private static iterator LinkIdIterator(String scheme_link_id);
	#sql private static iterator PortIdIterator(String scheme_port_id);
	#sql private static iterator CablePortIdIterator(String scheme_cable_port_id);
	#sql private static iterator MapProtoIdIterator(String map_proto_element_id);
}
