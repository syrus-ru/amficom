/*
 * $Id: AMFICOMdbGeneral.sqlj,v 1.1.2.6 2004/10/18 15:31:41 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Admin.*;
import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.io.Rewriter;
import com.syrus.util.database.JdbcBlobManager;
import java.sql.*;
import java.util.*;
import org.omg.CORBA.WStringSeqHolder;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.6 $, $Date: 2004/10/18 15:31:41 $
 * @author $Author: bass $
 * @module server_v1
 */
final class AMFICOMdbGeneral {
	private AMFICOMdbGeneral() {
	}

	static void checkUserPrivileges(final Connection conn, AccessIdentity_Transferable accessIdentity) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		try {
			#sql [connCtx] {
				UPDATE amficom.loggedusers SET accessed = SYSDATE WHERE id = :(accessIdentity.sess_id)
			};
			conn.commit();
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_INSUFFICIENT_PRIVILEGES, "Ошибка пользователя: " + sqle.getMessage());
		}
	}

	static void login(final Connection conn, String username, byte password[], String ior, AccessIdentity_TransferableHolder accessIdentity) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		String id;
		String type;
		#sql [connCtx] {
			SELECT id, type INTO :id, :type FROM amficom.users WHERE login = :username
		};
		if (type.equals("operatorprofile")) {
			String op_id;
			#sql [connCtx] {
				SELECT operator_id INTO :op_id FROM amficom.users WHERE login = :username
			};

			Blob pwd_blob;
			long pwd_exp;
			#sql [connCtx] {
				SELECT password, password_expiry INTO :pwd_blob, :pwd_exp FROM amficom.operatorprofiles WHERE id = :op_id
			};

			byte pwd_bytes[] = JdbcBlobManager.getData(pwd_blob);
			String decpwd = Rewriter.read(pwd_bytes);
			String logpwd = Rewriter.read(password);
			if (!decpwd.equals(logpwd))
				throw new AMFICOMRemoteException(Constants.ERROR_WRONG_PASSWORD, "Wrong password.");

			if ((!id.equals("sys")) && (pwd_exp != 0) && (pwd_exp < System.currentTimeMillis()))
				throw new AMFICOMRemoteException(Constants.ERROR_PASSWORD_EXPIRED, "Password expired.");
		}
		String sess = ResourcedbInterface.getUid(conn, "loggeduser");

		#sql [connCtx] {
			INSERT INTO amficom.iors (id, ior) VALUES (:sess, empty_blob())
		};
		JdbcBlobManager.setData(conn, "ior", "amficom.iors", "id = '" + sess + '\'', false, ior.getBytes());
		#sql [connCtx] {
			INSERT INTO amficom.loggedusers (id, name, logged, user_id, accessed) VALUES (:sess, :username, sysdate, :id, sysdate)
		};
		conn.commit();
		accessIdentity.value = new AccessIdentity_Transferable(System.currentTimeMillis(), username, id, sess, "sysdomain");
	}

	static void logout(final Connection conn, AccessIdentity_Transferable accessIdentity) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String sessid = accessIdentity.sess_id;
		#sql [connCtx] {
			DELETE FROM amficom.iors WHERE id = :sessid
		};
		#sql [connCtx] {
			DELETE FROM amficom.loggedusers WHERE id = :sessid
		};
		conn.commit();
	}

	static void getLoggedUserIds(final Connection conn, AccessIdentity_Transferable accessIdentity, WStringSeqHolder userids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		UserIdIterator uIt = null;
		try {
			#sql [connCtx] uIt = {
				SELECT user_id FROM amficom.loggedusers
			};
			List userIdList = new LinkedList();
			while(uIt.next())
				userIdList.add(uIt.user_id());
			userids.value = (String[]) (userIdList.toArray(new String[userIdList.size()]));
		} finally {
			if (uIt != null)
				uIt.close();
		}
	}

	static void changePassword(final Connection conn, AccessIdentity_Transferable accessIdentity, byte[] oldpassword, byte[] newpassword) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		String user_id;
		#sql [connCtx] {
			SELECT user_id INTO :user_id FROM amficom.loggedusers WHERE id = :(accessIdentity.sess_id)
		};

		String type;
		#sql [connCtx] {
			SELECT type INTO :type FROM amficom.users WHERE id = :user_id
		};
		if (type.equals("operatorprofile")) {
			String op_id;
			#sql [connCtx] {
				SELECT operator_id INTO :op_id FROM amficom.users WHERE id = :user_id
			};

			Blob pwd_blob;
			long pwd_exp;
			#sql [connCtx] {
				SELECT password, password_expiry INTO :pwd_blob, :pwd_exp FROM amficom.operatorprofiles WHERE id = :op_id
			};

			if (!Rewriter.read(JdbcBlobManager.getData(pwd_blob)).equals(Rewriter.read(oldpassword)))
				throw new AMFICOMRemoteException(Constants.ERROR_WRONG_PASSWORD, "Wrong password.");

			JdbcBlobManager.setData(conn, "password", "amficom.operatorprofiles", "id = '" + op_id + '\'', newpassword);
		}
	}

	#sql private static final iterator UserIdIterator( String user_id );
}
