
// Copyright (c) Syrus Systems 2000 Syrus Systems
package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import java.text.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class MapdbInterfaceLoad2 extends Object
{
	protected MapdbInterfaceLoad2()
	{
	}

	static public MapPhysicalNodeElement_Transferable loadMapNode(
			String id,
			Vector images)
	{
		MapPhysicalNodeElement_Transferable node_t = null;
		MapPhysicalNodeElement_Transferable node_ts[];
		MapNodeIterator nodeIt = null;

		String It_symbol_id = "";
		String It_latitude = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		boolean It_active = false;
		String It_name = "";
		String It_physical_link_id = "";
		String It_longitude = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		try
		{
			#sql nodeIt = { select
					SYMBOL_ID,
					LATITUDE,
					OWNER_ID,
					DESCRIPTION,
					ID,
					MAP_ID,
					ISM_MAP_ID,
					ACTIVE,
					NAME,
					PHYSICAL_LINK_ID,
					LONGITUDE
				from AMFICOM.MAPPHYSICALNODEELEMENTS
				where ID = :id
			};

			while (nodeIt.next())
			{
				try { It_symbol_id = nodeIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_latitude = nodeIt.latitude(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_owner_id = nodeIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_description = nodeIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = nodeIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_map_id = nodeIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_active = (nodeIt.active() == 0)? false:true; }
				catch(SQLException e) { }
				try { It_name = nodeIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_physical_link_id = nodeIt.physical_link_id(); }
				catch(SQLException e) { }
				if(It_physical_link_id == null) It_physical_link_id = "";
				try { It_longitude = nodeIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPPHYSICALNODEELEMENTATTRIBUT",
						"MAP_PHYSICAL_NODE_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				node_t = new MapPhysicalNodeElement_Transferable(
						It_id,
						It_name,
						It_longitude,
						It_latitude,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_symbol_id,
						It_physical_link_id,
						It_active,
						attributes);

				images.add(It_symbol_id);
			}// if(nodeIt)
			nodeIt.close();
		}
		catch(SQLException e)
		{
			if(nodeIt != null) try {
			nodeIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading physical node: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				nodeIt.close();
			}catch(Exception exe) {}
		}
		
		return node_t;
	}

	static public int loadMapNodes(
			Vector map_ids,
			MapPhysicalNodeElementSeq_TransferableHolder nodeseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalNodeElement_Transferable node_t;
		Vector vector = new Vector();
		MapPhysicalNodeElement_Transferable node_ts[];
		MapNodeIdIterator nidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nidIt = { select MAP_NODE_ID
					from AMFICOM.MAPNODELINKS
						where MAP_ID = :current_map_id
				};

				while (nidIt.next())
				{
					node_t = loadMapNode(nidIt.map_node_id(), images);
					node_t.map_id = current_map_id;
					vector.add(node_t);
				}
				nidIt.close();
				node_ts = new MapPhysicalNodeElement_Transferable[vector.size()];
				vector.copyInto(node_ts);
				nodeseq.value = node_ts;

			}
			catch(SQLException e)
			{
				if(nidIt != null) try {
				nidIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading physical nodes: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					nidIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

/*
	static public int loadMapNodes(
			Vector map_ids,
			MapPhysicalNodeElementSeq_TransferableHolder nodeseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalNodeElement_Transferable node_t;
		Vector vector = new Vector();
		MapPhysicalNodeElement_Transferable node_ts[];
		MapNodeIterator nodeIt = null;

		String It_symbol_id = "";
		String It_latitude = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		boolean It_active = false;
		String It_name = "";
		String It_physical_link_id = "";
		String It_longitude = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nodeIt = { select
						SYMBOL_ID,
						LATITUDE,
						OWNER_ID,
						DESCRIPTION,
						ID,
						MAP_ID,
						ISM_MAP_ID,
						ACTIVE,
						NAME,
						PHYSICAL_LINK_ID,
						LONGITUDE
					from AMFICOM.MAPPHYSICALNODEELEMENTS
					where MAP_ID = :current_map_id
					and ISM_MAP_ID is null
					};

				count = 0;
				while (nodeIt.next())
				{
					count ++;

					try { It_symbol_id = nodeIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_latitude = nodeIt.latitude(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_owner_id = nodeIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_description = nodeIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = nodeIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_map_id = nodeIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_active = (nodeIt.active() == 0)? false:true; }
					catch(SQLException e) { }
					try { It_name = nodeIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_physical_link_id = nodeIt.physical_link_id(); }
					catch(SQLException e) { }
					if(It_physical_link_id == null) It_physical_link_id = "";
					try { It_longitude = nodeIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPHYSICALNODEELEMENTATTRIBUT",
							"MAP_PHYSICAL_NODE_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					node_t = new MapPhysicalNodeElement_Transferable(
							It_id,
							It_name,
							It_longitude,
							It_latitude,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_symbol_id,
							It_physical_link_id,
							It_active,
							attributes);

					images.add(It_symbol_id);
					vector.addElement(node_t);
				}// while(nodeIt)
				nodeIt.close();
				node_ts = new MapPhysicalNodeElement_Transferable[vector.size()];
				vector.copyInto(node_ts);
				nodeseq.value = node_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading physical nodes: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/

	static public MapNodeLinkElement_Transferable loadMapNodeLink(String id)
	{
		MapNodeLinkElement_Transferable nl_t = null;
		MapNodeLinkIterator nlIt = null;

		String It_physical_link_id = "";
		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		try
		{
			#sql nlIt = { select
					PHYSICAL_LINK_ID,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					MAP_ID,
					ISM_MAP_ID
				from AMFICOM.MAPNODELINKELEMENTS
				where ID = :id
			};

			if(nlIt.next())
			{
				try { It_physical_link_id = nlIt.physical_link_id(); }
				catch(SQLException e) { }
				if(It_physical_link_id == null) It_physical_link_id = "";
				try { It_id = nlIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = nlIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = nlIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = nlIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = nlIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_map_id = nlIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPNODELINKELEMENTATTRIBUTES",
						"MAP_NODE_LINK_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				nl_t = new MapNodeLinkElement_Transferable(
						It_id,
						It_name,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						It_physical_link_id,
						attributes);

			}// if(nlIt)
			nlIt.close();
		}
		catch(SQLException e)
		{
			if(nlIt != null) try {
			nlIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading node links: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				nlIt.close();
			}catch(Exception exe) {}
		}
		
		return nl_t;
	}

	static public int loadMapNodeLinks(
			Vector map_ids,
			MapNodeLinkElementSeq_TransferableHolder nodelinkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapNodeLinkElement_Transferable nl_t;
		Vector vector = new Vector();
		MapNodeLinkElement_Transferable nl_ts[];
		MapNodeLinkIdIterator nidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nidIt = { select MAP_NODE_LINK_ID
					from AMFICOM.MAPNODELINKLINKS
						where MAP_ID = :current_map_id
				};

				while (nidIt.next())
				{
					nl_t = loadMapNodeLink(nidIt.map_node_link_id());
					nl_t.map_id = current_map_id;
					vector.add(nl_t);
				}

				nidIt.close();
				nl_ts = new MapNodeLinkElement_Transferable[vector.size()];
				vector.copyInto(nl_ts);
				nodelinkseq.value = nl_ts;
			}
			catch(SQLException e)
			{
				if(nidIt != null) try {
				nidIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading node links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					nidIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

/*
	static public int loadMapNodeLinks(
			Vector map_ids,
			MapNodeLinkElementSeq_TransferableHolder nodelinkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapNodeLinkElement_Transferable nl_t;
		Vector vector = new Vector();
		MapNodeLinkElement_Transferable nl_ts[];
		MapNodeLinkIterator nlIt = null;

		int It_alarmed_line_size = 1;
		String It_metric = "";
		String It_physical_link_id = "";
		int It_alarmed_color = 0;
		String It_codename = "";
		String It_description = "";
		String It_id = "";
		int It_color = 0;
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		boolean It_alarmed = false;
		String It_style = "";
		boolean It_show_alarmed = false;
		String It_alarmed_style = "";
		int It_line_size = 1;
		String It_owner_id = "";
		String It_type_id = "";
		String It_font_id = "";
		boolean It_show_metric = false;
		String It_selected_style = "";
		String It_map_id = "";
		String It_ism_map_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql nlIt = { select
						PHYSICAL_LINK_ID,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						MAP_ID,
						ISM_MAP_ID
					from AMFICOM.MAPNODELINKELEMENTS
					where MAP_ID = :current_map_id
					and ISM_MAP_ID is null
					};

				count = 0;
				while (nlIt.next())
				{
					count ++;

					try { It_physical_link_id = nlIt.physical_link_id(); }
					catch(SQLException e) { }
					if(It_physical_link_id == null) It_physical_link_id = "";
					try { It_id = nlIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = nlIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = nlIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = nlIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = nlIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_map_id = nlIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPNODELINKELEMENTATTRIBUTES",
							"MAP_NODE_LINK_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					nl_t = new MapNodeLinkElement_Transferable(
							It_id,
							It_name,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							It_physical_link_id,
							attributes);

					vector.addElement(nl_t);
				}// while(nlIt)
				nlIt.close();
				nl_ts = new MapNodeLinkElement_Transferable[vector.size()];
				vector.copyInto(nl_ts);
				nodelinkseq.value = nl_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading node links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/

	static public MapPhysicalLinkElement_Transferable loadMapLink(String id)
	{
		MapPhysicalLinkElement_Transferable link_t = null;
		Vector vector = new Vector();
		MapPhysicalLinkIterator linkIt = null;

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_link_id = "";
		String It_link_type_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		String nodelink_ids[] = new String[0];
		IdIterator idIt = null;

		try
		{
			#sql linkIt = { select
					DESCRIPTION,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					TYPE_ID,
					MAP_ID,
					ISM_MAP_ID,
					LINK_ID,
					LINK_TYPE_ID
				from AMFICOM.MAPPHYSICALLINKELEMENTS
				where ID = :id
			};

//				System.out.println("sql ok - getting values");
			if(linkIt.next())
			{
				try { It_description = linkIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = linkIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = linkIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = linkIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = linkIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = linkIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_type_id = linkIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_map_id = linkIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_link_id = linkIt.link_id(); }
				catch(SQLException e) { }
				if(It_link_id == null) It_link_id = "";
				try { It_link_type_id = linkIt.link_type_id(); }
				catch(SQLException e) { }
				if(It_link_type_id == null) It_link_type_id = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPPHYSICALLINKELEMENTATTRIBUT",
						"MAP_PHYSICAL_LINK_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

//					System.out.println("getting node links for " + It_id);
				vector2 = new Vector();
				try
				{
					#sql idIt = { select ID from AMFICOM.MAPNODELINKELEMENTS
							where PHYSICAL_LINK_ID = :It_id };
					while (idIt.next())
					{
						try { vector2.addElement(idIt.id()); }
						catch(SQLNullException e) { }
					}
					idIt.close();
				}
				catch(SQLException e)
				{
					idIt.close();
					System.out.println("could not get nodelinks for physical link " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				nodelink_ids = new String[vector2.size()];
				vector2.copyInto(nodelink_ids);

				link_t = new MapPhysicalLinkElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						attributes,
						It_link_id,
						It_link_type_id,
						nodelink_ids);

			}// if(linkIt)
			linkIt.close();
		}
		catch(SQLException e)
		{
			if(linkIt != null) try {
			linkIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading physical link: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				linkIt.close();
			}catch(Exception exe) {}
		}
		
		return link_t;
	}

	static public int loadMapLinks(
			Vector map_ids,
			MapPhysicalLinkElementSeq_TransferableHolder linkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalLinkElement_Transferable link_t;
		Vector vector = new Vector();
		MapPhysicalLinkElement_Transferable link_ts[];
		MapLinkIdIterator lidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
//			System.out.println("retreive links for " + current_map_id);
			try
			{
				#sql lidIt = { select MAP_LINK_ID
					from AMFICOM.MAPLINKLINKS
						where MAP_ID = :current_map_id
				};

				while (lidIt.next())
				{
					link_t = loadMapLink(lidIt.map_link_id());
					link_t.map_id = current_map_id;
					vector.add(link_t);
				}
				lidIt.close();
				link_ts = new MapPhysicalLinkElement_Transferable[vector.size()];
				vector.copyInto(link_ts);
				linkseq.value = link_ts;

			}
			catch(SQLException e)
			{
				if(lidIt != null) try {
				lidIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading physical links for map " + current_map_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					lidIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}
/*	static public int loadMapLinks(
			Vector map_ids,
			MapPhysicalLinkElementSeq_TransferableHolder linkseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPhysicalLinkElement_Transferable link_t;
		Vector vector = new Vector();
		MapPhysicalLinkElement_Transferable link_ts[];
		MapPhysicalLinkIterator linkIt = null;

		int It_alarmed_line_size = 1;
		String It_metric = "";
		int It_alarmed_color = 0;
		String It_codename = "";
		String It_description = "";
		String It_id = "";
		int It_color = 0;
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		boolean It_alarmed = false;
		String It_style = "";
		boolean It_show_alarmed = false;
		String It_alarmed_style = "";
		int It_line_size = 1;
		String It_owner_id = "";
		String It_type_id = "";
		String It_font_id = "";
		boolean It_show_metric = false;
		String It_selected_style = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_link_id = "";
		String It_link_type_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		String nodelink_ids[] = new String[0];
		IdIterator idIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
//			System.out.println("retreive links for " + current_map_id);
			try
			{
				#sql linkIt = { select
						DESCRIPTION,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						TYPE_ID,
						MAP_ID,
						ISM_MAP_ID,
						LINK_ID,
						LINK_TYPE_ID
					from AMFICOM.MAPPHYSICALLINKELEMENTS
					where MAP_ID = :current_map_id
					and ISM_MAP_ID is null
					};

//				System.out.println("sql ok - getting values");
				count = 0;
				while (linkIt.next())
				{
					count ++;

					try { It_description = linkIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = linkIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = linkIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = linkIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = linkIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = linkIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_type_id = linkIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_map_id = linkIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_link_id = linkIt.link_id(); }
					catch(SQLException e) { }
					if(It_link_id == null) It_link_id = "";
					try { It_link_type_id = linkIt.link_type_id(); }
					catch(SQLException e) { }
					if(It_link_type_id == null) It_link_type_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPHYSICALLINKELEMENTATTRIBUT",
							"MAP_PHYSICAL_LINK_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

//					System.out.println("getting node links for " + It_id);
					vector2 = new Vector();
					try
					{
						#sql idIt = { select ID from AMFICOM.MAPNODELINKELEMENTS
								where PHYSICAL_LINK_ID = :It_id };
						while (idIt.next())
						{
							try { vector2.addElement(idIt.id()); }
							catch(SQLNullException e) { }
						}
						idIt.close();
					}
					catch(SQLException e)
					{
						System.out.println("could not get nodelinks for physical link " + It_id + ": " + e.getMessage());
						e.printStackTrace();
					}
					nodelink_ids = new String[vector2.size()];
					vector2.copyInto(nodelink_ids);

					link_t = new MapPhysicalLinkElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							attributes,
							It_link_id,
							It_link_type_id,
							nodelink_ids);

					vector.addElement(link_t);
				}// while(linkIt)
				linkIt.close();
				link_ts = new MapPhysicalLinkElement_Transferable[vector.size()];
				vector.copyInto(link_ts);
				linkseq.value = link_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading physical links for map " + current_map_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/

	static public MapPathElement_Transferable loadMapPath(String id)
	{
		MapPathElement_Transferable path_t = null;
		MapPathIterator pathIt = null;

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_path_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		String link_ids[] = new String[0];
		PathLinkIterator plIt = null;

		try
		{
			#sql pathIt = { select
					DESCRIPTION,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					TYPE_ID,
					MAP_ID,
					ISM_MAP_ID,
					PATH_ID
				from AMFICOM.MAPPATHELEMENTS
				where ID = :id
			};

			if(pathIt.next())
			{
				try { It_description = pathIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = pathIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = pathIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = pathIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = pathIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = pathIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_type_id = pathIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_map_id = pathIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_ism_map_id = pathIt.ism_map_id(); }
				catch(SQLException e) { }
				if(It_ism_map_id == null) It_ism_map_id = "";
				try { It_path_id = pathIt.path_id(); }
				catch(SQLException e) { }
				if(It_path_id == null) It_path_id = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPPATHELEMENTATTRIBUTES",
						"MAP_PATH_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				try
				{
					#sql plIt = { select PHYSICAL_LINK_ID, PATH_ID
						from AMFICOM.MAPPATHLINKS
							where PATH_ID = :It_id };
					while (plIt.next())
					{
						try { vector2.addElement(plIt.physical_link_id()); }
						catch(SQLNullException e) { }
					}
					plIt.close();
				}
				catch(SQLException e)
				{
					plIt.close();
					System.out.println("could not get links for path " + It_id + ": " + e.getMessage());
					e.printStackTrace();
				}
				finally
				{
					try {
						plIt.close();
					}catch(Exception exe) {}
				}
				
				link_ids = new String[vector2.size()];
				vector2.copyInto(link_ids);

				path_t = new MapPathElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						attributes,
						It_path_id,
						link_ids);
			}// if(pathIt)
			pathIt.close();
		}
		catch(SQLException e)
		{
			if(pathIt != null) try {
			pathIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading path: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				pathIt.close();
			}catch(Exception exe) {}
		}
		
		return path_t;
	}

	static public int loadMapPaths(
			Vector map_ids,
			MapPathElementSeq_TransferableHolder pathseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPathElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathElement_Transferable path_ts[];
		MapPathIdIterator pidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql pidIt = { select MAP_PATH_ID
					from AMFICOM.MAPPATHSLINKS
						where MAP_ID = :current_map_id
				};

				while (pidIt.next())
				{
					path_t = loadMapPath(pidIt.map_path_id());
					path_t.map_id = current_map_id;
					vector.add(path_t);
				}

				pidIt.close();
				path_ts = new MapPathElement_Transferable[vector.size()];
				vector.copyInto(path_ts);
				pathseq.value = path_ts;

			}
			catch(SQLException e)
			{
				if(pidIt != null) try {
				pidIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading paths: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}

/*
	static public int loadMapPaths(
			Vector map_ids,
			MapPathElementSeq_TransferableHolder pathseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPathElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathElement_Transferable path_ts[];
		MapPathIterator pathIt = null;

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_path_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		String link_ids[] = new String[0];
		PathLinkIterator plIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql pathIt = { select
						DESCRIPTION,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						TYPE_ID,
						MAP_ID,
						ISM_MAP_ID,
						PATH_ID
					from AMFICOM.MAPPATHELEMENTS
					where MAP_ID = :current_map_id
					};

				count = 0;
				while (pathIt.next())
				{
					count ++;

					try { It_description = pathIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = pathIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = pathIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = pathIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = pathIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = pathIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_type_id = pathIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_map_id = pathIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_ism_map_id = pathIt.ism_map_id(); }
					catch(SQLException e) { }
					if(It_ism_map_id == null) It_ism_map_id = "";
					try { It_path_id = pathIt.path_id(); }
					catch(SQLException e) { }
					if(It_path_id == null) It_path_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPATHELEMENTATTRIBUTES",
							"MAP_PATH_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					vector2 = new Vector();
					try
					{
						#sql plIt = { select PHYSICAL_LINK_ID, PATH_ID
							from AMFICOM.MAPPATHLINKS
								where PATH_ID = :It_id };
						while (plIt.next())
						{
							try { vector2.addElement(plIt.physical_link_id()); }
							catch(SQLNullException e) { }
						}
						plIt.close();
					}
					catch(SQLException e)
					{
						System.out.println("could not get links for path " + It_id + ": " + e.getMessage());
						e.printStackTrace();
					}
					link_ids = new String[vector2.size()];
					vector2.copyInto(link_ids);

					path_t = new MapPathElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							attributes,
							It_path_id,
							link_ids);

					vector.addElement(path_t);
				}// while(pathIt)
				pathIt.close();
				path_ts = new MapPathElement_Transferable[vector.size()];
				vector.copyInto(path_ts);
				pathseq.value = path_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading paths: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/
	#sql public static iterator PathLinkIterator (
		String physical_link_id,
		String path_id );
	#sql public static iterator IdIterator ( String id );
	#sql public static iterator MapNodeIdIterator ( String map_node_id );
	#sql public static iterator MapNodeLinkIdIterator ( String map_node_link_id );
	#sql public static iterator MapLinkIdIterator ( String map_link_id );
	#sql public static iterator MapPathIdIterator ( String map_path_id );

	#sql public static iterator ElementAttributeIterator (
		String id,
		String attribute_id );

	#sql static public iterator MapNodeIterator (
		String symbol_id,
		String latitude,
		String owner_id,
		String description,
		String id,
		String map_id,
		String ism_map_id,
		int active,
		String name,
		String physical_link_id,
		String longitude);

	#sql static public iterator MapNodeLinkIterator (
		String physical_link_id,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String map_id,
		String ism_map_id);

	#sql static public iterator MapPhysicalLinkIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String link_id,
		String link_type_id);

	#sql static public iterator MapPathIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String path_id);

}

