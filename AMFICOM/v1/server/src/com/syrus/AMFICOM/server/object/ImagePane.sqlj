/*
 * $Id: ImagePane.sqlj,v 1.1.2.4 2004/08/25 15:24:30 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Report.ImagePane_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.database.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/08/25 15:24:30 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ImagePane {
	private String id;
  
	private int x;
	private int y;

	private int width;
	private int height;
  
	private byte[] bytes;
  
	private String report_template_id;

	ImagePane(ImagePane_Transferable ip, String r_t_id) throws SQLException {
		this.id = ResourcedbInterface.getUId("reportimagepane");
		this.x = ip.x;
		this.y = ip.y;
		this.width = ip.width;
		this.height = ip.height;

		this.bytes = ip.bytes;

		this.report_template_id = r_t_id;

		#sql{ insert into AMFICOM.REPORTIMAGEPANES(
				ID,
				REPORT_TEMPLATE_ID,
				X,
				Y,
				WIDTH,
				HEIGHT,
				IMG)
			values(
				:(this.id),
				:(this.report_template_id),
				:(this.x),
				:(this.y),
				:(this.width),
				:(this.height),
				empty_blob())
		};
    
 		try
		{
			System.out.println("Saving " + bytes.length + " bytes as blob:");

			ByteArrayDatabase bArr = new ByteArrayDatabase(this.bytes);
			Connection conn = DefaultContext.getDefaultContext().getConnection(); 
			boolean autoc = conn.getAutoCommit();
			bArr.saveAsBlob(
				conn,
				"AMFICOM.REPORTIMAGEPANES",
				"IMG",
				"id = '" + this.id + "'");
        
		}
		catch(Exception ioe)
		{
			System.out.println("error saving REPORTIMAGEPANES: " + ioe.getMessage());
			ioe.printStackTrace();
		}

		#sql { commit };
	}

	private ImagePane(String id) throws SQLException {
		ImagePaneIterator ipIt = null;

		try
		{
			#sql ipIt = { select
				ID,
				REPORT_TEMPLATE_ID,
				X,
				Y,
				WIDTH,
				HEIGHT,
				IMG
				from AMFICOM.REPORTIMAGEPANES
				where ID = :id
			};

			if(!ipIt.next())
			{
				throw new SQLException("NO imagepane for id " + id);
			}

			try { this.id = ipIt.id(); }
        catch(SQLException e) { }
			if(this.id == null) this.id = "";
      
			try { this.x = ipIt.x(); }
        catch(SQLException e) { this.x = 0; }
			try { this.y = ipIt.y(); }
        catch(SQLException e) { this.y = 0; }
			try { this.width = ipIt.width(); }
        catch(SQLException e) { this.width = 0; }
			try { this.height = ipIt.height(); }
        catch(SQLException e) { this.height = 0; }
        
      byte[] image_bytes = new byte[0];        
			try {
				image_bytes = JdbcBlobManager.getData(ipIt.img());
			} catch(SQLException sqle) {
				sqle.printStackTrace();
			}
      
			try { this.report_template_id = ipIt.report_template_id(); }
        catch(SQLException e) { }
			if(this.report_template_id == null) this.report_template_id = "";

			ipIt.close();
      
			this.bytes = image_bytes;
      
		}
		catch(SQLException e)
		{
			if(ipIt != null) try {
			ipIt.close();
			}catch(SQLException exe) {}
			System.out.println("error loading report template: " + e.getMessage());
			throw e;
		}
	}

	ImagePane_Transferable getTransferable() {
		return new ImagePane_Transferable(
			this.x,
			this.y,
			this.width,
			this.height,
			this.bytes);
	}

	static ImagePane[] retrieveImages(String rt_id) throws SQLException {
		IdIterator idIt = null;
		Vector linkedlist = new Vector();

		try
		{
			#sql idIt = { select ID
					from AMFICOM.REPORTIMAGEPANES
					where report_template_id = :rt_id  };
	
			while (idIt.next())
				linkedlist.add(new ImagePane(idIt.id()));
			idIt.close();
		}
		catch(SQLException ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(SQLException exe) {}
			throw ex;
		}
		ImagePane[] ips = new ImagePane[linkedlist.size()];
		linkedlist.copyInto(ips);
		return ips;
	}

	#sql public static iterator IdIterator(
		String id);

	#sql public static iterator ImagePaneIterator(
		String id,
		String report_template_id,
		int x,
		int y,
		int width,
		int height,
		Blob img);
}
