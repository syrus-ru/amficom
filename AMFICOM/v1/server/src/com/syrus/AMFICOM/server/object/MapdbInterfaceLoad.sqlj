/*
 * $Id: MapdbInterfaceLoad.sqlj,v 1.1.2.3 2004/10/18 15:31:41 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import java.sql.*;
import java.util.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/10/18 15:31:41 $
 * @author $Author: bass $
 * @module server_v1
 */
final class MapdbInterfaceLoad {
	private MapdbInterfaceLoad() {
	}

	static void loadMaps(final Connection conn, String domain_id, Collection mapIds, MapSeq_TransferableHolder mapSeq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		Collection maps = new LinkedList();

		String It_name = "";
		String It_codename = "";
		String It_description = "";
		boolean It_show_nodes = true;
		int It_mouse_tolerancy = 0;
		double It_zoom_factor = 1.0;
		double It_default_zoom_factor = 1.0;
		String It_longitude = "";
		String It_latitude = "";
		String It_scheme_id = "";

		Vector vector2 = new Vector();
		String equipment_ids[] = new String[0];
		String kis_ids[] = new String[0];
		String node_ids[] = new String[0];
		String nodeLink_ids[] = new String[0];
		String physicalLink_ids[] = new String[0];
		String path_ids[] = new String[0];
		String mark_ids[] = new String[0];

		MapIterator mapIterator = null;
		try {
			#sql [connCtx] mapIterator = {
				select
					ID,
					NAME,
					CODENAME,
					DESCRIPTION,
					CREATED,
					CREATED_BY,
					MODIFIED,
					MODIFIED_BY,
					DOMAIN_ID,
					SHOW_NODES,
					MOUSE_TOLERANCY,
					ZOOM_FACTOR,
					DEFAULT_ZOOM_FACTOR,
					USER_ID,
					LONGITUDE,
					LATITUDE,
					SCHEME_ID
				from AMFICOM.MAPCONTEXTS
			};

		count = 0;
		while (mapIterator.next()) {
			count ++;

			String id = mapIterator.id();

			try { It_name = mapIterator.name(); }
			catch(SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_codename = mapIterator.codename(); }
			catch(SQLException e) { }
			if(It_codename == null) It_codename = "";
			try { It_description = mapIterator.description(); }
			catch(SQLException e) { }
			if(It_description == null) It_description = "";
			try { It_show_nodes = (mapIterator.show_nodes() == 0)? false:true; }
			catch(SQLException e) { }
			try { It_mouse_tolerancy = mapIterator.mouse_tolerancy(); }
			catch(SQLException e) { }
			try { It_zoom_factor = Double.parseDouble(mapIterator.zoom_factor()); }
			catch(SQLException e) { }
			try { It_default_zoom_factor = Double.parseDouble(mapIterator.default_zoom_factor()); }
			catch(SQLException e) { }
			try { It_longitude = mapIterator.longitude(); }
			catch(SQLException e) { }
			if(It_longitude == null) It_longitude = "";
			try { It_latitude = mapIterator.latitude(); }
			catch(SQLException e) { }
			if(It_latitude == null) It_latitude = "";
			try { It_scheme_id = mapIterator.scheme_id(); }
			catch(SQLException e) { }
			if(It_scheme_id == null) It_scheme_id = "";

			vector2 = loadMapElementIds2(conn, "MAPELEMENTLINKS", "MAP_ELEMENT_ID", id);
			equipment_ids = new String[vector2.size()];
			vector2.copyInto(equipment_ids);

			vector2 = loadMapElementIds2(conn, "MAPKISLINKS", "MAP_KIS_ID", id);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);

			vector2 = loadMapElementIds2(conn, "MAPNODELINKS", "MAP_NODE_ID", id);
			node_ids = new String[vector2.size()];
			vector2.copyInto(node_ids);

			vector2 = loadMapElementIds2(conn, "MAPNODELINKLINKS", "MAP_NODE_LINK_ID", id);
			nodeLink_ids = new String[vector2.size()];
			vector2.copyInto(nodeLink_ids);

			vector2 = loadMapElementIds2(conn, "MAPLINKLINKS", "MAP_LINK_ID", id);
			physicalLink_ids = new String[vector2.size()];
			vector2.copyInto(physicalLink_ids);

			vector2 = loadMapElementIds2(conn, "MAPPATHSLINKS", "MAP_PATH_ID", id);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);

			vector2 = loadMapElementIds2(conn, "MAPMARKLINKS", "MAP_MARK_ID", id);
			mark_ids = new String[vector2.size()];
			vector2.copyInto(mark_ids);

			maps.add(new Map_Transferable(
					id,
					It_name,
					It_codename,
					mapIterator.user_id(),
					It_description,
					mapIterator.domain_id(),

					mapIterator.created().getTime(),
					mapIterator.created_by(),
					mapIterator.modified().getTime(),
					mapIterator.modified_by(),

					It_scheme_id,

					equipment_ids,
					kis_ids,
					node_ids,
					nodeLink_ids,
					physicalLink_ids,
					path_ids,
					mark_ids,

					It_show_nodes,
					It_longitude,
					It_latitude,
					It_zoom_factor,
					It_default_zoom_factor,
					It_mouse_tolerancy));
				mapIds.add(id);
			}
			mapSeq.value = (Map_Transferable[]) (maps.toArray(new Map_Transferable[maps.size()]));
		} finally {
			if (mapIterator != null)
				mapIterator.close();
		}
	}

	private static MapElement_Transferable loadMapElement(final Connection conn, String id, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		MapElement_Transferable eq_t = null;

		MapElementIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_kis_type_id = "";
		String It_id = "";
		String It_map_id = "";
		String It_element_id = "";
		String It_element_type_id = "";

		long It_modified = 0;
		boolean It_has_kis = false;
		String It_ism_map_id = "";
		String It_map_kis_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		try
		{
			#sql [connCtx] eqIt = { select
					OWNER_ID,
					LATITUDE,
					NAME,
					SYMBOL_ID,
					TYPE_ID,
					DESCRIPTION,
					LONGITUDE,
					KIS_TYPE_ID,
					ID,
					MAP_ID,
					ELEMENT_ID,
					ELEMENT_TYPE_ID
				from AMFICOM.MAPELEMENTS
				where ID = :id
			};

			if(eqIt.next())
			{
				try { It_id = eqIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_owner_id = eqIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_latitude = eqIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_name = eqIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_symbol_id = eqIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_type_id = eqIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_description = eqIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_longitude = eqIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_kis_type_id = eqIt.kis_type_id(); }
				catch(SQLException e) { }
				if(It_kis_type_id == null) It_kis_type_id = "";
				try { It_map_id = eqIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_element_id = eqIt.element_id(); }
				catch(SQLException e) { }
				if(It_element_id == null) It_element_id = "";
				try { It_element_type_id = eqIt.element_type_id(); }
				catch(SQLException e) { }
				if(It_element_type_id == null) It_element_type_id = "";

				vector2 = loadAttributes(conn, "MAPELEMENTATTRIBUTES", "MAP_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				eq_t = new MapElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_longitude,
						It_latitude,
						It_map_id,
						It_symbol_id,
						It_element_id,
						It_element_type_id,
						It_modified,
						It_has_kis,
						It_kis_type_id,
						It_ism_map_id,
						It_map_kis_id,
						attributes);

				imageResourceIds.add(It_symbol_id);
			}
			return eq_t;
		} finally {
			if (eqIt != null)
				eqIt.close();
		}
	}

	static void loadMapElements(final Connection conn, Vector map_ids, MapElementSeq_TransferableHolder equipmentseq, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapElement_Transferable eq_t;
		Vector vector = new Vector();
		MapElement_Transferable eq_ts[];
		MapElementIterator eqIt = null;

		String current_map_id = "";

		MapElementIdIterator midIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);

			try
			{
				#sql [connCtx] midIt = {
					select MAP_ELEMENT_ID
						from MAPELEMENTLINKS
							where MAP_ID = :current_map_id
				};

				while (midIt.next())
				{
					eq_t = loadMapElement(conn, midIt.map_element_id(), imageResourceIds);
					eq_t.mapId = current_map_id;
					vector.add(eq_t);
				}
				eq_ts = new MapElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				equipmentseq.value = eq_ts;
			} finally {
				if (midIt != null)
					midIt.close();
			}
		}
	}

	private static MapMarkElement_Transferable loadMapMark(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		MapMarkElement_Transferable eq_t = null;
		MapMarkIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_id = "";
		String It_map_id = "";
		String It_link_id = "";
		String It_distance = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		try
		{
			#sql [connCtx] eqIt = { select
					OWNER_ID,
					LATITUDE,
					NAME,
					SYMBOL_ID,
					DESCRIPTION,
					LONGITUDE,
					ID,
					MAP_ID,
					LINK_ID,
					DISTANCE
				from AMFICOM.MAPMARKELEMENTS
				where ID = :id
			};

			if(eqIt.next())
			{
				try { It_id = eqIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_owner_id = eqIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_latitude = eqIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_name = eqIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_symbol_id = eqIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_description = eqIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_longitude = eqIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_map_id = eqIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_link_id = eqIt.link_id(); }
				catch(SQLException e) { }
				if(It_link_id == null) It_link_id = "";
				try { It_distance = eqIt.distance(); }
				catch(SQLException e) { }
				if(It_distance == null) It_distance = "";

				vector2 = loadAttributes(conn, "MAPMARKELEMENTATTRIBUTES", "MAP_MARK_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				eq_t = new MapMarkElement_Transferable(
						It_id,
						It_name,
						It_longitude,
						It_latitude,
						It_description,
						It_owner_id,
						It_map_id,
						It_symbol_id,
						It_link_id,
						Double.parseDouble(It_distance),
						attributes);
			}
			return eq_t;
		} finally {
			if (eqIt != null)
				eqIt.close();
		}
	}

	static void loadMapMarks(final Connection conn, Vector map_ids, MapMarkElementSeq_TransferableHolder markseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapMarkElement_Transferable eq_t;
		Vector vector = new Vector();
		MapMarkElement_Transferable eq_ts[];

		String current_map_id = "";
		MapMarkIdIterator midIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] midIt = {
					select MAP_MARK_ID
						from MAPMARKLINKS
							where MAP_ID = :current_map_id
				};

				while (midIt.next())
				{
					eq_t = loadMapMark(conn, midIt.map_mark_id());
					eq_t.mapId = current_map_id;
					vector.add(eq_t);
				}
				eq_ts = new MapMarkElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				markseq.value = eq_ts;
			} finally {
				if (midIt != null)
					midIt.close();
			}
		}
	}

	private static MapElement_Transferable loadMapKIS(final Connection conn, String id, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_map_element_id = "";
		String It_ism_map_id = "";
		String It_map_id = "";

		MapElement_Transferable kis_t = null;

		Vector vector2 = new Vector();
		ElementAttribute_Transferable[] attributes;

		MapKISIterator kisIt = null;
		try {
			#sql [connCtx] kisIt = {
				select
					ID,
					MAP_ELEMENT_ID,
					ISM_MAP_ID,
					MAP_ID
				from AMFICOM.MAPKISELEMENTS
				where ID = :id
			};

			kisIt.next();

			try { It_id = kisIt.id(); }
			catch(SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_map_element_id = kisIt.map_element_id(); }
			catch(SQLException e) { }
			if(It_map_element_id == null) It_map_element_id = "";
			try { It_ism_map_id = kisIt.ism_map_id(); }
			catch(SQLException e) { }
			if(It_ism_map_id == null) It_ism_map_id = "";
			try { It_map_id = kisIt.map_id(); }
			catch(SQLException e) { }
			if(It_map_id == null) It_map_id = "";

			vector2 = loadAttributes(conn, "MAPKISELEMENTATTRIBUTES", "MAP_KIS_ELEMENT_ID", It_id);
			attributes = new ElementAttribute_Transferable[vector2.size()];
			vector2.copyInto(attributes);

			kis_t = loadMapElement(conn, It_map_element_id, imageResourceIds);
			kis_t.mapId = It_map_id;
			kis_t.ism_map_id = It_ism_map_id;
			kis_t.map_kis_id = It_id;
			kis_t.has_kis = true;
			return kis_t;
		} finally {
			if (kisIt != null)
				kisIt.close();
		}
	}

	static void loadMapKISs(final Connection conn, Vector map_ids, MapElementSeq_TransferableHolder kisseq, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapElement_Transferable kis_t;
		Vector vector = new Vector();
		MapElement_Transferable kis_ts[];
		MapKISIdIterator kidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] kidIt = { select MAP_KIS_ID
					from AMFICOM.MAPKISLINKS
						where MAP_ID = :current_map_id
				};

				while (kidIt.next())
				{
					System.out.println("...loading KIS: " + kidIt.map_kis_id());
					kis_t = loadMapKIS(conn, kidIt.map_kis_id(), imageResourceIds);
					kis_t.mapId = current_map_id;
					vector.add(kis_t);
				}
				kis_ts = new MapElement_Transferable[vector.size()];
				vector.copyInto(kis_ts);
				kisseq.value = kis_ts;
			} finally {
				if (kidIt != null)
					kidIt.close();
			}
		}
	}

	private static MapPhysicalNodeElement_Transferable loadMapNode(final Connection conn, String id, Collection imageResourceIds) throws SQLException {
		MapPhysicalNodeElement_Transferable node_t = null;
		MapPhysicalNodeElement_Transferable node_ts[];

		String It_symbol_id = "";
		String It_latitude = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		boolean It_active = false;
		String It_name = "";
		String It_physical_link_id = "";
		String It_longitude = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		MapNodeIterator nodeIt = null;
		try {
			#sql [new DefaultContext(conn)] nodeIt = {
				select
					SYMBOL_ID,
					LATITUDE,
					OWNER_ID,
					DESCRIPTION,
					ID,
					MAP_ID,
					ISM_MAP_ID,
					ACTIVE,
					NAME,
					PHYSICAL_LINK_ID,
					LONGITUDE
				from AMFICOM.MAPPHYSICALNODEELEMENTS
				where ID = :id
			};

			while (nodeIt.next()) {
				try { It_symbol_id = nodeIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_latitude = nodeIt.latitude(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_owner_id = nodeIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_description = nodeIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = nodeIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_map_id = nodeIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_active = (nodeIt.active() == 0)? false:true; }
				catch(SQLException e) { }
				try { It_name = nodeIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_physical_link_id = nodeIt.physical_link_id(); }
				catch(SQLException e) { }
				if(It_physical_link_id == null) It_physical_link_id = "";
				try { It_longitude = nodeIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";

				vector2 = loadAttributes(conn, "MAPPHYSICALNODEELEMENTATTRIBUT", "MAP_PHYSICAL_NODE_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				node_t = new MapPhysicalNodeElement_Transferable(
						It_id,
						It_name,
						It_longitude,
						It_latitude,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_symbol_id,
						It_physical_link_id,
						It_active,
						attributes);

				imageResourceIds.add(It_symbol_id);
			}
			return node_t;
		} finally {
			if (nodeIt != null)
				nodeIt.close();
		}
	}

	static void loadMapNodes(final Connection conn, Vector map_ids, MapPhysicalNodeElementSeq_TransferableHolder nodeseq, Collection imageResourceIds) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapPhysicalNodeElement_Transferable node_t;
		Vector vector = new Vector();
		MapPhysicalNodeElement_Transferable node_ts[];
		MapNodeIdIterator nidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] nidIt = { select MAP_NODE_ID
					from AMFICOM.MAPNODELINKS
						where MAP_ID = :current_map_id
				};

				while (nidIt.next())
				{
					node_t = loadMapNode(conn, nidIt.map_node_id(), imageResourceIds);
					node_t.mapId = current_map_id;
					vector.add(node_t);
				}
				node_ts = new MapPhysicalNodeElement_Transferable[vector.size()];
				vector.copyInto(node_ts);
				nodeseq.value = node_ts;

			} finally {
				if (nidIt != null)
					nidIt.close();
			}
		}
	}

	private static MapNodeLinkElement_Transferable loadMapNodeLink(final Connection conn, String id) throws SQLException {
		MapNodeLinkElement_Transferable nl_t = null;

		String It_physical_link_id = "";
		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		MapNodeLinkIterator nlIt = null;
		try {
			#sql [new DefaultContext(conn)] nlIt = {
				select
					PHYSICAL_LINK_ID,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					MAP_ID,
					ISM_MAP_ID
				from AMFICOM.MAPNODELINKELEMENTS
				where ID = :id
			};

			if(nlIt.next())
			{
				try { It_physical_link_id = nlIt.physical_link_id(); }
				catch(SQLException e) { }
				if(It_physical_link_id == null) It_physical_link_id = "";
				try { It_id = nlIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = nlIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = nlIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = nlIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = nlIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_map_id = nlIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";

				vector2 = loadAttributes(conn, "MAPNODELINKELEMENTATTRIBUTES", "MAP_NODE_LINK_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				nl_t = new MapNodeLinkElement_Transferable(
						It_id,
						It_name,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						It_physical_link_id,
						attributes);

			}
			return nl_t;
		} finally {
			if (nlIt != null)
				nlIt.close();
		}
	}

	static void loadMapNodeLinks(final Connection conn, Vector map_ids, MapNodeLinkElementSeq_TransferableHolder nodelinkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapNodeLinkElement_Transferable nl_t;
		Vector vector = new Vector();
		MapNodeLinkElement_Transferable nl_ts[];
		MapNodeLinkIdIterator nidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] nidIt = { select MAP_NODE_LINK_ID
					from AMFICOM.MAPNODELINKLINKS
						where MAP_ID = :current_map_id
				};

				while (nidIt.next())
				{
					nl_t = loadMapNodeLink(conn, nidIt.map_node_link_id());
					nl_t.mapId = current_map_id;
					vector.add(nl_t);
				}

				nl_ts = new MapNodeLinkElement_Transferable[vector.size()];
				vector.copyInto(nl_ts);
				nodelinkseq.value = nl_ts;
			} finally {
				if (nidIt != null)
					nidIt.close();
			}
		}
	}

	private static MapPhysicalLinkElement_Transferable loadMapLink(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		MapPhysicalLinkElement_Transferable link_t = null;
		Vector vector = new Vector();

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_link_id = "";
		String It_link_type_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		String nodelink_ids[] = new String[0];

		MapPhysicalLinkIterator linkIt = null;
		try {
			#sql [connCtx] linkIt = { select
					DESCRIPTION,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					TYPE_ID,
					MAP_ID,
					ISM_MAP_ID,
					LINK_ID,
					LINK_TYPE_ID
				from AMFICOM.MAPPHYSICALLINKELEMENTS
				where ID = :id
			};

			if(linkIt.next())
			{
				try { It_description = linkIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = linkIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = linkIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = linkIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = linkIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = linkIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_type_id = linkIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_map_id = linkIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_link_id = linkIt.link_id(); }
				catch(SQLException e) { }
				if(It_link_id == null) It_link_id = "";
				try { It_link_type_id = linkIt.link_type_id(); }
				catch(SQLException e) { }
				if(It_link_type_id == null) It_link_type_id = "";

				vector2 = loadAttributes(conn, "MAPPHYSICALLINKELEMENTATTRIBUT", "MAP_PHYSICAL_LINK_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();
				IdIterator idIt = null;
				try {
					#sql [connCtx] idIt = {
						select ID from AMFICOM.MAPNODELINKELEMENTS
							where PHYSICAL_LINK_ID = :It_id };
					while (idIt.next())
						vector2.addElement(idIt.id());
				} finally {
					if (idIt != null)
						idIt.close();
				}
				nodelink_ids = new String[vector2.size()];
				vector2.copyInto(nodelink_ids);

				link_t = new MapPhysicalLinkElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						attributes,
						It_link_id,
						It_link_type_id,
						nodelink_ids);

			}
			return link_t;
		} finally {
			if (linkIt != null)
				linkIt.close();
		}
	}

	static void loadMapLinks(final Connection conn, Vector map_ids, MapPhysicalLinkElementSeq_TransferableHolder linkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapPhysicalLinkElement_Transferable link_t;
		Vector vector = new Vector();
		MapPhysicalLinkElement_Transferable link_ts[];
		MapLinkIdIterator lidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] lidIt = { select MAP_LINK_ID
					from AMFICOM.MAPLINKLINKS
						where MAP_ID = :current_map_id
				};

				while (lidIt.next())
				{
					link_t = loadMapLink(conn, lidIt.map_link_id());
					link_t.mapId = current_map_id;
					vector.add(link_t);
				}
				link_ts = new MapPhysicalLinkElement_Transferable[vector.size()];
				vector.copyInto(link_ts);
				linkseq.value = link_ts;

			} finally {
				if (lidIt != null)
					lidIt.close();
			}
		}
	}

	private static MapPathElement_Transferable loadMapPath(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		MapPathElement_Transferable path_t = null;

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_path_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		String link_ids[] = new String[0];
		MapPathIterator pathIt = null;
		try {
			#sql [connCtx] pathIt = {
				select
					DESCRIPTION,
					ID,
					END_NODE_ID,
					START_NODE_ID,
					NAME,
					OWNER_ID,
					TYPE_ID,
					MAP_ID,
					ISM_MAP_ID,
					PATH_ID
				from AMFICOM.MAPPATHELEMENTS
				where ID = :id
			};

			if(pathIt.next())
			{
				try { It_description = pathIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_id = pathIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_end_node_id = pathIt.end_node_id(); }
				catch(SQLException e) { }
				if(It_end_node_id == null) It_end_node_id = "";
				try { It_start_node_id = pathIt.start_node_id(); }
				catch(SQLException e) { }
				if(It_start_node_id == null) It_start_node_id = "";
				try { It_name = pathIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_owner_id = pathIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_type_id = pathIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_map_id = pathIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_ism_map_id = pathIt.ism_map_id(); }
				catch(SQLException e) { }
				if(It_ism_map_id == null) It_ism_map_id = "";
				try { It_path_id = pathIt.path_id(); }
				catch(SQLException e) { }
				if(It_path_id == null) It_path_id = "";

				vector2 = loadAttributes(conn, "MAPPATHELEMENTATTRIBUTES", "MAP_PATH_ELEMENT_ID", It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				vector2 = new Vector();

				PathLinkIterator plIt = null;
				try {
					#sql [connCtx] plIt = {
						select PHYSICAL_LINK_ID, PATH_ID
						from AMFICOM.MAPPATHLINKS
							where PATH_ID = :It_id
					};
					while (plIt.next())
						vector2.addElement(plIt.physical_link_id());
				} finally {
					if (plIt != null)
						plIt.close();
				}
				
				link_ids = new String[vector2.size()];
				vector2.copyInto(link_ids);

				path_t = new MapPathElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_map_id,
						It_ism_map_id,
						It_start_node_id,
						It_end_node_id,
						attributes,
						It_path_id,
						link_ids);
			}
			return path_t;
		} finally {
			if (pathIt != null)
				pathIt.close();
		}
	}

	static void loadMapPaths(final Connection conn, Vector map_ids, MapPathElementSeq_TransferableHolder pathseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = map_ids.size();
		MapPathElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathElement_Transferable path_ts[];
		MapPathIdIterator pidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql [connCtx] pidIt = { select MAP_PATH_ID
					from AMFICOM.MAPPATHSLINKS
						where MAP_ID = :current_map_id
				};

				while (pidIt.next())
				{
					path_t = loadMapPath(conn, pidIt.map_path_id());
					path_t.mapId = current_map_id;
					vector.add(path_t);
				}
				path_ts = new MapPathElement_Transferable[vector.size()];
				vector.copyInto(path_ts);
				pathseq.value = path_ts;

			} finally {
				if (pidIt != null)
					pidIt.close();
			}
		}
	}

	static Vector loadAttributes(final Connection conn, String elementAttributeTable, String elementAttributeField, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";

		boolean It_is_editable = true;
		boolean It_is_visible = true;

		Vector vector2 = new Vector();



		ElementAttributeIterator eaIt = null;
		try {
			String qry = "select ID, ATTRIBUTE_TYPE_ID, VALUE, IS_EDITABLE, IS_VISIBLE " +
							"from AMFICOM." + elementAttributeTable +
								" where " + elementAttributeField +
								" = '" + element_id + "'";
			#sql [connCtx] {
				BEGIN OPEN :OUT eaIt FOR :qry; END;
			};
			while (eaIt.next()) {
				try { It_attribute_id = eaIt.id(); }
				catch(SQLException e) { }
				if(It_attribute_id == null) It_attribute_id = "";
				try { It_attribute_type_id = eaIt.attribute_type_id(); }
				catch(SQLException e) { }
				if(It_attribute_type_id == null) It_attribute_type_id = "";
				try { It_attribute_value = eaIt.value(); }
				catch(SQLException e) { }
				if(It_attribute_value == null) It_attribute_value = "";
				try { It_is_editable = (eaIt.is_editable() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_is_visible = (eaIt.is_visible() == 1)? true : false; }
				catch(SQLException e) { }

				try
				{
					#sql [connCtx] {
						select NAME into :It_attribute_name
						from AMFICOM.ELEMENTATTRIBUTETYPES
						where ID = :It_attribute_type_id };

					if(It_attribute_name == null)
						It_attribute_name = "";

					ElementAttribute_Transferable ea =
						new ElementAttribute_Transferable(
							It_attribute_id,
							It_attribute_name,
							It_attribute_value,
							It_attribute_type_id,
							It_is_editable,
							It_is_visible);
						vector2.addElement(ea);
				}
				catch(SQLException e)
				{
					System.out.println("could not get attribute " + It_e_id + ": " + e.getMessage());
					e.printStackTrace();
				}
			}
			return vector2;
		} finally {
			if (eaIt != null)
				eaIt.close();
		}
	}

	private static Vector loadMapElementIds(final Connection conn, String elementAttributeTable, String map_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		Vector vector2 = new Vector();
		String It_id = "";



		IdIterator idIt = null;
		try {
			String qry = "select ID from AMFICOM." + elementAttributeTable + " where MAP_ID = '" + map_id + "'";
			#sql [connCtx] {
				BEGIN OPEN :OUT idIt FOR :qry; END;
			};
			while (idIt.next())
				vector2.addElement(idIt.id());
			return vector2;
		} finally {
			if (idIt != null)
				idIt.close();
		}
	}

	static Vector loadMapElementIds2(final Connection conn, String elementAttributeTable, String elementAttributeField, String map_id) throws SQLException {
		Statement statement = null;
		ResultSet resultset = null;
		try {
			Vector vector = new Vector();
			statement = conn.createStatement();
			resultset =  statement.executeQuery("SELECT " + elementAttributeField + " FROM amficom." + elementAttributeTable + " WHERE map_id = '" + map_id + '\'');
			while (resultset.next())
				vector.addElement(resultset.getString(elementAttributeField));
			return vector;
		} finally {
			try {
				if (resultset != null)
					resultset.close();
			} finally {
				if (statement != null)
					statement.close();
			}
		}
	}

	static Vector loadISMMapElementIds(final Connection conn, String elementAttributeTable, String map_id) throws SQLException {
		IdIterator idIt = null;
		try {
			String qry = "select ID " +
						"from AMFICOM." + elementAttributeTable +
							" where ISM_MAP_ID = '" + map_id + "'";
			Vector vector2 = new Vector();
			#sql [new DefaultContext(conn)] {
				BEGIN OPEN :OUT idIt FOR :qry; END;
			};
			while (idIt.next())
				vector2.addElement(idIt.id());
			return vector2;
		} finally {
			if (idIt != null)
				idIt.close();
		}
	}

	static void reloadAttributes(final Connection conn, String[] map_ids, Vector vector) throws SQLException {
		int count;
		int mapcount = map_ids.length;
		String current_map_id = "";
		ElementAttribute_Transferable[] attributes;
		Vector vector2;
		Vector vector3;
		int i;
		int ai;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids[j];

			vector2 = loadMapElementIds(conn, "MAPEQUIPMENTELEMENTS", current_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPEQUIPMENTELEMENTATTRIBUTES", "MAP_EQUIPMENT_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

			vector2 = loadMapElementIds(conn, "MAPKISELEMENTS", current_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPKISELEMENTATTRIBUTES", "MAP_KIS_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

			vector2 = loadMapElementIds(conn, "MAPPHYSICALNODEELEMENTS", current_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPPHYSICALNODEELEMENTATTRIBUT", "MAP_PHYSICAL_NODE_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

			vector2 = loadMapElementIds(conn, "MAPPHYSICALLINKELEMENTS", current_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPPHYSICALLINKELEMENTATTRIBUT", "MAP_PHYSICAL_LINK_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

			vector2 = loadMapElementIds(conn, "MAPPATHELEMENTS", current_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPPATHELEMENTATTRIBUTES", "MAP_PATH_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

		}
	}

	static void reloadISMAttributes(final Connection conn, String[] ism_map_ids, Vector vector) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int mapcount = ism_map_ids.length;
		String current_ism_map_id = "";
		String current_map_id = "";
		ElementAttribute_Transferable[] attributes;
		Vector vector2;
		Vector vector3;
		int i;
		int ai;

		for(int j = 0; j < mapcount; j++)
		{
			current_ism_map_id = (String) ism_map_ids[j];

			try {
				#sql [connCtx] {
					select MAP_ID into :current_map_id from ISMMAPCONTEXTS
					where ID = :current_ism_map_id };

				reloadAttributes(conn, new String[] { current_map_id }, vector);
			} catch(Exception ex) {

			}

			vector2 = loadISMMapElementIds(conn, "MAPKISELEMENTS", current_ism_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPKISELEMENTATTRIBUTES", "MAP_KIS_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

			vector2 = loadISMMapElementIds(conn, "MAPPATHELEMENTS", current_ism_map_id);
			for(i = vector2.size() - 1; i >= 0; i--)
			{
				String e_id = (String )vector2.get(i);
				vector3 = loadAttributes(conn, "MAPPATHELEMENTATTRIBUTES", "MAP_PATH_ELEMENT_ID", e_id);

				for(ai = vector3.size() - 1; ai >= 0; ai--)
					vector.add(vector3.get(ai));
			}

		}
	}

	static void loadAttributeTypes(final Connection conn, ElementAttributeTypeSeq_TransferableHolder atypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_value_type_id = "";
		String It_default_value = "";

		boolean It_is_editable = true;
		boolean It_is_visible = true;

		long It_modified = 0;

		Vector vector = new Vector();

		ElementAttributeType_Transferable ch_t;
		ElementAttributeType_Transferable[] ch_ts;
		ElementAttributeTypeIterator chIt = null;
		Vector vector2;

		try
		{
			#sql [connCtx] chIt = { select
						ID,
						NAME,
						VALUE_TYPE,
						DEFAULT_VALUE,
						IS_EDITABLE,
						IS_VISIBLE,
						MODIFIED
					from AMFICOM.ELEMENTATTRIBUTETYPES
			};

			while (chIt.next())
			{
				try { It_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = chIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_value_type_id = chIt.value_type(); }
				catch(SQLException e) { }
				if(It_value_type_id == null) It_value_type_id = "";
				try { It_default_value = chIt.default_value(); }
				catch(SQLException e) { }
				if(It_default_value == null) It_default_value = "";
				try { It_is_editable = (chIt.is_editable() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_is_visible = (chIt.is_visible() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_modified = chIt.modified().getTime(); }
				catch(SQLException e) { }

				ch_t = new ElementAttributeType_Transferable(
					It_id,
					It_name,
					It_value_type_id,
					It_default_value,
					It_is_editable,
					It_is_visible,
					It_modified);

				vector.add(ch_t);
			}
			ch_ts = new ElementAttributeType_Transferable[vector.size()];
			vector.copyInto(ch_ts);
			atypeseq.value = ch_ts;

		} finally {
			if (chIt != null)
				chIt.close();
		}
	}

	static void loadAttributeTypes(final Connection conn, String[] ids, ElementAttributeTypeSeq_TransferableHolder atypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_value_type_id = "";
		String It_default_value = "";

		boolean It_is_editable = true;
		boolean It_is_visible = true;

		long It_modified = 0;

		Vector vector = new Vector();

		ElementAttributeType_Transferable ch_t;
		ElementAttributeType_Transferable[] ch_ts;
		ElementAttributeTypeIterator chIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] chIt = { select
						ID,
						NAME,
						VALUE_TYPE,
						DEFAULT_VALUE,
						IS_EDITABLE,
						IS_VISIBLE,
						MODIFIED
					from AMFICOM.ELEMENTATTRIBUTETYPES
			};

			while (chIt.next())
			{
				if(! loadvec.contains(chIt.id()))
					continue;

				try { It_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = chIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_value_type_id = chIt.value_type(); }
				catch(SQLException e) { }
				if(It_value_type_id == null) It_value_type_id = "";
				try { It_default_value = chIt.default_value(); }
				catch(SQLException e) { }
				if(It_default_value == null) It_default_value = "";
				try { It_is_editable = (chIt.is_editable() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_is_visible = (chIt.is_visible() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_modified = chIt.modified().getTime(); }
				catch(SQLException e) { }

				ch_t = new ElementAttributeType_Transferable(
					It_id,
					It_name,
					It_value_type_id,
					It_default_value,
					It_is_editable,
					It_is_visible,
					It_modified);

				vector.add(ch_t);
			}
			ch_ts = new ElementAttributeType_Transferable[vector.size()];
			vector.copyInto(ch_ts);
			atypeseq.value = ch_ts;
		} finally {
			if (chIt != null)
				chIt.close();
		}
	}

	#sql public static iterator ElementAttributeIterator(
		String id,
		String attribute_type_id,
		String value,
		int is_editable,
		int is_visible);

	#sql private static iterator ElementAttributeTypeIterator(
		String id,
		String name,
		String value_type,
		String default_value,
		int is_editable,
		int is_visible,
		Timestamp modified );

	#sql public static iterator IdIterator(
		String id);

	#sql private static iterator MapIterator(
		String id,
		String name,
		String codename,
		String description,
		Timestamp created,
		String created_by,
		Timestamp modified,
		String modified_by,
		String domain_id,
		int show_nodes,
		int mouse_tolerancy,
		String zoom_factor,
		String default_zoom_factor,
		String user_id,
		String longitude,
		String latitude,
		String scheme_id);

	#sql private static iterator MapElementIdIterator(
		String map_element_id);

	#sql private static iterator MapElementIterator(
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String type_id,
		String description,
		String longitude,
		String kis_type_id,
		String id,
		String map_id,
		String element_id,
		String element_type_id);

	#sql private static iterator MapKISIdIterator(
		String map_kis_id);

	#sql private static iterator MapKISIterator(
		String id,
		String map_element_id,
		String ism_map_id,
		String map_id);

	#sql private static iterator MapLinkIdIterator(
		String map_link_id);

	#sql private static iterator MapMarkIdIterator(
		String map_mark_id);

	#sql private static iterator MapMarkIterator(
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String description,
		String longitude,
		String id,
		String map_id,
		String link_id,
		String distance);

	#sql private static iterator MapNodeIdIterator(
		String map_node_id);

	#sql private static iterator MapNodeIterator (
		String symbol_id,
		String latitude,
		String owner_id,
		String description,
		String id,
		String map_id,
		String ism_map_id,
		int active,
		String name,
		String physical_link_id,
		String longitude);

	#sql private static iterator MapNodeLinkIdIterator(
		String map_node_link_id);

	#sql private static iterator MapNodeLinkIterator(
		String physical_link_id,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String map_id,
		String ism_map_id);

	#sql private static iterator MapPathIdIterator(
		String map_path_id);

	#sql private static iterator MapPathIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String path_id);

	#sql private static iterator MapPhysicalLinkIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String link_id,
		String link_type_id);

	#sql private static iterator PathLinkIterator (
		String physical_link_id,
		String path_id );
}
