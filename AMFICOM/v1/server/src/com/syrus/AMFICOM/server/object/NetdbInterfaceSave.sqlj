/*
 * $Id: NetdbInterfaceSave.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.Characteristic_Transferable;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class NetdbInterfaceSave {
	private NetdbInterfaceSave() {
	}

	static void saveCharacteristics(final Connection conn, String charTable, String charField, String element_id, Characteristic_Transferable[] characteristics) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int len2;
		int j;

		try
		{
			String qry = "delete from AMFICOM." + charTable +
						" where " + charField + " = '" + element_id + "'";
			#sql [connCtx] {
				BEGIN
					execute immediate :qry;
				END;
			};

			len2 = characteristics.length;
			for(j = 0; j < len2; j++)
			{
				try
				{
					System.out.println("insert  characteristic: " + characteristics[j].id + " type " + characteristics[j].type_id + " value " + characteristics[j].value + " for element " + element_id);
					characteristics[j].id = ResourcedbInterface.getUid(conn, "characteristic");

					String qry2 = "insert into AMFICOM." + charTable +
						"(ID, CHARACTERISTIC_TYPE_ID, VALUE, " +
						charField + ") values ('" +
						characteristics[j].id + "', '" +
						characteristics[j].type_id + "', '" +
						characteristics[j].value + "', '" +
						element_id + "')";

					#sql [connCtx] {
						BEGIN
							execute immediate :qry2;
						END;
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing characteristic: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating characteristic: " + exxx.getMessage());
				}
			}
		}
		catch(SQLException exx)
		{
			System.out.println("could not save type characteristic: " + exx.getMessage());
			exx.printStackTrace();
		}
	}

	static int savePorts(final Connection conn, Port_Transferable[] ports) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.PORTS
						where ID = :(ports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update port " + ports[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.PORTS
							set
								NAME = :(ports[i].name),
								EQUIPMENT_ID = :(ports[i].equipmentId),
								INTERFACE_ID = :(ports[i].interfaceId),
								DESCRIPTION = :(ports[i].description),
								ADDRESS_ID = :(ports[i].addressId),
								LOCAL_ID = :(ports[i].localId),
								TYPE_ID = :(ports[i]._typeId),
								DOMAIN_ID = :(ports[i].domainId)
							where ID = :(ports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing port: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new port " + ports[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.PORTS(
								ID,
								NAME,
								EQUIPMENT_ID,
								INTERFACE_ID,
								DESCRIPTION,
								ADDRESS_ID,
								LOCAL_ID,
								TYPE_ID,
								DOMAIN_ID)
							values(
								 :(ports[i].id),
								 :(ports[i].name),
								 :(ports[i].equipmentId),
								 :(ports[i].interfaceId),
								 :(ports[i].description),
								 :(ports[i].addressId),
								 :(ports[i].localId),
								 :(ports[i]._typeId),
								 :(ports[i].domainId) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing port: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating port: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(conn, "PORTCHARACTERISTICS", "PORT_ID", ports[i].id, ports[i].characteristics);

			CatalogSchemeMapUpdater.portUpdated(conn, ports[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveCablePorts(final Connection conn, CablePort_Transferable[] cports) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = cports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLEPORTS
						where ID = :(cports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable port " + cports[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.CABLEPORTS
							set
								NAME = :(cports[i].name),
								EQUIPMENT_ID = :(cports[i].equipmentId),
								INTERFACE_ID = :(cports[i].interfaceId),
								DESCRIPTION = :(cports[i].description),
								ADDRESS_ID = :(cports[i].addressId),
								LOCAL_ID = :(cports[i].localId),
								TYPE_ID = :(cports[i]._typeId),
								DOMAIN_ID = :(cports[i].domainId)
							where ID = :(cports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable port: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable port " + cports[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.CABLEPORTS(
								ID,
								NAME,
								EQUIPMENT_ID,
								INTERFACE_ID,
								DESCRIPTION,
								ADDRESS_ID,
								LOCAL_ID,
								TYPE_ID,
								DOMAIN_ID)
							values(
								 :(cports[i].id),
								 :(cports[i].name),
								 :(cports[i].equipmentId),
								 :(cports[i].interfaceId),
								 :(cports[i].description),
								 :(cports[i].addressId),
								 :(cports[i].localId),
								 :(cports[i]._typeId),
								 :(cports[i].domainId) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable port: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating cable port: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(conn, "CABLEPORTCHARACTERISTICS", "CABLE_PORT_ID", cports[i].id, cports[i].characteristics);

			CatalogSchemeMapUpdater.cablePortUpdated(conn, cports[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveLinks(final Connection conn, Link_Transferable[] links) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.LINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update link " + links[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.LINKS
							set
								NAME = :(links[i].name),
								TYPE_ID = :(links[i]._typeId),
								DESCRIPTION = :(links[i].description),
								INVENTORY_NR = :(links[i].inventoryNr),
								MANUFACTURER = :(links[i].manufacturer),
								MANUFACTURER_CODE = :(links[i].manufacturerCode),
								SUPPLIER = :(links[i].supplier),
								SUPPLIER_CODE = :(links[i].supplierCode),
								LINK_CLASS = :(links[i].link_class),
								START_EQUIPMENT_ID = :(links[i].start_equipment_id),
								START_PORT_ID = :(links[i].start_port_id),
								END_EQUIPMENT_ID = :(links[i].end_equipment_id),
								END_PORT_ID = :(links[i].end_port_id),
								IMAGE_ID = :(links[i].image_id),
								MODIFIED = SYSDATE,
								DOMAIN_ID = :(links[i].domainId),
								PHYSICAL_LENGTH = :(links[i].physical_length),
								OPTICAL_LENGTH = :(links[i].optical_length)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new link " + links[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.LINKS(
								ID,
								NAME,
								TYPE_ID,
								DESCRIPTION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								LINK_CLASS,
								START_EQUIPMENT_ID,
								START_PORT_ID,
								END_EQUIPMENT_ID,
								END_PORT_ID,
								IMAGE_ID,
								MODIFIED,
								DOMAIN_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								 :(links[i].id),
								 :(links[i].name),
								 :(links[i]._typeId),
								 :(links[i].description),
								 :(links[i].inventoryNr),
								 :(links[i].manufacturer),
								 :(links[i].manufacturerCode),
								 :(links[i].supplier),
								 :(links[i].supplierCode),
								 :(links[i].link_class),
								 :(links[i].start_equipment_id),
								 :(links[i].start_port_id),
								 :(links[i].end_equipment_id),
								 :(links[i].end_port_id),
								 :(links[i].image_id),
								 SYSDATE,
								 :(links[i].domainId),
								:(links[i].physical_length),
								:(links[i].optical_length) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(conn, "LINKCHARACTERISTICS", "LINK_ID", links[i].id, links[i].characteristics);

			CatalogSchemeMapUpdater.linkUpdated(conn, links[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveCableThreads(final Connection conn, String cable_id, CableLinkThread_Transferable[] threads) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			#sql [connCtx] { delete from AMFICOM.CABLELINKTHREADS
					where CABLE_ID = :cable_id };

			for (int i = 0; i < threads.length; i++)
			{
				System.out.println("insert set thread " + threads[i].id + " for cable " + cable_id);

				#sql [connCtx] {
					insert into AMFICOM.CABLELINKTHREADS(
							ID,
							NAME,
							COLOR,
							MARK,
							LINK_TYPE_ID,
							CABLE_ID)
						values(
							 :(threads[i].id),
							 :(threads[i].name),
							 :(threads[i].color),
							 :(threads[i].mark),
							 :(threads[i].linkTypeId),
							 :cable_id )
				};

				CatalogSchemeMapUpdater.cableThreadUpdated(conn, threads[i]);
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing port: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		catch(Exception exx)
		{
			System.out.println("error generating port: " + exx.getMessage());
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}


	static int saveCableLinks(final Connection conn, CableLink_Transferable[] links) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLELINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link " + links[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.CABLELINKS
							set
								NAME = :(links[i].name),
								TYPE_ID = :(links[i]._typeId),
								DESCRIPTION = :(links[i].description),
								INVENTORY_NR = :(links[i].inventoryNr),
								MANUFACTURER = :(links[i].manufacturer),
								MANUFACTURER_CODE = :(links[i].manufacturerCode),
								SUPPLIER = :(links[i].supplier),
								SUPPLIER_CODE = :(links[i].supplierCode),
								LINK_CLASS = :(links[i].link_class),
								START_EQUIPMENT_ID = :(links[i].start_equipment_id),
								START_PORT_ID = :(links[i].start_port_id),
								END_EQUIPMENT_ID = :(links[i].end_equipment_id),
								END_PORT_ID = :(links[i].end_port_id),
								IMAGE_ID = :(links[i].imageId),
								MODIFIED = SYSDATE,
								DOMAIN_ID = :(links[i].domainId),
								PHYSICAL_LENGTH = :(links[i].physical_length),
								OPTICAL_LENGTH = :(links[i].optical_length)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable link " + links[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.CABLELINKS(
								ID,
								NAME,
								TYPE_ID,
								DESCRIPTION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								LINK_CLASS,
								START_EQUIPMENT_ID,
								START_PORT_ID,
								END_EQUIPMENT_ID,
								END_PORT_ID,
								IMAGE_ID,
								MODIFIED,
								DOMAIN_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								 :(links[i].id),
								 :(links[i].name),
								 :(links[i]._typeId),
								 :(links[i].description),
								 :(links[i].inventoryNr),
								 :(links[i].manufacturer),
								 :(links[i].manufacturerCode),
								 :(links[i].supplier),
								 :(links[i].supplierCode),
								 :(links[i].link_class),
								 :(links[i].start_equipment_id),
								 :(links[i].start_port_id),
								 :(links[i].end_equipment_id),
								 :(links[i].end_port_id),
								 :(links[i].imageId),
								 SYSDATE,
								 :(links[i].domainId),
								:(links[i].physical_length),
								:(links[i].optical_length) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCableThreads(conn, links[i].id, links[i].threads);
			saveCharacteristics(conn, "CABLELINKCHARACTERISTICS", "CABLE_LINK_ID", links[i].id, links[i].characteristics);

			CatalogSchemeMapUpdater.cableLinkUpdated(conn, links[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveEquipments(final Connection conn, Equipment_Transferable[] equipments) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = equipments.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.EQUIPMENTS
						where ID = :(equipments[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment " + equipments[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTS
							set
								NAME = :(equipments[i].name),
								DESCRIPTION = :(equipments[i].description),
								TYPE_ID = :(equipments[i]._typeId),
								LONGITUDE = :(equipments[i].longitude),
								LATITUDE = :(equipments[i].latitude),
								HW_SERIAL = :(equipments[i].hwSerial),
								SW_SERIAL = :(equipments[i].swSerial),
								HW_VERSION = :(equipments[i].hwVersion),
								SW_VERSION = :(equipments[i].swVersion),
								INVENTORY_NR = :(equipments[i].inventoryNr),
								MANUFACTURER = :(equipments[i].manufacturer),
								MANUFACTURER_CODE = :(equipments[i].manufacturerCode),
								SUPPLIER = :(equipments[i].supplier),
								SUPPLIER_CODE = :(equipments[i].supplierCode),
								EQ_CLASS = :(equipments[i].eqClass),
								IMAGE_ID = :(equipments[i].imageId),
								IS_KIS = :(equipments[i].is_kis),
								AGENT_ID = :(equipments[i].agentId),
								DOMAIN_ID = :(equipments[i].domainId),
								MODIFIED = SYSDATE
							where ID = :(equipments[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment " + equipments[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.EQUIPMENTS(
								ID,
								NAME,
								DESCRIPTION,
								TYPE_ID,
								LONGITUDE,
								LATITUDE,
								HW_SERIAL,
								SW_SERIAL,
								HW_VERSION,
								SW_VERSION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								EQ_CLASS,
								IMAGE_ID,
								IS_KIS,
								AGENT_ID,
								DOMAIN_ID,
								MODIFIED)
							values(
								 :(equipments[i].id),
								 :(equipments[i].name),
								 :(equipments[i].description),
								 :(equipments[i]._typeId),

								 :(equipments[i].longitude),
								 :(equipments[i].latitude),
								 :(equipments[i].hwSerial),
								 :(equipments[i].swSerial),
								 :(equipments[i].hwVersion),
								 :(equipments[i].swVersion),

								 :(equipments[i].inventoryNr),
								 :(equipments[i].manufacturer),
								 :(equipments[i].manufacturerCode),
								 :(equipments[i].supplier),
								 :(equipments[i].supplierCode),

								 :(equipments[i].eqClass),
								 :(equipments[i].imageId),
								 :(equipments[i].is_kis),
								 :(equipments[i].agentId),
								 :(equipments[i].domainId),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(conn, "EQUIPMENTCHARACTERISTICS", "EQUIPMENT_ID", equipments[i].id, equipments[i].characteristics);

			CatalogSchemeMapUpdater.equipmentUpdated(conn, equipments[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}
}
