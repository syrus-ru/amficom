package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import oracle.jdbc.driver.*;

import java.util.Vector;
import java.util.LinkedList;

import com.syrus.io.*;
import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Survey.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.General.TestTimeStampsPackage.*;

import com.syrus.AMFICOM.server.*;

public class SurveydbInterfaceLoad3
{
	protected SurveydbInterfaceLoad3()
	{
	}

	static public int loadRequests(
			String domain_id,
			ClientTestRequestSeq_TransferableHolder treqseq)
	{
		String It_id = "";
		String It_name = "";
		long It_created = 0;
		int It_status = 0;
		String It_user_id = "";

		TestRequestIterator trIt = null;
		ClientTestRequest_Transferable tr;
		ClientTestRequest_Transferable[] tr_s;
		Vector vector = new Vector();

		String test_ids[];
		Vector vector2 = new Vector();

		IdIterator idIt = null;

		try
		{
			#sql trIt = { select
					ID,
					NAME,
					CREATED,
					STATUS,
					USER_ID
				from AMFICOM.TESTREQUESTS
				where DELETED IS NULL
				and DOMAIN_ID = :domain_id
			};
			while (trIt.next())
			{
//ID
				try {It_id = trIt.id();}
				catch(SQLNullException e) { }
				if(It_id == null) It_id = "";
//NAME
				try {It_name = trIt.name();}
				catch(SQLNullException e) { }
				if(It_name == null) It_name = "";
//CREATED
				try	{It_created = (trIt.created()).getTime();}
				catch(SQLNullException e){ }
				catch(NullPointerException e){ }
//TEST_TYPE_ID
				try	{It_status = trIt.status();}
				catch(SQLNullException e){ }
//USER_ID
				try {It_user_id = trIt.user_id();}
				catch(SQLNullException e){ }
				if(It_user_id == null) It_user_id = "";

				test_ids = new String[0];
				vector2 = new Vector();

				#sql idIt = {
						select Id from TESTS
						where REQUEST_ID = :It_id
							and DELETED IS NULL };
				while (idIt.next())
				{
					vector2.add(idIt.id());
				}
				idIt.close();
				test_ids = new String[vector2.size()];
				vector2.copyInto(test_ids);

				tr = new ClientTestRequest_Transferable(
						It_id,
						It_name,
						TestRequestStatus.from_int(It_status),
						It_created,
						It_user_id,
						0,
						0,
						"",
						test_ids);

				vector.add(tr);
			}
			trIt.close();
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(trIt != null) try {
			trIt.close();
			}catch(Exception exe) {}
			System.out.println("Error - test request exists!" + ": " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		finally
		{
			try {
				idIt.close();
				trIt.close();
			}catch(Exception exe) {}
		}
		
		tr_s = new ClientTestRequest_Transferable[vector.size()];
		vector.copyInto(tr_s);
		treqseq.value = tr_s;

		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator ( String id );

	#sql public static iterator ElementaryResultIterator (
		String id,
		Timestamp elementary_start_time);

	#sql public static iterator TestIterator (
		String id,
		Timestamp created,
		String test_type_id,
		int temporal_type,
		Timestamp start_time,
		Timestamp period,
		Timestamp end_time,
		int status,
		String kis_id,
		String request_id,
		String monitored_element_id);

	#sql public static iterator AnalysisIterator(
		String id,
		String name,
		String description,
		Timestamp created,
		String user_id,
		String monitored_element_id,
		String type_id );

	#sql public static iterator ModelingIterator(
		String id,
		String name,
		String type_id,
		Timestamp created,
		String user_id);

	#sql public static iterator TestRequestIterator(
		String id,
		String name,
		Timestamp created,
		int status,
		String user_id);


}

