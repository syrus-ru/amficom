/*
 * $Id: MapdbInterfaceRemove.sqlj,v 1.1.2.4 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class MapdbInterfaceRemove {
	private MapdbInterfaceRemove() {
	}

	static int removeElementAttributes(final Connection conn, String elementAttributeTable, String elementAttributeField, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		try
		{
			String qry = "delete from " + elementAttributeTable +
							" where " + elementAttributeField +
								" = '" + element_id + "'";
			#sql [connCtx]
			{
				BEGIN
					execute immediate :qry;
				END;
			};

			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("Error deleting attributes for element " + element_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeMaps(final Connection conn, String[] mapseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		Vector vector2 = new Vector();
		String equipment_ids[] = new String[0];
		String kis_ids[] = new String[0];
		String cp_ids[] = new String[0];
		String node_ids[] = new String[0];
		String nodeLink_ids[] = new String[0];
		String physicalLink_ids[] = new String[0];
		String path_ids[] = new String[0];
		String mark_ids[] = new String[0];

		int i;
		for(i = mapseq.length - 1; i >= 0; i--)
		{
			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPELEMENTLINKS", "MAP_ELEMENT_ID", mapseq[i]);
			equipment_ids = new String[vector2.size()];
			vector2.copyInto(equipment_ids);
			removeElements(conn, equipment_ids);
			System.out.println("removing " + vector2.size() + " equipments for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPKISLINKS", "MAP_KIS_ID", mapseq[i]);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
			removeKISs(conn, kis_ids);
			System.out.println("removing " + vector2.size() + " kiss for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPNODELINKS", "MAP_NODE_ID", mapseq[i]);
			node_ids = new String[vector2.size()];
			vector2.copyInto(node_ids);
			removeNodes(conn, node_ids);
			System.out.println("removing " + vector2.size() + " nodes for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPNODELINKLINKS", "MAP_NODE_LINK_ID", mapseq[i]);
			nodeLink_ids = new String[vector2.size()];
			vector2.copyInto(nodeLink_ids);
			removeNodeLinks(conn, nodeLink_ids);
			System.out.println("removing " + vector2.size() + " node links for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPLINKLINKS", "MAP_LINK_ID", mapseq[i]);
			physicalLink_ids = new String[vector2.size()];
			vector2.copyInto(physicalLink_ids);
			removeLinks(conn, physicalLink_ids);
			System.out.println("removing " + vector2.size() + " links for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPPATHSLINKS", "MAP_PATH_ID", mapseq[i]);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
			removePaths(conn, path_ids);
			System.out.println("removing " + vector2.size() + " paths for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadMapElementIds2(conn, "MAPMARKLINKS", "MAP_MARK_ID", mapseq[i]);
			mark_ids = new String[vector2.size()];
			vector2.copyInto(mark_ids);
			removeMarks(conn, mark_ids);
			System.out.println("removing " + vector2.size() + " mark for map " + mapseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPCONTEXTS
					where ID = :(mapseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting map: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeJMaps(final Connection conn, String[] mapseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		Vector vector2 = new Vector();
		String kis_ids[] = new String[0];
		String path_ids[] = new String[0];

		int i;
		for(i = mapseq.length - 1; i >= 0; i--)
		{
			vector2 = MapdbInterfaceLoad.loadISMMapElementIds(conn, "MAPKISELEMENTS", mapseq[i]);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
			removeKISs(conn, kis_ids);
			System.out.println("removing " + vector2.size() + " kiss for ism map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad.loadISMMapElementIds(conn, "MAPPATHELEMENTS", mapseq[i]);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
			removePaths(conn, path_ids);
			System.out.println("removing " + vector2.size() + " paths for ism map " + mapseq[i]);
			try
			{
				#sql [connCtx] { delete from AMFICOM.ISMMAPCONTEXTS
					where ID = :(mapseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting ism map: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeElements(final Connection conn, String[] equipmentseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = equipmentseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPELEMENTATTRIBUTES", "MAP_ELEMENT_ID", equipmentseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPELEMENTLINKS
					where MAP_ELEMENT_ID = :(equipmentseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPELEMENTS
					where ID = :(equipmentseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting equipment: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeKISs(final Connection conn, String[] kisseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = kisseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPKISELEMENTATTRIBUTES", "MAP_KIS_ELEMENT_ID", kisseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPKISLINKS
					where MAP_KIS_ID = :(kisseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPKISELEMENTS
					where ID = :(kisseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting kis: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeMarks(final Connection conn, String[] markseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = markseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPMARKELEMENTATTRIBUTES", "MAP_MARK_ELEMENT_ID", markseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPMARKLINKS
					where MAP_MARK_ID = :(markseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPMARKELEMENTS
					where ID = :(markseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting mark: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeNodes(final Connection conn, String[] nodeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = nodeseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPPHYSICALNODEELEMENTATTRIBUT", "MAP_PHYSICAL_NODE_ELEMENT_ID", nodeseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPNODELINKS
					where MAP_NODE_ID = :(nodeseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPPHYSICALNODEELEMENTS
					where ID = :(nodeseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting node: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeNodeLinks(final Connection conn, String[] nodelinkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = nodelinkseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPNODELINKELEMENTATTRIBUTES", "MAP_NODE_LINK_ID", nodelinkseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPNODELINKLINKS
					where MAP_NODE_LINK_ID = :(nodelinkseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPNODELINKELEMENTS
					where ID = :(nodelinkseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting node link: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeLinks(final Connection conn, String[] linkseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = linkseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPPHYSICALLINKELEMENTATTRIBUT", "MAP_PHYSICAL_LINK_ELEMENT_ID", linkseq[i]);

			try
			{
				#sql [connCtx] { delete from AMFICOM.MAPLINKLINKS
					where MAP_LINK_ID = :(linkseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPPHYSICALLINKELEMENTS
					where ID = :(linkseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting link: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removePaths(final Connection conn, String[] pathseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = pathseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(conn, "MAPPATHELEMENTATTRIBUTES", "MAP_PATH_ELEMENT_ID", pathseq[i]);

			try {
				#sql [connCtx] { delete from AMFICOM.MAPPATHSLINKS
					where MAP_PATH_ID = :(pathseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPPATHLINKS
					where PATH_ID = :(pathseq[i]) };
				#sql [connCtx] { delete from AMFICOM.MAPPATHELEMENTS
					where ID = :(pathseq[i]) };
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting path: " + e.getMessage());
				e.printStackTrace();
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}
