
// Copyright (c) Syrus Systems 2000 Syrus Systems
package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import java.text.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class MapdbInterfaceRemove extends Object
{
	protected MapdbInterfaceRemove()
	{
	}

	static public int removeElementAttributes(
			String elementAttributeTable,
			String elementAttributeField,
			String element_id)
	{
		int i;
/*
		Vector vector = MapdbInterfaceLoad4.loadAttributes(
				elementAttributeTable,
				elementAttributeField,
				element_id);
		ElementAttribute_Transferable[] attributes = new ElementAttribute_Transferable[vector.size()];
*/
		try
		{
			String qry = "delete from " + elementAttributeTable +
							" where " + elementAttributeField +
								" = '" + element_id + "'";
			#sql
			{
				BEGIN
					execute immediate :qry;
				END;
			};

			#sql { commit };
		}
		catch(SQLException e)
		{
			System.out.println("Error deleting attributes for element " + element_id + ": " + e.getMessage());
			e.printStackTrace();
//			return Constants.ERROR_DELETING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeMaps(String[] mapseq)
	{
		Vector vector2 = new Vector();
		String equipment_ids[] = new String[0];
		String kis_ids[] = new String[0];
		String cp_ids[] = new String[0];
		String node_ids[] = new String[0];
		String nodeLink_ids[] = new String[0];
		String physicalLink_ids[] = new String[0];
		String path_ids[] = new String[0];
		String mark_ids[] = new String[0];

		int i;
		for(i = mapseq.length - 1; i >= 0; i--)
		{
			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPELEMENTLINKS", "MAP_ELEMENT_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPEQUIPMENTELEMENTS", mapseq[i]);
			equipment_ids = new String[vector2.size()];
			vector2.copyInto(equipment_ids);
			removeElements(equipment_ids);
			System.out.println("removing " + vector2.size() + " equipments for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPKISLINKS", "MAP_KIS_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPKISELEMENTS", mapseq[i]);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
			removeKISs(kis_ids);
			System.out.println("removing " + vector2.size() + " kiss for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPNODELINKS", "MAP_NODE_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPPHYSICALNODEELEMENTS", mapseq[i]);
			node_ids = new String[vector2.size()];
			vector2.copyInto(node_ids);
			removeNodes(node_ids);
			System.out.println("removing " + vector2.size() + " nodes for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPNODELINKLINKS", "MAP_NODE_LINK_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPNODELINKELEMENTS", mapseq[i]);
			nodeLink_ids = new String[vector2.size()];
			vector2.copyInto(nodeLink_ids);
			removeNodeLinks(nodeLink_ids);
			System.out.println("removing " + vector2.size() + " node links for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPLINKLINKS", "MAP_LINK_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPPHYSICALLINKELEMENTS", mapseq[i]);
			physicalLink_ids = new String[vector2.size()];
			vector2.copyInto(physicalLink_ids);
			removeLinks(physicalLink_ids);
			System.out.println("removing " + vector2.size() + " links for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPPATHSLINKS", "MAP_PATH_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPPATHELEMENTS", mapseq[i]);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
			removePaths(path_ids);
			System.out.println("removing " + vector2.size() + " paths for map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPMARKLINKS", "MAP_MARK_ID", mapseq[i]);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPMARKELEMENTS", mapseq[i]);
			mark_ids = new String[vector2.size()];
			vector2.copyInto(mark_ids);
			removeMarks(mark_ids);
			System.out.println("removing " + vector2.size() + " mark for map " + mapseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPCONTEXTS
					where ID = :(mapseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting map: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeJMaps(String[] mapseq)
	{
		Vector vector2 = new Vector();
		String kis_ids[] = new String[0];
		String path_ids[] = new String[0];

		int i;
		for(i = mapseq.length - 1; i >= 0; i--)
		{
			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPKISELEMENTS", mapseq[i]);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
			removeKISs(kis_ids);
			System.out.println("removing " + vector2.size() + " kiss for ism map " + mapseq[i]);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPPATHELEMENTS", mapseq[i]);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
			removePaths(path_ids);
			System.out.println("removing " + vector2.size() + " paths for ism map " + mapseq[i]);
			try
			{
				#sql { delete from AMFICOM.ISMMAPCONTEXTS
					where ID = :(mapseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting ism map: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeElements(String[] equipmentseq)
	{
		int i;
		for(i = equipmentseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPELEMENTATTRIBUTES",
					"MAP_ELEMENT_ID",
					equipmentseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPELEMENTLINKS
					where MAP_ELEMENT_ID = :(equipmentseq[i]) };
				#sql { delete from AMFICOM.MAPELEMENTS
					where ID = :(equipmentseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting equipment: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeKISs(String[] kisseq)
	{
		int i;
		for(i = kisseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPKISELEMENTATTRIBUTES",
					"MAP_KIS_ELEMENT_ID",
					kisseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPKISLINKS
					where MAP_KIS_ID = :(kisseq[i]) };
				#sql { delete from AMFICOM.MAPKISELEMENTS
					where ID = :(kisseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting kis: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeMarks(String[] markseq)
	{
		int i;
		for(i = markseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPMARKELEMENTATTRIBUTES",
					"MAP_MARK_ELEMENT_ID",
					markseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPMARKLINKS
					where MAP_MARK_ID = :(markseq[i]) };
				#sql { delete from AMFICOM.MAPMARKELEMENTS
					where ID = :(markseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting mark: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeNodes(String[] nodeseq)
	{
		int i;
		for(i = nodeseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPPHYSICALNODEELEMENTATTRIBUT",
					"MAP_PHYSICAL_NODE_ELEMENT_ID",
					nodeseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPNODELINKS
					where MAP_NODE_ID = :(nodeseq[i]) };
				#sql { delete from AMFICOM.MAPPHYSICALNODEELEMENTS
					where ID = :(nodeseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting node: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeNodeLinks(String[] nodelinkseq)
	{
		int i;
		for(i = nodelinkseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPNODELINKELEMENTATTRIBUTES",
					"MAP_NODE_LINK_ID",
					nodelinkseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPNODELINKLINKS
					where MAP_NODE_LINK_ID = :(nodelinkseq[i]) };
				#sql { delete from AMFICOM.MAPNODELINKELEMENTS
					where ID = :(nodelinkseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting node link: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removeLinks(String[] linkseq)
	{
		int i;
		for(i = linkseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPPHYSICALLINKELEMENTATTRIBUT",
					"MAP_PHYSICAL_LINK_ELEMENT_ID",
					linkseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPLINKLINKS
					where MAP_LINK_ID = :(linkseq[i]) };
				#sql { delete from AMFICOM.MAPPHYSICALLINKELEMENTS
					where ID = :(linkseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting link: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int removePaths(String[] pathseq)
	{
		int i;
		for(i = pathseq.length - 1; i >= 0; i--)
		{
			removeElementAttributes(
					"MAPPATHELEMENTATTRIBUTES",
					"MAP_PATH_ELEMENT_ID",
					pathseq[i]);

			try
			{
				#sql { delete from AMFICOM.MAPPATHSLINKS
					where MAP_PATH_ID = :(pathseq[i]) };
				#sql { delete from AMFICOM.MAPPATHLINKS
					where PATH_ID = :(pathseq[i]) };
				#sql { delete from AMFICOM.MAPPATHELEMENTS
					where ID = :(pathseq[i]) };
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting path: " + e.getMessage());
				e.printStackTrace();
//				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}


}

