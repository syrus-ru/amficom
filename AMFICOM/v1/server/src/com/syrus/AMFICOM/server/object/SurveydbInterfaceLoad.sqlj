/*
 * $Id: SurveydbInterfaceLoad.sqlj,v 1.1.2.4 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.Survey.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.SQLNullException;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SurveydbInterfaceLoad {
	private SurveydbInterfaceLoad() {
	}

	static int getTestIdsForMonitoredElement(final Connection conn, String me_id, ResourceDescriptorSeq_TransferableHolder testids) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		int ret = Constants.ERROR_NO_ERROR;

		ResourceIdIterator idIt = null;

		testids.value = new ResourceDescriptor_Transferable[0];
		try
		{
			Vector vec = new Vector();

			#sql [connCtx] idIt = {
				SELECT id, modified FROM amficom.tests WHERE monitored_element_id = :me_id AND deleted IS NULL
			};
			while(idIt.next())
				vec.add(new ResourceDescriptor_Transferable(idIt.id(), idIt.modified().getTime()));
			idIt.close();

			testids.value = new ResourceDescriptor_Transferable[vec.size()];
			vec.copyInto(testids.value);
		}
		catch(SQLException ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			ex.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, "Невозможно загрузить тест: " + ex.getMessage());
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return ret;
	}

	static int loadRequests(final Connection conn, String domain_id, ClientTestRequestSeq_TransferableHolder treqseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		long It_created = 0;
		int It_status = 0;
		String It_user_id = "";

		TestRequestIterator trIt = null;
		ClientTestRequest_Transferable tr;
		ClientTestRequest_Transferable[] tr_s;
		Vector vector = new Vector();

		String test_ids[];
		Vector vector2 = new Vector();

		IdIterator idIt = null;

		try
		{
			#sql [connCtx] trIt = {
				SELECT id, name, created, status, user_id FROM amficom.testrequests WHERE deleted IS NULL AND domain_id = :domain_id
			};
			while (trIt.next())
			{
				try {It_id = trIt.id();}
				catch(SQLNullException e) { }
				if(It_id == null) It_id = "";
				try {It_name = trIt.name();}
				catch(SQLNullException e) { }
				if(It_name == null) It_name = "";
				try	{It_created = (trIt.created()).getTime();}
				catch(SQLNullException e){ }
				catch(NullPointerException e){ }
				try	{It_status = trIt.status();}
				catch(SQLNullException e){ }
				try {It_user_id = trIt.user_id();}
				catch(SQLNullException e){ }
				if(It_user_id == null) It_user_id = "";

				test_ids = new String[0];
				vector2 = new Vector();

				#sql [connCtx] idIt = {
					select Id from TESTS where REQUEST_ID = :It_id and DELETED IS NULL
				};
				while (idIt.next())
				{
					vector2.add(idIt.id());
				}
				idIt.close();
				test_ids = new String[vector2.size()];
				vector2.copyInto(test_ids);

				tr = new ClientTestRequest_Transferable(
						It_id,
						It_name,
						TestRequestStatus.from_int(It_status),
						It_created,
						It_user_id,
						0,
						0,
						"",
						test_ids);

				vector.add(tr);
			}
			trIt.close();
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			if(trIt != null) try {
			trIt.close();
			}catch(Exception exe) {}
			System.out.println("Error - test request exists!" + ": " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		finally
		{
			try {
				idIt.close();
				trIt.close();
			}catch(Exception exe) {}
		}
		
		tr_s = new ClientTestRequest_Transferable[vector.size()];
		vector.copyInto(tr_s);
		treqseq.value = tr_s;

		return Constants.ERROR_NO_ERROR;
	}

	static int loadGlobalParameterTypes(final Connection conn, GlobalParameterTypeSeq_TransferableHolder paramtypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_norm = "";
		String It_value_type_id = "";
		String It_unit = "";
		String It_granularity = "";
		String It_rangehi = "";
		String It_rangelo = "";
		String It_formula = "";
		long It_modified = 0;

		Vector vector = new Vector();

		GlobalParameterType_Transferable ch_t;
		GlobalParameterType_Transferable[] ch_ts;
		GlobalParameterTypeIterator chIt = null;
		Vector vector2;

		try
		{
			#sql [connCtx] chIt = {
				select ID, NAME, CODENAME, DESCRIPTION, NORM, TYPE_ID, UNIT, GRANULARITY, RANGEHI, RANGELO, FORMULA, MODIFIED from AMFICOM.PARAMETERTYPES
			};

			while (chIt.next())
			{
				try { It_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = chIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_value_type_id = chIt.type_id(); }
				catch(SQLException e) { }
				if(It_value_type_id == null) It_value_type_id = "";

				try { It_modified = chIt.modified().getTime(); }
				catch(SQLException e) { }

				ch_t = new GlobalParameterType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					It_norm,
					It_value_type_id,
					It_unit,
					It_granularity,
					It_rangehi,
					It_rangelo,
					It_formula,
					It_modified);

				vector.add(ch_t);
			}
			chIt.close();
			ch_ts = new GlobalParameterType_Transferable[vector.size()];
			vector.copyInto(ch_ts);
			paramtypeseq.value = ch_ts;

		}
		catch(SQLException e)
		{
			if(chIt != null) try {
			chIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading characteristic types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				chIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadGlobalParameterTypes(final Connection conn, String[] ids, GlobalParameterTypeSeq_TransferableHolder paramtypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_norm = "";
		String It_value_type_id = "";
		String It_unit = "";
		String It_granularity = "";
		String It_rangehi = "";
		String It_rangelo = "";
		String It_formula = "";
		long It_modified = 0;

		Vector vector = new Vector();

		GlobalParameterType_Transferable ch_t;
		GlobalParameterType_Transferable[] ch_ts;
		GlobalParameterTypeIterator chIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] chIt = { select
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						NORM,
						TYPE_ID,
						UNIT,
						GRANULARITY,
						RANGEHI,
						RANGELO,
						FORMULA,
						MODIFIED
					from AMFICOM.PARAMETERTYPES
			};

			while (chIt.next())
			{
				if(! loadvec.contains(chIt.id()))
					continue;

				try { It_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = chIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_value_type_id = chIt.type_id(); }
				catch(SQLException e) { }
				if(It_value_type_id == null) It_value_type_id = "";

				try { It_modified = chIt.modified().getTime(); }
				catch(SQLException e) { }

				ch_t = new GlobalParameterType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					It_norm,
					It_value_type_id,
					It_unit,
					It_granularity,
					It_rangehi,
					It_rangelo,
					It_formula,
					It_modified);

				vector.add(ch_t);
			}
			chIt.close();
			ch_ts = new GlobalParameterType_Transferable[vector.size()];
			vector.copyInto(ch_ts);
			paramtypeseq.value = ch_ts;

		}
		catch(SQLException e)
		{
			if(chIt != null) try {
			chIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading characteristic types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				chIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator ResourceIdIterator(
		String id,
		Timestamp modified);

	#sql public static iterator IdIterator (
		String id);

	#sql public static iterator TestRequestIterator(
		String id,
		String name,
		Timestamp created,
		int status,
		String user_id);

	#sql public static iterator GlobalParameterTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String norm,
		String type_id,
		String unit,
		String granularity,
		String rangehi,
		String rangelo,
		String formula,
		Timestamp modified);
}
