/*
 * $Id: SurveydbInterfaceLoad.sqlj,v 1.1.2.2 2004/08/20 17:12:10 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import java.sql.*;
import java.util.*;
import oracle.sql.BLOB;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/20 17:12:10 $
 * @author $Author: bass $
 * @module server_v1
 */
public class SurveydbInterfaceLoad
{
	protected SurveydbInterfaceLoad()
	{
	}

	public static int GetTestIdsForMonitoredElement(
			String me_id,
			ResourceDescriptorSeq_TransferableHolder testids)
		throws AMFICOMRemoteException
	{
		int ret = Constants.ERROR_NO_ERROR;

		ResourceIdIterator idIt = null;

		testids.value = new ResourceDescriptor_Transferable[0];
		try
		{
			Vector vec = new Vector();

			#sql idIt = { select ID, MODIFIED from AMFICOM.TESTS
				where MONITORED_ELEMENT_ID = :me_id
				and DELETED IS NULL
			};
			while(idIt.next())
				vec.add(new ResourceDescriptor_Transferable(idIt.id(), idIt.modified().getTime()));
			idIt.close();

			testids.value = new ResourceDescriptor_Transferable[vec.size()];
			vec.copyInto(testids.value);
		}
		catch(SQLException ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			ex.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, "Невозможно загрузить тест: " + ex.getMessage());
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return ret;
	}



	public static ClientParameter_Transferable[] loadTestArguments(String test_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_p_type_id = "";
		String It_action_id = "";
		String It_arg_id = "";

		Vector vector = new Vector();
		ClientParameter_Transferable[] args = new ClientParameter_Transferable[0];
		ClientParameter_Transferable arg;
		TestArgumentIterator tparIt = null;
		return args;
	}

	public static long[] getTestTimeTableStamps(String test_i_d)
		throws SQLException
	{
		TestTimeTableStampsIterator ttsIt = null;
		LinkedList ll = new LinkedList();
		try
		{
			#sql ttsIt = {select time_stamp from amficom.testtimetablestamps where test_id = :test_i_d } ;
			while (ttsIt.next())
				ll.add(ttsIt.time_stamp());
			ttsIt.close();
		}
		catch(SQLException ex)
		{
			if(ttsIt != null) try {
			ttsIt.close();
			}catch(Exception exe) {}
			throw ex;
		}
		finally
		{
			try {
				ttsIt.close();
			}catch(Exception exe) {}
		}
		
		long[] ts = new long[0];
		if (ll.size() == 0)
			System.out.println("No time stamps for test id: " + test_i_d);
		else
		{
			ts = new long[ll.size()];
			for (int j = 0; j < ts.length; j++)
				ts[j] = ((Timestamp)(ll.get(j))).getTime();
		}
		return ts;
	}

	public static Vector loadResultParameters(
			String paramTableName,
			String result_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_p_type_id = "";
		String It_action_id = "";
		BLOB It_value;
		byte[] val = new byte[0];
		octetSeqHolder osh;

		Vector vector2 = new Vector();
		ResultParameterIterator paramIt = null;
		return vector2;
	}

	public static ClientParameter_Transferable[] loadActionArguments(
			String argumentTableName,
			String argumentFieldName,
			String argumentParameterFieldName,
			String argumentTypeTableName,
			String action_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_arg_id = "";

		byte[] val = new byte[0];

		Vector vector = new Vector();
		ClientParameter_Transferable[] args = new ClientParameter_Transferable[0];
		ClientParameter_Transferable arg;
		return args;
	}

	public static ClientParameter_Transferable[] loadActionArguments(
			String tableName,
			String actionFieldName,
			String element_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		BLOB It_value;
		byte[] val = new byte[0];
		octetSeqHolder osh;

		ClientParameter_Transferable arg;
		ClientParameter_Transferable args[] = new ClientParameter_Transferable[0];
		ActionArgumentIterator argIt = null;
		Vector vector = new Vector();
		return args;
	}

	public static ClientParameter_Transferable[] loadActionParameters(
			String tableName,
			String actionFieldName,
			String element_id)
	{
		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_parameter_type_name = "";
		String It_parameter_type_id = "";
		String It_data_type = "";
		String It_action_id = "";
		byte[] val = new byte[0];

		ClientParameter_Transferable param;
		ClientParameter_Transferable[] params = new ClientParameter_Transferable[0];
		ActionParameterIterator paramIt = null;
		Vector vector = new Vector();
		return params;
	}

	#sql public static iterator IdIterator ( String id );
	#sql public static iterator ResourceIdIterator( String id, Timestamp modified );

	#sql public static iterator TestIterator (
		String id,
		Timestamp created,
		String test_type_id,
		int temporal_type,
		Timestamp start_time,
		Timestamp period,
		Timestamp end_time,
		int status,
		String kis_id,
		String local_id,
		String request_id);

  #sql public static iterator TestArgumentIterator (
	  String id,
	  BLOB value,
	  String type_id,
	  String test_id);

	#sql public static iterator TestTimeTableStampsIterator (Timestamp time_stamp);

	#sql public static iterator ResultParameterIterator(
		String id,
		String parameter_type_id,
		BLOB value,
		String result_id);

	#sql public static iterator ActionArgumentIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id,
		BLOB value);

	#sql public static iterator ActionParameterIterator(
		String id,
		String name,
		String codename,
		String parameter_type_id);
}
