/*
 * $Id: SurveydbInterfaceLoad.sqlj,v 1.1.2.5 2004/12/23 12:06:02 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.AMFICOMRemoteException;
import com.syrus.AMFICOM.CORBA.Resource.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/12/23 12:06:02 $
 * @author $Author: bass $
 * @module server_v1
 */
final class SurveydbInterfaceLoad {
	private SurveydbInterfaceLoad() {
	}

	static int getTestIdsForMonitoredElement(final Connection conn, String me_id, ResourceDescriptorSeq_TransferableHolder testids) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		int ret = Constants.ERROR_NO_ERROR;

		ResourceIdIterator idIt = null;

		testids.value = new ResourceDescriptor_Transferable[0];
		try
		{
			Vector vec = new Vector();

			#sql [connCtx] idIt = {
				SELECT id, modified FROM amficom.tests WHERE monitored_element_id = :me_id AND deleted IS NULL
			};
			while(idIt.next())
				vec.add(new ResourceDescriptor_Transferable(idIt.id(), idIt.modified().getTime()));
			idIt.close();

			testids.value = new ResourceDescriptor_Transferable[vec.size()];
			vec.copyInto(testids.value);
		}
		catch(SQLException ex)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			ex.printStackTrace();
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, "Невозможно загрузить тест: " + ex.getMessage());
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return ret;
	}

	#sql public static iterator ResourceIdIterator(
		String id,
		Timestamp modified);
}
