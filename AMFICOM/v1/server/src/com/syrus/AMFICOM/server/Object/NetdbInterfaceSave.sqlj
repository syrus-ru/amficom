package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Network.*;
import com.syrus.AMFICOM.CORBA.NetworkDirectory.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class NetdbInterfaceSave
{
	protected NetdbInterfaceSave()
	{
	}

	static public void saveCharacteristics(
			String charTable,
			String charField,
			String element_id,
			Characteristic_Transferable[] characteristics)
	{
		int count;
		int len2;
		int j;

		try
		{
			String qry = "delete from AMFICOM." + charTable +
						" where " + charField + " = '" + element_id + "'";
			#sql {
				BEGIN
					execute immediate :qry;
				END;
			};

			len2 = characteristics.length;
			for(j = 0; j < len2; j++)
			{
				try
				{
					System.out.println("insert  characteristic: " + characteristics[j].id + " type " + characteristics[j].type_id + " value " + characteristics[j].value + " for element " + element_id);
					characteristics[j].id = ResourcedbInterface.getUId("characteristic");

					String qry2 = "insert into AMFICOM." + charTable +
						"(ID, CHARACTERISTIC_TYPE_ID, VALUE, " +
						charField + ") values ('" +
						characteristics[j].id + "', '" +
						characteristics[j].type_id + "', '" +
						characteristics[j].value + "', '" +
						element_id + "')";

					#sql {
						BEGIN
							execute immediate :qry2;
						END;
					};

					#sql { commit };
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing characteristic: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating characteristic: " + exxx.getMessage());
				}
			}
		}
		catch(SQLException exx)
		{
			System.out.println("could not save type characteristic: " + exx.getMessage());
			exx.printStackTrace();
		}
	}
/*
	static public void saveCharacteristics2(
			String charTable,
			String charField,
			String element_id,
			Characteristic_Transferable[] characteristics)
	{
		int count;
		int len2;
		int j;

		len2 = characteristics.length;
		for(j = 0; j < len2; j++)
		{
			try
			{
				IdIterator idIt = null;
				String qry = "select ID from AMFICOM." + charTable +
						" where " + charField + " = '" + element_id +
						"' and CHARACTERISTIC_TYPE_ID = '" + characteristics[j].type_id;
				#sql {
					BEGIN
						open :OUT idIt for :qry;
					END;
				};
				if(idIt.next())
				{
//					System.out.println("update characteristic " + characteristics[j].id);
					String id = idIt.id();
					String qry2 = "update AMFICOM." + charTable +
						" set VALUE = '" + characteristics[j].value +
						"' where ID = '" + id + "'";
					#sql {
						BEGIN
							execute immediate :qry2;
						END;
					};
				}
				else
				{
					String at_s = ResourcedbInterface.getUId("characteristic");
					String query = "insert into AMFICOM." +
						charTable + "(ID, CHARACTERISTIC_TYPE_ID, VALUE, " +
						charField + ") values('" + at_s + "', '" +
						characteristics[j].type_id + "', '" +
						characteristics[j].value + "', '" +
						element_id + "')";
					#sql {
						BEGIN
							execute immediate :query;
						END;
					};
					#sql { commit };
				}
			}
			catch(SQLException exx)
			{
				System.out.println("error saVing characteristic: " + exx.getMessage());
				exx.printStackTrace();
			}
			catch(Exception exxx)
			{
				System.out.println("error generating characteristic: " + exxx.getMessage());
			}
		}//for (characteristics)
	}
*/
	static public int savePorts(
			Port_Transferable[] ports)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = ports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.PORTS
						where ID = :(ports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update port " + ports[i].id);
				try
				{
					#sql {
						update AMFICOM.PORTS
							set
								NAME = :(ports[i].name),
								EQUIPMENT_ID = :(ports[i].equipment_id),
								INTERFACE_ID = :(ports[i].interface_id),
								DESCRIPTION = :(ports[i].description),
								ADDRESS_ID = :(ports[i].address_id),
								LOCAL_ID = :(ports[i].local_id),
								TYPE_ID = :(ports[i].type_id),
								DOMAIN_ID = :(ports[i].domain_id)
							where ID = :(ports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing port: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new port " + ports[i].id);
				try
				{
					#sql {
						insert into AMFICOM.PORTS(
								ID,
								NAME,
								EQUIPMENT_ID,
								INTERFACE_ID,
								DESCRIPTION,
								ADDRESS_ID,
								LOCAL_ID,
								TYPE_ID,
								DOMAIN_ID)
							values(
								 :(ports[i].id),
								 :(ports[i].name),
								 :(ports[i].equipment_id),
								 :(ports[i].interface_id),
								 :(ports[i].description),
								 :(ports[i].address_id),
								 :(ports[i].local_id),
								 :(ports[i].type_id),
								 :(ports[i].domain_id) )
					};
/*
					String at_s = ResourcedbInterface.getUId("port");
					#sql {
						insert into AMFICOM.EQUIPMENTPORTS(
								ID,
								EQUIPMENT_ID,
								PORT_ID)
							values(
								:at_s,
								:(ports[i].equipment_id),
								:(ports[i].id) )
					};
*/
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing port: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating port: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(
					"PORTCHARACTERISTICS",
					"PORT_ID",
					ports[i].id,
					ports[i].characteristics);

			CatalogSchemeMapUpdater.portUpdated(ports[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveCablePorts(CablePort_Transferable[] cports)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = cports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.CABLEPORTS
						where ID = :(cports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable port " + cports[i].id);
				try
				{
					#sql {
						update AMFICOM.CABLEPORTS
							set
								NAME = :(cports[i].name),
								EQUIPMENT_ID = :(cports[i].equipment_id),
								INTERFACE_ID = :(cports[i].interface_id),
								DESCRIPTION = :(cports[i].description),
								ADDRESS_ID = :(cports[i].address_id),
								LOCAL_ID = :(cports[i].local_id),
								TYPE_ID = :(cports[i].type_id),
								DOMAIN_ID = :(cports[i].domain_id)
							where ID = :(cports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable port: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable port " + cports[i].id);
				try
				{
					#sql {
						insert into AMFICOM.CABLEPORTS(
								ID,
								NAME,
								EQUIPMENT_ID,
								INTERFACE_ID,
								DESCRIPTION,
								ADDRESS_ID,
								LOCAL_ID,
								TYPE_ID,
								DOMAIN_ID)
							values(
								 :(cports[i].id),
								 :(cports[i].name),
								 :(cports[i].equipment_id),
								 :(cports[i].interface_id),
								 :(cports[i].description),
								 :(cports[i].address_id),
								 :(cports[i].local_id),
								 :(cports[i].type_id),
								 :(cports[i].domain_id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable port: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating cable port: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(
					"CABLEPORTCHARACTERISTICS",
					"CABLE_PORT_ID",
					cports[i].id,
					cports[i].characteristics);

			CatalogSchemeMapUpdater.cablePortUpdated(cports[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveTestPorts(TestPort_Transferable[] testports)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = testports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.TESTPORTS
						where ID = :(testports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update testport " + testports[i].id);
				try
				{
					#sql {
						update AMFICOM.TESTPORTS
							set
								NAME = :(testports[i].name),
								EQUIPMENT_ID = :(testports[i].equipment_id),
								PORT_ID = :(testports[i].port_id),
								TYPE_ID = :(testports[i].type_id)
							where ID = :(testports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing testport: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new testport " + testports[i].id);
				try
				{
					#sql {
						insert into AMFICOM.TESTPORTS(
								ID,
								NAME,
								EQUIPMENT_ID,
								PORT_ID,
								TYPE_ID)
							values(
								 :(testports[i].id),
								 :(testports[i].name),
								 :(testports[i].equipment_id),
								 :(testports[i].port_id),
								 :(testports[i].type_id) )
					};

					String at_s = ResourcedbInterface.getUId("testport");
					#sql {
						insert into AMFICOM.EQUIPMENTTESTPORTS(
								ID,
								EQUIPMENT_ID,
								TEST_PORT_ID)
							values(
								:at_s,
								:(testports[i].equipment_id),
								:(testports[i].id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing testport: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating testport: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(
					"TESTPORTCHARACTERISTICS",
					"TEST_PORT_ID",
					testports[i].id,
					testports[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveLinks(Link_Transferable[] links)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.LINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update link " + links[i].id);
				try
				{
					#sql {
						update AMFICOM.LINKS
							set
								NAME = :(links[i].name),
								TYPE_ID = :(links[i].type_id),
								DESCRIPTION = :(links[i].description),
								INVENTORY_NR = :(links[i].inventory_nr),
								MANUFACTURER = :(links[i].manufacturer),
								MANUFACTURER_CODE = :(links[i].manufacturer_code),
								SUPPLIER = :(links[i].supplier),
								SUPPLIER_CODE = :(links[i].supplier_code),
								LINK_CLASS = :(links[i].link_class),
								START_EQUIPMENT_ID = :(links[i].start_equipment_id),
								START_PORT_ID = :(links[i].start_port_id),
								END_EQUIPMENT_ID = :(links[i].end_equipment_id),
								END_PORT_ID = :(links[i].end_port_id),
								IMAGE_ID = :(links[i].image_id),
								MODIFIED = SYSDATE,
								DOMAIN_ID = :(links[i].domain_id),
								PHYSICAL_LENGTH = :(links[i].physical_length),
								OPTICAL_LENGTH = :(links[i].optical_length)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new link " + links[i].id);
				try
				{
					#sql {
						insert into AMFICOM.LINKS(
								ID,
								NAME,
								TYPE_ID,
								DESCRIPTION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								LINK_CLASS,
								START_EQUIPMENT_ID,
								START_PORT_ID,
								END_EQUIPMENT_ID,
								END_PORT_ID,
								IMAGE_ID,
								MODIFIED,
								DOMAIN_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								 :(links[i].id),
								 :(links[i].name),
								 :(links[i].type_id),
								 :(links[i].description),
								 :(links[i].inventory_nr),
								 :(links[i].manufacturer),
								 :(links[i].manufacturer_code),
								 :(links[i].supplier),
								 :(links[i].supplier_code),
								 :(links[i].link_class),
								 :(links[i].start_equipment_id),
								 :(links[i].start_port_id),
								 :(links[i].end_equipment_id),
								 :(links[i].end_port_id),
								 :(links[i].image_id),
								 SYSDATE,
								 :(links[i].domain_id),
								:(links[i].physical_length),
								:(links[i].optical_length) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(
					"LINKCHARACTERISTICS",
					"LINK_ID",
					links[i].id,
					links[i].characteristics);

			CatalogSchemeMapUpdater.linkUpdated(links[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveCableThreads(String cable_id, CableLinkThread_Transferable[] threads)
	{
		try
		{
			#sql { delete from AMFICOM.CABLELINKTHREADS
					where CABLE_ID = :cable_id };

			for (int i = 0; i < threads.length; i++)
			{
				System.out.println("insert set thread " + threads[i].id + " for cable " + cable_id);

				#sql {
					insert into AMFICOM.CABLELINKTHREADS(
							ID,
							NAME,
							COLOR,
							MARK,
							LINK_TYPE_ID,
							CABLE_ID)
						values(
							 :(threads[i].id),
							 :(threads[i].name),
							 :(threads[i].color),
							 :(threads[i].mark),
							 :(threads[i].link_type_id),
							 :cable_id )
				};

				CatalogSchemeMapUpdater.cableThreadUpdated(threads[i]);
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing port: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		catch(Exception exx)
		{
			System.out.println("error generating port: " + exx.getMessage());
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveCableThreads2(String cable_id, CableLinkThread_Transferable[] threads)
	{
		IdIterator idIt = null;

		int i;
		int len;
		int index = 0;

		Vector vec = new Vector();
		Vector id_vec = new Vector();
		Vector del_vec = new Vector();

		for (i = 0; i < threads.length; i++)
		{
			vec.add(threads[i]);
			id_vec.add(threads[i].id);
		}

		try
		{
			#sql idIt = { select ID
				from AMFICOM.CABLELINKTHREADS
					where CABLE_ID = :cable_id };

			while (idIt.next())
			{
				if(id_vec.contains(idIt.id()))
				{
					//update
					index = id_vec.indexOf(idIt.id());
					System.out.println("update cable thread " + threads[index].id);
					try
					{
						#sql {
							update AMFICOM.CABLELINKTHREADS
								set
									NAME = :(threads[index].name),
									LINK_TYPE_ID = :(threads[index].link_type_id),
									COLOR = :(threads[index].color),
									MARK = :(threads[index].mark)
								where ID = :(threads[index].id)
						};
					}
					catch(SQLException e)
					{
						System.out.println("error saVing cable link: " + e.getMessage());
						e.printStackTrace();
						return Constants.ERROR_UPDATING;
					}
					#sql { commit };
					vec.remove(threads[index]);
				}
				else
					del_vec.add(idIt.id());
			}
			idIt.close();
		}
		catch(Exception e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
		}

		len = vec.size();
		for (i = 0; i < len; i++)
		{
			CableLinkThread_Transferable thread = (CableLinkThread_Transferable )vec.get(i);
			System.out.println("insert new cable thread " + thread.id);
			try
			{
				#sql {
					insert into AMFICOM.CABLELINKTHREADS(
							ID,
							NAME,
							MARK,
							COLOR,
							CABLE_ID,
							LINK_TYPE_ID)
						values(
							 :(thread.id),
							 :(thread.name),
							 :(thread.mark),
							 :(thread.color),
							 :cable_id,
							 :(thread.link_type_id) )
				};
				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing cable thread: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			catch(Exception exx)
			{
				System.out.println("error generating cable thread: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}
		}

		len = del_vec.size();
		for (i = 0; i < len; i++)
		{
			try
			{
				String s = (String )del_vec.get(i);
				#sql {
					delete from AMFICOM.CABLELINKTHREADS
						where ID = :s
				};
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("could not delete cable threads for cable " + cable_id + ": " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveCableLinks(CableLink_Transferable[] links)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = links.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.CABLELINKS
						where ID = :(links[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link " + links[i].id);
				try
				{
					#sql {
						update AMFICOM.CABLELINKS
							set
								NAME = :(links[i].name),
								TYPE_ID = :(links[i].type_id),
								DESCRIPTION = :(links[i].description),
								INVENTORY_NR = :(links[i].inventory_nr),
								MANUFACTURER = :(links[i].manufacturer),
								MANUFACTURER_CODE = :(links[i].manufacturer_code),
								SUPPLIER = :(links[i].supplier),
								SUPPLIER_CODE = :(links[i].supplier_code),
								LINK_CLASS = :(links[i].link_class),
								START_EQUIPMENT_ID = :(links[i].start_equipment_id),
								START_PORT_ID = :(links[i].start_port_id),
								END_EQUIPMENT_ID = :(links[i].end_equipment_id),
								END_PORT_ID = :(links[i].end_port_id),
								IMAGE_ID = :(links[i].image_id),
								MODIFIED = SYSDATE,
								DOMAIN_ID = :(links[i].domain_id),
								PHYSICAL_LENGTH = :(links[i].physical_length),
								OPTICAL_LENGTH = :(links[i].optical_length)
							where ID = :(links[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable link " + links[i].id);
				try
				{
					#sql {
						insert into AMFICOM.CABLELINKS(
								ID,
								NAME,
								TYPE_ID,
								DESCRIPTION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								LINK_CLASS,
								START_EQUIPMENT_ID,
								START_PORT_ID,
								END_EQUIPMENT_ID,
								END_PORT_ID,
								IMAGE_ID,
								MODIFIED,
								DOMAIN_ID,
								PHYSICAL_LENGTH,
								OPTICAL_LENGTH)
							values(
								 :(links[i].id),
								 :(links[i].name),
								 :(links[i].type_id),
								 :(links[i].description),
								 :(links[i].inventory_nr),
								 :(links[i].manufacturer),
								 :(links[i].manufacturer_code),
								 :(links[i].supplier),
								 :(links[i].supplier_code),
								 :(links[i].link_class),
								 :(links[i].start_equipment_id),
								 :(links[i].start_port_id),
								 :(links[i].end_equipment_id),
								 :(links[i].end_port_id),
								 :(links[i].image_id),
								 SYSDATE,
								 :(links[i].domain_id),
								:(links[i].physical_length),
								:(links[i].optical_length) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCableThreads(links[i].id, links[i].threads);
			saveCharacteristics(
					"CABLELINKCHARACTERISTICS",
					"CABLE_LINK_ID",
					links[i].id,
					links[i].characteristics);

			CatalogSchemeMapUpdater.cableLinkUpdated(links[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public int saveEquipments(
			Equipment_Transferable[] equipments)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = equipments.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.EQUIPMENTS
						where ID = :(equipments[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment " + equipments[i].id);
				try
				{
					#sql {
						update AMFICOM.EQUIPMENTS
							set
								NAME = :(equipments[i].name),
								DESCRIPTION = :(equipments[i].description),
								TYPE_ID = :(equipments[i].type_id),
								LONGITUDE = :(equipments[i].longitude),
								LATITUDE = :(equipments[i].latitude),
								HW_SERIAL = :(equipments[i].hw_serial),
								SW_SERIAL = :(equipments[i].sw_serial),
								HW_VERSION = :(equipments[i].hw_version),
								SW_VERSION = :(equipments[i].sw_version),
								INVENTORY_NR = :(equipments[i].inventory_nr),
								MANUFACTURER = :(equipments[i].manufacturer),
								MANUFACTURER_CODE = :(equipments[i].manufacturer_code),
								SUPPLIER = :(equipments[i].supplier),
								SUPPLIER_CODE = :(equipments[i].supplier_code),
								EQ_CLASS = :(equipments[i].eq_class),
								IMAGE_ID = :(equipments[i].image_id),
								IS_KIS = :(equipments[i].is_kis),
								AGENT_ID = :(equipments[i].agent_id),
								DOMAIN_ID = :(equipments[i].domain_id),
								MODIFIED = SYSDATE
							where ID = :(equipments[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment " + equipments[i].id);
				try
				{
					#sql {
						insert into AMFICOM.EQUIPMENTS(
								ID,
								NAME,
								DESCRIPTION,
								TYPE_ID,
								LONGITUDE,
								LATITUDE,
								HW_SERIAL,
								SW_SERIAL,
								HW_VERSION,
								SW_VERSION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								EQ_CLASS,
								IMAGE_ID,
								IS_KIS,
								AGENT_ID,
								DOMAIN_ID,
								MODIFIED)
							values(
								 :(equipments[i].id),
								 :(equipments[i].name),
								 :(equipments[i].description),
								 :(equipments[i].type_id),

								 :(equipments[i].longitude),
								 :(equipments[i].latitude),
								 :(equipments[i].hw_serial),
								 :(equipments[i].sw_serial),
								 :(equipments[i].hw_version),
								 :(equipments[i].sw_version),

								 :(equipments[i].inventory_nr),
								 :(equipments[i].manufacturer),
								 :(equipments[i].manufacturer_code),
								 :(equipments[i].supplier),
								 :(equipments[i].supplier_code),

								 :(equipments[i].eq_class),
								 :(equipments[i].image_id),
								 :(equipments[i].is_kis),
								 :(equipments[i].agent_id),
								 :(equipments[i].domain_id),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristics(
					"EQUIPMENTCHARACTERISTICS",
					"EQUIPMENT_ID",
					equipments[i].id,
					equipments[i].characteristics);

			CatalogSchemeMapUpdater.equipmentUpdated(equipments[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator ( String id );

}

