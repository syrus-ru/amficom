/*
 * $Id: NetDirectorydbInterfaceLoad.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.NetworkDirectory.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class NetDirectorydbInterfaceLoad {
	private NetDirectorydbInterfaceLoad() {
	}

	static Vector loadCharacteristicLinks(final Connection conn, String charLinkTable, String charLinkField, String element_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_characteristic_id = "";
		String It_characteristic_type_id = "";
		String It_characteristic_value = "";
		String It_characteristic_value_type_id = "";
		String It_characteristic_name = "";
		String It_characteristic_class = "";
		Vector vector2 = new Vector();
		CharacteristicLinkIterator chIt = null;

		String qry = "select ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE " +
							"from AMFICOM." + charLinkTable +
								" where " + charLinkField +
								" = '" + element_id + "'";


		try
		{
			#sql [connCtx]
			{
				BEGIN
					open :OUT chIt for :qry;
				END;
			};

			while (chIt.next())
			{
				try { It_characteristic_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_characteristic_id == null) It_characteristic_id = "";
				try { It_characteristic_type_id = chIt.characteristic_type_id(); }
				catch(SQLException e) { }
				if(It_characteristic_type_id == null) It_characteristic_type_id = "";
				try { It_characteristic_value = chIt.default_value(); }
				catch(SQLException e) { }
				if(It_characteristic_value == null) It_characteristic_value = "";

				try
				{
					#sql [connCtx] {
						select NAME, VALUE_TYPE_ID, CH_CLASS
						into
							:It_characteristic_name,
							:It_characteristic_value_type_id,
							:It_characteristic_class
						from AMFICOM.CHARACTERISTICTYPES
						where ID = :It_characteristic_type_id };

					if(It_characteristic_value_type_id == null)
						It_characteristic_value_type_id = "";
					if(It_characteristic_name == null)
						It_characteristic_name = "";
					if(It_characteristic_class == null)
						It_characteristic_class = "";
					Characteristic_Transferable ch =
						new Characteristic_Transferable(
							It_characteristic_id,
							It_characteristic_class,
							It_characteristic_name,
							It_characteristic_name,
							It_characteristic_type_id,
							It_characteristic_value,
							It_characteristic_value_type_id);
						vector2.addElement(ch);
				}
				catch(SQLException e)
				{
					System.out.println("could not get characteristic_type " + It_characteristic_id + ": " + e.getMessage());
					e.printStackTrace();
				}
			}
			chIt.close();
		}
		catch(SQLException e)
		{
			if(chIt != null) try {
			chIt.close();
			}catch(Exception exe) {}
			System.out.println("could not get characteristic_types for element " + element_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				chIt.close();
			}catch(Exception exe) {}
		}
		

		return vector2;
	}

	static int loadCharacteristicTypes(final Connection conn, String[] ids, CharacteristicTypeSeq_TransferableHolder characteristictypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_ch_class = "";
		String It_name = "";
		String It_description = "";
		String It_value_type_id = "";

		boolean It_is_editable = true;
		boolean It_is_visible = true;

		long It_modified = 0;

		Vector vector = new Vector();

		CharacteristicType_Transferable ch_t;
		CharacteristicType_Transferable[] ch_ts;
		CharacteristicTypeIterator chIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] chIt = { select
						ID,
						CH_CLASS,
						NAME,
						VALUE_TYPE_ID,
						IS_EDITABLE,
						IS_VISIBLE,
						MODIFIED
					from AMFICOM.CHARACTERISTICTYPES
			};

			while (chIt.next())
			{
				if(! loadvec.contains(chIt.id()))
					continue;

				try { It_id = chIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_ch_class = chIt.ch_class(); }
				catch(SQLException e) { }
				if(It_ch_class == null) It_ch_class = "";
				try { It_name = chIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_value_type_id = chIt.value_type_id(); }
				catch(SQLException e) { }
				if(It_value_type_id == null) It_value_type_id = "";
				try { It_is_editable = (chIt.is_editable() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_is_visible = (chIt.is_visible() == 1)? true : false; }
				catch(SQLException e) { }
				try { It_modified = chIt.modified().getTime(); }
				catch(SQLException e) { }

				ch_t = new CharacteristicType_Transferable(
					It_id,
					It_ch_class,
					It_name,
					It_name,
					It_value_type_id,
					It_is_editable,
					It_is_visible,
					It_modified);

				vector.add(ch_t);
			}
			chIt.close();
			ch_ts = new CharacteristicType_Transferable[vector.size()];
			vector.copyInto(ch_ts);
			characteristictypeseq.value = ch_ts;

		}
		catch(SQLException e)
		{
			if(chIt != null) try {
			chIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading characteristic types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				chIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadPortTypes(final Connection conn, String[] ids, PortTypeSeq_TransferableHolder porttypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_year = "";
		String It_body = "";
		String It_standard = "";
		String It_interface_id = "";
		String It_p_class = "";
		long It_modified = 0;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		PortType_Transferable pt_t;
		PortType_Transferable[] pt_ts;
		PortTypeIterator ptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						YEAR,
						BODY,
						STANDARD,
						INTERFACE_ID,
						P_CLASS,
						MODIFIED
					from AMFICOM.PORTTYPES
			};

			while (ptIt.next())
			{
				if(! loadvec.contains(ptIt.id()))
					continue;

				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = ptIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_year = ptIt.year(); }
				catch(Exception e) { }
				if(It_year == null) It_year = "";
				try { It_body = ptIt.body(); }
				catch(SQLException e) { }
				if(It_body == null) It_body = "";
				try { It_standard = ptIt.standard(); }
				catch(SQLException e) { }
				if(It_standard == null) It_standard = "";
				try { It_interface_id = ptIt.interface_id(); }
				catch(SQLException e) { }
				if(It_interface_id == null) It_interface_id = "";
				try { It_p_class = ptIt.p_class(); }
				catch(SQLException e) { }
				if(It_p_class == null) It_p_class = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadCharacteristicLinks(conn, "PORTTYPECHARACTERISTICLINKS", "PORT_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				pt_t = new PortType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					It_year,
					It_body,
					It_standard,
					It_interface_id,
					It_p_class,
					It_modified,
					characteristics);

				vector.add(pt_t);
			}
			ptIt.close();
			pt_ts = new PortType_Transferable[vector.size()];
			vector.copyInto(pt_ts);
			porttypeseq.value = pt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading port types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadCablePortTypes(final Connection conn, String[] ids, CablePortTypeSeq_TransferableHolder porttypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_p_class = "";
		long It_modified = 0;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		CablePortType_Transferable pt_t;
		CablePortType_Transferable[] pt_ts;
		CablePortTypeIterator ptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						P_CLASS,
						MODIFIED
					from AMFICOM.CABLEPORTTYPES
			};

			while (ptIt.next())
			{
				if(! loadvec.contains(ptIt.id()))
					continue;

				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = ptIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_p_class = ptIt.p_class(); }
				catch(SQLException e) { }
				if(It_p_class == null) It_p_class = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadCharacteristicLinks(conn, "CABLEPORTTYPECHARACTERISTICS", "CABLE_PORT_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				pt_t = new CablePortType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					"",
					"",
					"",
					"",
					It_p_class,
					It_modified,
					characteristics);

				vector.add(pt_t);
			}
			ptIt.close();
			pt_ts = new CablePortType_Transferable[vector.size()];
			vector.copyInto(pt_ts);
			porttypeseq.value = pt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading cable port types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadEquipmentTypes(final Connection conn, String[] ids, EquipmentTypeSeq_TransferableHolder equipmenttypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int k;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_manufacturer = "";
		String It_eq_class = "";
		boolean It_is_holder = false;
		String It_image_id = "";
		long It_modified = 0;

		Characteristic_Transferable characteristics[];
		String[] port_ids;
		String[] slot_ids;

		Vector vector = new Vector();

		EquipmentType_Transferable e_t;
		EquipmentType_Transferable[] e_ts;
		EquipmentTypeIterator eIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] eIt = { select
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						MANUFACTURER,
						EQ_CLASS,
						IS_HOLDER,
						IMAGE_ID,
						MODIFIED
					from AMFICOM.EQUIPMENTTYPES
			};

			while (eIt.next())
			{
				if(! loadvec.contains(eIt.id()))
					continue;

				try { It_id = eIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = eIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = eIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = eIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_manufacturer = eIt.manufacturer(); }
				catch(Exception e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_eq_class = eIt.eq_class(); }
				catch(SQLException e) { }
				if(It_eq_class == null) It_eq_class = "";
				try { It_is_holder = eIt.is_holder(); }
				catch(SQLException e) { }
				try { It_image_id = eIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_modified = eIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadCharacteristicLinks(conn, "EQUIPMENTTYPECHARACTERISTICLIN", "EQUIPMENT_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				e_t = new EquipmentType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					It_manufacturer,
					It_eq_class,
					It_is_holder,
					It_image_id,
					It_modified,
					characteristics);

				vector.add(e_t);
			}
			eIt.close();
			e_ts = new EquipmentType_Transferable[vector.size()];
			vector.copyInto(e_ts);
			equipmenttypes.value = e_ts;

		}
		catch(SQLException e)
		{
			System.out.println("error loading equipment types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				eIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadLinkTypes(final Connection conn, String[] ids, LinkTypeSeq_TransferableHolder linktypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int k;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_year = "";
		String It_standard = "";
		String It_link_class = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		boolean It_is_slot = false;
		String It_image_id = "";
		long It_modified = 0;

		String[] link_ids;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		LinkType_Transferable lt_t;
		LinkType_Transferable[] lt_ts;
		LinkTypeIterator lIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] lIt = { select
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						MANUFACTURER,
						MANUFACTURER_CODE,
						LINK_CLASS,
						YEAR,
						STANDARD,
						IS_SLOT,
						IMAGE_ID,
						MODIFIED
					from AMFICOM.LINKTYPES
			};

			while (lIt.next())
			{
				if(! loadvec.contains(lIt.id()))
					continue;

				try { It_id = lIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = lIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = lIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_description = lIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_manufacturer = lIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = lIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_link_class = lIt.link_class(); }
				catch(SQLException e) { }
				if(It_link_class == null) It_link_class = "";
				try { It_year = lIt.year(); }
				catch(Exception e) { }
				if(It_year == null) It_year = "";
				try { It_standard = lIt.standard(); }
				catch(SQLException e) { }
				if(It_standard == null) It_standard = "";
				try { It_is_slot = lIt.is_slot(); }
				catch(SQLException e) { }
				try { It_image_id = lIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_modified = lIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadCharacteristicLinks(conn, "LINKTYPECHARACTERISTICLINKS", "LINK_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				lt_t = new LinkType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_description,
					It_year,
					It_standard,
					It_link_class,
					It_manufacturer,
					It_manufacturer_code,
					It_is_slot,
					It_image_id,
					It_modified,
					characteristics);

				vector.add(lt_t);
			}
			lIt.close();
			lt_ts = new LinkType_Transferable[vector.size()];
			vector.copyInto(lt_ts);
			linktypes.value = lt_ts;

		}
		catch(SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading link types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				lIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	private static Vector loadCableTypeThreads(final Connection conn, String cable_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_color = "";
		String It_mark = "";
		String It_link_type_id = "";

		CableTypeThread_Transferable thread;
		Characteristic_Transferable characteristics[];

		ThreadIterator thIt = null;
		Vector vector = new Vector();
		Vector vector2 = new Vector();
		try
		{
			#sql [connCtx] thIt = {
				select
					ID,
					NAME,
					COLOR,
					MARK,
					LINK_TYPE_ID
				from AMFICOM.CABLETYPETHREADS
					where CABLE_TYPE_ID = :cable_id };

			while (thIt.next())
			{
				try { It_id = thIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = thIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_color = thIt.color(); }
				catch(SQLException e) { }
				if(It_color == null) It_color = "";
				try { It_mark = thIt.mark(); }
				catch(SQLException e) { }
				if(It_mark == null) It_mark = "";
				try { It_link_type_id = thIt.link_type_id(); }
				catch(SQLException e) { }
				if(It_link_type_id == null) It_link_type_id = "";

				vector2 = new Vector();
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				thread = new CableTypeThread_Transferable(
					It_id,
					It_name,
					It_color,
					It_mark,
					It_link_type_id,
					characteristics);

				vector.add(thread);
			}
			thIt.close();
		}
		catch(SQLException e)
		{
			if(thIt != null) try {
			thIt.close();
			}catch(Exception exe) {}
			System.out.println("could not get threads for cable type " + cable_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				thIt.close();
			}catch(Exception exe) {}
		}
		
		return vector;
	}

	static int loadCableTypes(final Connection conn, String[] ids, CableLinkTypeSeq_TransferableHolder linktypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int k;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		String It_year = "";
		String It_standard = "";
		String It_link_class = "";
		String It_manufacturer = "";
		String It_manufacturer_code = "";
		boolean It_is_slot = false;
		String It_image_id = "";
		long It_modified = 0;

		CableTypeThread_Transferable[] threads;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		CableLinkType_Transferable lt_t;
		CableLinkType_Transferable[] lt_ts;
		CableLinkTypeIterator lIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < ids.length; i++)
			loadvec.add(ids[i]);
		try
		{
			#sql [connCtx] lIt = { select
						ID,
						NAME,
						CODENAME,
						MANUFACTURER,
						MANUFACTURER_CODE,
						LINK_CLASS,
						IMAGE_ID,
						MODIFIED
					from AMFICOM.CABLETYPES
			};

			while (lIt.next())
			{
				if(! loadvec.contains(lIt.id()))
					continue;

				try { It_id = lIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = lIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_codename = lIt.codename(); }
				catch(SQLException e) { }
				if(It_codename == null) It_codename = "";
				try { It_manufacturer = lIt.manufacturer(); }
				catch(SQLException e) { }
				if(It_manufacturer == null) It_manufacturer = "";
				try { It_manufacturer_code = lIt.manufacturer_code(); }
				catch(SQLException e) { }
				if(It_manufacturer_code == null) It_manufacturer_code = "";
				try { It_link_class = lIt.link_class(); }
				catch(SQLException e) { }
				if(It_link_class == null) It_link_class = "";
				try { It_image_id = lIt.image_id(); }
				catch(SQLException e) { }
				if(It_image_id == null) It_image_id = "";
				try { It_modified = lIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = loadCharacteristicLinks(conn, "CABLETYPECHARACTERISTICLINKS", "CABLE_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = loadCableTypeThreads(conn, It_id);
				threads = new CableTypeThread_Transferable[vector2.size()];
				vector2.copyInto(threads);

				lt_t = new CableLinkType_Transferable(
					It_id,
					It_name,
					It_codename,
					It_link_class,
					It_manufacturer,
					It_manufacturer_code,
					It_image_id,
					It_modified,
					threads,
					characteristics);

				vector.add(lt_t);
			}
			lIt.close();
			lt_ts = new CableLinkType_Transferable[vector.size()];
			vector.copyInto(lt_ts);
			linktypes.value = lt_ts;

		}
		catch(SQLException e)
		{
			if(lIt != null) try {
			lIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading cable types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				lIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator CableLinkTypeIterator(
		String id,
		String name,
		String codename,
		String manufacturer,
		String manufacturer_code,
		String link_class,
		String image_id,
		Timestamp modified);

	#sql public static iterator CablePortTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String p_class,
		Timestamp modified);

	#sql public static iterator CharacteristicLinkIterator (
		String id,
		String characteristic_type_id,
		String default_value );

	#sql public static iterator CharacteristicTypeIterator(
		String id,
		String ch_class,
		String name,
		String value_type_id,
		int is_editable,
		int is_visible,
		Timestamp modified);

	#sql public static iterator EquipmentTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String manufacturer,
		String eq_class,
		boolean is_holder,
		String image_id,
		Timestamp modified);

	#sql public static iterator LinkTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String manufacturer,
		String manufacturer_code,
		String link_class,
		String year,
		String standard,
		boolean is_slot,
		String image_id,
		Timestamp modified);

	#sql public static iterator PortTypeIterator(
		String id,
		String name,
		String codename,
		String description,
		String year,
		String body,
		String standard,
		String interface_id,
		String p_class,
		Timestamp modified);

	#sql public static iterator ThreadIterator(
		String id,
		String name,
		String color,
		String mark,
		String link_type_id);
}
