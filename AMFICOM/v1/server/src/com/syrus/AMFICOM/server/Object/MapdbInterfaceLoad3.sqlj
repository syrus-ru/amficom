/*
 * $Id: MapdbInterfaceLoad3.sqlj,v 1.2 2004/06/29 07:12:58 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.ElementAttribute_Transferable;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.SQLNullException;

/**
 * @version $Revision: 1.2 $, $Date: 2004/06/29 07:12:58 $
 * @author $Author: bass $
 * @module server_v1
 */
public class MapdbInterfaceLoad3
{
	protected MapdbInterfaceLoad3()
	{
	}

	public static int loadJMaps(
			Vector map_ids,
			ISMMapContextSeq_TransferableHolder mapseq,
			Vector images)
	{
		int count;
		ISMMapContext_Transferable mc_t;
		Vector vector = new Vector();
		ISMMapContext_Transferable mc_ts[];
		ISMMapContextIterator mcIt = null;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		long It_created = 0;
		String It_created_by = "";
		long It_modified = 0;
		String It_modified_by = "";
		String It_domain_id = "";
		String It_user_id = "";
		String It_map_id = "";

		Vector vector2 = new Vector();
		String kis_ids[] = new String[0];
		String node_ids[] = new String[0];
		String nodeLink_ids[] = new String[0];
		String physicalLink_ids[] = new String[0];
		String path_ids[] = new String[0];
		String mark_ids[] = new String[0];
		IdIterator idIt = null;

		try
		{
			#sql mcIt = { select
					ID,
					NAME,
					CODENAME,
					DESCRIPTION,
					CREATED,
					CREATED_BY,
					MODIFIED,
					MODIFIED_BY,
					DOMAIN_ID,
					OWNER_ID,
					MAP_ID
				from AMFICOM.ISMMAPCONTEXTS };

		count = 0;
		while (mcIt.next())
		{
			count ++;
			try { It_id = mcIt.id(); }
			catch(SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = mcIt.name(); }
			catch(SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_codename = mcIt.codename(); }
			catch(SQLException e) { }
			if(It_codename == null) It_codename = "";
			try { It_description = mcIt.description(); }
			catch(SQLException e) { }
			if(It_description == null) It_description = "";
			try { It_created = (mcIt.created()).getTime(); }
			catch(Exception e) { }
			try { It_created_by = mcIt.created_by(); }
			catch(SQLException e) { }
			if(It_created_by == null) It_created_by = "";
			try { It_modified = (mcIt.modified()).getTime(); }
			catch(Exception e) { }
			try { It_modified_by = mcIt.modified_by(); }
			catch(SQLException e) { }
			if(It_modified_by == null) It_modified_by = "";
			try { It_domain_id = mcIt.domain_id(); }
			catch(SQLException e) { }
			if(It_domain_id == null) It_domain_id = "";
			try { It_user_id = mcIt.owner_id(); }
			catch(SQLException e) { }
			if(It_user_id == null) It_user_id = "";
			try { It_map_id = mcIt.map_id(); }
			catch(SQLException e) { }
			if(It_map_id == null) It_map_id = "";

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPKISELEMENTS", It_id);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
//			System.out.println("found " + vector2.size() + " kiss for ISM map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPPHYSICALNODEELEMENTS", It_id);
			node_ids = new String[vector2.size()];
			vector2.copyInto(node_ids);
//			System.out.println("found " + vector2.size() + " nodes for ISMmap " + It_id);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPNODELINKELEMENTS", It_id);
			nodeLink_ids = new String[vector2.size()];
			vector2.copyInto(nodeLink_ids);
//			System.out.println("found " + vector2.size() + " node links for ISMmap " + It_id);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPPHYSICALLINKELEMENTS", It_id);
			physicalLink_ids = new String[vector2.size()];
			vector2.copyInto(physicalLink_ids);
//			System.out.println("found " + vector2.size() + " links for ISMmap " + It_id);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPPATHELEMENTS", It_id);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
//			System.out.println("found " + vector2.size() + " paths for ISM map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadISMMapElementIds("MAPMARKELEMENTS", It_id);
			mark_ids = new String[vector2.size()];
			vector2.copyInto(mark_ids);
//			System.out.println("found " + vector2.size() + " paths for ISM map " + It_id);

			mc_t = new ISMMapContext_Transferable(
					It_id,
					It_name,
					It_codename,
					It_user_id,
					It_description,
					It_domain_id,

					It_created,
					It_created_by,
					It_modified,
					It_modified_by,

					It_map_id,

					kis_ids,
					node_ids,
					nodeLink_ids,
					physicalLink_ids,
					path_ids,
					mark_ids);

			vector.addElement(mc_t);
			map_ids.addElement(It_id);
		}
		mcIt.close();
		mc_ts = new ISMMapContext_Transferable[vector.size()];
		vector.copyInto(mc_ts);
		mapseq.value = mc_ts;

		}
		catch(SQLException e)
		{
			if(mcIt != null) try {
			mcIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading ISM maps: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				mcIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	public static int loadJMapKISs(
			Vector map_ids,
			MapKISElementSeq_TransferableHolder kisseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapKISElement_Transferable kis_t;
		Vector vector = new Vector();
		MapKISElement_Transferable kis_ts[];
		MapKISIterator kisIt = null;

		String It_scheme_kis_element_id = "";
		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_codename = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_kis_id = "";
		String It_kis_type_id = "";
		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		String connection_point_ids[] = new String[0];
		IdIterator idIt = null;
/*
		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql kisIt = { select
						SCHEME_KIS_ELEMENT_ID,
						OWNER_ID,
						LATITUDE,
						NAME,
						SYMBOL_ID,
						TYPE_ID,
						DESCRIPTION,
						LONGITUDE,
						CODENAME,
						ID,
						MAP_ID,
						ISM_MAP_ID,
						KIS_ID,
						KIS_TYPE_ID
					from AMFICOM.MAPKISELEMENTS
					where ISM_MAP_ID = :current_map_id
					};

				count = 0;
				while (kisIt.next())
				{
					count ++;

					try { It_id = kisIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_scheme_kis_element_id = kisIt.scheme_kis_element_id(); }
					catch(SQLException e) { }
					if(It_scheme_kis_element_id == null) It_scheme_kis_element_id = "";
					try { It_owner_id = kisIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_latitude = kisIt.latitude(); }
					catch(SQLException e) { }
					if(It_latitude == null) It_latitude = "";
					try { It_name = kisIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_symbol_id = kisIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_type_id = kisIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_description = kisIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_longitude = kisIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";
					try { It_codename = kisIt.codename(); }
					catch(SQLException e) { }
					if(It_codename == null) It_codename = "";
					try { It_map_id = kisIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_ism_map_id = kisIt.ism_map_id(); }
					catch(SQLException e) { }
					if(It_ism_map_id == null) It_ism_map_id = "";
					try { It_kis_id = kisIt.kis_id(); }
					catch(SQLException e) { }
					if(It_kis_id == null) It_kis_id = "";
					try { It_kis_type_id = kisIt.kis_type_id(); }
					catch(SQLException e) { }
					if(It_kis_type_id == null) It_kis_type_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPKISELEMENTATTRIBUTES",
							"MAP_KIS_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					vector2 = new Vector();

					kis_t = new MapKISElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_longitude,
							It_latitude,
							It_map_id,
							It_ism_map_id,
							It_symbol_id,
							It_kis_id,
							It_kis_type_id,
							It_codename,
							It_scheme_kis_element_id,
							attributes);

					images.add(It_symbol_id);
					vector.addElement(kis_t);
				}// while(kisIt)
				kisIt.close();
				kis_ts = new MapKISElement_Transferable[vector.size()];
				vector.copyInto(kis_ts);
				kisseq.value = kis_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading KISs: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}
*/
		return Constants.ERROR_NO_ERROR;
	}

	public static int loadJMapPaths(
			Vector map_ids,
			MapPathElementSeq_TransferableHolder pathseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapPathElement_Transferable path_t;
		Vector vector = new Vector();
		MapPathElement_Transferable path_ts[];
		MapPathIterator pathIt = null;

		String It_description = "";
		String It_id = "";
		String It_end_node_id = "";
		String It_start_node_id = "";
		String It_name = "";
		String It_owner_id = "";
		String It_type_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_path_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		String link_ids[] = new String[0];
		PathLinkIterator plIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql pathIt = { select
						DESCRIPTION,
						ID,
						END_NODE_ID,
						START_NODE_ID,
						NAME,
						OWNER_ID,
						TYPE_ID,
						MAP_ID,
						ISM_MAP_ID,
						PATH_ID
					from AMFICOM.MAPPATHELEMENTS
					where ISM_MAP_ID = :current_map_id
					};

				count = 0;
				while (pathIt.next())
				{
					count ++;

					try { It_description = pathIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_id = pathIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_end_node_id = pathIt.end_node_id(); }
					catch(SQLException e) { }
					if(It_end_node_id == null) It_end_node_id = "";
					try { It_start_node_id = pathIt.start_node_id(); }
					catch(SQLException e) { }
					if(It_start_node_id == null) It_start_node_id = "";
					try { It_name = pathIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_owner_id = pathIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_type_id = pathIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_map_id = pathIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_ism_map_id = pathIt.ism_map_id(); }
					catch(SQLException e) { }
					if(It_ism_map_id == null) It_ism_map_id = "";
					try { It_path_id = pathIt.path_id(); }
					catch(SQLException e) { }
					if(It_path_id == null) It_path_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPPATHELEMENTATTRIBUTES",
							"MAP_PATH_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					vector2 = new Vector();
					try
					{
						#sql plIt = { select PHYSICAL_LINK_ID, PATH_ID
							from AMFICOM.MAPPATHLINKS
								where PATH_ID = :It_id };
						while (plIt.next())
						{
							try { vector2.addElement(plIt.physical_link_id()); }
							catch(SQLNullException e) { }
						}
						plIt.close();
					}
					catch(SQLException e)
					{
						if(plIt != null) try {
						plIt.close();
						}catch(Exception exe) {}
						System.out.println("could not get links for path " + It_id + ": " + e.getMessage());
						e.printStackTrace();
					}
					finally
					{
						try {
							plIt.close();
						}catch(Exception exe) {}
					}
					
					link_ids = new String[vector2.size()];
					vector2.copyInto(link_ids);

					path_t = new MapPathElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_map_id,
							It_ism_map_id,
							It_start_node_id,
							It_end_node_id,
							attributes,
							It_path_id,
							link_ids);

					vector.addElement(path_t);
				}// while(pathIt)
				pathIt.close();
				path_ts = new MapPathElement_Transferable[vector.size()];
				vector.copyInto(path_ts);
				pathseq.value = path_ts;

			}
			catch(SQLException e)
			{
				if(pathIt != null) try {
				pathIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading paths: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					pathIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator PathLinkIterator (
		String physical_link_id,
		String path_id );
	#sql public static iterator IdIterator ( String id );
	#sql public static iterator ElementAttributeIterator (
		String id,
		String attribute_id );

	#sql public static iterator ISMMapContextIterator (
		String id,
		String name,
		String codename,
		String description,
		Timestamp created,
		String created_by,
		Timestamp modified,
		String modified_by,
		String domain_id,
		String owner_id,
		String map_id);

	#sql public static iterator MapKISIterator (
		String scheme_kis_element_id,
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String type_id,
		String description,
		String longitude,
		String codename,
		String id,
		String map_id,
		String ism_map_id,
		String kis_id,
		String kis_type_id);

	#sql public static iterator MapPathIterator (
		String description,
		String id,
		String end_node_id,
		String start_node_id,
		String name,
		String owner_id,
		String type_id,
		String map_id,
		String ism_map_id,
		String path_id);
}
