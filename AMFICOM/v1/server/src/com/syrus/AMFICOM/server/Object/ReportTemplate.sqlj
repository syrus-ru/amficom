package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;

import java.util.Vector;

import com.syrus.AMFICOM.CORBA.Report.*;

public class ReportTemplate
{
	private String id;
	private String name;
	private String description;
	private long modified;
	private String template_type;

	private RenderingObject[] ros;
	private FirmedTextPane[] boxes;
	private ImagePane[] images;  

	public ReportTemplate(ReportTemplate_Transferable rt)
			throws Exception
	{
		this.id = rt.id;
		this.name = rt.name;
		this.description = rt.description;
		this.template_type = rt.template_type;
		this.modified = System.currentTimeMillis();
		Timestamp mod = new Timestamp(this.modified);

		try 
		{
			#sql{ insert into REPORTTEMPLATES (
					ID, 
					NAME, 
					MODIFIED, 
					DESCRIPTION,
					TEMPLATE_TYPE)
				values(
					:(this.id), 
					:(this.name), 
					:mod, 
					:(this.description),
					:(this.template_type))
			};
			#sql { commit };
		} 
		catch (Exception ex) 
		{
			System.out.println("error saving new report template: " + ex.getMessage());
			ex.printStackTrace();
			throw ex;
		} 

		int len = rt.renderingObjects.length;
		this.ros = new RenderingObject[len];
		for(int i = 0; i < len; i++)
			ros[i] = new RenderingObject(rt.renderingObjects[i], this.id);

		int len2 = rt.firmedTextPanes.length;
		this.boxes = new FirmedTextPane[len2];
		for(int i = 0; i < len2; i++)
			boxes[i] = new FirmedTextPane(rt.firmedTextPanes[i], this.id);
      
		int len3 = rt.imagePanes.length;
		this.images = new ImagePane[len3];
		for(int i = 0; i < len3; i++)
			images[i] = new ImagePane(rt.imagePanes[i], this.id);
	}

	public ReportTemplate(String id)
			throws Exception
	{
		ReportTemplateIterator rtIt = null;

		try
		{
			#sql rtIt = { select
					ID,
					NAME,
					MODIFIED,
					DESCRIPTION,
					TEMPLATE_TYPE
				from AMFICOM.REPORTTEMPLATES
				where ID = :id
			};

			if(!rtIt.next())
				throw new Exception("Report template not found in database");

			try { this.id = rtIt.id(); }
			catch(SQLException e) { }
			if(this.id == null) this.id = "";
			try { this.name = rtIt.name(); }
			catch(SQLException e) { }
			if(this.name == null) this.name = "";
			try { this.description = rtIt.description(); }
			catch(SQLException e) { }
			if(this.description == null) this.description = "";
			try { this.modified = rtIt.modified().getTime(); }
			catch(Exception e) { }
			try { this.template_type = rtIt.template_type(); }
			catch(SQLException e) { }
			if(this.template_type == null) this.template_type = "";

			rtIt.close();

			ros = RenderingObject.retrieveRenderingObjects(this.id);
			boxes = FirmedTextPane.retrieveBoxes(this.id);
			images = ImagePane.retrieveImages(this.id);      
		}
		catch(Exception e)
		{
			rtIt.close();
			System.out.println("error loading report template: " + e.getMessage());
			e.printStackTrace();
			throw e;
		}
	}

	public ReportTemplate_Transferable getTransferable()
			throws Exception
	{
		RenderingObject_Transferable[] ros_t = new RenderingObject_Transferable[this.ros.length];
		for (int i = 0; i < ros.length; i++)
			ros_t[i] = this.ros[i].getTransferable();

		FirmedTextPane_Transferable[] boxes_t = new FirmedTextPane_Transferable[this.boxes.length];
		for (int i = 0; i < boxes.length; i++)
			boxes_t[i] = this.boxes[i].getTransferable();

		ImagePane_Transferable[] images_t = new ImagePane_Transferable[this.images.length];
		for (int i = 0; i < images.length; i++)
			images_t[i] = this.images[i].getTransferable();

		return new ReportTemplate_Transferable(
			this.id,
			this.name,
			this.modified,
			this.description,
			this.template_type,
			ros_t,
			boxes_t,
      images_t);
	}

	public long getModified()
	{
		return this.modified;
	}

	public String getId()
	{
		return this.id;
	}

	public String getName()
	{
		return this.name;
	}

	public void delete() throws Exception
	{
		try
		{
			#sql { delete from AMFICOM.REPORTTEMPLATEFIELDS
				where REPORT_TEMPLATE_ID = :(this.id)
			};
			#sql { delete from AMFICOM.REPORTTEMPLATEBOXES
				where REPORT_TEMPLATE_ID = :(this.id)
			};
			#sql { delete from AMFICOM.REPORTIMAGEPANES
				where REPORT_TEMPLATE_ID = :(this.id)
			};
			#sql { delete from AMFICOM.REPORTTEMPLATES
				where ID = :(this.id)
			};
			#sql { commit };
		} 
		catch (Exception ex) 
		{
			System.out.println("error deleting report template: " + ex.getMessage());
			ex.printStackTrace();
			throw ex;
		} 
	}

	public void update(ReportTemplate_Transferable rt) throws Exception
	{
		if(!this.id.equals(rt.id))
			return;

		this.name = rt.name;
		this.description = rt.description;
		this.template_type = rt.template_type;
		this.modified = System.currentTimeMillis();
		Timestamp mod = new Timestamp(this.modified);

		try
		{
			#sql{ update REPORTTEMPLATES set
					NAME = :(this.name),
					MODIFIED = :mod,
					DESCRIPTION = :(this.description),
					TEMPLATE_TYPE = :(this.template_type)
				where ID =:(this.id)
			};
			#sql { commit };
		} 
		catch (Exception ex) 
		{
			System.out.println("error updating report template: " + ex.getMessage());
			ex.printStackTrace();
			throw ex;
		} 

		this.setReportTemplateFields(rt.renderingObjects);

		this.setReportTemplateBoxes(rt.firmedTextPanes);
	}
/*
	public String[] getFieldReportIds()
	{
		Vector vec = new Vector();
		for(int i = 0; i < ros.length; i++)
		{
			String id = ros[i].getFieldReportId();
			if(!vec.contains(id))
				vec.add(id);
		}
		String[] ids = new String[vec.size()];
		vec.copyInto(ids);
		return ids;
	}
*/
	public void setReportTemplateFields(RenderingObject_Transferable[] renderingObjects) throws Exception
	{
		int len = renderingObjects.length;
		this.ros = new RenderingObject[len];
		for(int i = 0; i < len; i++)
		{
			try
			{
				ros[i] = new RenderingObject(renderingObjects[i].roID);
				ros[i].update(renderingObjects[i]);
			}
			catch(Exception e)
			{
				ros[i] = new RenderingObject(renderingObjects[i], this.id);
			}
		}
	}

	public void setReportTemplateBoxes(FirmedTextPane_Transferable[] firmedTextPanes) throws Exception
	{
		int len = firmedTextPanes.length;
		this.boxes = new FirmedTextPane[len];

		#sql{ delete from AMFICOM.REPORTTEMPLATEBOXES
			where REPORT_TEMPLATE_ID =:(this.id)
		};
		#sql { commit };

		for(int i = 0; i < len; i++)
			boxes[i] = new FirmedTextPane(firmedTextPanes[i], this.id);
	}

	public void setReportTemplateImages(ImagePane_Transferable[] imagePanes) throws Exception
	{
		int len = imagePanes.length;
		this.images = new ImagePane[len];

		#sql{ delete from AMFICOM.REPORTIMAGEPANES
			where REPORT_TEMPLATE_ID =:(this.id)
		};
		#sql { commit };

		for(int i = 0; i < len; i++)
			images[i] = new ImagePane(imagePanes[i], this.id);
	}

	#sql public static iterator ReportTemplateIterator(
		String id,
		String name,
		Timestamp modified,
		String description,
		String template_type);


}

