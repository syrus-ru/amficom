package com.syrus.AMFICOM.server.Object;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import sqlj.runtime.profile.*;
import java.sql.*;
import oracle.sql.*;
import oracle.jdbc.driver.*;

import java.util.*;

import com.syrus.io.*;
import com.syrus.util.*;
import com.syrus.util.database.*;
import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Survey.*;
import com.syrus.AMFICOM.CORBA.Admin.*;
import com.syrus.AMFICOM.CORBA.Resource.*;

import com.syrus.AMFICOM.server.*;

public class SurveydbInterfaceSave
{
	protected SurveydbInterfaceSave()
	{
	}

	static public void saveResultParameters(
			String paramTableName,
			String result_id,
			ClientParameter_Transferable[] parameters)
	{
/*
		boolean isOK;
		String It_id = "";

		for (int j = 0; j < parameters.length; j++)
		{
			isOK = false;
			try
			{
				ConnectionContext connCtx = DefaultContext.getDefaultContext();

				Statement statement = null;
				try
				{
					statement = connCtx.getConnection().createStatement();
				}
				catch(SQLException sqlexception)
				{
//						Log.systemLog.logDebugMessage("CharacterizationDatabase: Error (3)", 200);
//						Log.systemLog.logErrorException(sqlexception);
					System.out.println("Лажа" + ": " + sqlexception.getMessage());
				}

				String qry = "select ID " +
						"from AMFICOM." + paramTableName +
						" where CODENAME = '" + parameters[j].codename + "'";

				System.out.println("Executing " + qry);

					OracleResultSet resultset = null;
					try
					{
						resultset = (OracleResultSet )statement.executeQuery(qry);
						if(resultset.next())
						{
							It_id = resultset.getString("ID");
						}
						else
						{
							System.out.println("param does not exist");
							return;
						}
						resultset.close();
					}
					catch(SQLException sqlexception1)
					{
						System.out.println("CharacterizationDatabase: Error (4)" + ": " + sqlexception1.getMessage());
					}
					finally
					{
						try
						{
							if(resultset != null)
								resultset.close();
							resultset = null;
							if(statement != null)
								statement.close();
							statement = null;
						}
						catch(SQLException _ex) { }
					}

				String result_parameter_id = ResourcedbInterface.getUId("resultparameter");
				#sql {INSERT INTO amficom.parameters(
						VALUE,
						RESULT_ID,
						PARAMETER_TYPE_ID,
						ID)
					VALUES (
						EMPTY_BLOB(),
						:result_id,
						:It_id,
						:result_parameter_id )
				};
//						:(parameters[j].param_type_id),

				ConnectionContext connCtx2 = DefaultContext.getDefaultContext();
				ByteArrayDatabase bArr = new ByteArrayDatabase(parameters[j].value);
				bArr.saveAsBlob(
						connCtx2.getConnection(),
						"parameters",
						"value",
						"id = '" + result_parameter_id + "'");
				isOK = true;
			}
			catch (Exception e)
			{
				isOK = false;
				System.out.println("Failed to save parameter with name: " + parameters[j].codename + ": " + e.getMessage());
				e.printStackTrace();
			}
		}
*/
	}
/*
		saveActionArgument(
			"TESTS",
			"TEST_TYPE_ID",
			"TESTARGUMENTS",
			"TEST_ID",
			"TEST_ARGUMENT_ID",
			"TESTTYPES",
			"TESTTYPEARGUMENTS",
			"TEST_TYPE_ID",
			"tst1",
			"ref_ior",
			val)

		saveActionArgument(
			"ANALYSIS",
			"TYPE_ID",
			"ANALYSISARGUMENTS",
			"ANALYSIS_ID",
			"ARGUMENT_TYPE_ID",
			"ANALYSISTYPES",
			"ANALYSISTYPEARGUMENTS",
			"ANALYSIS_TYPE_ID",
			"ana1",
			"concavities",
			val)
*/
	static public int saveActionArgument(
			String actionTableName,
			String actionTypeFieldName,
			String argumentTableName,
			String argumentFieldName,
			String argumentParameterFieldName,
			String actionTypeTableName,
			String argumentTypeTableName,
			String argumentTypeFieldName,
			String action_id,
			String argCodeName,
			byte[] val)
	{
		String action_type_id = "";
		String action_type_argument_id = "";
		BLOB blob;

		IdIterator iIt = null;

		System.out.println("Saving argument " + argCodeName +
			" for " + action_id);
		try
		{
			ConnectionContext connCtx = DefaultContext.getDefaultContext();
			Statement statement = null;
			OracleResultSet resultset = null;

			String qry = "select " + actionTypeFieldName +
					" from AMFICOM." + actionTableName +
					" where ID = '" + action_id + "'";

			System.out.println("Execute: " + qry);

			try
			{
				statement = connCtx.getConnection().createStatement();
				resultset = (OracleResultSet )statement.executeQuery(qry);
				if(resultset.next())
				{
					action_type_id = resultset.getString(actionTypeFieldName);
				}
				else
				{
					System.out.println("param does not exist");
					return Constants.ERROR_SAVING;
				}
				resultset.close();
			}
			catch(SQLException sqlexception1)
			{
				resultset.close();
				System.out.println("Фигня: " + sqlexception1.getMessage());
				return Constants.ERROR_SAVING;
			}
			finally
			{
				try
				{
					if(resultset != null)
						resultset.close();
					resultset = null;
					if(statement != null)
						statement.close();
					statement = null;
				}
				catch(SQLException _ex) { }
			}

			System.out.println("Retreived: actionTypeFieldName " + actionTypeFieldName);

			String qry2 = "select ID from AMFICOM." + argumentTypeTableName +
					" where " + argumentTypeFieldName + " = '" + action_type_id +
					"' and CODENAME = '" + argCodeName + "'";

			System.out.println("Executing " + qry2);
			#sql
			{
				BEGIN
					open :OUT iIt for :qry2;
				END;
			};

			if(iIt.next())
			{
				action_type_argument_id = iIt.id();
			}
			else
			{
				return Constants.ERROR_SAVING;
			}
			iIt.close();

			System.out.println("Retreived: action_type_argument_id " + action_type_argument_id);

			String qry3 = "select ID from AMFICOM." + argumentTableName +
					" where " + argumentFieldName + " = '" + action_id +
					"' and " + argumentParameterFieldName + " = '" + action_type_argument_id + "'";

			System.out.println("Executing " + qry3);
			#sql
			{
				BEGIN
					open :OUT iIt for :qry3;
				END;
			};
			if(iIt.next())
			{
				qry2 = "update AMFICOM." + argumentTableName +
						" set VALUE = EMPTY_BLOB() " +
					" where " + argumentFieldName + " = '" + action_id +
					"' and " + argumentParameterFieldName + " = '" + action_type_argument_id + "'";
			}
			else
			{
				String id_v = ResourcedbInterface.getUId("actionargument");

				qry2 = "insert into AMFICOM." + argumentTableName +
						"(ID, VALUE, " + argumentFieldName +
						", " + argumentParameterFieldName +
						") VALUES('" + id_v +
						"', EMPTY_BLOB(), '" + action_id +
						"', '" + action_type_argument_id + "')";
			}
			iIt.close();

			System.out.println("Executing " + qry2);
			#sql
			{
				BEGIN
					execute immediate :qry2;
				END;
			};
			#sql { commit };
			try
			{
				System.out.println("blob save for " + argCodeName);
				ByteArrayDatabase bArr = new ByteArrayDatabase(val);
				bArr.saveAsBlob(
						connCtx.getConnection(),
						argumentTableName,
						"VALUE",
						" " + argumentFieldName + " = '" + action_id +
							"' and " + argumentParameterFieldName + " = '" + action_type_argument_id + "'");
			}
			catch(Exception e)
			{
				System.out.println("error saVing arg value (blob): " + e.getMessage());
			}
			#sql { commit };
		}
		catch (SQLException e)
		{
			if(iIt != null) try {
			iIt.close();
			}catch(Exception exe) {}
			System.out.println("could not save parameter " + argCodeName + ": " + e.getMessage());
			e.printStackTrace();
			System.out.println(e.getMessage());
			return Constants.ERROR_SAVING;
		}
		catch(Exception ex)
		{
			if(iIt != null) try {
			iIt.close();
			}catch(Exception exe) {}
			System.out.println("error generating arg: " + ex.getMessage());
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static public void saveActionArgument(
			String tableName,
			String actionFieldName,
			String element_id,
			String argCodeName,
			String parameter_type_id,
			String name,
			byte[] val)
	{
		BLOB blob;
		IdIterator iIt = null;
		try
		{
			String qry = "select ID from AMFICOM." + tableName +
					" where " + actionFieldName + " = '" + element_id +
					"' and CODENAME = '" + argCodeName + "'";
			String qry2;

//			System.out.println("Executing " + qry);
			#sql
			{
				BEGIN
					open :OUT iIt for :qry;
				END;
			};
			if(iIt.next())
			{
				qry2 = "update AMFICOM." + tableName +
						" set VALUE = EMPTY_BLOB() " +
					" where " + actionFieldName + " = '" + element_id +
					"' and CODENAME = '" + argCodeName + "'";
			}
			else
			{
				String id_v = ResourcedbInterface.getUId("actionargument");

				qry2 = "insert into AMFICOM." + tableName +
						"(ID, CODENAME, NAME, VALUE, PARAMETER_TYPE_ID, " + actionFieldName +
						") VALUES('" + id_v +
						"', '" + argCodeName +
						"', '" + name +
						"', EMPTY_BLOB(), '" + parameter_type_id +
						"', '" + element_id + "')";
			}
			iIt.close();

//			System.out.println("Executing " + qry2);
			#sql
			{
				BEGIN
					execute immediate :qry2;
				END;
			};

			try
			{
				ConnectionContext connCtx = DefaultContext.getDefaultContext();
//				System.out.println("blob save for " + argCodeName);
				ByteArrayDatabase bArr = new ByteArrayDatabase(val);
				bArr.saveAsBlob(
						connCtx.getConnection(),
						tableName,
						"VALUE",
						" " + actionFieldName + " = '" + element_id +
							"' and CODENAME = '" + argCodeName + "'");
			}
			catch(Exception e)
			{
				System.out.println("error saVing arg value (blob): " + e.getMessage());
				e.printStackTrace();
			}
			#sql { commit };
		}
		catch (SQLException e)
		{
			if(iIt != null) try {
			iIt.close();
			}catch(Exception exe) {}
			System.out.println("could not save parameter " + argCodeName + ": " + e.getMessage());
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println("error generating arg: " + ex.getMessage());
		}

	}

	static public void saveActionParameter(
			String tableName,
			String actionFieldName,
			String element_id,
			String argCodeName,
			String parameter_type_id,
			String name)
	{
		IdIterator iIt = null;
		try
		{
			String qry = "select ID from AMFICOM." + tableName +
					" where " + actionFieldName + " = '" + element_id +
					"' and CODENAME = '" + argCodeName + "'";

			String qry2;

//			System.out.println("Executing " + qry);
			#sql
			{
				BEGIN
					open :OUT iIt for :qry;
				END;
			};
			if(iIt.next())
			{
				iIt.close();
				return;
			}
			else
			{
				iIt.close();
				String id_v = ResourcedbInterface.getUId("actionparameter");

				qry2 = "insert into AMFICOM." + tableName +
						"(ID, CODENAME, NAME, PARAMETER_TYPE_ID, " + actionFieldName +
						") VALUES('" + id_v +
						"', '" + argCodeName +
						"', '" + name +
						"', '" + parameter_type_id +
						"', '" + element_id + "')";

			}
			iIt.close();

//			System.out.println("Executing " + qry2);
			#sql
			{
				BEGIN
					execute immediate :qry2;
				END;
			};

			#sql { commit };
		}
		catch (SQLException e)
		{
			System.out.println("could not save parameter " + argCodeName + ": " + e.getMessage());
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		catch(Exception ex)
		{
			System.out.println("error generating param: " + ex.getMessage());
		}
		finally
		{
			try {
				iIt.close();
			}catch(Exception exe) {}
		}
		
	}
/*
		saveArguments(
			"ANALYSIS",
			"TYPE_ID",
			"ANALYSISARGUMENTS",
			"ANALYSIS_ID",
			"ARGUMENT_TYPE_ID",
			"ANALYSISTYPES",
			"ANALYSISTYPEARGUMENTS",
			"ANALYSIS_TYPE_ID",
			"ana1",
			args)
*/
	static public void saveArguments(
			String actionTableName,
			String actionTypeFieldName,
			String argumentTableName,
			String argumentFieldName,
			String argumentParameterFieldName,
			String actionTypeTableName,
			String argumentTypeTableName,
			String argumentTypeFieldName,
			String action_id,
			ClientParameter_Transferable[] arguments)
	{
		for(int j = 0; j < arguments.length; j++)
		{
			saveActionArgument(
					actionTableName,
					actionTypeFieldName,
					argumentTableName,
					argumentFieldName,
					argumentParameterFieldName,
					actionTypeTableName,
					argumentTypeTableName,
					argumentTypeFieldName,
					action_id,
					arguments[j].codename,
					arguments[j].value);
		}
	}

	static public void saveArguments(
			String tableName,
			String actionFieldName,
			String element_id,
			ClientParameter_Transferable[] arguments)
	{
/*
		for(int j = 0; j < arguments.length; j++)
		{
			saveActionArgument(
				tableName,
				actionFieldName,
				element_id,
				arguments[j].codename,
				arguments[j].param_type_id,
				arguments[j].name,
				arguments[j].value);
		}
*/
	}

	static public void saveParameters(
			String tableName,
			String actionFieldName,
			String element_id,
			ClientParameter_Transferable[] parameters)
	{
/*
		for(int j = 0; j < parameters.length; j++)
		{
			saveActionParameter(
				tableName,
				actionFieldName,
				element_id,
				parameters[j].codename,
				parameters[j].param_type_id,
				parameters[j].name);
		}
*/
	}

	#sql public static iterator IdIterator ( String id );

}

