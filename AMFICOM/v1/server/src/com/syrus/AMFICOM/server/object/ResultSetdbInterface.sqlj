/*
 * $Id: ResultSetdbInterface.sqlj,v 1.1.2.5 2004/12/23 12:06:02 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Resource.*;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/12/23 12:06:02 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ResultSetdbInterface {
	private ResultSetdbInterface() {
	}

	static int getResultIds(final Connection conn, String result_set_id, ResourceDescriptorSeq_TransferableHolder result_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		Vector vector = new Vector();

		ResultIdIterator idIt = null;

		try
		{
			#sql [connCtx] idIt = {
				select ID, ELEMENTARY_START_TIME from RESULTS
					where RESULT_SET_ID = :result_set_id
					and RESULT_TYPE = 'test'
			};

			while (idIt.next())
			{
				try { It_id = idIt.id(); }
				catch(SQLException e) { }
				if(It_id != null)
					vector.add(new ResourceDescriptor_Transferable(It_id, idIt.elementary_start_time().getTime()));
			}
			idIt.close();

			result_ids.value = new ResourceDescriptor_Transferable[vector.size()];
			vector.copyInto(result_ids.value);
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result set results: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int getResultIds(final Connection conn, String result_set_id, String me_id, ResourceDescriptorSeq_TransferableHolder result_ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_test_id = "";
		String It_me_id = "";
		Vector vector = new Vector();

		ResultIdTestIterator idIt = null;

		try
		{
			#sql [connCtx] idIt = {
				select ID, ELEMENTARY_START_TIME, TEST_ID from RESULTS
					where RESULT_SET_ID = :result_set_id
					and RESULT_TYPE = 'test'
			};

			while (idIt.next())
			{
				try { It_id = idIt.id(); }
				catch(SQLException e) { }
				try { It_test_id = idIt.test_id(); }
				catch(SQLException e) { }
				if(It_id != null)
					if(It_test_id != null)
					{
						try
						{
							#sql [connCtx] { select MONITORED_ELEMENT_ID into :It_me_id
								from TESTS where ID = :It_test_id
							};
							if(It_me_id != null)
								if(It_me_id.equals(me_id))
									vector.add(new ResourceDescriptor_Transferable(It_id, idIt.elementary_start_time().getTime()));
						}
						catch(Exception ex)
						{
						}
					}
			}
			idIt.close();

			result_ids.value = new ResourceDescriptor_Transferable[vector.size()];
			vector.copyInto(result_ids.value);
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading result set results: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	#sql private static iterator ResultIdIterator(
		String id,
		Timestamp elementary_start_time);

	#sql private static iterator ResultIdTestIterator(
		String id,
		Timestamp elementary_start_time,
		String test_id);
}
