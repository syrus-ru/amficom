/*
 * $Id: OracleAlarmReceiverMap.sqlj,v 1.1.2.4 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.*;
import com.syrus.AMFICOM.CORBA.Admin.AccessIdentity_Transferable;
import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.AMFICOMRemoteException;
import com.syrus.util.corba.AuroraORBUtil;
import java.io.UnsupportedEncodingException;
import java.sql.*;
import org.omg.CORBA.SystemException;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class OracleAlarmReceiverMap {
	private OracleAlarmReceiverMap() {
	}

	/**
	 * Returns <tt>true</tt> if this map contains a mapping for the specified
	 * key.  More formally, returns <tt>true</tt> if and only if
	 * this map contains at a mapping for a key <tt>k</tt> such that
	 * <tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
	 * at most one such mapping.)
	 *
	 * @param key key whose presence in this map is to be tested.
	 * @return <tt>true</tt> if this map contains a mapping for the specified
	 *         key.
	 * @throws NullPointerException if the key is <tt>null</tt>.
	 * @throws AMFICOMRemoteException
	 * @see java.util.Map#containsKey(java.lang.Object)
	 */
	static boolean containsKey(final Connection conn, AccessIdentity_Transferable key) throws SQLException, AMFICOMRemoteException {
		if (key == null)
			throw new NullPointerException();

		AMFICOMdbGeneral.checkUserPrivileges(conn, key);

		int alarmReceiver = 0; 
		try {
			#sql [new DefaultContext(conn)] {
				SELECT alarm_receiver INTO :alarmReceiver FROM amficom.loggedusers WHERE id = :(key.sess_id)
			};
		} catch (SQLException sqle) {
			throw new AMFICOMRemoteException(Constants.ERROR_LOADING, sqle.toString());
		}

		return (alarmReceiver == 1);
	}

	/**
	 * Associates the specified value with the specified key in this map
	 * (optional operation).  If the map previously contained a mapping for
	 * this key, the old value is replaced by the specified value.  (A map
	 * <tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only
	 * if {@link
	 * #containsKey(com.syrus.AMFICOM.CORBA.Admin.AccessIdentity_Transferable)
	 * m.containsKey(k)} would return <tt>true</tt>.)) 
	 *
	 * @param key key with which the specified value is to be associated.
	 * @param value value to be associated with the specified key.
	 * @return previous value associated with specified key, or <tt>null</tt>
	 *	       if there was no mapping for key.
	 * @throws NullPointerException if the specified key or value is
	 *            <tt>null</tt>.
	 * @throws AMFICOMRemoteException
	 * @see java.util.Map#put(java.lang.Object, java.lang.Object)
	 */
	static AMFICOMClient put(final Connection conn, AccessIdentity_Transferable key, AMFICOMClient value) throws SQLException, AMFICOMRemoteException {
		if ((key == null) || (value == null))
			throw new NullPointerException();

		AMFICOMClient returnValue;
		if (containsKey(conn, key)) {
			/*
			 * Pop the previous value from the underlying database.
			 * 
			 * If user already logged in (otherwise AMFICOMRemoteException is
			 * thrown above), both values (one stored in the database and one
			 * provided as a parameter) refer to the same object.
			 */
			returnValue = value;
		} else
			returnValue = null;

		update(conn, key, 1);

		return returnValue;
	}

	/**
	 * Removes the mapping for this key from this map if it is present
	 * (optional operation).   More formally, if this map contains a mapping
	 * from key <tt>k</tt> to value <tt>v</tt> such that
	 * <code>(key==null ?  k==null : key.equals(k))</code>, that mapping
	 * is removed.  (The map can contain at most one such mapping.)
	 *
	 * <p>Returns the value to which the map previously associated the key, or
	 * <tt>null</tt> if the map contained no mapping for this key. The map will
	 * not contain a mapping for the specified  key once the call returns.
	 *
	 * @param key key whose mapping is to be removed from the map.
	 * @return previous value associated with specified key, or <tt>null</tt>
	 *	       if there was no mapping for key.
	 * @throws NullPointerException if the key is <tt>null</tt>.
	 * @throws AMFICOMRemoteException
	 * @see java.util.Map#remove(java.lang.Object)
	 */
	static AMFICOMClient remove(final Connection conn, AccessIdentity_Transferable key) throws SQLException, AMFICOMRemoteException {
		if (key == null)
			throw new NullPointerException();

		AMFICOMClient returnValue;
		if (containsKey(conn, key)) {
			/*
			 * Pop the previous value from the underlying database.
			 */
			returnValue = null;

			try {
				Blob blob;
				#sql [new DefaultContext(conn)] {
					SELECT ior INTO :blob FROM amficom.iors WHERE id = :(key.sess_id)
				};

				long length = blob.length();

				/*
				 * Silently truncate data if necessary. Anyway, we're unable to
				 * handle too long object references
				 */
				if (length > Integer.MAX_VALUE)
					length = Integer.MAX_VALUE;

				byte b[] = blob.getBytes(1L, (int) length);
				String ior;
				try {
					ior = new String(b, "US-ASCII");
				} catch (UnsupportedEncodingException uee) {
					ior = new String(b);
				}

				returnValue = AMFICOMClientHelper.narrow(AuroraORBUtil.getInstance().getORB().string_to_object(ior));
			} catch (NullPointerException npe) {
				/*
				 * BLOB stored in the database is null.
				 */
				 returnValue = null;
			} catch (SystemException se) {
				/*
				 * JavaSoft ORB throws BAD_PARAM; VisiBroker throws INV_OBJREF.
				 */
				returnValue = null;
			} catch (SQLException sqle) {
				returnValue = null;
			}
		} else
			returnValue = null;

		update(conn, key, 0);

		return returnValue;
	}

	private static void update(final Connection conn, AccessIdentity_Transferable key, int alarmReceiver) throws SQLException, AMFICOMRemoteException {
		try {
			#sql [new DefaultContext(conn)] {
				UPDATE amficom.loggedusers SET alarm_receiver = :alarmReceiver WHERE id = :(key.sess_id)
			};
			conn.commit();
		} catch (SQLException sqle) {
			throw new AMFICOMRemoteException(Constants.ERROR_SAVING, sqle.toString());
		}
	}
}
