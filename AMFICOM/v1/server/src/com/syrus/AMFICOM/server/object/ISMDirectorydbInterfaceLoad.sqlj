/*
 * $Id: ISMDirectorydbInterfaceLoad.sqlj,v 1.1.2.4 2004/09/09 11:35:20 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.ISMDirectory.*;
import com.syrus.AMFICOM.CORBA.Network.Characteristic_Transferable;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.SQLNullException;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/09/09 11:35:20 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ISMDirectorydbInterfaceLoad {
	private ISMDirectorydbInterfaceLoad() {
	}

	private static Vector loadAccessPortTestTypes(final Connection conn, String aport_id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		TestTypeIdIterator idIt = null;
		Vector vector = new Vector();
		try
		{
			#sql [connCtx] idIt = { select TEST_TYPE_ID
				from AMFICOM.ACCESSPORTTYPETESTTYPES
					where ACCESS_PORT_TYPE_ID = :aport_id };

			while (idIt.next())
			{
				try { vector.addElement(idIt.test_type_id()); }
				catch(SQLNullException e) { }
			}
			idIt.close();
		}
		catch(SQLException e)
		{
			if(idIt != null) try {
			idIt.close();
			}catch(Exception exe) {}
			System.out.println("could not get test types for aport type " + aport_id + ": " + e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			try {
				idIt.close();
			}catch(Exception exe) {}
		}
		
		return vector;
	}

	static int loadAccessPortTypes(final Connection conn, AccessPortTypeSeq_TransferableHolder aporttypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_access_type = "";
		long It_modified = 0;

		String[] test_type_ids;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		AccessPortType_Transferable apt_t;
		AccessPortType_Transferable[] apt_ts;
		AccessPortTypeIterator ptIt = null;
		Vector vector2;

		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						DESCRIPTION,
						ACCESS_TYPE,
						MODIFIED
					from AMFICOM.ACCESSPORTTYPEs
			};

			while (ptIt.next())
			{
				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_access_type = ptIt.access_type(); }
				catch(SQLException e) { }
				if(It_access_type == null) It_access_type = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = NetDirectorydbInterfaceLoad.loadCharacteristicLinks(conn, "ACCESSPORTTYPECHARLINKS", "ACCESS_PORT_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = loadAccessPortTestTypes(conn, It_id);
				test_type_ids = new String[vector2.size()];
				vector2.copyInto(test_type_ids);

				apt_t = new AccessPortType_Transferable(
					It_id,
					It_name,
					It_description,
					It_access_type,
					It_modified,
					test_type_ids,
					characteristics);

				vector.add(apt_t);
			}
			ptIt.close();
			apt_ts = new AccessPortType_Transferable[vector.size()];
			vector.copyInto(apt_ts);
			aporttypeseq.value = apt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading Access port types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadPathTypes(final Connection conn, TransmissionPathTypeSeq_TransferableHolder pathtypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		TransmissionPathType_Transferable pt_t;
		TransmissionPathType_Transferable[] pt_ts;
		TransmissionPathTypeIterator ptIt = null;
		Vector vector2;

		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.PATHTYPES
			};

			while (ptIt.next())
			{
				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				pt_t = new TransmissionPathType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified);

				vector.add(pt_t);
			}
			ptIt.close();
			pt_ts = new TransmissionPathType_Transferable[vector.size()];
			vector.copyInto(pt_ts);
			pathtypeseq.value = pt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading path types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadAccessPortTypes(final Connection conn, String[] apt_ids, AccessPortTypeSeq_TransferableHolder aporttypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_description = "";
		String It_access_type = "";
		long It_modified = 0;

		String[] test_type_ids;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		AccessPortType_Transferable apt_t;
		AccessPortType_Transferable[] apt_ts;
		AccessPortTypeIterator ptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < apt_ids.length; i++)
			loadvec.add(apt_ids[i]);
		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						DESCRIPTION,
						ACCESS_TYPE,
						MODIFIED
					from AMFICOM.ACCESSPORTTYPEs
			};

			while (ptIt.next())
			{
				if(! loadvec.contains(ptIt.id()))
					continue;

				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_access_type = ptIt.access_type(); }
				catch(SQLException e) { }
				if(It_access_type == null) It_access_type = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				vector2 = NetDirectorydbInterfaceLoad.loadCharacteristicLinks(conn, "ACCESSPORTTYPECHARLINKS", "ACCESS_PORT_TYPE_ID", It_id);
				characteristics = new Characteristic_Transferable[vector2.size()];
				vector2.copyInto(characteristics);

				vector2 = loadAccessPortTestTypes(conn, It_id);
				test_type_ids = new String[vector2.size()];
				vector2.copyInto(test_type_ids);

				apt_t = new AccessPortType_Transferable(
					It_id,
					It_name,
					It_description,
					It_access_type,
					It_modified,
					test_type_ids,
					characteristics);

				vector.add(apt_t);
			}
			ptIt.close();
			apt_ts = new AccessPortType_Transferable[vector.size()];
			vector.copyInto(apt_ts);
			aporttypeseq.value = apt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading Access port types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		
		return Constants.ERROR_NO_ERROR;
	}

	static int loadPathTypes(final Connection conn, String[] path_ids, TransmissionPathTypeSeq_TransferableHolder pathtypeseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		String It_id = "";
		String It_name = "";
		String It_description = "";
		long It_modified = 0;

		Characteristic_Transferable characteristics[];

		Vector vector = new Vector();

		TransmissionPathType_Transferable pt_t;
		TransmissionPathType_Transferable[] pt_ts;
		TransmissionPathTypeIterator ptIt = null;
		Vector vector2;

		Vector loadvec = new Vector();
		for(int i = 0; i < path_ids.length; i++)
			loadvec.add(path_ids[i]);
		try
		{
			#sql [connCtx] ptIt = { select
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED
					from AMFICOM.PATHTYPES
			};

			while (ptIt.next())
			{
				if(! loadvec.contains(ptIt.id()))
					continue;

				try { It_id = ptIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_name = ptIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_description = ptIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_modified = ptIt.modified().getTime(); }
				catch(SQLException e) { }

				pt_t = new TransmissionPathType_Transferable(
					It_id,
					It_name,
					It_description,
					It_modified);

				vector.add(pt_t);
			}
			ptIt.close();
			pt_ts = new TransmissionPathType_Transferable[vector.size()];
			vector.copyInto(pt_ts);
			pathtypeseq.value = pt_ts;

		}
		catch(SQLException e)
		{
			if(ptIt != null) try {
			ptIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading path types: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				ptIt.close();
			}catch(Exception exe) {}
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator TestTypeIdIterator (
		String test_type_id);

	#sql public static iterator AccessPortTypeIterator(
		String id,
		String name,
		String description,
		String access_type,
		Timestamp modified);

	#sql public static iterator TransmissionPathTypeIterator(
		String id,
		String name,
		String description,
		Timestamp modified);
}
