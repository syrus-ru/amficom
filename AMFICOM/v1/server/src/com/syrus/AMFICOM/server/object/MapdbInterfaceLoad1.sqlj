/*
 * $Id: MapdbInterfaceLoad1.sqlj,v 1.1.2.1 2004/08/20 14:03:47 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.CORBA.Scheme.ElementAttribute_Transferable;
import java.sql.*;
import java.util.Vector;

/**
 * @version $Revision: 1.1.2.1 $, $Date: 2004/08/20 14:03:47 $
 * @author $Author: bass $
 * @module server_v1
 */
public class MapdbInterfaceLoad1
{
	protected MapdbInterfaceLoad1()
	{
	}

	public static int loadMaps(
			String domain_id,
			Vector map_ids,
			MapContextSeq_TransferableHolder mapseq,
			Vector images)
	{
		int count;
		MapContext_Transferable mc_t;
		Vector vector = new Vector();
		MapContext_Transferable mc_ts[];
		MapContextIterator mcIt = null;

		String It_id = "";
		String It_name = "";
		String It_codename = "";
		String It_description = "";
		long It_created = 0;
		String It_created_by = "";
		long It_modified = 0;
		String It_modified_by = "";
		String It_domain_id = "";
		boolean It_show_nodes = true;
		int It_mouse_tolerancy = 0;
		double It_zoom_factor = 1.0;
		double It_default_zoom_factor = 1.0;
		String It_user_id = "";
		String It_longitude = "";
		String It_latitude = "";
		String It_scheme_id = "";

		Vector vector2 = new Vector();
		String equipment_ids[] = new String[0];
		String kis_ids[] = new String[0];
		String node_ids[] = new String[0];
		String nodeLink_ids[] = new String[0];
		String physicalLink_ids[] = new String[0];
		String path_ids[] = new String[0];
		String mark_ids[] = new String[0];
		IdIterator idIt = null;

		try
		{
			#sql mcIt = { select
					ID,
					NAME,
					CODENAME,
					DESCRIPTION,
					CREATED,
					CREATED_BY,
					MODIFIED,
					MODIFIED_BY,
					DOMAIN_ID,
					SHOW_NODES,
					MOUSE_TOLERANCY,
					ZOOM_FACTOR,
					DEFAULT_ZOOM_FACTOR,
					USER_ID,
					LONGITUDE,
					LATITUDE,
					SCHEME_ID
				from AMFICOM.MAPCONTEXTS
			};
//				where DOMAIN_ID = :domain_id

		count = 0;
		while (mcIt.next())
		{
			count ++;
			try { It_id = mcIt.id(); }
			catch(SQLException e) { }
			if(It_id == null) It_id = "";
			try { It_name = mcIt.name(); }
			catch(SQLException e) { }
			if(It_name == null) It_name = "";
			try { It_codename = mcIt.codename(); }
			catch(SQLException e) { }
			if(It_codename == null) It_codename = "";
			try { It_description = mcIt.description(); }
			catch(SQLException e) { }
			if(It_description == null) It_description = "";
			try { It_created = (mcIt.created()).getTime(); }
			catch(Exception e) { }
			try { It_created_by = mcIt.created_by(); }
			catch(SQLException e) { }
			if(It_created_by == null) It_created_by = "";
			try { It_modified = (mcIt.modified()).getTime(); }
			catch(Exception e) { }
			try { It_modified_by = mcIt.modified_by(); }
			catch(SQLException e) { }
			if(It_modified_by == null) It_modified_by = "";
			try { It_domain_id = mcIt.domain_id(); }
			catch(SQLException e) { }
			if(It_domain_id == null) It_domain_id = "";
			try { It_show_nodes = (mcIt.show_nodes() == 0)? false:true; }
			catch(SQLException e) { }
			try { It_mouse_tolerancy = mcIt.mouse_tolerancy(); }
			catch(SQLException e) { }
			try { It_zoom_factor = Double.parseDouble(mcIt.zoom_factor()); }
			catch(SQLException e) { }
			try { It_default_zoom_factor = Double.parseDouble(mcIt.default_zoom_factor()); }
			catch(SQLException e) { }
			try { It_user_id = mcIt.user_id(); }
			catch(SQLException e) { }
			if(It_user_id == null) It_user_id = "";
			try { It_longitude = mcIt.longitude(); }
			catch(SQLException e) { }
			if(It_longitude == null) It_longitude = "";
			try { It_latitude = mcIt.latitude(); }
			catch(SQLException e) { }
			if(It_latitude == null) It_latitude = "";
			try { It_scheme_id = mcIt.scheme_id(); }
			catch(SQLException e) { }
			if(It_scheme_id == null) It_scheme_id = "";

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPELEMENTLINKS", "MAP_ELEMENT_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPEQUIPMENTELEMENTS", It_id);
			equipment_ids = new String[vector2.size()];
			vector2.copyInto(equipment_ids);
//			System.out.println("found " + vector2.size() + " equipments for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPKISLINKS", "MAP_KIS_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPKISELEMENTS", It_id);
			kis_ids = new String[vector2.size()];
			vector2.copyInto(kis_ids);
			System.out.println("found " + vector2.size() + " kiss for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPNODELINKS", "MAP_NODE_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds/*NonISM*/("MAPPHYSICALNODEELEMENTS", It_id);
			node_ids = new String[vector2.size()];
			vector2.copyInto(node_ids);
//			System.out.println("found " + vector2.size() + " nodes for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPNODELINKLINKS", "MAP_NODE_LINK_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds/*NonISM*/("MAPNODELINKELEMENTS", It_id);
			nodeLink_ids = new String[vector2.size()];
			vector2.copyInto(nodeLink_ids);
//			System.out.println("found " + vector2.size() + " node links for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPLINKLINKS", "MAP_LINK_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds/*NonISM*/("MAPPHYSICALLINKELEMENTS", It_id);
			physicalLink_ids = new String[vector2.size()];
			vector2.copyInto(physicalLink_ids);
//			System.out.println("found " + vector2.size() + " links for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPPATHSLINKS", "MAP_PATH_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIdsNonISM("MAPPATHELEMENTS", It_id);
			path_ids = new String[vector2.size()];
			vector2.copyInto(path_ids);
//			System.out.println("found " + vector2.size() + " connection points for map " + It_id);

			vector2 = MapdbInterfaceLoad4.loadMapElementIds2("MAPMARKLINKS", "MAP_MARK_ID", It_id);
//			vector2 = MapdbInterfaceLoad4.loadMapElementIds("MAPMARKELEMENTS", It_id);
			mark_ids = new String[vector2.size()];
			vector2.copyInto(mark_ids);
//			System.out.println("found " + vector2.size() + " paths for map " + It_id);

			mc_t = new MapContext_Transferable(
					It_id,
					It_name,
					It_codename,
					It_user_id,
					It_description,
					It_domain_id,

					It_created,
					It_created_by,
					It_modified,
					It_modified_by,

					It_scheme_id,

					equipment_ids,
					kis_ids,
					node_ids,
					nodeLink_ids,
					physicalLink_ids,
					path_ids,
					mark_ids,

					It_show_nodes,
					It_longitude,
					It_latitude,
					It_zoom_factor,
					It_default_zoom_factor,
					It_mouse_tolerancy);

			vector.addElement(mc_t);
			map_ids.addElement(It_id);
		}
		mcIt.close();
		mc_ts = new MapContext_Transferable[vector.size()];
		vector.copyInto(mc_ts);
		mapseq.value = mc_ts;

		}
		catch(SQLException e)
		{
			if(mcIt != null) try {
			mcIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading maps: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_LOADING;
		}
		finally
		{
			try {
				mcIt.close();
			}catch(Exception exe) {}
		}
		

		return Constants.ERROR_NO_ERROR;
	}

	public static MapElement_Transferable loadMapElement(
			String id,
			Vector images)
	{
		MapElement_Transferable eq_t = null;

		MapElementIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_kis_type_id = "";
		String It_id = "";
		String It_map_id = "";
		String It_element_id = "";
		String It_element_type_id = "";

		long It_modified = 0;
		boolean It_has_kis = false;
		String It_ism_map_id = "";
		String It_map_kis_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		try
		{
			#sql eqIt = { select
					OWNER_ID,
					LATITUDE,
					NAME,
					SYMBOL_ID,
					TYPE_ID,
					DESCRIPTION,
					LONGITUDE,
					KIS_TYPE_ID,
					ID,
					MAP_ID,
					ELEMENT_ID,
					ELEMENT_TYPE_ID
				from AMFICOM.MAPELEMENTS
				where ID = :id
			};

			if(eqIt.next())
			{
				try { It_id = eqIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_owner_id = eqIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_latitude = eqIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_name = eqIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_symbol_id = eqIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_type_id = eqIt.type_id(); }
				catch(SQLException e) { }
				if(It_type_id == null) It_type_id = "";
				try { It_description = eqIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_longitude = eqIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_kis_type_id = eqIt.kis_type_id(); }
				catch(SQLException e) { }
				if(It_kis_type_id == null) It_kis_type_id = "";
				try { It_map_id = eqIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_element_id = eqIt.element_id(); }
				catch(SQLException e) { }
				if(It_element_id == null) It_element_id = "";
				try { It_element_type_id = eqIt.element_type_id(); }
				catch(SQLException e) { }
				if(It_element_type_id == null) It_element_type_id = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPELEMENTATTRIBUTES",
						"MAP_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				eq_t = new MapElement_Transferable(
						It_id,
						It_name,
						It_type_id,
						It_description,
						It_owner_id,
						It_longitude,
						It_latitude,
						It_map_id,
						It_symbol_id,
						It_element_id,
						It_element_type_id,
						It_modified,
						It_has_kis,
						It_kis_type_id,
						It_ism_map_id,
						It_map_kis_id,
						attributes);

				images.add(It_symbol_id);
			}// if(eqIt)
			eqIt.close();
		}
		catch(SQLException e)
		{
			if(eqIt != null) try {
			eqIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading equipment: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				eqIt.close();
			}catch(Exception exe) {}
		}
		

		return eq_t;
	}

	public static int loadMapElements(
			Vector map_ids,
			MapElementSeq_TransferableHolder equipmentseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapElement_Transferable eq_t;
		Vector vector = new Vector();
		MapElement_Transferable eq_ts[];
		MapElementIterator eqIt = null;

		String current_map_id = "";

		MapElementIdIterator midIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);

			try
			{
				#sql midIt = {
					select MAP_ELEMENT_ID
						from MAPELEMENTLINKS
							where MAP_ID = :current_map_id
				};

				while (midIt.next())
				{
					eq_t = loadMapElement(midIt.map_element_id(), images);
					eq_t.map_id = current_map_id;
					vector.add(eq_t);
				}
				midIt.close();

				eq_ts = new MapElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				equipmentseq.value = eq_ts;
			}
			catch(SQLException e)
			{
				if(midIt != null) try {
				midIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading equipments: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					midIt.close();
				}catch(Exception exe) {}
			}
			
		}
		return Constants.ERROR_NO_ERROR;
	}
/*
	public static int loadMapElements(
			Vector map_ids,
			MapElementSeq_TransferableHolder equipmentseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapElement_Transferable eq_t;
		Vector vector = new Vector();
		MapElement_Transferable eq_ts[];
		MapElementIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_kis_type_id = "";
		String It_id = "";
		String It_map_id = "";
		String It_element_id = "";
		String It_element_type_id = "";

		long modified = 0;
		boolean has_kis = false;
		String It_ism_map_id = "";
		String It_map_kis_id = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		IdIterator idIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql eqIt = { select
						OWNER_ID,
						LATITUDE,
						NAME,
						SYMBOL_ID,
						TYPE_ID,
						DESCRIPTION,
						LONGITUDE,
						KIS_TYPE_ID,
						ID,
						MAP_ID,
						ELEMENT_ID,
						ELEMENT_TYPE_ID
					from AMFICOM.MAPELEMENTS
					where MAP_ID = :current_map_id
					};

				count = 0;
				while (eqIt.next())
				{
					count ++;

					try { It_id = eqIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_scheme_equipment_element_id = eqIt.scheme_equipment_element_id(); }
					catch(SQLException e) { }
					if(It_scheme_equipment_element_id == null) It_scheme_equipment_element_id = "";
					try { It_owner_id = eqIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_latitude = eqIt.latitude(); }
					catch(SQLException e) { }
					if(It_latitude == null) It_latitude = "";
					try { It_name = eqIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_symbol_id = eqIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_type_id = eqIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_description = eqIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_longitude = eqIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";
					try { It_kis_type_id = eqIt.kis_type_id(); }
					catch(SQLException e) { }
					if(It_kis_type_id == null) It_kis_type_id = "";
					try { It_map_id = eqIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_element_id = eqIt.element_id(); }
					catch(SQLException e) { }
					if(It_element_id == null) It_element_id = "";
					try { It_element_type_id = eqIt.element_type_id(); }
					catch(SQLException e) { }
					if(It_element_type_id == null) It_element_type_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPELEMENTATTRIBUTES",
							"MAP_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					eq_t = new MapElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_longitude,
							It_latitude,
							It_map_id,
							It_symbol_id,
							It_element_id,
							It_element_type_id,
							It_modified,
							It_has_kis,
							It_kis_type_id,
							It_ism_map_id,
							It_map_kis_id,
							attributes);

					images.add(It_symbol_id);
					vector.addElement(eq_t);
				}// while(eqIt)
				eqIt.close();
				eq_ts = new MapElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				equipmentseq.value = eq_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading equipments: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/
	public static MapMarkElement_Transferable loadMapMark(
			String id,
			Vector images)
	{
		MapMarkElement_Transferable eq_t = null;
		MapMarkIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_id = "";
		String It_map_id = "";
		String It_link_id = "";
		String It_distance = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		Vector vector2 = new Vector();

		try
		{
			#sql eqIt = { select
					OWNER_ID,
					LATITUDE,
					NAME,
					SYMBOL_ID,
					DESCRIPTION,
					LONGITUDE,
					ID,
					MAP_ID,
					LINK_ID,
					DISTANCE
				from AMFICOM.MAPMARKELEMENTS
				where ID = :id
			};

			if(eqIt.next())
			{
				try { It_id = eqIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_owner_id = eqIt.owner_id(); }
				catch(SQLException e) { }
				if(It_owner_id == null) It_owner_id = "";
				try { It_latitude = eqIt.latitude(); }
				catch(SQLException e) { }
				if(It_latitude == null) It_latitude = "";
				try { It_name = eqIt.name(); }
				catch(SQLException e) { }
				if(It_name == null) It_name = "";
				try { It_symbol_id = eqIt.symbol_id(); }
				catch(SQLException e) { }
				if(It_symbol_id == null) It_symbol_id = "";
				try { It_description = eqIt.description(); }
				catch(SQLException e) { }
				if(It_description == null) It_description = "";
				try { It_longitude = eqIt.longitude(); }
				catch(SQLException e) { }
				if(It_longitude == null) It_longitude = "";
				try { It_map_id = eqIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";
				try { It_link_id = eqIt.link_id(); }
				catch(SQLException e) { }
				if(It_link_id == null) It_link_id = "";
				try { It_distance = eqIt.distance(); }
				catch(SQLException e) { }
				if(It_distance == null) It_distance = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPMARKELEMENTATTRIBUTES",
						"MAP_MARK_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				eq_t = new MapMarkElement_Transferable(
						It_id,
						It_name,
						It_longitude,
						It_latitude,
						It_description,
						It_owner_id,
						It_map_id,
						It_symbol_id,
						It_link_id,
						Double.parseDouble(It_distance),
						attributes);
//				images.add(It_symbol_id);
			}// if(eqIt)
			eqIt.close();
		}
		catch(SQLException e)
		{
			if(eqIt != null) try {
			eqIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading mark: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				eqIt.close();
			}catch(Exception exe) {}
		}
		
		return eq_t;
	}

	public static int loadMapMarks(
			Vector map_ids,
			MapMarkElementSeq_TransferableHolder markseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapMarkElement_Transferable eq_t;
		Vector vector = new Vector();
		MapMarkElement_Transferable eq_ts[];

		String current_map_id = "";
		MapMarkIdIterator midIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql midIt = {
					select MAP_MARK_ID
						from MAPMARKLINKS
							where MAP_ID = :current_map_id
				};

				while (midIt.next())
				{
					eq_t = loadMapMark(midIt.map_mark_id(), images);
					eq_t.map_id = current_map_id;
					vector.add(eq_t);
				}
				midIt.close();

				eq_ts = new MapMarkElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				markseq.value = eq_ts;
			}
			catch(SQLException e)
			{
				if(midIt != null) try {
				midIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading marks: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					midIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

/*
	public static int loadMapMarks(
			Vector map_ids,
			MapMarkElementSeq_TransferableHolder markseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapMarkElement_Transferable eq_t;
		Vector vector = new Vector();
		MapMarkElement_Transferable eq_ts[];
		MapMarkIterator eqIt = null;

		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_id = "";
		String It_map_id = "";
		String It_link_id = "";
		String It_distance = "";

		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		Vector vector2 = new Vector();

		IdIterator idIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql eqIt = { select
						OWNER_ID,
						LATITUDE,
						NAME,
						SYMBOL_ID,
						DESCRIPTION,
						LONGITUDE,
						ID,
						MAP_ID,
						LINK_ID,
						DISTANCE
					from AMFICOM.MAPMARKELEMENTS
					where MAP_ID = :current_map_id
					};

				count = 0;
				while (eqIt.next())
				{
					count ++;

					try { It_id = eqIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_owner_id = eqIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_latitude = eqIt.latitude(); }
					catch(SQLException e) { }
					if(It_latitude == null) It_latitude = "";
					try { It_name = eqIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_symbol_id = eqIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_description = eqIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_longitude = eqIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";
					try { It_map_id = eqIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_link_id = eqIt.link_id(); }
					catch(SQLException e) { }
					if(It_link_id == null) It_link_id = "";
					try { It_distance = eqIt.distance(); }
					catch(SQLException e) { }
					if(It_distance == null) It_distance = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPMARKELEMENTATTRIBUTES",
							"MAP_MARK_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					eq_t = new MapMarkElement_Transferable(
							It_id,
							It_name,
							It_longitude,
							It_latitude,
							It_description,
							It_owner_id,
							It_map_id,
							It_symbol_id,
							It_link_id,
							Double.parseDouble(It_distance),
							attributes);

					images.add(It_symbol_id);
					vector.addElement(eq_t);
				}// while(eqIt)
				eqIt.close();
				eq_ts = new MapMarkElement_Transferable[vector.size()];
				vector.copyInto(eq_ts);
				markseq.value = eq_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading marks: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/
	public static MapElement_Transferable loadMapKIS(
			String id,
			Vector images)
	{
		String It_id = "";
		String It_map_element_id = "";
		String It_ism_map_id = "";
		String It_map_id = "";

		MapKISIterator kisIt = null;
		MapElement_Transferable kis_t = null;

		Vector vector2 = new Vector();
		ElementAttribute_Transferable[] attributes;
		try
		{
			#sql kisIt = { select
					ID,
					MAP_ELEMENT_ID,
					ISM_MAP_ID,
					MAP_ID
				from AMFICOM.MAPKISELEMENTS
				where ID = :id
			};

			if(kisIt.next())
			{
				try { It_id = kisIt.id(); }
				catch(SQLException e) { }
				if(It_id == null) It_id = "";
				try { It_map_element_id = kisIt.map_element_id(); }
				catch(SQLException e) { }
				if(It_map_element_id == null) It_map_element_id = "";
				try { It_ism_map_id = kisIt.ism_map_id(); }
				catch(SQLException e) { }
				if(It_ism_map_id == null) It_ism_map_id = "";
				try { It_map_id = kisIt.map_id(); }
				catch(SQLException e) { }
				if(It_map_id == null) It_map_id = "";

				vector2 = MapdbInterfaceLoad4.loadAttributes(
						"MAPKISELEMENTATTRIBUTES",
						"MAP_KIS_ELEMENT_ID",
						It_id);
				attributes = new ElementAttribute_Transferable[vector2.size()];
				vector2.copyInto(attributes);

				kis_t = loadMapElement(It_map_element_id, images);
				kis_t.map_id = It_map_id;
				kis_t.ism_map_id = It_ism_map_id;
				kis_t.map_kis_id = It_id;
				kis_t.has_kis = true;

				System.out.println(" KIS element is: " + It_map_element_id);
			}// if(kisIt)
			kisIt.close();
		}
		catch(SQLException e)
		{
			if(kisIt != null) try {
			kisIt.close();
			}catch(Exception exe) {}
			System.out.println("error loading KISs: " + e.getMessage());
			e.printStackTrace();
			return null;
		}
		finally
		{
			try {
				kisIt.close();
			}catch(Exception exe) {}
		}
		
		return kis_t;
	}

	public static int loadMapKISs(
			Vector map_ids,
			MapElementSeq_TransferableHolder kisseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapElement_Transferable kis_t;
		Vector vector = new Vector();
		MapElement_Transferable kis_ts[];
		MapKISIdIterator kidIt = null;

		String current_map_id = "";

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql kidIt = { select MAP_KIS_ID
					from AMFICOM.MAPKISLINKS
						where MAP_ID = :current_map_id
				};

				while (kidIt.next())
				{
					System.out.println("...loading KIS: " + kidIt.map_kis_id());
					kis_t = loadMapKIS(kidIt.map_kis_id(), images);
					kis_t.map_id = current_map_id;
					vector.add(kis_t);
				}
				kidIt.close();
				kis_ts = new MapElement_Transferable[vector.size()];
				vector.copyInto(kis_ts);
				kisseq.value = kis_ts;
			}
			catch(SQLException e)
			{
				if(kidIt != null) try {
				kidIt.close();
				}catch(Exception exe) {}
				System.out.println("error loading KISs: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
			finally
			{
				try {
					kidIt.close();
				}catch(Exception exe) {}
			}
			
		}

		return Constants.ERROR_NO_ERROR;
	}

/*
	public static int loadMapKISs(
			Vector map_ids,
			MapKISElementSeq_TransferableHolder kisseq,
			Vector images)
	{
		int count;
		int mapcount = map_ids.size();
		MapKISElement_Transferable kis_t;
		Vector vector = new Vector();
		MapKISElement_Transferable kis_ts[];
		MapKISIterator kisIt = null;

		String It_scheme_kis_element_id = "";
		String It_owner_id = "";
		String It_latitude = "";
		String It_name = "";
		String It_symbol_id = "";
		String It_type_id = "";
		String It_description = "";
		String It_longitude = "";
		String It_codename = "";
		String It_id = "";
		String It_map_id = "";
		String It_ism_map_id = "";
		String It_kis_id = "";
		String It_kis_type_id = "";
		ElementAttribute_Transferable attributes[] = new ElementAttribute_Transferable[0];

		String current_map_id = "";

		String It_e_id = "";
		String It_attribute_id = "";
		String It_attribute_type_id = "";
		String It_attribute_value = "";
		String It_attribute_name = "";
		Vector vector2 = new Vector();
		ElementAttributeIterator eaIt = null;

		String connection_point_ids[] = new String[0];
		IdIterator idIt = null;

		for(int j = 0; j < mapcount; j++)
		{
			current_map_id = (String) map_ids.get(j);
			try
			{
				#sql kisIt = { select
						SCHEME_KIS_ELEMENT_ID,
						OWNER_ID,
						LATITUDE,
						NAME,
						SYMBOL_ID,
						TYPE_ID,
						DESCRIPTION,
						LONGITUDE,
						CODENAME,
						ID,
						MAP_ID,
						ISM_MAP_ID,
						KIS_ID,
						KIS_TYPE_ID
					from AMFICOM.MAPKISELEMENTS
					where MAP_ID = :current_map_id
					};

				count = 0;
				while (kisIt.next())
				{
					count ++;

					try { It_id = kisIt.id(); }
					catch(SQLException e) { }
					if(It_id == null) It_id = "";
					try { It_scheme_kis_element_id = kisIt.scheme_kis_element_id(); }
					catch(SQLException e) { }
					if(It_scheme_kis_element_id == null) It_scheme_kis_element_id = "";
					try { It_owner_id = kisIt.owner_id(); }
					catch(SQLException e) { }
					if(It_owner_id == null) It_owner_id = "";
					try { It_latitude = kisIt.latitude(); }
					catch(SQLException e) { }
					if(It_latitude == null) It_latitude = "";
					try { It_name = kisIt.name(); }
					catch(SQLException e) { }
					if(It_name == null) It_name = "";
					try { It_symbol_id = kisIt.symbol_id(); }
					catch(SQLException e) { }
					if(It_symbol_id == null) It_symbol_id = "";
					try { It_type_id = kisIt.type_id(); }
					catch(SQLException e) { }
					if(It_type_id == null) It_type_id = "";
					try { It_description = kisIt.description(); }
					catch(SQLException e) { }
					if(It_description == null) It_description = "";
					try { It_longitude = kisIt.longitude(); }
					catch(SQLException e) { }
					if(It_longitude == null) It_longitude = "";
					try { It_codename = kisIt.codename(); }
					catch(SQLException e) { }
					if(It_codename == null) It_codename = "";
					try { It_map_id = kisIt.map_id(); }
					catch(SQLException e) { }
					if(It_map_id == null) It_map_id = "";
					try { It_ism_map_id = kisIt.ism_map_id(); }
					catch(SQLException e) { }
					if(It_ism_map_id == null) It_ism_map_id = "";
					try { It_kis_id = kisIt.kis_id(); }
					catch(SQLException e) { }
					if(It_kis_id == null) It_kis_id = "";
					try { It_kis_type_id = kisIt.kis_type_id(); }
					catch(SQLException e) { }
					if(It_kis_type_id == null) It_kis_type_id = "";

					vector2 = MapdbInterfaceLoad4.loadAttributes(
							"MAPKISELEMENTATTRIBUTES",
							"MAP_KIS_ELEMENT_ID",
							It_id);
					attributes = new ElementAttribute_Transferable[vector2.size()];
					vector2.copyInto(attributes);

					kis_t = new MapKISElement_Transferable(
							It_id,
							It_name,
							It_type_id,
							It_description,
							It_owner_id,
							It_longitude,
							It_latitude,
							It_map_id,
							It_ism_map_id,
							It_symbol_id,
							It_kis_id,
							It_kis_type_id,
							It_codename,
							It_scheme_kis_element_id,
							attributes);

					images.add(It_symbol_id);
					vector.addElement(kis_t);
				}// while(kisIt)
				kisIt.close();
				kis_ts = new MapKISElement_Transferable[vector.size()];
				vector.copyInto(kis_ts);
				kisseq.value = kis_ts;

			}
			catch(SQLException e)
			{
				System.out.println("error loading KISs: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_LOADING;
			}
		}

		return Constants.ERROR_NO_ERROR;
	}
*/
	#sql public static iterator IdIterator ( String id );
	#sql public static iterator MapElementIdIterator ( String map_element_id );
	#sql public static iterator MapMarkIdIterator ( String map_mark_id );
	#sql public static iterator MapKISIdIterator ( String map_kis_id );

	#sql public static iterator ElementAttributeIterator (
		String id,
		String attribute_id );

	#sql public static iterator MapContextIterator (
		String id,
		String name,
		String codename,
		String description,
		Timestamp created,
		String created_by,
		Timestamp modified,
		String modified_by,
		String domain_id,
		int show_nodes,
		int mouse_tolerancy,
		String zoom_factor,
		String default_zoom_factor,
		String user_id,
		String longitude,
		String latitude,
		String scheme_id);

	#sql public static iterator ISMMapContextIterator (
		String id,
		String name,
		String codename,
		String description,
		Timestamp created,
		String created_by,
		Timestamp modified,
		String modified_by,
		String domain_id,
		String owner_id,
		String map_id);

	#sql public static iterator MapKISIterator (
		String id,
		String map_element_id,
		String ism_map_id,
		String map_id);

/*
	#sql public static iterator MapKISIterator (
		String scheme_kis_element_id,
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String type_id,
		String description,
		String longitude,
		String codename,
		String id,
		String map_id,
		String ism_map_id,
		String kis_id,
		String kis_type_id);
*/
	#sql public static iterator MapElementIterator (
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String type_id,
		String description,
		String longitude,
		String kis_type_id,
		String id,
		String map_id,
		String element_id,
		String element_type_id);

	#sql public static iterator MapMarkIterator (
		String owner_id,
		String latitude,
		String name,
		String symbol_id,
		String description,
		String longitude,
		String id,
		String map_id,
		String link_id,
		String distance);
}
