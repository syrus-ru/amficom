/*
 * $Id: MapdbInterfaceSave.sqlj,v 1.1.2.3 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.ElementAttribute_Transferable;
import com.syrus.AMFICOM.CORBA.Map.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class MapdbInterfaceSave {
	private MapdbInterfaceSave() {
	}

	static int saveMaps(final Connection conn, Map_Transferable[] mapseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = mapseq.length;
		for (i = 0; i < len; i++)
		{
			String zoom_factor = String.valueOf(mapseq[i].scale);
			String default_zoom_factor = String.valueOf(mapseq[i].defaultScale);
			int show_nodes = (mapseq[i].showPhysicalNodeElement)? 1 : 0;
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.MAPCONTEXTS
						where ID = :(mapseq[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update map " + mapseq[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.MAPCONTEXTS
							set
								NAME = :(mapseq[i].name),
								CODENAME = :(mapseq[i].codename),
								DESCRIPTION = :(mapseq[i].description),
								MODIFIED = SYSDATE,
								MODIFIED_BY = :(mapseq[i].userId),
								DOMAIN_ID = :(mapseq[i].domainId),
								SHOW_NODES = :show_nodes,
								MOUSE_TOLERANCY = :(mapseq[i].mouseTolerancy),
								ZOOM_FACTOR = :zoom_factor,
								DEFAULT_ZOOM_FACTOR = :default_zoom_factor,
								USER_ID = :(mapseq[i].userId),
								LONGITUDE = :(mapseq[i].longitude),
								LATITUDE = :(mapseq[i].latitude),
								SCHEME_ID = :(mapseq[i].schemeId)
							where ID = :(mapseq[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing maps: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new map " + mapseq[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.MAPCONTEXTS(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								CREATED,
								CREATED_BY,
								MODIFIED,
								MODIFIED_BY,
								DOMAIN_ID,
								SHOW_NODES,
								MOUSE_TOLERANCY,
								ZOOM_FACTOR,
								DEFAULT_ZOOM_FACTOR,
								USER_ID,
								LONGITUDE,
								LATITUDE,
								SCHEME_ID)
							values(
								 :(mapseq[i].id),
								 :(mapseq[i].name),
								 :(mapseq[i].codename),
								 :(mapseq[i].description),
								 SYSDATE,
								 :(mapseq[i].userId),
								 SYSDATE,
								 :(mapseq[i].userId),
								 :(mapseq[i].domainId),
								 :show_nodes,
								 :(mapseq[i].mouseTolerancy),
								 :zoom_factor,
								 :default_zoom_factor,
								 :(mapseq[i].userId),
								 :(mapseq[i].longitude),
								 :(mapseq[i].latitude),
								 :(mapseq[i].schemeId) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing maps: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			try
			{
				#sql [connCtx] { delete from MAPMARKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].markIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPMARKLINKS(ID, MAP_ID, MAP_MARK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].markIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPELEMENTLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].equipmentIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPELEMENTLINKS(ID, MAP_ID, MAP_ELEMENT_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].equipmentIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPNODELINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].nodeIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPNODELINKS(ID, MAP_ID, MAP_NODE_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].nodeIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPNODELINKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].nodeLinkIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPNODELINKLINKS(ID, MAP_ID, MAP_NODE_LINK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].nodeLinkIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPLINKLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].physicalLinkIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPLINKLINKS(ID, MAP_ID, MAP_LINK_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].physicalLinkIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPKISLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].kisIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPKISLINKS(ID, MAP_ID, MAP_KIS_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].kisIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

			try
			{
				#sql [connCtx] { delete from MAPPATHSLINKS
					where MAP_ID = :(mapseq[i].id)
				};

				for (j = 0; j < mapseq[i].pathIds.length; j++)
				{
					String a_id = ResourcedbInterface.getUid(conn, "mapelementlink");
					#sql [connCtx] { insert into MAPPATHSLINKS(ID, MAP_ID, MAP_PATH_ID)
						values(:a_id, :(mapseq[i].id), :(mapseq[i].pathIds[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing map: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}

		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapElement(final Connection conn, MapElement_Transferable equipment) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int len2;
		String id = "";
		int count = 0;

		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPELEMENTS
					where ID = :(equipment.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update equipment element " + equipment.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPELEMENTS
						set
							OWNER_ID = :(equipment.owner_id),
							LATITUDE = :(equipment.latitude),
							NAME = :(equipment.name),
							SYMBOL_ID = :(equipment.symbol_id),
							TYPE_ID = :(equipment.type_id),
							DESCRIPTION = :(equipment.description),
							LONGITUDE = :(equipment.longitude),
							KIS_TYPE_ID = :(equipment.kisElementTypeId),
							ID = :(equipment.id),
							MAP_ID = :(equipment.mapId),
							ELEMENT_ID = :(equipment.element_id),
							ELEMENT_TYPE_ID = :(equipment.element_type_id)
						where ID = :(equipment.id)
				};
			}
			catch(SQLException e)
			{
				System.out.println("error saVing equipment elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("insert new equipment element " + equipment.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPELEMENTS(
							OWNER_ID,
							LATITUDE,
							NAME,
							SYMBOL_ID,
							TYPE_ID,
							DESCRIPTION,
							LONGITUDE,
							KIS_TYPE_ID,
							ID,
							MAP_ID,
							ELEMENT_ID,
							ELEMENT_TYPE_ID)
						values(
							:(equipment.owner_id),
							:(equipment.latitude),
							:(equipment.name),
							:(equipment.symbol_id),
							:(equipment.type_id),
							:(equipment.description),
							:(equipment.longitude),
							:(equipment.kisElementTypeId),
							:(equipment.id),
							:(equipment.mapId),
							:(equipment.element_id),
							:(equipment.element_type_id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing equipment elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPEQUIPMENTELEMENTATTRIBUTES", "MAP_EQUIPMENT_ELEMENT_ID", equipment.id, equipment.attributes);

		CatalogSchemeMapUpdater.mapElementUpdated(conn, equipment);

		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapElements(final Connection conn, MapElement_Transferable[] equipmentseq) throws SQLException {
		for (int i = 0; i < equipmentseq.length; i++)
			saveMapElement(conn, equipmentseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapMark(final Connection conn, MapMarkElement_Transferable mark) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count = 0;

		String dist = "";

		dist = String.valueOf(mark.distance);
		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPMARKELEMENTS
					where ID = :(mark.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update mark element " + mark.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPMARKELEMENTS
						set
							OWNER_ID = :(mark.ownerId),
							LATITUDE = :(mark.latitude),
							NAME = :(mark.name),
							SYMBOL_ID = :(mark.symbolId),
							DESCRIPTION = :(mark.description),
							LONGITUDE = :(mark.longitude),
							ID = :(mark.id),
							MAP_ID = :(mark.mapId),
							LINK_ID = :(mark.linkId),
							DISTANCE = :(dist)
						where ID = :(mark.id)
				};
			}
			catch(SQLException e)
			{
				System.out.println("error saVing marn elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("insert new mark element " + mark.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPMARKELEMENTS(
							OWNER_ID,
							LATITUDE,
							NAME,
							SYMBOL_ID,
							DESCRIPTION,
							LONGITUDE,
							ID,
							MAP_ID,
							LINK_ID,
							DISTANCE)
						values(
							:(mark.ownerId),
							:(mark.latitude),
							:(mark.name),
							:(mark.symbolId),
							:(mark.description),
							:(mark.longitude),
							:(mark.id),
							:(mark.mapId),
							:(mark.linkId),
							:dist )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing mark elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPMARKELEMENTATTRIBUTES", "MAP_MARK_ELEMENT_ID", mark.id, mark.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapMarks(final Connection conn, MapMarkElement_Transferable[] markseq) throws SQLException {
		for (int i = 0; i < markseq.length; i++)
			saveMapMark(conn, markseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapKIS(final Connection conn, MapElement_Transferable kis) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count = 0;

		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPKISELEMENTS
					where ID = :(kis.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update KIS element " + kis.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPKISELEMENTS
						set
							MAP_ELEMENT_ID = :(kis.id),
							ISM_MAP_ID = :(kis.ism_map_id),
							MAP_ID = :(kis.mapId),
							KIS_TYPE_ID = :(kis.kisElementTypeId)
						where ID = :(kis.map_kis_id)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing KIS elements: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new KIS element " + kis.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPKISELEMENTS(
							MAP_ELEMENT_ID,
							ISM_MAP_ID,
							KIS_TYPE_ID,
							MAP_ID,
							ID)
						values(
							:(kis.id),
							:(kis.ism_map_id),
							:(kis.kisElementTypeId),
							:(kis.mapId),
							:(kis.map_kis_id) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing KIS elements: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPKISELEMENTATTRIBUTES", "MAP_KIS_ELEMENT_ID", kis.id, kis.attributes);
		saveMapElement(conn, kis);
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapKISs(final Connection conn, MapElement_Transferable[] kisseq) throws SQLException {
		for (int i = 0; i < kisseq.length; i++)
			saveMapKIS(conn, kisseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapNode(final Connection conn, MapPhysicalNodeElement_Transferable node) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int count = 0;
		int active = 0;

		active = (node.active)? 1 : 0;
		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPPHYSICALNODEELEMENTS
					where ID = :(node.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update node " + node.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPPHYSICALNODEELEMENTS
						set
							SYMBOL_ID = :(node.symbolId),
							OWNER_ID = :(node.ownerId),
							MAP_ID = :(node.mapId),
							ACTIVE = :active,
							PHYSICAL_LINK_ID = :(node.physicalLinkId),
							NAME = :(node.name),
							DESCRIPTION = :(node.description),
							LONGITUDE = :(node.longitude),
							LATITUDE = :(node.latitude)
						where ID = :(node.id)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing nodes: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new node " + node.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPPHYSICALNODEELEMENTS(
							SYMBOL_ID,
							LATITUDE,
							OWNER_ID,
							DESCRIPTION,
							ID,
							MAP_ID,
							ACTIVE,
							NAME,
							PHYSICAL_LINK_ID,
							LONGITUDE)
						values(
							:(node.symbolId),
							:(node.latitude),
							:(node.ownerId),
							:(node.description),
							:(node.id),
							:(node.mapId),
							:active,
							:(node.name),
							:(node.physicalLinkId),
							:(node.longitude) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing nodes: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPPHYSICALNODEELEMENTATTRIBUT", "MAP_PHYSICAL_NODE_ELEMENT_ID", node.id, node.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapNodes(final Connection conn, MapPhysicalNodeElement_Transferable[] nodeseq) throws SQLException {
		for (int i = 0; i < nodeseq.length; i++)
			saveMapNode(conn, nodeseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapNodeLink(final Connection conn, MapNodeLinkElement_Transferable nodelink) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count = 0;

		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPNODELINKELEMENTS
					where ID = :(nodelink.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update node link " + nodelink.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPNODELINKELEMENTS
						set
							PHYSICAL_LINK_ID = :(nodelink.physicalLinkId),
							END_NODE_ID = :(nodelink.endNodeId),
							START_NODE_ID = :(nodelink.startNodeId),
							NAME = :(nodelink.name),
							OWNER_ID = :(nodelink.ownerId),
							MAP_ID = :(nodelink.mapId)
						where ID = :(nodelink.id)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing node links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new node link " + nodelink.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPNODELINKELEMENTS(
							PHYSICAL_LINK_ID,
							ID,
							END_NODE_ID,
							START_NODE_ID,
							NAME,
							OWNER_ID,
							MAP_ID)
						values(
							:(nodelink.physicalLinkId),
							:(nodelink.id),
							:(nodelink.endNodeId),
							:(nodelink.startNodeId),
							:(nodelink.name),
							:(nodelink.ownerId),
							:(nodelink.mapId) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing node links: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPNODELINKELEMENTATTRIBUTES", "MAP_NODE_LINK_ID", nodelink.id, nodelink.attributes);
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapNodeLinks(final Connection conn, MapNodeLinkElement_Transferable[] nodelinkseq) throws SQLException {
		for (int i = 0; i < nodelinkseq.length; i++)
			saveMapNodeLink(conn, nodelinkseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveMapLink(final Connection conn, MapPhysicalLinkElement_Transferable link) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int count = 0;

		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPPHYSICALLINKELEMENTS
					where ID = :(link.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update physical link " + link.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPPHYSICALLINKELEMENTS
						set
							DESCRIPTION = :(link.description),
							END_NODE_ID = :(link.endNodeId),
							START_NODE_ID = :(link.startNodeId),
							NAME = :(link.name),
							OWNER_ID = :(link.ownerId),
							TYPE_ID = :(link._typeId),
							MAP_ID = :(link.mapId),
							LINK_ID = :(link.linkId),
							LINK_TYPE_ID = :(link.linkTypeId)
						where ID = :(link.id)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error saVing physical links: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(SQLException e)
		{
			System.out.println("insert new physical link " + link.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPPHYSICALLINKELEMENTS(
							DESCRIPTION,
							ID,
							END_NODE_ID,
							START_NODE_ID,
							NAME,
							OWNER_ID,
							TYPE_ID,
							MAP_ID,
							LINK_ID,
							LINK_TYPE_ID)
						values(
							:(link.description),
							:(link.id),
							:(link.endNodeId),
							:(link.startNodeId),
							:(link.name),
							:(link.ownerId),
							:(link._typeId),
							:(link.mapId),
							:(link.linkId),
							:(link.linkTypeId) )
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing physical links: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPPHYSICALLINKELEMENTATTRIBUT", "MAP_PHYSICAL_LINK_ELEMENT_ID", link.id, link.attributes);
		CatalogSchemeMapUpdater.mapLinkUpdated(conn, link);
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapLinks(final Connection conn, MapPhysicalLinkElement_Transferable[] linkseq) throws SQLException {
		for (int i = 0; i < linkseq.length; i++)
			saveMapLink(conn, linkseq[i]);
		return Constants.ERROR_NO_ERROR;
	}

	static void saveAttributes(final Connection conn, String attrTable, String attrField, String element_id, ElementAttribute_Transferable[] attributes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int len2;
		int j;

		try
		{
			String qry = "delete from AMFICOM." + attrTable +
						" where " + attrField + " = '" + element_id + "'";
			#sql [connCtx] {
				BEGIN
					execute immediate :qry;
				END;
			};

			len2 = attributes.length;
			for(j = 0; j < len2; j++)
			{
				try
				{
					System.out.println("insert  attribute: type " + attributes[j].type_id + " value " + attributes[j].value + " for element " + element_id);
					attributes[j].id = ResourcedbInterface.getUid(conn, "attribute");
					String qry2 = "insert into AMFICOM." + attrTable +
						"(ID, ATTRIBUTE_TYPE_ID, VALUE, IS_EDITABLE, IS_VISIBLE, " +
						attrField + ") values ('" +
						attributes[j].id + "', '" +
						attributes[j].type_id + "', '" +
						attributes[j].value + "', '" +
						((attributes[j].editable)? "1" : "0") + "', '" +
						((attributes[j].visible)? "1" : "0") + "', '" +
						element_id + "')";

					#sql [connCtx] {
						BEGIN
							execute immediate :qry2;
						END;
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing attribute: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating attribute: " + exxx.getMessage());
				}
			}
		}
		catch(SQLException exx)
		{
			System.out.println("could not save attributes: " + exx.getMessage());
			exx.printStackTrace();
		}
	}

	private static int saveMapPath(final Connection conn, MapPathElement_Transferable path) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int j;
		int len2;
		int count = 0;

		try
		{
			#sql [connCtx] {
				select count(*) into :count from AMFICOM.MAPPATHELEMENTS
					where ID = :(path.id)
			};
			if(count == 0)
			{
				throw new SQLException("do insert!");
			}
			System.out.println("update path " + path.id);
			try
			{
				#sql [connCtx] {
					update AMFICOM.MAPPATHELEMENTS
						set
							DESCRIPTION = :(path.description),
							END_NODE_ID = :(path.endNodeId),
							START_NODE_ID = :(path.startNodeId),
							NAME = :(path.name),
							OWNER_ID = :(path.ownerId),
							TYPE_ID = :(path._typeId),
							MAP_ID = :(path.mapId),
							PATH_ID = :(path.pathId)
						where ID = :(path.id)
				};
				conn.commit();
			}
			catch(Exception e)
			{
				System.out.println("error saVing paths: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_UPDATING;
			}
		}
		catch(Exception e)
		{
			System.out.println("insert new path " + path.id);
			try
			{
				#sql [connCtx] {
					insert into AMFICOM.MAPPATHELEMENTS(
							DESCRIPTION,
							ID,
							END_NODE_ID,
							START_NODE_ID,
							NAME,
							OWNER_ID,
							TYPE_ID,
							MAP_ID,
							PATH_ID)
						values(
							:(path.description),
							:(path.id),
							:(path.endNodeId),
							:(path.startNodeId),
							:(path.name),
							:(path.ownerId),
							:(path._typeId),
							:(path.mapId),
							:(path.pathId) )
				};
				conn.commit();
			}
			catch(Exception ex)
			{
				System.out.println("error saVing paths: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		saveAttributes(conn, "MAPPATHELEMENTATTRIBUTES", "MAP_PATH_ELEMENT_ID", path.id, path.attributes);
		CatalogSchemeMapUpdater.mapPathUpdated(conn, path);

		len2 = path.physicalLinkIds.length;
		for(j = 0; j < len2; j++)
		{
			String pl_id;
			try
			{
				#sql [connCtx] {
					select ID into :pl_id from AMFICOM.MAPPATHLINKS
						where PATH_ID = :(path.id)
							and PHYSICAL_LINK_ID = :(path.physicalLinkIds[j])
				};
				System.out.println("update path link " + path.id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.MAPPATHLINKS
							set
								PHYSICAL_LINK_ID = :(path.physicalLinkIds[j])
							where ID = :pl_id
					};
					conn.commit();
				}
				catch(Exception exx)
				{
					System.out.println("error saVing path link: " + exx.getMessage());
					exx.printStackTrace();
				}
			}
			catch(Exception ex)
			{
				System.out.println("insert path link: " + ex.getMessage());
				try
				{
					String mpl_s = ResourcedbInterface.getUid(conn, "mappathlink");
					#sql [connCtx] {
						insert into AMFICOM.MAPPATHLINKS(
								ID,
								PATH_ID,
								PHYSICAL_LINK_ID)
							values(
								:mpl_s,
								:(path.id),
								:(path.physicalLinkIds[j]) )
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing path link: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating map path link: " + exxx.getMessage());
					exxx.printStackTrace();
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMapPaths(final Connection conn, MapPathElement_Transferable[] pathseq) throws SQLException {
		for (int i = 0; i < pathseq.length; i++)
			saveMapPath(conn, pathseq[i]);
		return Constants.ERROR_NO_ERROR;
	}
}
