/*
 * $Id: ISMDirectorydbInterfaceSave.sqlj,v 1.2 2004/06/29 07:12:58 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.Object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.ISMDirectory.*;
import com.syrus.AMFICOM.CORBA.NetworkDirectory.EquipmentType_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.SQLException;
import java.sql.Timestamp;

/**
 * @version $Revision: 1.2 $, $Date: 2004/06/29 07:12:58 $
 * @author $Author: bass $
 * @module server_v1
 */
public class ISMDirectorydbInterfaceSave
{
	protected ISMDirectorydbInterfaceSave()
	{
	}

	public static int saveAccessPortTypes(
			AccessPortType_Transferable[] aporttypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = aporttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(aporttypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.ACCESSPORTTYPES
						where ID = :(aporttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update Access port type " + aporttypes[i].id);
				try
				{
					#sql {
						update AMFICOM.ACCESSPORTTYPES
							set
								NAME = :(aporttypes[i].name),
								DESCRIPTION = :(aporttypes[i].description),
								ACCESS_TYPE = :(aporttypes[i].access_type),
								MODIFIED = :ts
							where ID = :(aporttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing Access port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new Access port type " + aporttypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.ACCESSPORTTYPES(
								ID,
								NAME,
								DESCRIPTION,
								ACCESS_TYPE,
								MODIFIED)
							values(
								 :(aporttypes[i].id),
								 :(aporttypes[i].name),
								 :(aporttypes[i].description),
								 :(aporttypes[i].access_type),
								 :ts )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing Access port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating Access port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			NetDirectorydbInterfaceSave.saveCharacteristicLinks(
					"ACCESSPORTTYPECHARACTERISTICS",
					"ACCESS_PORT_TYPE_ID",
					aporttypes[i].id,
					aporttypes[i].characteristics);
			try
			{
				#sql { delete from AMFICOM.ACCESSPORTTYPETESTTYPES
					where ACCESS_PORT_TYPE_ID = :(aporttypes[i].id)
				};

				for (j = 0; j < aporttypes[i].test_type_ids.length; j++)
				{
					String a_id = ResourcedbInterface.getUId("accessport");
					#sql { insert into AMFICOM.ACCESSPORTTYPETESTTYPES(ID, ACCESS_PORT_TYPE_ID, TEST_TYPE_ID)
						values(:a_id, :(aporttypes[i].id), :(aporttypes[i].test_type_ids[j]) )
					};
				}
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing proto: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveKISTypes(
			EquipmentType_Transferable[] kistypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = kistypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(kistypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.EQUIPMENTTYPES
						where ID = :(kistypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment type " + kistypes[i].id);
				try
				{
					#sql {
						update AMFICOM.EQUIPMENTTYPES
							set
								NAME = :(kistypes[i].name),
								CODENAME = :(kistypes[i].codename),
								DESCRIPTION = :(kistypes[i].description),
								MANUFACTURER = :(kistypes[i].manufacturer),
								EQ_CLASS = :(kistypes[i].eq_class),
								IS_HOLDER = :(kistypes[i].is_holder),
								IMAGE_ID = :(kistypes[i].image_id),
								MODIFIED = :ts
							where ID = :(kistypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment type " + kistypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.EQUIPMENTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								MANUFACTURER,
								EQ_CLASS,
								IS_HOLDER,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(kistypes[i].id),
								 :(kistypes[i].name),
								 :(kistypes[i].codename),
								 :(kistypes[i].description),
								 :(kistypes[i].manufacturer),
								 :(kistypes[i].eq_class),
								 :(kistypes[i].is_holder),
								 :(kistypes[i].image_id),
								 :ts )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			NetDirectorydbInterfaceSave.saveCharacteristicLinks(
					"EQUIPMENTTYPECHARACTERISTICLIN",
					"EQUIPMENT_TYPE_ID",
					kistypes[i].id,
					kistypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int savePathTypes(
			TransmissionPathType_Transferable[] pathtypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = pathtypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(pathtypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.PATHTYPES
						where ID = :(pathtypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update Access path type " + pathtypes[i].id);
				try
				{
					#sql {
						update AMFICOM.PATHTYPES
							set
								NAME = :(pathtypes[i].name),
								DESCRIPTION = :(pathtypes[i].description),
								MODIFIED = SYSDATE
							where ID = :(pathtypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing Access port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new Access port type " + pathtypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.PATHTYPES(
								ID,
								NAME,
								DESCRIPTION,
								MODIFIED)
							values(
								 :(pathtypes[i].id),
								 :(pathtypes[i].name),
								 :(pathtypes[i].description),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing Access port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating Access port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
/*
			NetDirectorydbInterfaceSave.saveCharacteristicLinks(
					"ACCESSPORTTYPECHARACTERISTICS",
					"ACCESS_PORT_TYPE_ID",
					pathtypes[i].id,
					pathtypes[i].characteristics);
*/
		}
		return Constants.ERROR_NO_ERROR;
	}
}
