/*
 * $Id: ISMdbInterfaceSave.sqlj,v 1.1.2.3 2004/08/25 15:24:30 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.ISM.*;
import com.syrus.AMFICOM.CORBA.Network.Equipment_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.AMFICOM.server.event.EventSource;
import java.sql.SQLException;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/08/25 15:24:30 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ISMdbInterfaceSave {
	private ISMdbInterfaceSave() {
	}

	static int saveAccessPorts(AccessPort_Transferable[] accessports) {
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = accessports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.ACCESSPORTS
						where ID = :(accessports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update accessport " + accessports[i].id);
				try
				{
					#sql {
						update AMFICOM.ACCESSPORTS
							set
								NAME = :(accessports[i].name),
								TYPE_ID = :(accessports[i].type_id),
								PORT_ID = :(accessports[i].port_id),
								KIS_ID = :(accessports[i].KIS_id),
								LOCAL_ID = :(accessports[i].local_id),
								DOMAIN_ID = :(accessports[i].domain_id)
							where ID = :(accessports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing accessport: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new accessport " + accessports[i].id);
				try
				{
					#sql {
						insert into AMFICOM.ACCESSPORTS(
								ID,
								NAME,
								TYPE_ID,
								PORT_ID,
								KIS_ID,
								LOCAL_ID,
								DOMAIN_ID)
							values(
								 :(accessports[i].id),
								 :(accessports[i].name),
								 :(accessports[i].type_id),
								 :(accessports[i].port_id),
								 :(accessports[i].KIS_id),
								 :(accessports[i].local_id),
								 :(accessports[i].domain_id) )
					};

					String at_s = ResourcedbInterface.getUId("accessport");
					#sql {
						insert into AMFICOM.KISACCESSPORTS(
								ID,
								KIS_ID,
								ACCESS_PORT_ID)
							values(
								:at_s,
								:(accessports[i].KIS_id),
								:(accessports[i].id) )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing accessport: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating accessport: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			NetdbInterfaceSave.saveCharacteristics(
					"ACCESSPORTCHARACTERISTICS",
					"ACCESS_PORT_ID",
					accessports[i].id,
					accessports[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveKISs(Equipment_Transferable[] kiss) {
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = kiss.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.EQUIPMENTS
						where ID = :(kiss[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment " + kiss[i].id);
				try
				{
					#sql {
						update AMFICOM.EQUIPMENTS
							set
								NAME = :(kiss[i].name),
								DESCRIPTION = :(kiss[i].description),
								TYPE_ID = :(kiss[i].type_id),
								LONGITUDE = :(kiss[i].longitude),
								LATITUDE = :(kiss[i].latitude),
								HW_SERIAL = :(kiss[i].hw_serial),
								SW_SERIAL = :(kiss[i].sw_serial),
								HW_VERSION = :(kiss[i].hw_version),
								SW_VERSION = :(kiss[i].sw_version),
								INVENTORY_NR = :(kiss[i].inventory_nr),
								MANUFACTURER = :(kiss[i].manufacturer),
								MANUFACTURER_CODE = :(kiss[i].manufacturer_code),
								SUPPLIER = :(kiss[i].supplier),
								SUPPLIER_CODE = :(kiss[i].supplier_code),
								EQ_CLASS = :(kiss[i].eq_class),
								IMAGE_ID = :(kiss[i].image_id),
								IS_KIS = :(kiss[i].is_kis),
								AGENT_ID = :(kiss[i].agent_id),
								DOMAIN_ID = :(kiss[i].domain_id),
								MODIFIED = SYSDATE
							where ID = :(kiss[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment " + kiss[i].id);
				try
				{
					#sql {
						insert into AMFICOM.EQUIPMENTS(
								ID,
								NAME,
								DESCRIPTION,
								TYPE_ID,
								LONGITUDE,
								LATITUDE,
								HW_SERIAL,
								SW_SERIAL,
								HW_VERSION,
								SW_VERSION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								EQ_CLASS,
								IMAGE_ID,
								IS_KIS,
								AGENT_ID,
								DOMAIN_ID,
								MODIFIED)
							values(
								 :(kiss[i].id),
								 :(kiss[i].name),
								 :(kiss[i].description),
								 :(kiss[i].type_id),

								 :(kiss[i].longitude),
								 :(kiss[i].latitude),
								 :(kiss[i].hw_serial),
								 :(kiss[i].sw_serial),
								 :(kiss[i].hw_version),
								 :(kiss[i].sw_version),

								 :(kiss[i].inventory_nr),
								 :(kiss[i].manufacturer),
								 :(kiss[i].manufacturer_code),
								 :(kiss[i].supplier),
								 :(kiss[i].supplier_code),

								 :(kiss[i].eq_class),
								 :(kiss[i].image_id),
								 :(kiss[i].is_kis),
								 :(kiss[i].agent_id),
								 :(kiss[i].domain_id),
								 SYSDATE )
					};
					#sql { commit };

					EventSource es = new EventSource("KISsource", kiss[i].id, kiss[i].id);
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			NetdbInterfaceSave.saveCharacteristics(
					"EQUIPMENTCHARACTERISTICS",
					"EQUIPMENT_ID",
					kiss[i].id,
					kiss[i].characteristics);

			CatalogSchemeMapUpdater.equipmentUpdated(kiss[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveTransmissionPaths(TransmissionPath_Transferable[] paths) {
		int i;
		int j;
		int len;
		int len2;
		int count = 0;

		String id = "";
		len = paths.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.TRANSMISSIONPATHS
						where ID = :(paths[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update path " + paths[i].id);
				try
				{
					#sql {
						update AMFICOM.TRANSMISSIONPATHS
							set
								NAME = :(paths[i].name),
								DESCRIPTION = :(paths[i].description),
								KIS_ID = :(paths[i].KIS_id),
								DOMAIN_ID = :(paths[i].domain_id),
								MODIFIED = SYSDATE
							where ID = :(paths[i].id)
					};

					try
					{
						#sql {
							update AMFICOM.MONITOREDELEMENTATTACHMENTS
								set ACCESS_PORT_ID = :(paths[i].access_port_id)
								where MONITORED_ELEMENT_ID = :(paths[i].monitored_element_id)
						};
					}
					catch(SQLException e)
					{
						System.out.println("me attachment not saved: " + e.getMessage());
					}

					System.out.println("update ME " + paths[i].monitored_element_id + " set local addr = " + paths[i].local_address);
					#sql {
						update AMFICOM.MONITOREDELEMENTS
							set
								MODIFIED = SYSDATE,
								LOCAL_ADDRESS = :(paths[i].local_address)
							where ID = :(paths[i].monitored_element_id)
					};

				}
				catch(SQLException e)
				{
					System.out.println("error saVing path: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new path " + paths[i].id);
				try
				{
					#sql {
						insert into AMFICOM.TRANSMISSIONPATHS(
								ID,
								NAME,
								DESCRIPTION,
								KIS_ID,
								MODIFIED,
								DOMAIN_ID)
							values(
								 :(paths[i].id),
								 :(paths[i].name),
								 :(paths[i].description),
								 :(paths[i].KIS_id),
								 SYSDATE,
								 :(paths[i].domain_id) )
					};

					String id_v = ResourcedbInterface.getUId("monitoredelement");
					#sql {
						insert into AMFICOM.MONITOREDELEMENTS(
								ID,
								PATH_ID,
								LOCAL_ADDRESS,
								ELEMENT_TYPE,
								MODIFIED,
								DOMAIN_ID)
							values(
								 :id_v,
								 :(paths[i].id),
								 :(paths[i].local_address),
								 'path',
								 SYSDATE,
								 :(paths[i].domain_id) )
					};
					#sql { commit };

					try
					{
						String id_v2 = ResourcedbInterface.getUId("monitoredelementattachment");
						#sql {
							insert into AMFICOM.MONITOREDELEMENTATTACHMENTS(
									ID,
									MONITORED_ELEMENT_ID,
									ACCESS_PORT_ID)
								values(
									 :id_v2,
									 :id_v,
									 :(paths[i].access_port_id) )
						};
						#sql { commit };
					}
					catch(SQLException ex)
					{
						System.out.println("me attachment not saved: " + ex.getMessage());
					}

				}
				catch(SQLException ex)
				{
					System.out.println("error saVing path: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating path link: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}

			try
			{
				#sql {
					delete from AMFICOM.PATHLINKS
						where PATH_ID = :(paths[i].id)
				};

				len2 = paths[i].links.length;
				for(j = 0; j < len2; j++)
				{
					int is_cable = (paths[i].links[j].is_cable)? 1 : 0;
					String at_s = ResourcedbInterface.getUId("pathlink");
					#sql {
						insert into AMFICOM.PATHLINKS(
								ID,
								PATH_ID,
								N,
								IS_CABLE,
								LINK_ID,
								THREAD_ID)
							values(
								:at_s,
								:(paths[i].id),
								:(paths[i].links[j].n),
								:is_cable,
								:(paths[i].links[j].link_id),
								:(paths[i].links[j].thread_id) )
					};
					#sql { commit };
				}
			}
			catch(Exception exx)
			{
				System.out.println("error generating path link: " + exx.getMessage());
				return Constants.ERROR_SAVING;
			}

			NetdbInterfaceSave.saveCharacteristics(
					"TRANSMISSIONPATHCHARS",
					"PATH_ID",
					paths[i].id,
					paths[i].characteristics);

			CatalogSchemeMapUpdater.pathUpdated(paths[i]);
		}
		return Constants.ERROR_NO_ERROR;

	}

	static int saveMonitoredElements(MonitoredElement_Transferable[] mes) {
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = mes.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.MONITOREDELEMENTS
						where ID = :(mes[i].id)
				};
				if(count != 0)
				{
				System.out.println("ME не существует!!!");
					return Constants.ERROR_SAVING;
				}
				System.out.println("update me " + mes[i].id);

				#sql {
					update AMFICOM.MONITOREDELEMENTS
						set
							LOCAL_ADDRESS = :(mes[i].local_address),
							DOMAIN_ID = :(mes[i].domain_id)
						where ID = :(mes[i].id)
				};

				try
				{
					#sql {
						update AMFICOM.MONITOREDELEMENTATTACHMENTS
							set ACCESS_PORT_ID = :(mes[i].access_port_id)
							where MONITORED_ELEMENT_ID = :(mes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("me attachment not saved: " + e.getMessage());
				}


				#sql { commit };
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing ME: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}
