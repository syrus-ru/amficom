/*
 * $Id: ISMdbInterfaceSave.sqlj,v 1.1.2.5 2004/10/18 15:31:41 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.ISM.*;
import com.syrus.AMFICOM.CORBA.Network.Equipment_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.AMFICOM.server.event.EventSource;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:41 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ISMdbInterfaceSave {
	private ISMdbInterfaceSave() {
	}

	static int saveAccessPorts(final Connection conn, MeasurementPort_Transferable[] accessports) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = accessports.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.ACCESSPORTS
						where ID = :(accessports[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update accessport " + accessports[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.ACCESSPORTS
							set
								NAME = :(accessports[i].name),
								TYPE_ID = :(accessports[i]._typeId),
								PORT_ID = :(accessports[i].portId),
								KIS_ID = :(accessports[i].kisId),
								LOCAL_ID = :(accessports[i].localId),
								DOMAIN_ID = :(accessports[i].domainId)
							where ID = :(accessports[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing accessport: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new accessport " + accessports[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.ACCESSPORTS(
								ID,
								NAME,
								TYPE_ID,
								PORT_ID,
								KIS_ID,
								LOCAL_ID,
								DOMAIN_ID)
							values(
								 :(accessports[i].id),
								 :(accessports[i].name),
								 :(accessports[i]._typeId),
								 :(accessports[i].portId),
								 :(accessports[i].kisId),
								 :(accessports[i].localId),
								 :(accessports[i].domainId) )
					};

					String at_s = ResourcedbInterface.getUid(conn, "accessport");
					#sql [connCtx] {
						insert into AMFICOM.KISACCESSPORTS(
								ID,
								KIS_ID,
								ACCESS_PORT_ID)
							values(
								:at_s,
								:(accessports[i].kisId),
								:(accessports[i].id) )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing accessport: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating accessport: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			NetdbInterfaceSave.saveCharacteristics(conn, "ACCESSPORTCHARACTERISTICS", "ACCESS_PORT_ID", accessports[i].id, accessports[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveKISs(final Connection conn, Equipment_Transferable[] kiss) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = kiss.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.EQUIPMENTS
						where ID = :(kiss[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment " + kiss[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTS
							set
								NAME = :(kiss[i].name),
								DESCRIPTION = :(kiss[i].description),
								TYPE_ID = :(kiss[i]._typeId),
								LONGITUDE = :(kiss[i].longitude),
								LATITUDE = :(kiss[i].latitude),
								HW_SERIAL = :(kiss[i].hwSerial),
								SW_SERIAL = :(kiss[i].swSerial),
								HW_VERSION = :(kiss[i].hwVersion),
								SW_VERSION = :(kiss[i].swVersion),
								INVENTORY_NR = :(kiss[i].inventoryNr),
								MANUFACTURER = :(kiss[i].manufacturer),
								MANUFACTURER_CODE = :(kiss[i].manufacturerCode),
								SUPPLIER = :(kiss[i].supplier),
								SUPPLIER_CODE = :(kiss[i].supplierCode),
								EQ_CLASS = :(kiss[i].eqClass),
								IMAGE_ID = :(kiss[i].imageId),
								IS_KIS = :(kiss[i].is_kis),
								AGENT_ID = :(kiss[i].agentId),
								DOMAIN_ID = :(kiss[i].domainId),
								MODIFIED = SYSDATE
							where ID = :(kiss[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment " + kiss[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.EQUIPMENTS(
								ID,
								NAME,
								DESCRIPTION,
								TYPE_ID,
								LONGITUDE,
								LATITUDE,
								HW_SERIAL,
								SW_SERIAL,
								HW_VERSION,
								SW_VERSION,
								INVENTORY_NR,
								MANUFACTURER,
								MANUFACTURER_CODE,
								SUPPLIER,
								SUPPLIER_CODE,
								EQ_CLASS,
								IMAGE_ID,
								IS_KIS,
								AGENT_ID,
								DOMAIN_ID,
								MODIFIED)
							values(
								 :(kiss[i].id),
								 :(kiss[i].name),
								 :(kiss[i].description),
								 :(kiss[i]._typeId),

								 :(kiss[i].longitude),
								 :(kiss[i].latitude),
								 :(kiss[i].hwSerial),
								 :(kiss[i].swSerial),
								 :(kiss[i].hwVersion),
								 :(kiss[i].swVersion),

								 :(kiss[i].inventoryNr),
								 :(kiss[i].manufacturer),
								 :(kiss[i].manufacturerCode),
								 :(kiss[i].supplier),
								 :(kiss[i].supplierCode),

								 :(kiss[i].eqClass),
								 :(kiss[i].imageId),
								 :(kiss[i].is_kis),
								 :(kiss[i].agentId),
								 :(kiss[i].domainId),
								 SYSDATE )
					};
					conn.commit();

					EventSource es = new EventSource("KISsource", kiss[i].id, kiss[i].id);
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			NetdbInterfaceSave.saveCharacteristics(conn, "EQUIPMENTCHARACTERISTICS", "EQUIPMENT_ID", kiss[i].id, kiss[i].characteristics);

			CatalogSchemeMapUpdater.equipmentUpdated(conn, kiss[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveTransmissionPaths(final Connection conn, TransmissionPath_Transferable[] paths) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		for (int i = 0; i < paths.length; i++) {
			try {
				int count;
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.TRANSMISSIONPATHS
						where ID = :(paths[i].id)
				};
				if (count == 0)
					throw new SQLException("do insert!");
				try {
					#sql [connCtx] {
						update AMFICOM.TRANSMISSIONPATHS
							set
								NAME = :(paths[i].name),
								DESCRIPTION = :(paths[i].description),
								KIS_ID = :(paths[i].KIS_id),
								DOMAIN_ID = :(paths[i].domainId),
								MODIFIED = SYSDATE
							where ID = :(paths[i].id)
					};
					#sql [connCtx] {
						update AMFICOM.MONITOREDELEMENTATTACHMENTS
							set ACCESS_PORT_ID = :(paths[i].measurementPortId)
							where MONITORED_ELEMENT_ID = :(paths[i].monitored_element_id)
					};
					#sql [connCtx] {
						update AMFICOM.MONITOREDELEMENTS
							set
								MODIFIED = SYSDATE,
								LOCAL_ADDRESS = :(paths[i].local_address)
							where ID = :(paths[i].monitored_element_id)
					};

				} catch (SQLException sqle) {
					sqle.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
			} catch (SQLException sqle) {
				#sql [connCtx] {
					insert into AMFICOM.TRANSMISSIONPATHS(
							ID,
							NAME,
							DESCRIPTION,
							KIS_ID,
							MODIFIED,
							DOMAIN_ID)
						values(
							 :(paths[i].id),
							 :(paths[i].name),
							 :(paths[i].description),
							 :(paths[i].KIS_id),
							 SYSDATE,
							 :(paths[i].domainId) )
				};
				String id_v = ResourcedbInterface.getUid(conn, "monitoredelement");
				#sql [connCtx] {
					insert into AMFICOM.MONITOREDELEMENTS(
							ID,
							PATH_ID,
							LOCAL_ADDRESS,
							ELEMENT_TYPE,
							MODIFIED,
							DOMAIN_ID)
						values(
							 :id_v,
							 :(paths[i].id),
							 :(paths[i].local_address),
							 'path',
							 SYSDATE,
							 :(paths[i].domainId) )
				};
				#sql [connCtx] {
					insert into AMFICOM.MONITOREDELEMENTATTACHMENTS(
							ID,
							MONITORED_ELEMENT_ID,
							ACCESS_PORT_ID)
						values(
							 :(ResourcedbInterface.getUid(conn, "monitoredelementattachment")),
							 :id_v,
							 :(paths[i].measurementPortId) )
				};
			}
			#sql [connCtx] {
				delete from AMFICOM.PATHLINKS where PATH_ID = :(paths[i].id)
			};
			conn.commit();
			NetdbInterfaceSave.saveCharacteristics(conn, "TRANSMISSIONPATHCHARS", "PATH_ID", paths[i].id, paths[i].characteristics);
			CatalogSchemeMapUpdater.pathUpdated(conn, paths[i]);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveMonitoredElements(final Connection conn, MonitoredElement_Transferable[] mes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = mes.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.MONITOREDELEMENTS
						where ID = :(mes[i].id)
				};
				if(count != 0)
				{
				System.out.println("ME не существует!!!");
					return Constants.ERROR_SAVING;
				}
				System.out.println("update me " + mes[i].id);

				#sql [connCtx] {
					update AMFICOM.MONITOREDELEMENTS
						set
							LOCAL_ADDRESS = :(mes[i].localAddress),
							DOMAIN_ID = :(mes[i].domainId)
						where ID = :(mes[i].id)
				};

				try
				{
					#sql [connCtx] {
						update AMFICOM.MONITOREDELEMENTATTACHMENTS
							set ACCESS_PORT_ID = :(mes[i].measurementPortId)
							where MONITORED_ELEMENT_ID = :(mes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("me attachment not saved: " + e.getMessage());
				}
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("error saVing ME: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}
