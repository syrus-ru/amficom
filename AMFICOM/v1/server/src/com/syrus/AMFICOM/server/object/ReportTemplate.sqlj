/*
 * $Id: ReportTemplate.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.General.AMFICOMRemoteException;
import com.syrus.AMFICOM.CORBA.Report.*;
import com.syrus.AMFICOM.CORBA.Resource.Filter_Transferable;
import java.sql.*;
import java.util.Vector;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ReportTemplate {
	private String id;
	private String name;
	private String description;
	private long modified;
	private String template_type;

	private RenderingObject[] ros;
	private FirmedTextPane[] boxes;
	private ImagePane[] images;
	private FilterTemplate[] filters;  

	ReportTemplate(final Connection conn, ReportTemplate_Transferable rt) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		this.id = rt.id;
		this.name = rt.name;
		this.description = rt.description;
		this.template_type = rt.template_type;
		this.modified = System.currentTimeMillis();
		Timestamp mod = new Timestamp(this.modified);

		try 
		{
			#sql [connCtx]{ insert into REPORTTEMPLATES (
					ID, 
					NAME, 
					MODIFIED, 
					DESCRIPTION,
					TEMPLATE_TYPE)
				values(
					:(this.id), 
					:(this.name), 
					:mod, 
					:(this.description),
					:(this.template_type))
			};
			conn.commit();
		} 
		catch (SQLException ex) 
		{
			System.out.println("error saving new report template: " + ex.getMessage());
			ex.printStackTrace();
			throw ex;
		} 

		int len = rt.renderingObjects.length;
		this.ros = new RenderingObject[len];
		for(int i = 0; i < len; i++)
			ros[i] = new RenderingObject(conn, rt.renderingObjects[i], this.id);

		int len2 = rt.firmedTextPanes.length;
		this.boxes = new FirmedTextPane[len2];
		for(int i = 0; i < len2; i++)
			boxes[i] = new FirmedTextPane(conn, rt.firmedTextPanes[i], this.id);
      
		int len3 = rt.imagePanes.length;
		this.images = new ImagePane[len3];
		for(int i = 0; i < len3; i++)
			images[i] = new ImagePane(conn, rt.imagePanes[i], this.id);
      
		int len4 = rt.filters.length;
		this.filters = new FilterTemplate[len4];
		for(int i = 0; i < len4; i++)
    {
			filters[i] = new FilterTemplate(conn, rt.filters[i]);
      try 
      {
	#sql [connCtx]{ insert into REPORTTEMPLATEFILTERS (
	    REPORT_TEMPLATE_ID, 
	    FILTER_ID)
	  values(
	    :(this.id), 
	    :(filters[i].getId()))
	};
	conn.commit();
      } 
      catch (SQLException ex) 
      {
	System.out.println("error saving new report template: " + ex.getMessage());
	ex.printStackTrace();
	throw ex;
			}
		}
	}

	ReportTemplate(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		ReportTemplateIterator rtIt = null;

		try
		{
			#sql [connCtx] rtIt = { select
					ID,
					NAME,
					MODIFIED,
					DESCRIPTION,
					TEMPLATE_TYPE
				from AMFICOM.REPORTTEMPLATES
				where ID = :id
			};

			if(!rtIt.next())
				throw new SQLException("Report template not found in database");

			try { this.id = rtIt.id(); }
			catch(SQLException e) { }
			if(this.id == null) this.id = "";
			try { this.name = rtIt.name(); }
			catch(SQLException e) { }
			if(this.name == null) this.name = "";
			try { this.description = rtIt.description(); }
			catch(SQLException e) { }
			if(this.description == null) this.description = "";
			try { this.modified = rtIt.modified().getTime(); }
			catch(SQLException e) { }
			try { this.template_type = rtIt.template_type(); }
			catch(SQLException e) { }
			if(this.template_type == null) this.template_type = "";

			rtIt.close();

			ros = RenderingObject.retrieveRenderingObjects(conn, this.id);
			boxes = FirmedTextPane.retrieveBoxes(conn, this.id);
			images = ImagePane.retrieveImages(conn, this.id);
			
			filters = getFilters(conn);

		}
		catch(SQLException e)
		{
			rtIt.close();
			System.out.println("error loading report template: " + e.getMessage());
			e.printStackTrace();
			throw e;
		}
	}

	private FilterTemplate[] getFilters(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			ReportFilterIterator rfIt = null;
				
			#sql [connCtx] rfIt = { select
					REPORT_TEMPLATE_ID,
					FILTER_ID
				from AMFICOM.REPORTTEMPLATEFILTERS
				where REPORT_TEMPLATE_ID = :id
			};
	
			Vector rep_filters = new Vector();
			while(rfIt.next()) {
				FilterTemplate ft = new FilterTemplate(conn, rfIt.filter_id());
				rep_filters.add(ft);
			}
			return (FilterTemplate[] )rep_filters.toArray(new FilterTemplate[0]);
		}
		catch(SQLException e)
		{
			System.out.println("Cannot load filter s for reporttemplate " + this.id);
		}
		return new FilterTemplate[0];
	}

	ReportTemplate_Transferable getTransferable() throws SQLException {
		RenderingObject_Transferable[] ros_t = new RenderingObject_Transferable[this.ros.length];
		for (int i = 0; i < ros.length; i++)
			ros_t[i] = this.ros[i].getTransferable();

		FirmedTextPane_Transferable[] boxes_t = new FirmedTextPane_Transferable[this.boxes.length];
		for (int i = 0; i < boxes.length; i++)
			boxes_t[i] = this.boxes[i].getTransferable();

		ImagePane_Transferable[] images_t = new ImagePane_Transferable[this.images.length];
		for (int i = 0; i < images.length; i++)
			images_t[i] = this.images[i].getTransferable();

		Filter_Transferable[] filters_t = new Filter_Transferable[this.filters.length];
		for (int i = 0; i < filters.length; i++)
			filters_t[i] = this.filters[i].getTransferable();

		return new ReportTemplate_Transferable(
			this.id,
			this.name,
			this.modified,
			this.description,
			this.template_type,
			ros_t,
			boxes_t,
			images_t,
			filters_t);
	}

	String getId() {
		return this.id;
	}
	
	void delete(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		#sql [connCtx] { delete from AMFICOM.REPORTTEMPLATEFIELDS
			where REPORT_TEMPLATE_ID = :(this.id)
		};
		#sql [connCtx] { delete from AMFICOM.REPORTTEMPLATEBOXES
			where REPORT_TEMPLATE_ID = :(this.id)
		};
		#sql [connCtx] { delete from AMFICOM.REPORTIMAGEPANES
			where REPORT_TEMPLATE_ID = :(this.id)
		};

		removeFilters(conn);
  
		#sql [connCtx] { delete from AMFICOM.REPORTTEMPLATES
			where ID = :(this.id)
		};
		conn.commit();
	}

	private void removeFilters(final Connection conn) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			ReportFilterIterator rfIt = null;
			#sql [connCtx] rfIt = { select
					REPORT_TEMPLATE_ID,
					FILTER_ID
				from AMFICOM.REPORTTEMPLATEFILTERS
				where REPORT_TEMPLATE_ID = :id
			};
			while(rfIt.next())
			{
				#sql [connCtx] { delete from AMFICOM.FILTERS
					where ID = :(rfIt.filter_id())
				};
			}
			#sql [connCtx] { delete from AMFICOM.REPORTTEMPLATEFILTERS
				where REPORT_TEMPLATE_ID = :(this.id)
			};
		}
		catch(SQLException e)
		{
		}
	}

	void update(final Connection conn, ReportTemplate_Transferable rt) throws SQLException, AMFICOMRemoteException {
		DefaultContext connCtx = new DefaultContext(conn);

		if(!this.id.equals(rt.id))
			return;
		this.name = rt.name;
		this.description = rt.description;
		this.template_type = rt.template_type;
		this.modified = System.currentTimeMillis();
		Timestamp mod = new Timestamp(this.modified);
		#sql [connCtx] {
			update REPORTTEMPLATES set NAME = :(this.name), MODIFIED = :mod, DESCRIPTION = :(this.description), TEMPLATE_TYPE = :(this.template_type) where ID =:(this.id)
		};
		conn.commit();
		this.setReportTemplateFields(conn, rt.renderingObjects);
		this.setReportTemplateBoxes(conn, rt.firmedTextPanes);
		this.setReportTemplateImages(conn, rt.imagePanes);    
		this.setReportTemplateFilters(conn, rt.filters);    
	}

	void setReportTemplateFields(final Connection conn, RenderingObject_Transferable[] renderingObjects) throws SQLException, AMFICOMRemoteException {
		int len = renderingObjects.length;
		this.ros = new RenderingObject[len];
		for(int i = 0; i < len; i++)
		{
			try
			{
				ros[i] = new RenderingObject(conn, renderingObjects[i].roID);
				ros[i].update(conn, renderingObjects[i]);
			}
			catch(SQLException e)
			{
				ros[i] = new RenderingObject(conn, renderingObjects[i], this.id);
			}
		}
	}

	void setReportTemplateBoxes(final Connection conn, FirmedTextPane_Transferable[] firmedTextPanes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int len = firmedTextPanes.length;
		this.boxes = new FirmedTextPane[len];

		#sql [connCtx]{ delete from AMFICOM.REPORTTEMPLATEBOXES
			where REPORT_TEMPLATE_ID =:(this.id)
		};
		conn.commit();

		for(int i = 0; i < len; i++)
			boxes[i] = new FirmedTextPane(conn, firmedTextPanes[i], this.id);
	}

	private void setReportTemplateImages(final Connection conn, ImagePane_Transferable[] imagePanes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int len = imagePanes.length;
		this.images = new ImagePane[len];

		#sql [connCtx]{ delete from AMFICOM.REPORTIMAGEPANES
			where REPORT_TEMPLATE_ID =:(this.id)
		};
		conn.commit();

		for(int i = 0; i < len; i++)
			images[i] = new ImagePane(conn, imagePanes[i], this.id);
	}

	private void setReportTemplateFilters(final Connection conn, Filter_Transferable[] new_filters) throws SQLException {
		int len = new_filters.length;
		this.filters = new FilterTemplate[len];

		removeFilters(conn);

		for(int i = 0; i < len; i++)
			filters[i] = new FilterTemplate(conn, new_filters[i]);
	}

	#sql public static iterator ReportTemplateIterator(
		String id,
		String name,
		Timestamp modified,
		String description,
		String template_type);

	#sql public static iterator ReportFilterIterator(
		String report_template_id,
		String filter_id);
}
