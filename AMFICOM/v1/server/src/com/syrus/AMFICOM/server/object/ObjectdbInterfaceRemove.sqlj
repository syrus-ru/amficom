/*
 * $Id: ObjectdbInterfaceRemove.sqlj,v 1.1.2.4 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.4 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ObjectdbInterfaceRemove {
	private ObjectdbInterfaceRemove() {
	}

	private static int removeObjectPermissions(final Connection conn, String id) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			#sql [connCtx] { delete from AMFICOM.OBJECTPERMISSIONCATEGORIES
				where OBJECT_PERMISSION_ID = :id };
			#sql [connCtx] { delete from AMFICOM.OBJECTPERMISSIONGROUPS
				where OBJECT_PERMISSION_ID = :id };
				#sql [connCtx] { delete from AMFICOM.OBJECTPERMISSIONS
				where ID = :id };
				conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("Error deleting object permission: " + e.getMessage());
			e.printStackTrace();
			return Constants.ERROR_DELETING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeDomains(final Connection conn, String[] domainseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		String opi;
		for(i = domainseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.DOMAINLINKS
					where DOMAIN_ID = :(domainseq[i]) };

				#sql [connCtx] { delete from AMFICOM.DOMAINLINKS
					where INNER_DOMAIN_ID = :(domainseq[i]) };

				try
				{
					#sql [connCtx] { select OBJECT_PERMISSION_ID into :opi
						from AMFICOM.DOMAINS
						where ID = :(domainseq[i]) };
					removeObjectPermissions(conn, opi);
				}
				catch(Exception exx)
				{
				}

				#sql [connCtx] { delete from AMFICOM.DOMAINS
					where ID = :(domainseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting domain: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeCategories(final Connection conn, String[] categoryseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = categoryseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.USERCATEGORIES
					where CATEGORY_ID = :(categoryseq[i]) };

				#sql [connCtx] { delete from AMFICOM.EXECCATEGORIES
					where CATEGORY_ID = :(categoryseq[i]) };

				#sql [connCtx] { delete from AMFICOM.CATEGORIES
					where ID = :(categoryseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting category: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeGroups(final Connection conn, String[] groupseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = groupseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.USERGROUPS
					where GROUP_ID = :(groupseq[i]) };
				#sql [connCtx] { delete from AMFICOM.EXECGROUPS
					where GROUP_ID = :(groupseq[i]) };

				#sql [connCtx] { delete from AMFICOM.GROUPS
					where ID = :(groupseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting group: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeProfiles(final Connection conn, String[] profileseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = profileseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.OPERATORPROFILES
					where ID = :(profileseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting profile: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeExecs(final Connection conn, String[] execseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = execseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.EXECCATEGORIES
					where EXEC_ID = :(execseq[i]) };
				#sql [connCtx] { delete from AMFICOM.EXECGROUPS
					where EXEC_ID = :(execseq[i]) };

				#sql [connCtx] { delete from AMFICOM.EXECS
					where ID = :(execseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting exec: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int removeUsers(final Connection conn, String[] userseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		for(i = userseq.length - 1; i >= 0; i--)
		{
			try
			{
				#sql [connCtx] { delete from AMFICOM.USERCATEGORIES
					where USER_ID = :(userseq[i]) };
				#sql [connCtx] { delete from AMFICOM.USERGROUPS
					where USER_ID = :(userseq[i]) };

				#sql [connCtx] { delete from AMFICOM.USERS
					where ID = :(userseq[i]) };

				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("Error deleting user: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_DELETING;
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}
