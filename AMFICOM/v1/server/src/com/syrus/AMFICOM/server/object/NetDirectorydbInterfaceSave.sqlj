/*
 * $Id: NetDirectorydbInterfaceSave.sqlj,v 1.1.2.5 2004/10/18 15:31:42 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.*;
import com.syrus.AMFICOM.CORBA.NetworkDirectory.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.5 $, $Date: 2004/10/18 15:31:42 $
 * @author $Author: bass $
 * @module server_v1
 */
final class NetDirectorydbInterfaceSave {
	private NetDirectorydbInterfaceSave() {
	}

	static void saveCharacteristicLinks(final Connection conn, String charLinkTable, String charLinkField, String element_id, Characteristic_Transferable[] characteristics) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int len2;
		int j;

		try
		{
			String qry = "delete from AMFICOM." + charLinkTable +
						" where " + charLinkField + " = '" + element_id + "'";
			#sql [connCtx] {
				BEGIN
					execute immediate :qry;
				END;
			};

			len2 = characteristics.length;
			for(j = 0; j < len2; j++)
			{
				try
				{
					System.out.println("insert type characteristic: " + characteristics[j].id + " type " + characteristics[j].type_id + " value " + characteristics[j].value + " for element " + element_id);

					characteristics[j].id = ResourcedbInterface.getUid(conn, "characteristic");
					String qry2 = "insert into AMFICOM." + charLinkTable +
						"(ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE, " +
						charLinkField + ") values ('" +
						characteristics[j].id + "', '" +
						characteristics[j].type_id + "', '" +
						characteristics[j].value + "', '" +
						element_id + "')";


					#sql [connCtx] {
						BEGIN
							execute immediate :qry2;
						END;
					};

					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing type characteristic: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating type characteristic: " + exxx.getMessage());
				}
			}
		}
		catch(SQLException exx)
		{
			System.out.println("could not save type characteristic: " + exx.getMessage());
			exx.printStackTrace();
		}
	}

	static int saveCharacteristicTypes(final Connection conn, CharacteristicType_Transferable[] characteristictypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int count;
		int len2;
		int j;

		len2 = characteristictypes.length;
		for(j = 0; j < len2; j++)
		{
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CHARACTERISTICTYPES
						where ID = :(characteristictypes[j].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				try
				{
					#sql [connCtx] {
						update AMFICOM.CHARACTERISTICTYPES
							set
								NAME = :(characteristictypes[j].name),
								VALUE_TYPE_ID = :(characteristictypes[j].value_type_id),
								CH_CLASS = :(characteristictypes[j].ch_class),
								IS_EDITABLE = :(characteristictypes[j].editable),
								IS_VISIBLE = :(characteristictypes[j].visible),
								MODIFIED = SYSDATE
							where ID = :(characteristictypes[j].id)
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing characteristic type: " + exx.getMessage());
					exx.printStackTrace();
				}
			}
			catch(SQLException ex)
			{
				System.out.println("insert new characteristic type: " + characteristictypes[j].id + " value type " + characteristictypes[j].value_type_id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.CHARACTERISTICTYPES(
								ID,
								VALUE_TYPE_ID,
								NAME,
								CH_CLASS,
								IS_EDITABLE,
								IS_VISIBLE,
								MODIFIED)
							values(
								:(characteristictypes[j].id),
								:(characteristictypes[j].value_type_id),
								:(characteristictypes[j].name),
								:(characteristictypes[j].ch_class),
								:(characteristictypes[j].editable),
								:(characteristictypes[j].visible),
								SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing new characteristic type: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating new characteristic type: " + exxx.getMessage());
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int savePortTypes(final Connection conn, PortType_Transferable[] porttypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = porttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(porttypes[i].modified);
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.PORTTYPES
						where ID = :(porttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update port type " + porttypes[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.PORTTYPES
							set
								NAME = :(porttypes[i].name),
								CODENAME = :(porttypes[i].codename),
								DESCRIPTION = :(porttypes[i].description),
								YEAR = :(porttypes[i].year),
								BODY = :(porttypes[i].body),
								STANDARD = :(porttypes[i].standard),
								INTERFACE_ID = :(porttypes[i].interfaceId),
								P_CLASS = :(porttypes[i].pClass),
								MODIFIED = SYSDATE
							where ID = :(porttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new port type " + porttypes[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.PORTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								YEAR,
								BODY,
								STANDARD,
								INTERFACE_ID,
								P_CLASS,
								MODIFIED)
							values(
								 :(porttypes[i].id),
								 :(porttypes[i].name),
								 :(porttypes[i].codename),
								 :(porttypes[i].description),
								 :(porttypes[i].year),
								 :(porttypes[i].body),
								 :(porttypes[i].standard),
								 :(porttypes[i].interfaceId),
								 :(porttypes[i].pClass),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(conn, "PORTTYPECHARACTERISTICLINKS", "PORT_TYPE_ID", porttypes[i].id, porttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveCablePortTypes(final Connection conn, CablePortType_Transferable[] porttypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = porttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(porttypes[i].modified);
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLEPORTTYPES
						where ID = :(porttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable port type " + porttypes[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.CABLEPORTTYPES
							set
								NAME = :(porttypes[i].name),
								CODENAME = :(porttypes[i].codename),
								DESCRIPTION = :(porttypes[i].description),
								P_CLASS = :(porttypes[i].pClass),
								MODIFIED = SYSDATE
							where ID = :(porttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable port type " + porttypes[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.CABLEPORTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								P_CLASS,
								MODIFIED)
							values(
								 :(porttypes[i].id),
								 :(porttypes[i].name),
								 :(porttypes[i].codename),
								 :(porttypes[i].description),
								 :(porttypes[i].pClass),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating cable port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(conn, "CABLEPORTTYPECHARACTERISTICS", "CABLE_PORT_TYPE_ID", porttypes[i].id, porttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveLinkTypes(final Connection conn, LinkType_Transferable[] linktypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = linktypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(linktypes[i].modified);
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.LINKTYPES
						where ID = :(linktypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update link type " + linktypes[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.LINKTYPES
							set
								NAME = :(linktypes[i].name),
								CODENAME = :(linktypes[i].codename),
								DESCRIPTION = :(linktypes[i].description),
								MANUFACTURER = :(linktypes[i].manufacturer),
								MANUFACTURER_CODE = :(linktypes[i].manufacturerCode),
								LINK_CLASS = :(linktypes[i].linkClass),
								YEAR = :(linktypes[i].year),
								STANDARD = :(linktypes[i].standard),
								IS_SLOT = 0,
								IMAGE_ID = :(linktypes[i].imageId),
								MODIFIED = SYSDATE
							where ID = :(linktypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing link type : " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new link type " + linktypes[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.LINKTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								MANUFACTURER,
								MANUFACTURER_CODE,
								LINK_CLASS,
								YEAR,
								STANDARD,
								IS_SLOT,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(linktypes[i].id),
								 :(linktypes[i].name),
								 :(linktypes[i].codename),
								 :(linktypes[i].description),
								 :(linktypes[i].manufacturer),
								 :(linktypes[i].manufacturerCode),
								 :(linktypes[i].linkClass),
								 :(linktypes[i].year),
								 :(linktypes[i].standard),
								 0,
								 :(linktypes[i].imageId),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(conn, "LINKTYPECHARACTERISTICLINKS", "LINK_TYPE_ID", linktypes[i].id, linktypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveCableTypeThreads(final Connection conn, String cable_id, CableTypeThread_Transferable[] threads) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			#sql [connCtx] { delete from AMFICOM.CABLETYPETHREADS
					where CABLE_TYPE_ID = :cable_id };

			for (int i = 0; i < threads.length; i++)
			{
				System.out.println("insert set thread " + threads[i].id + " for cable type " + cable_id);

				#sql [connCtx] {
					insert into AMFICOM.CABLETYPETHREADS(
							ID,
							NAME,
							COLOR,
							MARK,
							LINK_TYPE_ID,
							CABLE_TYPE_ID)
						values(
							 :(threads[i].id),
							 :(threads[i].name),
							 :(threads[i].color),
							 :(threads[i].mark),
							 :(threads[i].linkTypeId),
							 :cable_id )
				};
			}
			conn.commit();
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing port: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		catch(Exception exx)
		{
			System.out.println("error generating port: " + exx.getMessage());
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveCableLinkTypes(final Connection conn, CableLinkType_Transferable[] linktypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = linktypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(linktypes[i].modified);
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.CABLETYPES
						where ID = :(linktypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link type " + linktypes[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.CABLETYPES
							set
								NAME = :(linktypes[i].name),
								CODENAME = :(linktypes[i].description),
								MANUFACTURER = :(linktypes[i].manufacturer),
								MANUFACTURER_CODE = :(linktypes[i].manufacturerCode),
								LINK_CLASS = :(linktypes[i].linkClass),
								IMAGE_ID = :(linktypes[i].imageId),
								MODIFIED = SYSDATE
							where ID = :(linktypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link type : " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable type " + linktypes[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.CABLETYPES(
								ID,
								NAME,
								CODENAME,
								MANUFACTURER,
								MANUFACTURER_CODE,
								LINK_CLASS,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(linktypes[i].id),
								 :(linktypes[i].name),
								 :(linktypes[i].description),
								 :(linktypes[i].manufacturer),
								 :(linktypes[i].manufacturerCode),
								 :(linktypes[i].linkClass),
								 :(linktypes[i].imageId),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			saveCableTypeThreads(conn, linktypes[i].id, linktypes[i].cableThreads);
			saveCharacteristicLinks(conn, "CABLETYPECHARACTERISTICLINKS", "CABLE_TYPE_ID", linktypes[i].id, linktypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveEquipmentTypes(final Connection conn, EquipmentType_Transferable[] equipmenttypes) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = equipmenttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(equipmenttypes[i].modified);
			try
			{
				#sql [connCtx] {
					select count(*) into :count from AMFICOM.EQUIPMENTTYPES
						where ID = :(equipmenttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment type " + equipmenttypes[i].id);
				try
				{
					#sql [connCtx] {
						update AMFICOM.EQUIPMENTTYPES
							set
								NAME = :(equipmenttypes[i].name),
								CODENAME = :(equipmenttypes[i].codename),
								DESCRIPTION = :(equipmenttypes[i].description),
								MANUFACTURER = :(equipmenttypes[i].manufacturer),
								EQ_CLASS = :(equipmenttypes[i].eqClass),
								IS_HOLDER = :(equipmenttypes[i].is_holder),
								IMAGE_ID = :(equipmenttypes[i].imageId),
								MODIFIED = SYSDATE
							where ID = :(equipmenttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment type " + equipmenttypes[i].id);
				try
				{
					#sql [connCtx] {
						insert into AMFICOM.EQUIPMENTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								MANUFACTURER,
								EQ_CLASS,
								IS_HOLDER,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(equipmenttypes[i].id),
								 :(equipmenttypes[i].name),
								 :(equipmenttypes[i].codename),
								 :(equipmenttypes[i].description),
								 :(equipmenttypes[i].manufacturer),
								 :(equipmenttypes[i].eqClass),
								 :(equipmenttypes[i].is_holder),
								 :(equipmenttypes[i].imageId),
								 SYSDATE )
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(conn, "EQUIPMENTTYPECHARACTERISTICLIN", "EQUIPMENT_TYPE_ID", equipmenttypes[i].id, equipmenttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}
}
