/*
 * $Id: NetDirectorydbInterfaceSave.sqlj,v 1.1.2.2 2004/08/20 17:12:09 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.Network.Characteristic_Transferable;
import com.syrus.AMFICOM.CORBA.NetworkDirectory.*;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;

/**
 * @version $Revision: 1.1.2.2 $, $Date: 2004/08/20 17:12:09 $
 * @author $Author: bass $
 * @module server_v1
 */
public class NetDirectorydbInterfaceSave
{
	protected NetDirectorydbInterfaceSave()
	{
	}

	public static void saveCharacteristicLinks(
			String charLinkTable,
			String charLinkField,
			String element_id,
			Characteristic_Transferable[] characteristics)
	{
		int count;
		int len2;
		int j;

		try
		{
			String qry = "delete from AMFICOM." + charLinkTable +
						" where " + charLinkField + " = '" + element_id + "'";
			#sql {
				BEGIN
					execute immediate :qry;
				END;
			};

			len2 = characteristics.length;
			for(j = 0; j < len2; j++)
			{
				try
				{
					System.out.println("insert type characteristic: " + characteristics[j].id + " type " + characteristics[j].type_id + " value " + characteristics[j].value + " for element " + element_id);

					characteristics[j].id = ResourcedbInterface.getUId("characteristic");
					String qry2 = "insert into AMFICOM." + charLinkTable +
						"(ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE, " +
						charLinkField + ") values ('" +
						characteristics[j].id + "', '" +
						characteristics[j].type_id + "', '" +
						characteristics[j].value + "', '" +
						element_id + "')";


					#sql {
						BEGIN
							execute immediate :qry2;
						END;
					};

					#sql { commit };
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing type characteristic: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating type characteristic: " + exxx.getMessage());
				}
			}
		}
		catch(SQLException exx)
		{
			System.out.println("could not save type characteristic: " + exx.getMessage());
			exx.printStackTrace();
		}
	}

	public static int saveCharacteristicTypes(
			CharacteristicType_Transferable[] characteristictypes)
	{
		int count;
		int len2;
		int j;

		len2 = characteristictypes.length;
		for(j = 0; j < len2; j++)
		{
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.CHARACTERISTICTYPES
						where ID = :(characteristictypes[j].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				try
				{
					#sql {
						update AMFICOM.CHARACTERISTICTYPES
							set
								NAME = :(characteristictypes[j].name),
								VALUE_TYPE_ID = :(characteristictypes[j].value_type_id),
								CH_CLASS = :(characteristictypes[j].ch_class),
								IS_EDITABLE = :(characteristictypes[j].editable),
								IS_VISIBLE = :(characteristictypes[j].visible),
								MODIFIED = SYSDATE
							where ID = :(characteristictypes[j].id)
					};
					#sql { commit };
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing characteristic type: " + exx.getMessage());
					exx.printStackTrace();
				}
			}
			catch(SQLException ex)
			{
				System.out.println("insert new characteristic type: " + characteristictypes[j].id + " value type " + characteristictypes[j].value_type_id);
				try
				{
					#sql {
						insert into AMFICOM.CHARACTERISTICTYPES(
								ID,
								VALUE_TYPE_ID,
								NAME,
								CH_CLASS,
								IS_EDITABLE,
								IS_VISIBLE,
								MODIFIED)
							values(
								:(characteristictypes[j].id),
								:(characteristictypes[j].value_type_id),
								:(characteristictypes[j].name),
								:(characteristictypes[j].ch_class),
								:(characteristictypes[j].editable),
								:(characteristictypes[j].visible),
								SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException exx)
				{
					System.out.println("error saVing new characteristic type: " + exx.getMessage());
					exx.printStackTrace();
				}
				catch(Exception exxx)
				{
					System.out.println("error generating new characteristic type: " + exxx.getMessage());
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int savePortTypes(
			PortType_Transferable[] porttypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = porttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(porttypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.PORTTYPES
						where ID = :(porttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update port type " + porttypes[i].id);
				try
				{
					#sql {
						update AMFICOM.PORTTYPES
							set
								NAME = :(porttypes[i].name),
								CODENAME = :(porttypes[i].codename),
								DESCRIPTION = :(porttypes[i].description),
								YEAR = :(porttypes[i].year),
								BODY = :(porttypes[i].body),
								STANDARD = :(porttypes[i].standard),
								INTERFACE_ID = :(porttypes[i].interface_id),
								P_CLASS = :(porttypes[i].p_class),
								MODIFIED = SYSDATE
							where ID = :(porttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new port type " + porttypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.PORTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								YEAR,
								BODY,
								STANDARD,
								INTERFACE_ID,
								P_CLASS,
								MODIFIED)
							values(
								 :(porttypes[i].id),
								 :(porttypes[i].name),
								 :(porttypes[i].codename),
								 :(porttypes[i].description),
								 :(porttypes[i].year),
								 :(porttypes[i].body),
								 :(porttypes[i].standard),
								 :(porttypes[i].interface_id),
								 :(porttypes[i].p_class),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(
					"PORTTYPECHARACTERISTICLINKS",
					"PORT_TYPE_ID",
					porttypes[i].id,
					porttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveCablePortTypes(
			CablePortType_Transferable[] porttypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = porttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(porttypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.CABLEPORTTYPES
						where ID = :(porttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable port type " + porttypes[i].id);
				try
				{
					#sql {
						update AMFICOM.CABLEPORTTYPES
							set
								NAME = :(porttypes[i].name),
								CODENAME = :(porttypes[i].codename),
								DESCRIPTION = :(porttypes[i].description),
								P_CLASS = :(porttypes[i].p_class),
								MODIFIED = SYSDATE
							where ID = :(porttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable port type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable port type " + porttypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.CABLEPORTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								P_CLASS,
								MODIFIED)
							values(
								 :(porttypes[i].id),
								 :(porttypes[i].name),
								 :(porttypes[i].codename),
								 :(porttypes[i].description),
								 :(porttypes[i].p_class),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable port type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
				catch(Exception exx)
				{
					System.out.println("error generating cable port type: " + exx.getMessage());
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(
					"CABLEPORTTYPECHARACTERISTICS",
					"CABLE_PORT_TYPE_ID",
					porttypes[i].id,
					porttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveLinkTypes(
			LinkType_Transferable[] linktypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = linktypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(linktypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.LINKTYPES
						where ID = :(linktypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update link type " + linktypes[i].id);
				try
				{
					#sql {
						update AMFICOM.LINKTYPES
							set
								NAME = :(linktypes[i].name),
								CODENAME = :(linktypes[i].codename),
								DESCRIPTION = :(linktypes[i].description),
								MANUFACTURER = :(linktypes[i].manufacturer),
								MANUFACTURER_CODE = :(linktypes[i].manufacturer_code),
								LINK_CLASS = :(linktypes[i].link_class),
								YEAR = :(linktypes[i].year),
								STANDARD = :(linktypes[i].standard),
								IS_SLOT = 0,
								IMAGE_ID = :(linktypes[i].image_id),
								MODIFIED = SYSDATE
							where ID = :(linktypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing link type : " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new link type " + linktypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.LINKTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								MANUFACTURER,
								MANUFACTURER_CODE,
								LINK_CLASS,
								YEAR,
								STANDARD,
								IS_SLOT,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(linktypes[i].id),
								 :(linktypes[i].name),
								 :(linktypes[i].codename),
								 :(linktypes[i].description),
								 :(linktypes[i].manufacturer),
								 :(linktypes[i].manufacturer_code),
								 :(linktypes[i].link_class),
								 :(linktypes[i].year),
								 :(linktypes[i].standard),
								 0,
								 :(linktypes[i].image_id),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing link type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(
					"LINKTYPECHARACTERISTICLINKS",
					"LINK_TYPE_ID",
					linktypes[i].id,
					linktypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveCableTypeThreads(String cable_id, CableTypeThread_Transferable[] threads)
	{
		try
		{
			#sql { delete from AMFICOM.CABLETYPETHREADS
					where CABLE_TYPE_ID = :cable_id };

			for (int i = 0; i < threads.length; i++)
			{
				System.out.println("insert set thread " + threads[i].id + " for cable type " + cable_id);

				#sql {
					insert into AMFICOM.CABLETYPETHREADS(
							ID,
							NAME,
							COLOR,
							MARK,
							LINK_TYPE_ID,
							CABLE_TYPE_ID)
						values(
							 :(threads[i].id),
							 :(threads[i].name),
							 :(threads[i].color),
							 :(threads[i].mark),
							 :(threads[i].link_type_id),
							 :cable_id )
				};
			}
			#sql { commit };
		}
		catch(SQLException ex)
		{
			System.out.println("error saVing port: " + ex.getMessage());
			ex.printStackTrace();
			return Constants.ERROR_SAVING;
		}
		catch(Exception exx)
		{
			System.out.println("error generating port: " + exx.getMessage());
			return Constants.ERROR_SAVING;
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveCableLinkTypes(
			CableLinkType_Transferable[] linktypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = linktypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(linktypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.CABLETYPES
						where ID = :(linktypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update cable link type " + linktypes[i].id);
				try
				{
					#sql {
						update AMFICOM.CABLETYPES
							set
								NAME = :(linktypes[i].name),
								CODENAME = :(linktypes[i].codename),
								MANUFACTURER = :(linktypes[i].manufacturer),
								MANUFACTURER_CODE = :(linktypes[i].manufacturer_code),
								LINK_CLASS = :(linktypes[i].link_class),
								IMAGE_ID = :(linktypes[i].image_id),
								MODIFIED = SYSDATE
							where ID = :(linktypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing cable link type : " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new cable type " + linktypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.CABLETYPES(
								ID,
								NAME,
								CODENAME,
								MANUFACTURER,
								MANUFACTURER_CODE,
								LINK_CLASS,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(linktypes[i].id),
								 :(linktypes[i].name),
								 :(linktypes[i].codename),
								 :(linktypes[i].manufacturer),
								 :(linktypes[i].manufacturer_code),
								 :(linktypes[i].link_class),
								 :(linktypes[i].image_id),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing cable type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}

			saveCableTypeThreads(linktypes[i].id, linktypes[i].cable_threads);

			saveCharacteristicLinks(
					"CABLETYPECHARACTERISTICLINKS",
					"CABLE_TYPE_ID",
					linktypes[i].id,
					linktypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	public static int saveEquipmentTypes(
			EquipmentType_Transferable[] equipmenttypes)
	{
		int i;
		int j;
		int len;
		int count = 0;

		String id = "";
		len = equipmenttypes.length;
		for (i = 0; i < len; i++)
		{
			Timestamp ts = new Timestamp(equipmenttypes[i].modified);
			try
			{
				#sql {
					select count(*) into :count from AMFICOM.EQUIPMENTTYPES
						where ID = :(equipmenttypes[i].id)
				};
				if(count == 0)
				{
					throw new SQLException("do insert!");
				}
				System.out.println("update equipment type " + equipmenttypes[i].id);
				try
				{
					#sql {
						update AMFICOM.EQUIPMENTTYPES
							set
								NAME = :(equipmenttypes[i].name),
								CODENAME = :(equipmenttypes[i].codename),
								DESCRIPTION = :(equipmenttypes[i].description),
								MANUFACTURER = :(equipmenttypes[i].manufacturer),
								EQ_CLASS = :(equipmenttypes[i].eq_class),
								IS_HOLDER = :(equipmenttypes[i].is_holder),
								IMAGE_ID = :(equipmenttypes[i].image_id),
								MODIFIED = SYSDATE
							where ID = :(equipmenttypes[i].id)
					};
				}
				catch(SQLException e)
				{
					System.out.println("error saVing equipment type: " + e.getMessage());
					e.printStackTrace();
					return Constants.ERROR_UPDATING;
				}
				#sql { commit };
			}
			catch(SQLException e)
			{
				System.out.println("insert new equipment type " + equipmenttypes[i].id);
				try
				{
					#sql {
						insert into AMFICOM.EQUIPMENTTYPES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,
								MANUFACTURER,
								EQ_CLASS,
								IS_HOLDER,
								IMAGE_ID,
								MODIFIED)
							values(
								 :(equipmenttypes[i].id),
								 :(equipmenttypes[i].name),
								 :(equipmenttypes[i].codename),
								 :(equipmenttypes[i].description),
								 :(equipmenttypes[i].manufacturer),
								 :(equipmenttypes[i].eq_class),
								 :(equipmenttypes[i].is_holder),
								 :(equipmenttypes[i].image_id),
								 SYSDATE )
					};
					#sql { commit };
				}
				catch(SQLException ex)
				{
					System.out.println("error saVing equipment type: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveCharacteristicLinks(
					"EQUIPMENTTYPECHARACTERISTICLIN",
					"EQUIPMENT_TYPE_ID",
					equipmenttypes[i].id,
					equipmenttypes[i].characteristics);
		}
		return Constants.ERROR_NO_ERROR;
	}

	#sql public static iterator IdIterator ( String id );
}
