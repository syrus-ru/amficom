/*
 * $Id: ObjectdbInterfaceSave.sqlj,v 1.1.2.3 2004/09/09 11:35:21 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.object;

import com.syrus.AMFICOM.CORBA.Admin.*;
import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.database.JdbcBlobManager;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1.2.3 $, $Date: 2004/09/09 11:35:21 $
 * @author $Author: bass $
 * @module server_v1
 */
final class ObjectdbInterfaceSave {
	private  ObjectdbInterfaceSave() {
	}

	private static int saveObjectPermission(final Connection conn, ObjectPermissionAttributes_Transferable opa) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			#sql [connCtx]
			{
				insert into AMFICOM.OBJECTPERMISSIONS(
						ID,
						RWX,
						OWNER_ID,
						NAME,
						CODENAME,

						CREATED,
						CREATED_BY,
						MODIFIED,
						MODIFIED_BY,

						WHYREJECTED)
					values(
						:(opa.id),
						:(opa.rwx),
						:(opa.owner_id),
						:(opa.name),
						:(opa.codename),

						SYSDATE,
						:(opa.owner_id),
						SYSDATE,
						:(opa.owner_id),

						:(opa.whyRejected) )
			};
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("exec exists - updating...");
			try
			{
				#sql [connCtx]
				{
					update AMFICOM.OBJECTPERMISSIONS set
						RWX = :(opa.rwx),
						OWNER_ID = :(opa.owner_id),
						NAME = :(opa.name),
						CODENAME = :(opa.codename),

						MODIFIED = SYSDATE,
						MODIFIED_BY = :(opa.modified_by),

						WHYREJECTED = :(opa.whyRejected)
					where ID = :(opa.id)
				};
				conn.commit();
			}
			catch(SQLException ex)
			{
				System.out.println("could not save exec: " + ex.getMessage());
				ex.printStackTrace();
				return Constants.ERROR_SAVING;
			}
		}
		try
		{
			#sql [connCtx] {
				delete from AMFICOM.OBJECTPERMISSIONGROUPS
					where OBJECT_PERMISSION_ID = :(opa.id)
			};
			for(int j = opa.group_ids.length - 1; j >= 0; j--)
			{
				String id_v = ResourcedbInterface.getUid(conn, "operatorgrouplink");
				#sql [connCtx]
				{ insert into AMFICOM.OBJECTPERMISSIONGROUPS(ID, OBJECT_PERMISSION_ID, GROUP_ID)
					values(:id_v, :(opa.id), :(opa.group_ids[j]) )
				};
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error generating exec-group link: " + e.getMessage());
			e.printStackTrace();
		}
		catch(Exception ex)
		{
			System.out.println("error generating exec-group link: " + ex.getMessage());
		}
		try
		{
			#sql [connCtx] {
				delete from AMFICOM.OBJECTPERMISSIONCATEGORIES
					where OBJECT_PERMISSION_ID = :(opa.id)
			};
			for(int j = opa.category_ids.length - 1; j >= 0; j--)
			{
				String id_v = ResourcedbInterface.getUid(conn, "operatorcategorylink");
				#sql [connCtx]
				{ insert into AMFICOM.OBJECTPERMISSIONCATEGORIES(ID, OBJECT_PERMISSION_ID, CATEGORY_ID)
					values(:id_v, :(opa.id), :(opa.category_ids[j]) )
				};
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error generating exec category: " + e.getMessage());
			e.printStackTrace();
		}
		catch(Exception ex)
		{
			System.out.println("error generating exec category: " + ex.getMessage());
		}
		return Constants.ERROR_NO_ERROR;
	}

	private static int saveDomainLinks(final Connection conn, String domain_id, String[] ids) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		try
		{
			#sql [connCtx] {
				delete from AMFICOM.DOMAINLINKS
					where DOMAIN_ID = :domain_id
			};
			for(int j = ids.length - 1; j >= 0; j--)
			{
				#sql [connCtx]
				{ insert into AMFICOM.DOMAINLINKS(DOMAIN_ID, INNER_DOMAIN_ID)
					values(:domain_id, :(ids[j]) )
				};
			}
			conn.commit();
		}
		catch(SQLException e)
		{
			System.out.println("error saveDomainLinks: " + e.getMessage());
			e.printStackTrace();
		}
		catch(Exception ex)
		{
			System.out.println("error saveDomainLinks: " + ex.getMessage());
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveDomains(final Connection conn, Domain_Transferable[] domainseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;

		len = domainseq.length;
		for (i = 0; i < len; i++)
		{
			System.out.println("save domain id " + domainseq[i].id +
					" name " + domainseq[i].name +
					" codename " + domainseq[i].codename +
					" descr " + domainseq[i].description +
					" domain " + domainseq[i].domain_id +
					" owner " + domainseq[i].owner_id);
			try
			{
				#sql [connCtx]
				{
					insert into AMFICOM.DOMAINS(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							CREATED,
							CREATED_BY,
							MODIFIED,
							MODIFIED_BY,
							OWNER_ID,
							DOMAIN_ID)
					values(
						:(domainseq[i].id),
						:(domainseq[i].name),
						:(domainseq[i].codename),
						:(domainseq[i].description),
						SYSDATE,
						:(domainseq[i].owner_id),
						SYSDATE,
						:(domainseq[i].owner_id),
						:(domainseq[i].owner_id),
						:(domainseq[i].domain_id) )
				};
				conn.commit();

				String id2 = ResourcedbInterface.getUid(conn, "resultset");
				Timestamp active_start_time = new Timestamp(System.currentTimeMillis());

				long active_period = 2592000000L;
				Timestamp active_end_time = new Timestamp(active_start_time.getTime() + active_period);

				#sql [connCtx] { insert into resultsets(
						ID,
						NAME,
						COMMENTS,
						DOMAIN_ID,
						ACTIVE,
						PERIOD,
						CREATED,
						MODIFIED,
						START_TIME,
						END_TIME)
					values(
						:id2,
						:id2,
						'',
						:(domainseq[i].id),
						1,
						:active_period,
						SYSDATE,
						SYSDATE,
						:active_start_time,
						:active_end_time)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("domain exists - updating...");
				try
				{
					#sql [connCtx]
					{
						update AMFICOM.DOMAINS set
								NAME = :(domainseq[i].name),
								CODENAME = :(domainseq[i].codename),
								DESCRIPTION = :(domainseq[i].description),
								MODIFIED = SYSDATE,
								MODIFIED_BY = :(domainseq[i].modified_by),
								OWNER_ID = :(domainseq[i].owner_id),
								DOMAIN_ID = :(domainseq[i].domain_id)
							where ID = :(domainseq[i].id)
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("could not save domain: " + ex.getMessage());
					e.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			saveDomainLinks(conn, domainseq[i].id, domainseq[i].domain_ids);
			saveObjectPermission(conn, domainseq[i].permissions);
			try
			{
				#sql [connCtx] { update AMFICOM.DOMAINS
					set OBJECT_PERMISSION_ID = :(domainseq[i].permissions.id)
					where ID = :(domainseq[i].id)
				};
				conn.commit();
			}
			catch(SQLException e)
			{
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveExecs(final Connection conn, CommandPermissionAttributes_Transferable[] execseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;

		len = execseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx]
				{
					insert into AMFICOM.EXECS(
							ID,
							RWX,
							OWNER_ID,
							NAME,
							CODENAME,

							CREATED,
							CREATED_BY,
							MODIFIED,
							MODIFIED_BY,

							WHYREJECTED)
						values(
							:(execseq[i].id),
							:(execseq[i].rwx),
							:(execseq[i].owner_id),
							:(execseq[i].name),
							:(execseq[i].codename),

							SYSDATE,
							:(execseq[i].owner_id),
							SYSDATE,
							:(execseq[i].owner_id),

							:(execseq[i].whyRejected) )
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("exec exists - updating...");
				try
				{
					#sql [connCtx]
					{
						update AMFICOM.EXECS set
							RWX = :(execseq[i].rwx),
							OWNER_ID = :(execseq[i].owner_id),
							NAME = :(execseq[i].name),
							CODENAME = :(execseq[i].codename),

							MODIFIED = SYSDATE,
							MODIFIED_BY = :(execseq[i].modified_by),

							WHYREJECTED = :(execseq[i].whyRejected)
						where ID = :(execseq[i].id)
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("could not save exec: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.EXECGROUPS
						where EXEC_ID = :(execseq[i].id)
				};
				for(int j = execseq[i].group_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorgrouplink");
					#sql [connCtx]
					{ insert into AMFICOM.EXECGROUPS(ID, EXEC_ID, GROUP_ID)
						values(:id_v, :(execseq[i].id), :(execseq[i].group_ids[j]) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error generating exec-group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating exec-group link: " + ex.getMessage());
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.EXECCATEGORIES
						where EXEC_ID = :(execseq[i].id)
				};
				for(int j = execseq[i].category_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorcategorylink");
					#sql [connCtx]
					{ insert into AMFICOM.EXECCATEGORIES(ID, EXEC_ID, CATEGORY_ID)
						values(:id_v, :(execseq[i].id), :(execseq[i].category_ids[j]) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error generating exec category: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating exec category: " + ex.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveUsers(final Connection conn, User_Transferable[] userseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;

		len = userseq.length;
		for (i = 0; i < len; i++)
		{
			System.out.println("save user id (" + userseq[i].id + ") type (" + userseq[i].type + ") login (" + userseq[i].login + ") object_id (" + userseq[i].object_id + ")");
			if(userseq[i].type.equals("operatorprofile"))
			{
				try
				{
					#sql [connCtx]
					{
						insert into AMFICOM.USERS(
								ID,
								LOGIN,
								TYPE,
								OPERATOR_ID)
						values(
							:(userseq[i].id),
							:(userseq[i].login),
							:(userseq[i].type),
							:(userseq[i].object_id) )
					};
					conn.commit();
				}
				catch(Exception e)
				{
					System.out.println("user exists - updating...");
					try
					{
						#sql [connCtx]
						{ update AMFICOM.USERS set
								LOGIN = :(userseq[i].login),
								TYPE = :(userseq[i].type),
								OPERATOR_ID = :(userseq[i].object_id)
							where Id = :(userseq[i].id)
						};
						conn.commit();
					}
					catch(SQLException ex)
					{
						System.out.println("could not save user: " + ex.getMessage());
						ex.printStackTrace();
						return Constants.ERROR_SAVING;
					}
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveCategories(final Connection conn, OperatorCategory_Transferable[] categoryseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;

		len = categoryseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx]
				{
					insert into AMFICOM.CATEGORIES(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							MODIFIED)
					values(
						:(categoryseq[i].id),
						:(categoryseq[i].name),
						:(categoryseq[i].codename),
						:(categoryseq[i].description),
						SYSDATE )
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("category exists - updating...");
				try
				{
					#sql [connCtx]
					{ update AMFICOM.CATEGORIES set
							NAME = :(categoryseq[i].name),
							CODENAME = :(categoryseq[i].codename),
							DESCRIPTION = :(categoryseq[i].description),
							MODIFIED = SYSDATE
						where Id = :(categoryseq[i].id)
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("could not save category: " + ex.getMessage());
					e.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveGroups(final Connection conn, OperatorGroup_Transferable[] groupseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;

		len = groupseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx]
				{
					insert into AMFICOM.GROUPS(
							ID,
							NAME,
							CODENAME,
							DESCRIPTION,
							OWNER_ID,
							CREATED,
							CREATED_BY,
							MODIFIED,
							MODIFIED_BY)
					values(
						:(groupseq[i].id),
						:(groupseq[i].name),
						:(groupseq[i].codename),
						:(groupseq[i].description),
						:(groupseq[i].owner_id),
						SYSDATE,
						:(groupseq[i].owner_id),
						SYSDATE,
						:(groupseq[i].owner_id) )
				};
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("group exists - updating...");
				try
				{
					#sql [connCtx]
					{ update AMFICOM.GROUPS set
							NAME = :(groupseq[i].name),
							CODENAME = :(groupseq[i].codename),
							DESCRIPTION = :(groupseq[i].description),
							OWNER_ID = :(groupseq[i].owner_id),
							MODIFIED = SYSDATE,
							MODIFIED_BY = :(groupseq[i].modified_by)
						where ID = :(groupseq[i].id)
					};
					conn.commit();
				}
				catch(SQLException ex)
				{
					System.out.println("could not save group: " + ex.getMessage());
					ex.printStackTrace();
					return Constants.ERROR_SAVING;
				}
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.USERGROUPS
						where GROUP_ID = :(groupseq[i].id)
				};
				for(int j = groupseq[i].user_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorgrouplink");
					#sql [connCtx]
					{ insert into AMFICOM.USERGROUPS(ID, USER_ID, GROUP_ID)
						values(:id_v, :(groupseq[i].user_ids[j]), :(groupseq[i].id) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error profile=group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error profile=group link: " + ex.getMessage());
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.EXECGROUPS
						where GROUP_ID = :(groupseq[i].id)
				};
				for(int j = groupseq[i].exec_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorgrouplink");
					#sql [connCtx]
					{ insert into AMFICOM.EXECGROUPS(ID, EXEC_ID, GROUP_ID)
						values(:id_v, :(groupseq[i].exec_ids[j]), :(groupseq[i].id) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error exec=group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error exec=group link: " + ex.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}

	static int saveProfiles(final Connection conn, OperatorProfile_Transferable[] profileseq) throws SQLException {
		DefaultContext connCtx = new DefaultContext(conn);

		int i;
		int len;
		int count = 0;


		len = profileseq.length;
		for (i = 0; i < len; i++)
		{
			try
			{
				#sql [connCtx]
				{
					select count(*) into :count from AMFICOM.OPERATORPROFILES
						where ID = :(profileseq[i].id)
					};
				if(count == 0)
				{
					System.out.println("insert profile " + profileseq[i].id);
					#sql [connCtx]
					{
						insert into AMFICOM.OPERATORPROFILES(
								ID,
								NAME,
								CODENAME,
								DESCRIPTION,

								CREATED,
								CREATED_BY,
								MODIFIED,
								MODIFIED_BY,

								USER_ID,
								OWNER_ID,
								LOGIN,
				PASSWORD,
								PASSWORD_EXPIRY,

								STATUS,
								STATE,
								DISABLED_COMMENTS,
								PRIORITY,
								LOGFILE,
								FIRST_NAME,
								SECOND_NAME,
								LAST_NAME,
								PHONE_WORK,
								PHONE_HOME,
								PHONE_MOBILE,
								PHONE_EMERGENCY,
								PAGER_PHONE,
								PAGER_NUMBER,
								SMS_NUMBER,
								ADDRESS,
								LANGUAGE,
								ORGANIZATION,
								E_MAIL)
							values(
								:(profileseq[i].id),
								:(profileseq[i].name),
								:(profileseq[i].codename),
								:(profileseq[i].description),

								SYSDATE,
								:(profileseq[i].owner_id),
								SYSDATE,
								:(profileseq[i].owner_id),

								:(profileseq[i].user_id),
								:(profileseq[i].owner_id),
								:(profileseq[i].login),
				empty_blob(),
								:(profileseq[i].disabled),

								:(profileseq[i].status),
								:(profileseq[i].state),

								:(profileseq[i].disabled_comments),

								:(profileseq[i].priority),
								:(profileseq[i].logfile),

								:(profileseq[i].first_name),
								:(profileseq[i].second_name),
								:(profileseq[i].last_name),
								:(profileseq[i].phone_work),
								:(profileseq[i].phone_home),
								:(profileseq[i].phone_mobile),
								:(profileseq[i].phone_emergency),

								:(profileseq[i].pager_phone),
								:(profileseq[i].pager_number),
								:(profileseq[i].sms_number),

								:(profileseq[i].address),
								:(profileseq[i].language),
								:(profileseq[i].organization),
								:(profileseq[i].e_mail) )
					};
					JdbcBlobManager.setData(conn, "password", "amficom.operatorprofiles", "id = '" + profileseq[i].id + '\'', false, profileseq[i].password);
					conn.commit();
				}
				else
				{
					System.out.println("profile exists - updating...");
					boolean do_save = true;
					while(do_save)
		    {
		    try
		    {
					#sql [connCtx]
					{
						update AMFICOM.OPERATORPROFILES set
							NAME = :(profileseq[i].name),
							CODENAME = :(profileseq[i].codename),
							DESCRIPTION = :(profileseq[i].description),
							MODIFIED = SYSDATE,
							MODIFIED_BY = :(profileseq[i].modified_by),
							USER_ID = :(profileseq[i].user_id),
							OWNER_ID = :(profileseq[i].owner_id),
							LOGIN = :(profileseq[i].login),
							PASSWORD_EXPIRY = :(profileseq[i].disabled),
							STATUS = :(profileseq[i].status),
							STATE = :(profileseq[i].state),
							DISABLED_COMMENTS = :(profileseq[i].disabled_comments),
							PRIORITY = :(profileseq[i].priority),
							LOGFILE = :(profileseq[i].logfile),
							FIRST_NAME = :(profileseq[i].first_name),
							SECOND_NAME = :(profileseq[i].second_name),
							LAST_NAME = :(profileseq[i].last_name),
							PHONE_WORK = :(profileseq[i].phone_work),
							PHONE_HOME = :(profileseq[i].phone_home),
							PHONE_MOBILE = :(profileseq[i].phone_mobile),
							PHONE_EMERGENCY = :(profileseq[i].phone_emergency),
							PAGER_PHONE = :(profileseq[i].pager_phone),
							PAGER_NUMBER = :(profileseq[i].pager_number),
							SMS_NUMBER = :(profileseq[i].sms_number),
							ADDRESS = :(profileseq[i].address),
							LANGUAGE = :(profileseq[i].language),
							ORGANIZATION = :(profileseq[i].organization),
							E_MAIL = :(profileseq[i].e_mail)
						where ID = :(profileseq[i].id)
					};
					JdbcBlobManager.setData(conn, "password", "amficom.operatorprofiles", "id = '" + profileseq[i].id + '\'', false, profileseq[i].password);
					conn.commit();
		    do_save = false;
					}
		    catch(Exception sqlex)
		    {
		    	sqlex.printStackTrace();
		    	System.out.println("insert empty blob...");
						#sql [connCtx]
						{
							update AMFICOM.OPERATORPROFILES set
								PASSWORD = empty_blob()
							where ID = :(profileseq[i].id)
    	                };
		    }
		    }
				}
			}
			catch(Exception e)
			{
				System.out.println("could not save profile: " + e.getMessage());
				e.printStackTrace();
				return Constants.ERROR_SAVING;
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.USERGROUPS
						where USER_ID = :(profileseq[i].user_id)
				};
				for(int j = profileseq[i].group_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorgrouplink");
					#sql [connCtx]
					{ insert into AMFICOM.USERGROUPS(ID, USER_ID, GROUP_ID)
						values(:id_v, :(profileseq[i].user_id), :(profileseq[i].group_ids[j]) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error generating profile-group link: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating profile-group link: " + ex.getMessage());
			}
			try
			{
				#sql [connCtx] {
					delete from AMFICOM.USERCATEGORIES
						where USER_ID = :(profileseq[i].user_id)
				};
				for(int j = profileseq[i].category_ids.length - 1; j >= 0; j--)
				{
					String id_v = ResourcedbInterface.getUid(conn, "operatorcategorylink");
					#sql [connCtx]
					{ insert into AMFICOM.USERCATEGORIES(ID, USER_ID, CATEGORY_ID)
						values(:id_v, :(profileseq[i].user_id), :(profileseq[i].category_ids[j]) )
					};
				}
				conn.commit();
			}
			catch(SQLException e)
			{
				System.out.println("error generating profile category: " + e.getMessage());
				e.printStackTrace();
			}
			catch(Exception ex)
			{
				System.out.println("error generating profile category: " + ex.getMessage());
			}
		}
		return Constants.ERROR_NO_ERROR;
	}
}
