/*
 * $Id: AlertingMessageTextUtilitiesImpl.sqlj,v 1.1.2.1 2004/10/12 13:12:54 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.*;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @author $Author: bass $
 * @version $Revision: 1.1.2.1 $, $Date: 2004/10/12 13:12:54 $
 * @module corbaportable_v1
 */
public final class AlertingMessageTextUtilitiesImpl extends MutableObjectResourceUtilitiesImpl implements AlertingMessageTextUtilitiesOperations {
	public AlertingMessageTextUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessagetexts
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	protected String getUUID(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String nextval;
		if (connCtx == null) {
			#sql {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		}
		return AlertingMessageTextUtilities.UUID_PREFIX + nextval;
	}

	String _new(String text, String eventTypeId, String messageTypeId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((text == null)
				|| (eventTypeId == null)
				|| (eventTypeId.length() == 0)
				|| (messageTypeId == null)
				|| (messageTypeId.length() == 0))
			throw new IllegalArgumentException();
		String id = getUUID(connCtx, execCtx);
		if (connCtx == null) {
			#sql {
				INSERT INTO amficom.alertingmessagetexts(id, text, event_type_id, message_type_id) VALUES (:id, :text, :(eventTypeId), :(messageTypeId))
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				INSERT INTO amficom.alertingmessagetexts(id, text, event_type_id, message_type_id) VALUES (:id, :text, :(eventTypeId), :(messageTypeId))
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				INSERT INTO amficom.alertingmessagetexts(id, text, event_type_id, message_type_id) VALUES (:id, :text, :(eventTypeId), :(messageTypeId))
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
		return id;
	}

	public String _new(String text, String eventTypeId, String messageTypeId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return _new(text, eventTypeId, messageTypeId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	/**
	 * Should only be invoked by AlertingMessageTextImpl.delete(String)
	 */
	void delete(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((id == null) || (id.length() == 0))
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				DELETE FROM amficom.alertingmessagetexts WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				DELETE FROM amficom.alertingmessagetexts WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				DELETE FROM amficom.alertingmessagetexts WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	/**
	 * Should only be invoked by AlertingMessageTextImpl.delete(String)
	 */
	public void delete(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			delete(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getText(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String text;
		if (connCtx == null) {
			#sql {
				SELECT text INTO :text FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT text INTO :text FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT text INTO :text FROM amficom.alertingmessagetexts WHERE id = :id
			};
		}
		return ((text == null) ? "" : text);
	}

	public String getText(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getText(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	void setText(String id, String text, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if (text == null)
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				UPDATE amficom.alertingmessagetexts SET text = :text WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				UPDATE amficom.alertingmessagetexts SET text = :text WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				UPDATE amficom.alertingmessagetexts SET text = :text WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	public void setText(String id, String text) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			setText(id, text, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getEventTypeId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String eventTypeId;
		if (connCtx == null) {
			#sql {
				SELECT event_type_id INTO :eventTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT event_type_id INTO :eventTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT event_type_id INTO :eventTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		}
		return ((eventTypeId == null) ? "" : eventTypeId);
	}

	public String getEventTypeId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getEventTypeId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getMessageTypeId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String messageTypeId;
		if (connCtx == null) {
			#sql {
				SELECT message_type_id INTO :messageTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT message_type_id INTO :messageTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT message_type_id INTO :messageTypeId FROM amficom.alertingmessagetexts WHERE id = :id
			};
		}
		return ((messageTypeId == null) ? "" : messageTypeId);
	}

	public String getMessageTypeId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMessageTypeId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	void setMessageTypeId(String id, String messageTypeId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((messageTypeId == null) || (messageTypeId.length() == 0))
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				UPDATE amficom.alertingmessagetexts SET message_type_id = :(messageTypeId) WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				UPDATE amficom.alertingmessagetexts SET message_type_id = :(messageTypeId) WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				UPDATE amficom.alertingmessagetexts SET message_type_id = :(messageTypeId) WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	public void setMessageTypeId(String id, String messageTypeId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			setMessageTypeId(id, messageTypeId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String[] getMatchingIds1(String eventTypeId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((eventTypeId == null) || (eventTypeId.length() == 0))
			return new String[0];
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId)
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId)
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId)
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	public String[] getMatchingIds1(String eventTypeId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds1(eventTypeId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	/**
	 * Unique constraint: <code>alertingmessagetexts.altalrt_uk</code>.
	 * 
	 * @return a string array of length 0 or 1.
	 */
	String[] getMatchingIds2(String eventTypeId, String messageTypeId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((eventTypeId == null) || (eventTypeId.length() == 0) || (messageTypeId == null) || (messageTypeId.length() == 0))
			return new String[0];
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId) AND message_type_id = :(messageTypeId)
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId) AND message_type_id = :(messageTypeId)
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessagetexts WHERE event_type_id = :(eventTypeId) AND message_type_id = :(messageTypeId)
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
//			assert (ids.size() <= 1): "Unique constraint broken";
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	/**
	 * Unique constraint: <code>alertingmessagetexts.altalrt_uk</code>.
	 * 
	 * @return a string array of length 0 or 1.
	 */
	public String[] getMatchingIds2(String eventTypeId, String messageTypeId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds2(eventTypeId, messageTypeId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	static {
		/*
		 * Sanity check.
		 */
		try {
			#sql {
				DELETE FROM amficom.alertingmessagetexts WHERE id NOT IN (SELECT UNIQUE alerting_message_id FROM amficom.alertingmessageuserlinks)
			};
			#sql {
				COMMIT
			};
		} catch (SQLException sqle) {
			sqle.printStackTrace();
		}
	}

	#sql final iterator IdIterator(String id);
}
