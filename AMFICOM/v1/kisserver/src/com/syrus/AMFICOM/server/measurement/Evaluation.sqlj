package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.sql.SQLException;
import java.sql.Timestamp;
import com.syrus.AMFICOM.CORBA.KIS.Parameter_Transferable;
import com.syrus.AMFICOM.CORBA.KIS.Evaluation_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientEvaluation_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;

public class Evaluation extends Action {
  private Etalon etalon;
  private ThresholdSet thresholdSet;
	private Argument[] arguments;

  public Evaluation(String id) throws SQLException {
    super.id = id;
    String etalon_id = null;
    String threshold_set_id = null;
    #sql {SELECT ev.type_id,
								 ev.name,
								 ev.monitored_element_id,
                 ev.modified,
                 ev.deleted,
                 ev.user_id,
                 ev.description,
								 ev.etalon_id,
                 ev.threshold_set_id,
								 me.domain_id
            INTO :(this.type_id),
								 :(this.name),
                 :(this.monitored_element_id),
                 :(this.modified),
                 :(this.deleted),
                 :(this.user_id),
                 :(this.description),
								 :etalon_id,
                 :threshold_set_id,
								 :(this.domain_id)
            FROM amficom.evaluations ev,
								 amficom.monitoredelements me
            WHERE ev.id = :(this.id)
							AND ev.monitored_element_id = me.id };
		super.name = (super.name == null)?"":super.name;
		super.user_id = (super.user_id == null)?"":super.user_id;
		super.description = (super.description == null)?"":super.description;
    
    this.etalon = new Etalon(etalon_id);
    this.thresholdSet = new ThresholdSet(threshold_set_id);

		this.arguments = Argument.retrieveArguments(super.id, "evaluation");
  }

	public Evaluation(ClientEvaluation_Transferable evaluation_t) throws Exception {
		super.id = evaluation_t.id;
		super.type_id = evaluation_t.type_id;
		super.name = evaluation_t.name;
		super.monitored_element_id = evaluation_t.monitored_element_id;
		super.user_id = evaluation_t.user_id;
		super.description = evaluation_t.description;
		super.modified = new Timestamp(System.currentTimeMillis());
		super.deleted = null;
		this.etalon = new Etalon(evaluation_t.etalon_id);
		this.thresholdSet = new ThresholdSet(evaluation_t.threshold_set_id);

		#sql {INSERT INTO amficom.evaluations (id,
																					 type_id,
																					 name,
																					 monitored_element_id,
																					 modified,
																					 deleted,
																					 user_id,
																					 description,
																					 etalon_id,
																					 threshold_set_id)
						VALUES (:(this.id),
                    :(this.type_id),
                    :(this.name),
                    :(this.monitored_element_id),
                    :(this.modified),
                    :(this.deleted),
                    :(this.user_id),
                    :(this.description),
										:(evaluation_t.etalon_id),
										:(evaluation_t.threshold_set_id))};

		#sql {SELECT domain_id 
						INTO :(this.domain_id)
						FROM amficom.monitoredelements
						WHERE id = :(this.monitored_element_id) };

		this.arguments = new Argument[evaluation_t.arguments.length];
		for (int i = 0; i < this.arguments.length; i++)
      this.arguments[i] = new Argument(evaluation_t.arguments[i], super.id, "evaluation");
    #sql { COMMIT };
	}

  public Evaluation_Transferable getTransferable() throws SQLException {
    return new Evaluation_Transferable(super.id,
																			 super.type_id,
																			 this.thresholdSet.getKISThresholds(),
																			 this.etalon.getTransferable()); 
  }

	public ClientEvaluation_Transferable getClientTransferable() throws SQLException {
		ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[this.arguments.length];
		for (int i = 0; i < arguments_t.length; i++)
      arguments_t[i] = this.arguments[i].getClientTransferable();
		return new ClientEvaluation_Transferable(this.thresholdSet.getId(),
																						 super.type_id,
																						 (super.deleted == null)?0:super.deleted.getTime(),
																						 this.etalon.getId(),
																						 super.monitored_element_id,
																						 super.id,
																						 super.modified.getTime(),
																						 super.name,
																						 super.user_id,
																						 super.description,
																						 this.getResultIds(),
																						 arguments_t);
	}

	public Test getTest() throws SQLException {
		String test_id;
		#sql {SELECT id
						INTO :test_id
						FROM amficom.tests
						WHERE evaluation_id = :(this.id) };
		return new Test(test_id);
	}

	public void update(ClientEvaluation_Transferable evaluation_t) throws SQLException {
		if (evaluation_t.id.compareTo(super.id) != 0)
			return;

		super.type_id = evaluation_t.type_id;
		super.name = evaluation_t.name;
		super.monitored_element_id = evaluation_t.monitored_element_id;
		super.user_id = evaluation_t.user_id;
		super.description = evaluation_t.description;
		super.modified = new Timestamp(System.currentTimeMillis());
		this.etalon = new Etalon(evaluation_t.etalon_id);
		this.thresholdSet = new ThresholdSet(evaluation_t.threshold_set_id);

		#sql {UPDATE amficom.evaluations
						SET type_id = :(this.type_id),
								name = :(this.name),
								monitored_element_id = :(this.monitored_element_id),
								modified = :(this.modified),
								deleted = :(this.deleted),
								user_id = :(this.user_id),
								description = :(this.description),
								etalon_id = :(evaluation_t.etalon_id),
								threshold_set_id = :(evaluation_t.threshold_set_id)
						WHERE id = :(this.id)};
		#sql {SELECT domain_id 
						INTO :(this.domain_id)
						FROM amficom.monitoredelements
						WHERE id = :(this.monitored_element_id) };
		#sql { COMMIT };
	}

	public boolean isModified() throws SQLException {
		Timestamp new_modified;
		#sql {SELECT modified
						INTO :new_modified
						FROM amficom.evaluations
						WHERE id = :(this.id) };
		return new_modified.after(super.modified);
	}

	protected void setModified() throws SQLException {
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.evaluations
						SET modified = :(super.modified)
						WHERE id = :(this.id) };
		#sql {COMMIT};
	}

	#sql private iterator ResultIdsIterator (String id); 

	private String[] getResultIds() throws SQLException {
		ResultIdsIterator residIt;
		#sql residIt = {SELECT id FROM amficom.results WHERE evaluation_id = :(super.id) };
		LinkedList llrid = new LinkedList();
		while (residIt.next())
			llrid.add(residIt.id());
		residIt.close();
		String[] resids = new String[llrid.size()];
		return (String[])llrid.toArray(resids);
	}

  public static Evaluation_Transferable getDefaultTransferable() {
    return new Evaluation_Transferable(null, null, new Parameter_Transferable[0], Etalon.getDefaultTransferable());
  }
	
  #sql private static iterator EvaluationIterator(String id);

  public static Evaluation[] retrieveEvaluations() throws SQLException {
    EvaluationIterator evIt;
    #sql evIt = {SELECT id FROM amficom.evaluations};
    LinkedList linkedlist = new LinkedList();
    while (evIt.next())
      linkedlist.add(new Evaluation(evIt.id()));
    evIt.close();
    return (Evaluation[])linkedlist.toArray(new Evaluation[linkedlist.size()]);
  }

	public static Evaluation[] retrieveEvaluations(String domain_id) throws SQLException {
    EvaluationIterator evIt;
    #sql evIt = {SELECT id
						      FROM amficom.evaluations
									WHERE monitored_element_id IN (
										SELECT id FROM amficom.monitoredelements
											WHERE domain_id = :domain_id) };
    LinkedList linkedlist = new LinkedList();
    while (evIt.next())
      linkedlist.add(new Evaluation(evIt.id()));
    evIt.close();
    return (Evaluation[])linkedlist.toArray(new Evaluation[linkedlist.size()]);
  }

	public static Evaluation[] retrieveUserEvaluations(String domain_id) throws SQLException {
    EvaluationIterator evIt;
    #sql evIt = {SELECT id
						      FROM amficom.evaluations
									WHERE monitored_element_id IN (
										SELECT id FROM amficom.monitoredelements
											WHERE domain_id = :domain_id)
										AND user_id IS NOT NULL };
    LinkedList linkedlist = new LinkedList();
    while (evIt.next())
      linkedlist.add(new Evaluation(evIt.id()));
    evIt.close();
    return (Evaluation[])linkedlist.toArray(new Evaluation[linkedlist.size()]);
  }

  public static Evaluation retrieveEvaluation(String test_id) throws SQLException {
    String evaluation_id = null;
    #sql {SELECT evaluation_id
            INTO :evaluation_id
            FROM amficom.tests
            WHERE id = :test_id};
    return new Evaluation(evaluation_id);
  }

	protected static String stubCreateEvaluation(String me_id) throws Exception {
		String thd_set_id;
		#sql {SELECT MAX(id) INTO :thd_set_id FROM amficom.thresholdsets };
		if (thd_set_id == null || thd_set_id.equals(""))
			throw new SQLException("Threshold Set not found");

		String etalon_id;
		#sql {SELECT MAX(id) INTO :etalon_id FROM amficom.etalons };
		if (etalon_id == null || etalon_id.equals(""))
			throw new SQLException("Etalon not found");

		ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[0];
		ClientEvaluation_Transferable cet = new ClientEvaluation_Transferable(thd_set_id,
																																					"dadara",
																																					0,
																																					etalon_id,
																																					me_id,
																																					ResourcedbInterface.getUId("evaluation"),
																																					System.currentTimeMillis(),
																																					"A dadara evaluation",
																																					null,
																																					"The First dadara evaluation imeni Levchenko",
																																					new String[0],
																																					arguments_t);
		return (new Evaluation(cet)).getId();
	}
}