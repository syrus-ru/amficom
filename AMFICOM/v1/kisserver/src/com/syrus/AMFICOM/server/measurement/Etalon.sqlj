package com.syrus.AMFICOM.server.measurement;

import java.util.Vector;
import java.util.LinkedList;
import java.sql.SQLException;
import java.sql.Timestamp;
import com.syrus.AMFICOM.CORBA.KIS.Etalon_Transferable;
import com.syrus.AMFICOM.CORBA.KIS.Parameter_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientEtalon_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.util.Log;

public class Etalon {
  private String id;
  private String type_id;
	private String name;
	private String description;
	private Timestamp created;
	private Timestamp modified;
  private Argument[] arguments;
	private Vector monitored_elements;

	#sql private iterator EtalonMELinkIterator (String monitored_element_id);

  public Etalon(String id) throws SQLException {
    this.id = id;
    #sql {SELECT type_id,
								 name,
								 description,
								 created,
								 modified
            INTO :(this.type_id),
								 :(this.name),
								 :(this.description),
								 :(this.created),
								 :(this.modified)
            FROM amficom.etalons
            WHERE id = :(this.id) };
		this.name = (this.name == null)?"":this.name;
		this.description = (this.description == null)?"":this.description;

		this.arguments = Argument.retrieveArguments(this.id, "etalon");

		EtalonMELinkIterator melnkIt;
		#sql melnkIt = {SELECT monitored_element_id
											FROM amficom.etalonmelinks
											WHERE etalon_id = :(this.id) };
		this.monitored_elements = new Vector();
    while (melnkIt.next())
      this.monitored_elements.add(melnkIt.monitored_element_id());
		melnkIt.close();
		Log.debugMessage("Etalon.<init> | Retrieved " + this.monitored_elements.size() + " monitored element identities for etalon id: '" + this.id + "'", Log.DEBUGLEVEL05);
  }

	public Etalon(ClientEtalon_Transferable etalon_t) throws Exception {
		this.id = etalon_t.id;
//------------------------
		Log.debugMessage("************* CREATING ETALON: '" + this.id + "'", Log.DEBUGLEVEL05);
//------------------------
		this.type_id = etalon_t.type_id;
		this.name = etalon_t.name;
		this.description = etalon_t.description;
		this.created = new Timestamp(System.currentTimeMillis());
		this.modified = new Timestamp(System.currentTimeMillis());

		#sql{ INSERT INTO amficom.etalons (id,
																			 type_id,
																			 name,
																			 description,
																			 created,
																			 modified)
						VALUES (:(this.id),
										:(this.type_id),
										:(this.name),
										:(this.description),
										:(this.created),
										:(this.modified) ) };

		this.arguments = new Argument[etalon_t.etalon_parameters.length];
		for (int i = 0; i < this.arguments.length; i++)
			this.arguments[i] = new Argument(etalon_t.etalon_parameters[i], this.id, "etalon");

		#sql { COMMIT };

		this.monitored_elements = new Vector(0);
	}

	public String getId() {
		return this.id;
	} 

  public Etalon_Transferable getTransferable() throws SQLException {
		Parameter_Transferable[] arguments_t = new Parameter_Transferable[this.arguments.length];
		for (int i = 0; i < arguments_t.length; i++)
			arguments_t[i] = this.arguments[i].getTransferable();
    return new Etalon_Transferable(this.id,
																	 this.type_id,
																	 arguments_t);
  }

	public ClientEtalon_Transferable getClientTransferable() throws SQLException {
		ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[this.arguments.length];
		for (int i = 0; i < arguments_t.length; i++)
			arguments_t[i] = this.arguments[i].getClientTransferable();
		return new ClientEtalon_Transferable(this.id,
																				 this.type_id,
																				 this.name,
																				 this.description,
																				 this.created.getTime(),
																				 this.modified.getTime(),
																				 arguments_t);
	}

	public boolean isModified() throws SQLException {
		Timestamp new_modified;
		#sql {SELECT modified
						INTO :new_modified
						FROM amficom.etalons
						WHERE id = :(this.id) };
		return new_modified.after(this.modified);
	}

	public void update(ClientEtalon_Transferable etalon_t) throws Exception {
//------------------------
		Log.debugMessage("************* UPDATING ETALON: '" + this.id + "'", Log.DEBUGLEVEL05);
//------------------------
		if (etalon_t.id.compareTo(this.id) != 0)
			return;

		this.type_id = etalon_t.type_id;
		this.name = etalon_t.name;
		this.description = etalon_t.description;
		this.modified = new Timestamp(System.currentTimeMillis());

		#sql {UPDATE amficom.etalons
						SET type_id = :(this.type_id),
								name = :(this.name),
								description = :(this.description),
								created = :(this.created),
								modified = :(this.modified)
						WHERE id = :(this.id)};

		for (int i = 0; i < this.arguments.length; i++)
			this.arguments[i].update(etalon_t.etalon_parameters[i]);

		#sql { COMMIT };
	}

	public void attachToMonitoredElement(String monitored_element_id) throws SQLException {
    if (this.isAttachedToMonitoredElement(monitored_element_id))
      return;

		this.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.etalons SET modified = :(this.modified) WHERE id = :(this.id) };

		#sql { INSERT INTO amficom.etalonmelinks (monitored_element_id,
																							etalon_id)
						 VALUES (:monitored_element_id,
										 :(this.id)) };
		#sql { COMMIT };
    this.monitored_elements.add(monitored_element_id);
	}

	public void detachFromMonitoredElement(String monitored_element_id) throws SQLException {
    if (!this.isAttachedToMonitoredElement(monitored_element_id))
      return;

		this.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.etalons SET modified = :(this.modified) WHERE id = :(this.id) };

    #sql {DELETE FROM amficom.etalonmelinks
						WHERE etalon_id = :(this.id)
							AND monitored_element_id = :monitored_element_id };
		#sql { COMMIT };
    this.monitored_elements.remove(monitored_element_id);
	}

	public Vector getAttachedMonitoredElements() {
    return this.monitored_elements;
  }

	public boolean isAttachedToMonitoredElement(String monitored_element_id) {
    return this.monitored_elements.contains(monitored_element_id);
  }

	#sql private static iterator EtalonIterator(String id);

	public static Etalon[] retrieveEtalons() throws SQLException {
		EtalonIterator etIt;
		#sql etIt = {SELECT id FROM amficom.etalons};
		LinkedList linkedlist = new LinkedList();
		while (etIt.next())
			linkedlist.add(new Etalon(etIt.id()));
		etIt.close();
		return (Etalon[])linkedlist.toArray(new Etalon[linkedlist.size()]);
	}

	public static Etalon[] retrieveEtalons(String monitored_element_id) throws SQLException {
		EtalonIterator etIt;
		#sql etIt = { SELECT etalon_id id
										FROM amficom.etalonmelinks
										WHERE monitored_element_id = :monitored_element_id };
		LinkedList linkedlist = new LinkedList();
		while (etIt.next())
			linkedlist.add(new Etalon(etIt.id()));
		etIt.close();
		return (Etalon[])linkedlist.toArray(new Etalon[linkedlist.size()]);
	}

  public static Etalon_Transferable getDefaultTransferable() {
    return new Etalon_Transferable(null, null, new Parameter_Transferable[0]);
  }
}