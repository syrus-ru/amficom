package com.syrus.AMFICOM.server.event;

import sqlj.runtime.ref.DefaultContext;
import java.sql.*;
import java.util.Hashtable;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.AMFICOM.CORBA.Alarm.EventSource_Transferable;

public class EventSource {
	private static final Connection CONN = DefaultContext.getDefaultContext().getConnection(); 

	private String id;
	private String description;
	private EventSourceType eventSourceType;
	private String object_source_id;
	private String object_source_name;
	private String domain_id;
	private Hashtable rules;

	#sql private iterator RulesIterator (String event_type_id,
																			 String logic_text);

	public EventSource(String id) throws SQLException {
		this.id = id;

		String type_id;
		#sql { SELECT description,
									type_id,
									object_source_id
						 INTO :(this.description),
									:type_id,
									:(this.object_source_id)
						 FROM amficom.eventsources
						 WHERE id = :(this.id) };
		this.eventSourceType = new EventSourceType(type_id);

		this.setObjectFields();

		RulesIterator rIt;
		#sql rIt = { SELECT event_type_id,
												logic_text
									 FROM amficom.sourceeventtyperules
									 WHERE source_id = :(this.id) };
		this.rules = new Hashtable();
		String r;
		while (rIt.next()) {
			r = rIt.logic_text();
			this.rules.put(rIt.event_type_id(), (r == null)?"":r);
		}
		rIt.close();
	}
  
  public EventSource(String type_id,
										 String object_source_id,
										 String description) throws SQLException {
    this.eventSourceType = new EventSourceType(type_id);
    this.object_source_id = object_source_id;
    this.description = description;
    this.id = ResourcedbInterface.getUid(CONN, "eventsource");
    #sql { INSERT INTO amficom.eventsources (id,
                                             description,
																						 type_id,
																						 object_source_id)
               VALUES (:(this.id),
                       :(this.description),
                       :type_id,
                       :(object_source_id)) };

		this.setObjectFields();

		String[] event_types = this.eventSourceType.getGenerableEventTypes();
		this.rules = new Hashtable(event_types.length);
		String default_reaction;
		for (int i = 0; i < event_types.length; i++) {
			default_reaction = this.eventSourceType.getDefaultReaction(event_types[i]);
			this.rules.put(event_types[i], default_reaction);
			#sql {INSERT INTO amficom.sourceeventtyperules (source_id,
																											event_type_id,
																											logic_text)
							VALUES (:(this.id),
											:(event_types[i]),
											:default_reaction) };
		}
		#sql {COMMIT };
  }

	public void delete() throws SQLException {
		#sql {DELETE FROM amficom.sourceeventtyperules
						WHERE source_id = :(this.id) };
		#sql {DELETE FROM amficom.eventsources
						WHERE id = :(this.id) };
		#sql {COMMIT };
	}

	private void setObjectFields() throws SQLException {
		String source_table_name = this.eventSourceType.getSourceTableName();

		String query = "SELECT name, domain_id FROM " + source_table_name
			+ " WHERE id = '" + this.object_source_id + "'";
		Statement st = DefaultContext.getDefaultContext().getConnection().createStatement();
		ResultSet rs = st.executeQuery(query);
		if (rs.next()) {
			this.object_source_name = rs.getString("name");
			this.domain_id = rs.getString("domain_id");
		}
		rs.close();
		st.close();
	}

	public String getId() {
		return this.id;
	}

	public String getTypeId() {
		return this.eventSourceType.getId();
	}

	public String getDomainId() {
		return this.domain_id;
	}

	public EventSource_Transferable getTransferable() {
		return new EventSource_Transferable(this.id,
																				this.object_source_id,
																				this.object_source_name,
																				this.eventSourceType.getId(),
																				this.domain_id);
	}

	public boolean canGenerateEventOfType (String event_type_id) {
		return this.rules.containsKey(event_type_id);
	}

	public String getRule(String event_type_id) {
		return (String)this.rules.get(event_type_id);
	}

	public void setRule(String event_type_id, String rule) throws SQLException {
		if (this.canGenerateEventOfType(event_type_id)) {
			#sql {UPDATE amficom.sourceeventtyperules
							SET logic_text = :rule
							WHERE source_id = :(this.id)
								AND event_type_id = :event_type_id };
			#sql {COMMIT };
			this.rules.put(event_type_id, rule);
		}
	}

	public static String getIdByObjectId(String object_source_id) throws SQLException {
		String id;
		#sql {SELECT id
						INTO :id
						FROM amficom.eventsources
						WHERE object_source_id = :object_source_id};
		return id;
	}
}