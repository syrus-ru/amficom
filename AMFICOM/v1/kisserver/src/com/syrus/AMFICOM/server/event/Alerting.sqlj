package com.syrus.AMFICOM.server.event;

import com.syrus.AMFICOM.server.ResourcedbInterface;
import java.sql.*;
import sqlj.runtime.ref.DefaultContext;

public class Alerting {
	private static final Connection CONN = DefaultContext.getDefaultContext().getConnection(); 

	private String id;
	private String event_id;
	private Timestamp alerted;
	private String alerting_message_user_id;

	public Alerting(String id) throws SQLException {
		this.id = id;
		#sql { SELECT event_id,
									alerted,
									alerting_message_user_id
						 INTO :(this.event_id),
									:(this.alerted),
									:(this.alerting_message_user_id)
						 FROM amficom.alertings
						 WHERE id = :(this.id) };
	}

	public Alerting(String event_id, String alerting_message_user_id) throws SQLException {
		this.id = ResourcedbInterface.getUid(CONN, "alerting");
		this.event_id = event_id;
		this.alerted = null;
		this.alerting_message_user_id = alerting_message_user_id;

		#sql { INSERT INTO amficom.alertings (id,
																					event_id,
																					alerted,
																					alerting_message_user_id)
						 VALUES (:(this.id),
										 :(this.event_id),
										 :(this.alerted),
										 :(this.alerting_message_user_id) ) };
		#sql { COMMIT };
	}

	#sql private static iterator AlertingMessageTextIterator (String id);
	#sql private static iterator AlretingMessageUserIterator (String id);

	public static void generateAlertings(Event event) throws SQLException {
		if (event == null)
			throw new IllegalArgumentException();
		AlertingMessageTextIterator amtIt = null;
		try {
			#sql amtIt = {
				SELECT id FROM amficom.alertingmessagetexts
					WHERE event_type_id = :(event.getTypeId())
			};
			while (amtIt.next()) {
				AlretingMessageUserIterator amuIt = null;
				try {
					#sql amuIt = {
						SELECT id FROM amficom.alertingmessageuserlinks
							WHERE alerting_message_id = :(amtIt.id())
							AND source_id = :(event.getSourceId())
					};
					while (amuIt.next())
						new Alerting(event.getId(), amuIt.id());
				} finally {
					try {
						amuIt.close();
					} 
					catch (NullPointerException npe) {}
				}
			}
		} finally {
			try {
				amtIt.close();
			} catch (NullPointerException npe) {
			}
		}
	}
}
