package com.syrus.AMFICOM.server.measurement;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.LinkedList;
import com.syrus.AMFICOM.CORBA.Survey.ModelingType_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ActionParameterType_Transferable;
import com.syrus.util.Log;

public class ModelingType {
	private String id;
  private String name;
  private String description;
	private Timestamp modified;
  private ParameterType[] type_arguments;
  private ParameterType[] type_parameters;

	public ModelingType(String id) throws SQLException {
    this.id = id;
//--------------
		Log.debugMessage("*********** RETRIEVING MODELING TYPE ID == "  + this.id, Log.DEBUGLEVEL05);
//--------------

		#sql {SELECT name,
                 description,
								 modified
            INTO :(this.name),
                 :(this.description),
								 :(this.modified)
            FROM amficom.modelingtypes
            WHERE id = :(this.id) };
		this.name = (this.name == null)?"":this.name;
		this.description = (this.description == null)?"":this.description;

		this.type_arguments = ParameterType.retrieveParameterTypes(this.id, "modeling", "argument");
    this.type_parameters = ParameterType.retrieveParameterTypes(this.id, "modeling", "parameter");
	}

	public ModelingType(ModelingType_Transferable modeling_type_t) throws SQLException {
		this.id = modeling_type_t.id;
		this.name = modeling_type_t.name;
		this.description = modeling_type_t.description;
		this.modified = new Timestamp(System.currentTimeMillis());

		#sql {INSERT INTO amficom.modelingtypes (id,
                                             name,
                                             description,
																						 modified)
            VALUES (:(this.id),
                    :(this.name),
                    :(this.description),
										:(this.modified) ) };
    #sql { COMMIT };

    this.type_arguments = new ParameterType[modeling_type_t.arguments.length];
    for (int i = 0; i < this.type_arguments.length; i++)
      this.type_arguments[i] = new ParameterType(modeling_type_t.arguments[i], "modeling", "argument");
		this.type_parameters = new ParameterType[modeling_type_t.parameters.length];
    for (int i = 0; i < this.type_parameters.length; i++)
      this.type_parameters[i] = new ParameterType(modeling_type_t.parameters[i], "modeling", "parameter");
	}

	public String getId() {
    return this.id;
  }

	public ParameterType[] getTypeArguments() {
		return this.type_arguments;
	}

	public ParameterType[] getTypeParameters() {
		return this.type_parameters;
	}

	public ModelingType_Transferable getTransferable() {
		ActionParameterType_Transferable[] arguments_type_t = new ActionParameterType_Transferable[this.type_arguments.length];
    for (int i = 0; i < arguments_type_t.length; i++)
      arguments_type_t[i] = this.type_arguments[i].getTransferable();
		ActionParameterType_Transferable[] parameters_type_t = new ActionParameterType_Transferable[this.type_parameters.length];
    for (int i = 0; i < parameters_type_t.length; i++)
      parameters_type_t[i] = this.type_parameters[i].getTransferable();
		return new ModelingType_Transferable(this.id,
																				 (this.name == null)?"":this.name,
																				 (this.description == null)?"":this.description,
																				 this.modified.getTime(),
																				 parameters_type_t,
																				 arguments_type_t);
	}

	#sql private static iterator ModelingTypesIterator(String modeling_type_id);

  public static ModelingType[] retrieveModelingTypes() throws SQLException {
		ModelingTypesIterator mdTypIt;
    #sql mdTypIt = {SELECT id modeling_type_id
                      FROM amficom.modelingtypes };
    LinkedList llmdtyp = new LinkedList();
    while (mdTypIt.next())
			llmdtyp.add(new ModelingType(mdTypIt.modeling_type_id()));
    mdTypIt.close();
    return (ModelingType[])llmdtyp.toArray(new ModelingType[llmdtyp.size()]);
	}
}