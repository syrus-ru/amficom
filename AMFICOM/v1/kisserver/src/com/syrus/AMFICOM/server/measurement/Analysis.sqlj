package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.sql.Timestamp;
import java.sql.SQLException;
import com.syrus.AMFICOM.CORBA.KIS.Parameter_Transferable;
import com.syrus.AMFICOM.CORBA.KIS.Analysis_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientAnalysis_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.AMFICOM.server.ResourcedbInterface;

public class Analysis extends Action {
  private CriteriaSet criteriaSet;
  private Argument[] arguments;

  public Analysis(String id) throws SQLException {
    super.id = id;
    String criteria_set_id = null;
    #sql {SELECT an.type_id,
                 an.name,
                 an.monitored_element_id,
                 an.modified,
                 an.deleted,
                 an.user_id,
                 an.description,
                 an.criteria_set_id,
								 me.domain_id
            INTO :(this.type_id),
                 :(this.name),
                 :(this.monitored_element_id),
                 :(this.modified),
                 :(this.deleted),
                 :(this.user_id),
                 :(this.description),
                 :criteria_set_id,
								 :(this.domain_id)
            FROM amficom.analysis an,
								 amficom.monitoredelements me
            WHERE an.id = :(this.id)
							AND an.monitored_element_id = me.id };
		super.name = (super.name == null)?"":super.name;
		super.user_id = (super.user_id == null)?"":super.user_id;
		super.description = (super.description == null)?"":super.description;

    this.criteriaSet = new CriteriaSet(criteria_set_id);

    this.arguments = Argument.retrieveArguments(super.id, "analysis");
  }

  public Analysis(ClientAnalysis_Transferable analysis_t) throws Exception {
    super.id = analysis_t.id;
    super.type_id = analysis_t.type_id;
    super.name = analysis_t.name;
    super.monitored_element_id = analysis_t.monitored_element_id;
    super.user_id = analysis_t.user_id;
    super.description = analysis_t.description;
    super.modified = new Timestamp(System.currentTimeMillis());
    super.deleted = null;
    this.criteriaSet = new CriteriaSet(analysis_t.criteria_set_id);
      
    #sql {INSERT INTO amficom.analysis (id,
                                        type_id,
                                        name,
                                        monitored_element_id,
                                        modified,
                                        deleted,
                                        user_id,
                                        description,
                                        criteria_set_id)
            VALUES (:(this.id),
                    :(this.type_id),
                    :(this.name),
                    :(this.monitored_element_id),
                    :(this.modified),
                    :(this.deleted),
                    :(this.user_id),
                    :(this.description),
                    :(analysis_t.criteria_set_id)) };

		#sql {SELECT domain_id 
						INTO :(this.domain_id)
						FROM amficom.monitoredelements
						WHERE id = :(this.monitored_element_id) };

    this.arguments = new Argument[analysis_t.arguments.length];
    for (int i = 0; i < this.arguments.length; i++)
      this.arguments[i] = new Argument(analysis_t.arguments[i], super.id, "analysis");

    #sql { COMMIT };
  }

  public Analysis_Transferable getTransferable() throws SQLException {
    return new Analysis_Transferable(super.id,
                                     super.type_id,
                                     this.criteriaSet.getKISCriteria()); 
  }

  public ClientAnalysis_Transferable getClientTransferable() throws SQLException {
    ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[this.arguments.length];
    for (int i = 0; i < arguments_t.length; i++)
      arguments_t[i] = this.arguments[i].getClientTransferable();
    return new ClientAnalysis_Transferable(super.id,
                                           super.type_id,
                                           this.criteriaSet.getId(),
                                           super.monitored_element_id,
                                           super.name,
                                           super.modified.getTime(),
                                           super.user_id,
                                           (super.deleted == null)?0:super.deleted.getTime(),
                                           super.description,
																					 this.getResultIds(),
                                           arguments_t); 
  }

	public Test getTest() throws SQLException {
		String test_id;
		#sql {SELECT id
						INTO :test_id
						FROM amficom.tests
						WHERE analysis_id = :(this.id) };
		return new Test(test_id);
	}

	public boolean isModified() throws SQLException {
		Timestamp new_modified;
		#sql {SELECT modified
						INTO :new_modified
						FROM amficom.analysis
						WHERE id = :(this.id) };
		return new_modified.after(super.modified);
	}

	protected void setModified() throws SQLException {
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.analysis
						SET modified = :(super.modified)
						WHERE id = :(this.id) };
		#sql {COMMIT};
	}

	public void update(ClientAnalysis_Transferable analysis_t) throws SQLException {
		if (analysis_t.id.compareTo(super.id) != 0)
			return;

		super.type_id = analysis_t.type_id;
    super.name = analysis_t.name;
    super.monitored_element_id = analysis_t.monitored_element_id;
    super.user_id = analysis_t.user_id;
    super.description = analysis_t.description;
    super.modified = new Timestamp(System.currentTimeMillis());
    this.criteriaSet = new CriteriaSet(analysis_t.criteria_set_id);

		#sql {UPDATE amficom.analysis
						SET type_id = :(this.type_id),
								name = :(this.name),
								monitored_element_id = :(this.monitored_element_id),
								modified = :(this.modified),
								deleted = :(this.deleted),
								user_id = :(this.user_id),
								description = :(this.description),
								criteria_set_id = :(analysis_t.criteria_set_id)
						WHERE id = :(this.id)};
		#sql {SELECT domain_id 
						INTO :(this.domain_id)
						FROM amficom.monitoredelements
						WHERE id = :(this.monitored_element_id) };
		#sql { COMMIT };
	}

	#sql private iterator ResultIdsIterator (String id); 

	private String[] getResultIds() throws SQLException {
		ResultIdsIterator residIt;
		#sql residIt = {SELECT id FROM amficom.results WHERE analysis_id = :(this.id) };
		LinkedList llrid = new LinkedList();
		while (residIt.next())
			llrid.add(residIt.id());
		residIt.close();
		String[] resids = new String[llrid.size()];
		return (String[])llrid.toArray(resids);
	}

  public static Analysis_Transferable getDefaultTransferable() {
    return new Analysis_Transferable(null, null, new Parameter_Transferable[0]);
  }

  #sql private static iterator AnalysisIterator(String id);

  public static Analysis[] retrieveAnalysises() throws SQLException {
    AnalysisIterator anIt;
    #sql anIt = {SELECT id FROM amficom.analysis};
    LinkedList linkedlist = new LinkedList();
    while (anIt.next())
      linkedlist.add(new Analysis(anIt.id()));
    anIt.close();
    return (Analysis[])linkedlist.toArray(new Analysis[linkedlist.size()]);
  }

	public static Analysis[] retrieveAnalysises(String domain_id) throws SQLException {
		AnalysisIterator anIt;
		#sql anIt = {SELECT id
						      FROM amficom.analysis
									WHERE monitored_element_id IN (
										SELECT id FROM amficom.monitoredelements
											WHERE domain_id = :domain_id) };
		LinkedList linkedlist = new LinkedList();
    while (anIt.next())
			linkedlist.add(new Analysis(anIt.id()));
		anIt.close();
		return (Analysis[])linkedlist.toArray(new Analysis[linkedlist.size()]);
	}

	public static Analysis[] retrieveUserAnalysises(String domain_id) throws SQLException {
		AnalysisIterator anIt;
		#sql anIt = {SELECT id
						      FROM amficom.analysis
									WHERE monitored_element_id IN (
										SELECT id FROM amficom.monitoredelements
											WHERE domain_id = :domain_id)
										AND user_id IS NOT NULL };
		LinkedList linkedlist = new LinkedList();
    while (anIt.next())
			linkedlist.add(new Analysis(anIt.id()));
		anIt.close();
		return (Analysis[])linkedlist.toArray(new Analysis[linkedlist.size()]);
	}

  public static Analysis retrieveAnalysis(String test_id) throws SQLException {
    String analysis_id = null;
    #sql {SELECT analysis_id
            INTO :analysis_id
            FROM amficom.tests
            WHERE id = :test_id};
    return new Analysis(analysis_id);
  }

	protected static String stubCreateAnalysis(String me_id) throws Exception {
		String cri_set_id;
		#sql {SELECT MAX(id) INTO :cri_set_id FROM amficom.criteriasets };
		if (cri_set_id == null || cri_set_id.equals(""))
			throw new SQLException("Criteria Set not found");
		ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[0];
		ClientAnalysis_Transferable cat = new ClientAnalysis_Transferable(ResourcedbInterface.getUId("analysis"),
												                                              "dadara",
																																			cri_set_id,
																																			me_id,
																																			"A dadara analysis",
																																			System.currentTimeMillis(),
																																			null,
																																			0,
																																			"The First dadara analysis imeni Levchenko",
																																			new String[0],
																																			arguments_t);
		return (new Analysis(cat)).getId();
	}
}