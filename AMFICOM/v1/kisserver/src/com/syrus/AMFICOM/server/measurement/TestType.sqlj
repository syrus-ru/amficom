package com.syrus.AMFICOM.server.measurement;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Vector;
import java.util.LinkedList;
import com.syrus.AMFICOM.CORBA.Survey.TestType_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ActionParameterType_Transferable;

public class TestType  {
	private String id;
	private String name;
	private String description;
	private Timestamp modified;
	private ParameterType[] type_parameters;
  private ParameterType[] type_arguments;
	private Vector analysis_type_ids;
	private Vector evaluation_type_ids;

	public TestType(String id) throws SQLException {
		this.id = id;
		#sql {SELECT name,
								 modified,
								 description
						INTO :(this.name),
								 :(this.modified),
								 :(this.description)
						FROM amficom.testtypes
						WHERE id = :(this.id) };
		this.name = (this.name == null)?"":this.name;
		this.description = (this.description == null)?"":this.description;

		this.type_parameters = ParameterType.retrieveParameterTypes(this.id, "test", "parameter");
		this.type_arguments = ParameterType.retrieveParameterTypes(this.id, "test", "argument");

		this.analysis_type_ids = AnalysisType.retrieveAnalysisTypeIds(this.id);
		this.evaluation_type_ids = EvaluationType.retrieveEvaluationTypeIds(this.id);
	}

	public TestType(TestType_Transferable ttt) throws SQLException {
		this.id = ttt.id;//ResourcedbInterface.getUId("testtype");
		this.name = ttt.name;
		this.modified = new Timestamp(System.currentTimeMillis());
		this.description = ttt.description;

		#sql {INSERT INTO amficom.testtypes (id,
																				 name,
																				 modified,
																				 description)
						VALUES (:(this.id),
										:(this.name),
										:(this.modified),
										:(this.description) ) };
		#sql { COMMIT };

		this.type_parameters = new ParameterType[ttt.parameters.length];
		for (int i = 0; i < ttt.parameters.length; i++)
			this.type_parameters[i] = new ParameterType(ttt.parameters[i], "test", "parameter");
		this.type_arguments = new ParameterType[ttt.arguments.length];
		for (int i = 0; i < ttt.arguments.length; i++)
			this.type_arguments[i] = new ParameterType(ttt.arguments[i], "test", "argument");

		this.analysis_type_ids = new Vector(ttt.analysis_type_ids.length);
		for (int i = 0; i < ttt.analysis_type_ids.length; i++)
			this.analysis_type_ids.add(ttt.analysis_type_ids[i]);
		this.evaluation_type_ids = new Vector(ttt.evaluation_type_ids.length);
		for (int i = 0; i < ttt.evaluation_type_ids.length; i++)
			this.evaluation_type_ids.add(ttt.evaluation_type_ids[i]);
	}

	public String getId() {
    return this.id;
  }

	public ParameterType[] getTypeArguments() {
		return this.type_arguments;
	}

	public ParameterType[] getTypeParameters() {
		return this.type_parameters;
	}

	public TestType_Transferable getTransferable() {
    ActionParameterType_Transferable[] parameters_type_t = new ActionParameterType_Transferable[this.type_parameters.length];
    for (int i = 0; i < parameters_type_t.length; i++)
			parameters_type_t[i] = this.type_parameters[i].getTransferable();
		ActionParameterType_Transferable[] arguments_type_t = new ActionParameterType_Transferable[this.type_arguments.length];
    for (int i = 0; i < arguments_type_t.length; i++)
      arguments_type_t[i] = this.type_arguments[i].getTransferable();

		String[] an_typ_ids = new String[this.analysis_type_ids.size()];
		for (int i = 0; i < an_typ_ids.length; i++)
			an_typ_ids[i] = (String)this.analysis_type_ids.get(i);
		String[] ev_typ_ids = new String[this.evaluation_type_ids.size()];
		for (int i = 0; i < ev_typ_ids.length; i++)
			ev_typ_ids[i] = (String)this.evaluation_type_ids.get(i);

		return new TestType_Transferable(this.id,
																		 (this.name == null)?"":this.name,
																		 (this.description == null)?"":this.description,
																		 this.modified.getTime(),
																		 parameters_type_t,
																		 arguments_type_t,
																		 an_typ_ids,
																		 ev_typ_ids);
	}

	public void attachAnalysisType(String analysis_type_id) throws SQLException {
		if (this.isAttachedAnalysisType(analysis_type_id))
			return;
		#sql{ INSERT INTO amficom.analysistesttypelinks (analysis_type_id,
																										 test_type_id)
						VALUES (:analysis_type_id,
										:(this.id) ) };
		#sql { COMMIT };
		this.analysis_type_ids.add(analysis_type_id);
	}

	public void attachEvaluationType(String evaluation_type_id) throws SQLException {
		if (this.isAttachedEvaluationType(evaluation_type_id))
			return;
		#sql{ INSERT INTO amficom.evaluationtesttypelinks (evaluation_type_id,
																											 test_type_id)
						VALUES (:evaluation_type_id,
										:(this.id) ) };
		#sql { COMMIT };
		this.evaluation_type_ids.add(evaluation_type_id);
	}

	public void detachAnalysisType(String analysis_type_id) throws SQLException {
		if (!this.isAttachedAnalysisType(analysis_type_id))
			return;
		#sql { DELETE FROM amficom.analysistesttypelinks
						 WHERE analysis_type_id = :analysis_type_id
							 AND test_type_id = :(this.id)};
		#sql { COMMIT };
		this.analysis_type_ids.remove(analysis_type_id);
	}

	public void detachEvaluationType(String evaluation_type_id) throws SQLException {
		if (!this.isAttachedEvaluationType(evaluation_type_id))
			return;
		#sql { DELETE FROM amficom.evaluationtesttypelinks
						 WHERE evaluation_type_id = :evaluation_type_id
							 AND test_type_id = :(this.id)};
		#sql { COMMIT };
		this.evaluation_type_ids.remove(evaluation_type_id);
	}

	public boolean isAttachedAnalysisType(String analysis_type_id) {
		return this.analysis_type_ids.contains(analysis_type_id);
	}

	public boolean isAttachedEvaluationType(String evaluation_type_id) {
		return this.evaluation_type_ids.contains(evaluation_type_id);
	}

	#sql private static iterator TestTypesIterator(String id);

	public static TestType[] retrieveTestTypes() throws SQLException {
		TestTypesIterator tTypIt;
    #sql tTypIt = {SELECT id 
                      FROM amficom.testtypes };
    LinkedList llttyp = new LinkedList();
    while (tTypIt.next())
			llttyp.add(new TestType(tTypIt.id()));
    tTypIt.close();
    return (TestType[])llttyp.toArray(new TestType[llttyp.size()]);
	}
}