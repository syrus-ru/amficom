package com.syrus.AMFICOM.server.event;

import java.util.LinkedList;
import java.sql.Timestamp;
import java.sql.SQLException;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.AMFICOM.CORBA.Alarm.Event_Transferable;
import com.syrus.AMFICOM.CORBA.General.EventStatus;
import com.syrus.util.Log;

public class Event {
  private String id;
  private int status;
  private String descriptor;
  private String description;
  private Timestamp created;
  private String source_id;
  private String type_id;

	public Event(String id) throws SQLException {
		this.id = id;
		#sql { SELECT status,
									descriptor,
									description,
									created,
									source_id,
									type_id
						 INTO :(this.status),
									:(this.descriptor),
									:(this.description),
									:(this.created),
									:(this.source_id),
									:(this.type_id)
						 FROM amficom.events
						 WHERE id = :(this.id) };
	}

	public Event(String descriptor,
               String description,
               String source_id,
               String type_id) throws SQLException {
    this.id = ResourcedbInterface.getUId("event");
    this.status = EventStatus._EVENT_STATUS_GENERATED;
    this.descriptor = descriptor;
    this.description = description;
    this.created = new Timestamp(System.currentTimeMillis());
		this.source_id = source_id;
    this.type_id = type_id;

    #sql { INSERT INTO amficom.events (id,
																			 status,
																			 descriptor,
																			 description,
																			 created,
																			 source_id,
																			 type_id)
             VALUES (:(this.id),
                     :(this.status),
										 :(this.descriptor),
										 :(this.description),
										 :(this.created),
										 :(this.source_id),
										 :(this.type_id)) };
		#sql {COMMIT };
	}

  private Event(String id,
                int status,
                String descriptor,
                String description,
                Timestamp created,
                String source_id,
                String type_id) {
    this.id = id;
    this.status = status;
    this.descriptor = descriptor;
    this.description = description;
    this.created = created;
    this.source_id = source_id;
    this.type_id = type_id;
  }

  public String getId() {
    return this.id;
  }

  public int getStatus() {
    return this.status;
  }

  public String getDescriptor() {
    return this.descriptor;
  }

  public String getDescription() {
    return this.description;
  }

  public Timestamp getCreated() {
    return this.created;
  }

  public String getSourceId() {
    return this.source_id;
  }

  public String getTypeId() {
    return this.type_id;
  }

	public Event_Transferable getTransferable() {
		return new Event_Transferable(this.id,
																	this.description,
																	this.source_id,
																	this.type_id,
																	this.descriptor,
																	EventStatus.from_int(this.status),
																	this.created.getTime());
	}

  public void updateStatus(int status) throws SQLException {
    this.status = status;
    #sql {UPDATE amficom.events
            SET status = :(this.status)
            WHERE id = :(this.id) };
		#sql {COMMIT };
  }

  #sql public static iterator EventsIterator (String id,
                                              int status,
                                              String descriptor,
                                              String description,
                                              Timestamp created,
                                              String source_id,
                                              String type_id); 

  public static LinkedList getGeneratedEvents() {
		LinkedList llev = new LinkedList();
		try {
			int count = 0;
	    #sql {SELECT COUNT(*) INTO :count FROM amficom.events WHERE status = :(EventStatus._EVENT_STATUS_GENERATED) };
		  if (count == 0)
			  return null;

	    EventsIterator evIt;
			#sql evIt = {SELECT id,
				                  status,
					                descriptor,
						              description,
							            created,
								          source_id,
									        type_id
										 FROM amficom.events
		                 WHERE status = :(EventStatus._EVENT_STATUS_GENERATED) };
			while (evIt.next()) {
	      llev.add(new Event(evIt.id(),
										       evIt.status(),
									         evIt.descriptor(),
													 evIt.description(),
													 evIt.created(),
													 evIt.source_id(),
													 evIt.type_id()));
			}
			evIt.close();
		}
		catch (SQLException e) {
			Log.errorException(e);
			return null;
		}
    return llev;
  }
}