package com.syrus.AMFICOM.server.measurement;

import java.util.Vector;
import java.util.LinkedList;
import java.sql.Timestamp;
import java.sql.SQLException;
import com.syrus.AMFICOM.CORBA.Survey.TestSetup_Transferable;
import com.syrus.util.Log;

public class TestSetup {
	private String id;
	private String name;
	private Timestamp created;
	private Timestamp modified;
	private String created_by;
	private String description;
	private String test_argument_set_id;
	private String criteria_set_id;
	private String threshold_set_id;
	private String etalon_id;
	private Vector monitored_elements;

	#sql private iterator TestSetupMELinkIterator (String monitored_element_id);

	public TestSetup(String id) throws SQLException {
		this.id = id;
		#sql { SELECT name,
									created,
									modified,
									created_by,
									description,
									test_argument_set_id,
									criteria_set_id,
									threshold_set_id,
									etalon_id
						 INTO :(this.name),
									:(this.created),
									:(this.modified),
									:(this.created_by),
									:(this.description),
									:(this.test_argument_set_id),
									:(this.criteria_set_id),
									:(this.threshold_set_id),
									:(this.etalon_id)
						 FROM amficom.testsetups
						 WHERE id = :(this.id) };
		this.name = (this.name == null)?"":this.name;
		this.description = (this.description == null)?"":this.description;
		this.test_argument_set_id = (this.test_argument_set_id == null)?"":this.test_argument_set_id;
		this.criteria_set_id = (this.criteria_set_id == null)?"":this.criteria_set_id;
		this.threshold_set_id = (this.threshold_set_id == null)?"":this.threshold_set_id;
		this.etalon_id = (this.etalon_id == null)?"":this.etalon_id;

		TestSetupMELinkIterator tsmeIt;
		#sql tsmeIt = {SELECT monitored_element_id
                      FROM amficom.testsetupmelinks
                      WHERE set_id = :(this.id) };
		this.monitored_elements = new Vector();
		while (tsmeIt.next())
			this.monitored_elements.add(tsmeIt.monitored_element_id());
		tsmeIt.close();
		Log.debugMessage("TestSetup.<init> | Retrieved " + this.monitored_elements.size() + " monitored element identities for test setup id: '" + this.id + "'", Log.DEBUGLEVEL05);
}

	public TestSetup(TestSetup_Transferable tst) throws SQLException {
		this.id = tst.id;
		this.name = tst.name;
		this.created = new Timestamp(System.currentTimeMillis());
		this.modified = new Timestamp(System.currentTimeMillis());
		this.created_by = tst.created_by;
		this.description = tst.description;
		this.test_argument_set_id = tst.test_argument_set_id;
		this.criteria_set_id = tst.criteria_set_id;
		this.threshold_set_id = tst.threshold_set_id;
		this.etalon_id = tst.etalon_id;

		#sql {INSERT INTO amficom.testsetups (id,
																					name,
																					created,
																					modified,
																					created_by,
																					description,
																					test_argument_set_id,
																					criteria_set_id,
																					threshold_set_id,
																					etalon_id)
						VALUES (:(this.id),
										:(this.name),
										:(this.created),
										:(this.modified),
										:(this.created_by),
										:(this.description),
										:(this.test_argument_set_id),
										:(this.criteria_set_id),
										:(this.threshold_set_id),
										:(this.etalon_id) ) };
		#sql { COMMIT };

		this.monitored_elements = new Vector(0);
	}

	public String getId() {
		return this.id;
	}

	public TestSetup_Transferable getTransferable() throws SQLException {
		TestArgumentSet testArgumentSet;
		CriteriaSet criteriaSet;
		ThresholdSet thresholdSet;
		try {
			testArgumentSet = new TestArgumentSet(this.test_argument_set_id);
		}
		catch (Exception e) {
			Log.debugMessage("Cannot find TestArgumentSet for id: '" + this.test_argument_set_id + "'", Log.DEBUGLEVEL03);
			testArgumentSet = null;
		}
		try {
			criteriaSet = new CriteriaSet(this.criteria_set_id);
		}
		catch (Exception e) {
			Log.debugMessage("Cannot find CriteriaSet for id: '" + this.criteria_set_id + "'", Log.DEBUGLEVEL03);
			criteriaSet = null;
		}
		try {
			thresholdSet = new ThresholdSet(this.threshold_set_id);
		}
		catch (Exception e) {
			Log.debugMessage("Cannot find ThresholdSet for id: '" + this.threshold_set_id + "'", Log.DEBUGLEVEL03);
			thresholdSet = null;
		}

		return new TestSetup_Transferable(this.id,
																			this.name,
																			this.created.getTime(),
																			this.modified.getTime(),
																			this.created_by,
																			this.description,
																			(testArgumentSet == null)?"":testArgumentSet.getTestTypeId(),
																			this.test_argument_set_id,
																			(criteriaSet == null)?"":criteriaSet.getAnalysisTypeId(),
																			this.criteria_set_id,
																			(thresholdSet == null)?"":thresholdSet.getEvaluationTypeId(),
																			this.threshold_set_id,
																			this.etalon_id,
																			(String[])this.monitored_elements.toArray(new String[this.monitored_elements.size()]));
	}

	public void update(TestSetup_Transferable tst) throws SQLException {
		if (tst.id.compareTo(this.id) != 0)
			return;

		this.name = tst.name;
		this.modified = new Timestamp(System.currentTimeMillis());
		this.description = tst.description;
		this.test_argument_set_id = tst.test_argument_set_id;
		this.criteria_set_id = tst.criteria_set_id;
		this.threshold_set_id = tst.threshold_set_id;
		this.etalon_id = tst.etalon_id;

		#sql {UPDATE amficom.testsetups
						SET name = :(this.name),
								modified = :(this.modified),
								description = :(this.description),
								test_argument_set_id = :(this.test_argument_set_id),
								criteria_set_id = :(this.criteria_set_id),
								threshold_set_id = :(this.threshold_set_id),
								etalon_id = :(this.etalon_id)
						WHERE id = :(this.id) };
		#sql { COMMIT };
	}

	public boolean isAttachedToMonitoredElement(String monitored_element_id) {
    return this.monitored_elements.contains(monitored_element_id);
  }

	public void attachToMonitoredElement(String monitored_element_id) throws SQLException {
    if (this.isAttachedToMonitoredElement(monitored_element_id))
      return;
    #sql {INSERT INTO amficom.testsetupmelinks (set_id,
																								monitored_element_id)
            VALUES (:(this.id),
                    :monitored_element_id) };
		#sql { COMMIT };
    this.monitored_elements.add(monitored_element_id);
	}

	public void detachFromMonitoredElement(String monitored_element_id) throws SQLException {
    if (!this.isAttachedToMonitoredElement(monitored_element_id))
      return;
    #sql {DELETE FROM amficom.testsetupmelinks
            WHERE set_id = :(this.id)
              AND monitored_element_id = :monitored_element_id };
		#sql { COMMIT };
    this.monitored_elements.remove(monitored_element_id);
  }

	public Vector getAttachedMonitoredElements() {
    return this.monitored_elements;
  }

	#sql private static iterator TestSetupIterator(String id);

	public static TestSetup[] retrieveTestSetups(String monitored_element_id) throws SQLException {
    TestSetupIterator tsIt;
    #sql tsIt = { SELECT set_id id
                    FROM amficom.testsetupmelinks
                    WHERE monitored_element_id = :monitored_element_id};
    LinkedList linkedlist = new LinkedList();
    while (tsIt.next())
      linkedlist.add(new TestSetup(tsIt.id()));
    tsIt.close();
    return (TestSetup[])linkedlist.toArray(new TestSetup[linkedlist.size()]);
  }

	public static TestSetup[] retrieveTestSetupsForTestType(String test_type_id) throws SQLException {
		TestSetupIterator tsIt;
    #sql tsIt = { SELECT id
										FROM amficom.testsetups
										WHERE test_argument_set_id IN (
											SELECT id
												FROM testargumentsets
												WHERE test_type_id = :test_type_id)
											AND id NOT IN (
												SELECT set_id
													FROM amficom.testsetupmelinks) };
		LinkedList linkedlist = new LinkedList();
    while (tsIt.next())
      linkedlist.add(new TestSetup(tsIt.id()));
    tsIt.close();
    return (TestSetup[])linkedlist.toArray(new TestSetup[linkedlist.size()]);
	}
}
