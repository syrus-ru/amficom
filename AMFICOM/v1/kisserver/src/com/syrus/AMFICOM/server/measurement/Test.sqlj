package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.sql.*;
import com.syrus.AMFICOM.CORBA.General.TestStatus;
import com.syrus.AMFICOM.CORBA.General.TestTemporalType;
import com.syrus.AMFICOM.CORBA.General.TestTimeStamps;
import com.syrus.AMFICOM.CORBA.General.TestTimeStampsPackage.PeriodicalTestParameters;
import com.syrus.AMFICOM.CORBA.General.TestReturnType;
import com.syrus.AMFICOM.CORBA.General.TestRequestStatus;
import com.syrus.AMFICOM.CORBA.KIS.Test_Transferable;
import com.syrus.AMFICOM.CORBA.KIS.Analysis_Transferable;
import com.syrus.AMFICOM.CORBA.KIS.Evaluation_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientTest_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ElementaryTestAlarm;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.Log;
import sqlj.runtime.ref.DefaultContext;

public class Test extends Action {
	private static final Connection CONN = DefaultContext.getDefaultContext().getConnection(); 

	public static final Timestamp DEFAULT_DURATION = new Timestamp(3000);

	private int temporal_type;
	private Timestamp start_time;
	private Timestamp period;
	private Timestamp end_time;
	private Timestamp[] ti;
	private int status;
	private String kis_id;
	private String local_address;
	private String request_id;
	private Analysis analysis;
	private Evaluation evaluation;
	private int return_type;
	private Timestamp duration;
	private TestArgumentSet testArgumentSet;
	private ElementaryTestAlarm[] elementaryTestAlarms;
	private String test_setup_id;

  public Test(ClientTest_Transferable tt) throws SQLException {
    super.id = tt.id;
    super.type_id = tt.test_type_id;
    this.temporal_type = tt.temporal_type.value();
    this.start_time = new Timestamp(tt.start_time);
    switch (this.temporal_type) {
      case TestTemporalType._TEST_TEMPORAL_TYPE_PERIODICAL:
        this.period = new Timestamp(tt.time_stamps.ptpars().dt);
        this.end_time = new Timestamp(tt.time_stamps.ptpars().end_time);
        break;
      case TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE:
				long[] lti = tt.time_stamps.ti();
				this.ti = new Timestamp[lti.length];
        for (int i = 0; i < this.ti.length; i++)
          this.ti[i] = new Timestamp(lti[i]);
    }
    this.status = TestStatus._TEST_STATUS_SCHEDULED;
    this.kis_id = tt.kis_id;
    super.monitored_element_id = tt.monitored_element_id;
    this.local_address = getLocalAddress(super.monitored_element_id);
    this.request_id = tt.request_id;
    if (tt.analysis_id != null && !tt.analysis_id.equals("")) {
      this.analysis = new Analysis(tt.analysis_id);
/*//----------------- ANALYSIS STUB
			String an_id = Analysis.stubCreateAnalysis(super.monitored_element_id);
			this.analysis = new Analysis(an_id);
			tt.analysis_id = an_id;
//-----------------*/
		}
    if (tt.evaluation_id != null && !tt.evaluation_id.equals("")) {
      this.evaluation = new Evaluation(tt.evaluation_id);
/*//----------------- EVALUATION STUB
			String ev_id = Evaluation.stubCreateEvaluation(super.monitored_element_id);
			this.evaluation = new Evaluation(ev_id);
			tt.evaluation_id = ev_id;
//-----------------*/
		}
		super.modified = new Timestamp(System.currentTimeMillis());
    super.deleted = null;
		super.name = tt.name;
		this.testArgumentSet = new TestArgumentSet(tt.test_argument_set_id);
    this.return_type = tt.return_type.value();
		this.duration = new Timestamp(tt.duration);
		this.test_setup_id = tt.test_setup_id;

    #sql {INSERT INTO amficom.tests (id,
                                     test_type_id,
                                     temporal_type,
                                     start_time,
                                     period,
                                     end_time,
                                     status,
                                     kis_id,
                                     monitored_element_id,
                                     request_id,
                                     analysis_id,
                                     evaluation_id,
                                     return_type,
																		 duration,
																		 modified,
                                     deleted,
																		 name,
																		 test_argument_set_id,
																		 test_setup_id)
            VALUES (:(this.id),
                    :(this.type_id),
                    :(this.temporal_type),
                    :(this.start_time),
                    :(this.period),
                    :(this.end_time),
                    :(this.status),
                    :(this.kis_id),
                    :(this.monitored_element_id),
                    :(this.request_id),
                    :(tt.analysis_id),
                    :(tt.evaluation_id),
                    :(this.return_type),
										:(this.duration),
										:(this.modified),
                    :(this.deleted),
										:(this.name),
										:(tt.test_argument_set_id),
										:(this.test_setup_id) ) };

		#sql {SELECT domain_id 
						INTO :(this.domain_id)
						FROM amficom.monitoredelements
						WHERE id = :(this.monitored_element_id) };

    if (this.temporal_type == TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE)
      this.saveTestTimeTableStamps();

		this.retrieveElementaryTestAlarms();

//---------- Maybe remove later ----------
		#sql {UPDATE amficom.tests
						SET domain_id = :(super.domain_id)
						WHERE id = :(super.id) };
//-----------------------------------------

    #sql { COMMIT };
  }

  public Test(String id) throws SQLException {
    super.id = id;
    String analysis_id, evaluation_id, test_argument_set_id;
    #sql {SELECT ts.test_type_id,
                 ts.temporal_type,
                 ts.start_time,
                 ts.period,
                 ts.end_time,
                 ts.status,
                 ts.kis_id,
                 ts.monitored_element_id,
                 ts.request_id,
                 ts.analysis_id,
                 ts.evaluation_id,
                 ts.return_type,
								 ts.duration,
                 ts.modified,
                 ts.deleted,
								 ts.name,
								 ts.test_argument_set_id,
								 ts.test_setup_id,
								 me.domain_id
            INTO :(this.type_id),
                 :(this.temporal_type),
                 :(this.start_time),
                 :(this.period),
                 :(this.end_time),
                 :(this.status),
                 :(this.kis_id),
                 :(this.monitored_element_id),
                 :(this.request_id),
                 :analysis_id,
                 :evaluation_id,
                 :(this.return_type),
								 :(this.duration),
                 :(this.modified),
                 :(this.deleted),
								 :(this.name),
								 :test_argument_set_id,
								 :(this.test_setup_id),
								 :(this.domain_id)
            FROM amficom.tests ts,
								 amficom.monitoredelements me
            WHERE ts.id = :id
							AND ts.monitored_element_id = me.id };
		super.name = (super.name == null)?"":super.name;
		super.description = (super.description == null)?"":super.description;
		super.user_id = (super.user_id == null)?"":super.user_id;
		this.test_setup_id = (this.test_setup_id == null)?"":this.test_setup_id;
		this.duration = (this.duration == null)?DEFAULT_DURATION:this.duration;

    if (this.temporal_type == TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE)
      this.ti = this.getTestTimeTableStamps();
    this.local_address = getLocalAddress(super.monitored_element_id);

    if (analysis_id != null && !analysis_id.equals(""))
      this.analysis = new Analysis(analysis_id);
    if (evaluation_id != null && !evaluation_id.equals(""))
      this.evaluation = new Evaluation(evaluation_id);
    this.testArgumentSet = new TestArgumentSet(test_argument_set_id);
		this.retrieveElementaryTestAlarms();
  }

  public Test_Transferable getTransferable() throws SQLException {
    TestTimeStamps timeStamps = null;
    switch (this.temporal_type) {
      case TestTemporalType._TEST_TEMPORAL_TYPE_ONETIME:
        timeStamps = new TestTimeStamps();
        timeStamps._default();
      break;
      case TestTemporalType._TEST_TEMPORAL_TYPE_PERIODICAL:
        timeStamps = new TestTimeStamps();
        timeStamps.ptpars(new PeriodicalTestParameters(this.period.getTime(), this.end_time.getTime()));
      break;
      case TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE:
        timeStamps = new TestTimeStamps();
        long[] ti_l = new long[this.ti.length];
        for (int i = 0; i < ti_l.length; i++)
          ti_l[i] = this.ti[i].getTime();
        timeStamps.ti(ti_l);
      break;
      default:
        Log.errorMessage("AMFICOMKIS | Unknown temporal type for test id = " + super.id + ": " + this.temporal_type);
        return null;
    }

    Analysis_Transferable antr = Analysis.getDefaultTransferable();
    if (this.analysis != null)
      antr = this.analysis.getTransferable();
    Evaluation_Transferable evtr = Evaluation.getDefaultTransferable();
    if (this.evaluation != null)
      evtr = evaluation.getTransferable();

    return new Test_Transferable(super.id,
                                 super.type_id,
                                 this.request_id,
                                 TestTemporalType.from_int(this.temporal_type),
                                 this.start_time.getTime(),
                                 timeStamps,
                                 TestStatus.from_int(this.status),
                                 this.kis_id,
                                 super.monitored_element_id,
                                 this.local_address,
                                 this.testArgumentSet.getKISArguments(),
                                 antr,
                                 evtr,
                                 TestReturnType.from_int(this.return_type));
  }

	public ClientTest_Transferable getClientTransferable() throws SQLException {
    TestTimeStamps timeStamps = null;
    switch (this.temporal_type) {
      case TestTemporalType._TEST_TEMPORAL_TYPE_ONETIME:
        timeStamps = new TestTimeStamps();
        timeStamps._default();
      break;
      case TestTemporalType._TEST_TEMPORAL_TYPE_PERIODICAL:
        timeStamps = new TestTimeStamps();
        timeStamps.ptpars(new PeriodicalTestParameters(this.period.getTime(), this.end_time.getTime()));
      break;
      case TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE:
        timeStamps = new TestTimeStamps();
        long[] ti_l = new long[this.ti.length];
        for (int i = 0; i < ti_l.length; i++)
          ti_l[i] = this.ti[i].getTime();
        timeStamps.ti(ti_l);
      break;
      default:
        Log.errorMessage("AMFICOMKIS | Unknown temporal type for test id = " + super.id + ": " + this.temporal_type);
        return null;
    }

		return new ClientTest_Transferable(super.id,
																			 super.type_id,
																			 this.start_time.getTime(),
																			 (super.deleted == null)?0:super.deleted.getTime(),
																			 this.kis_id,
																			 super.monitored_element_id,
																			 super.name,
																			 super.modified.getTime(),
																			 this.request_id,
																			 TestTemporalType.from_int(this.temporal_type),
																			 timeStamps,
																			 TestStatus.from_int(this.status),
																			 (this.analysis == null)?"":this.analysis.getId(),
																			 (this.evaluation == null)?"":this.evaluation.getId(),
																			 TestReturnType.from_int(this.return_type),
																			 this.duration.getTime(),
																			 this.elementaryTestAlarms,
																			 this.getResultIds(),
																			 this.testArgumentSet.getId(),
																			 this.test_setup_id);
	}

  public int getStatus() {
    return this.status;
  }

  public int getTemporalType() {
    return this.temporal_type;
  }

  public Timestamp getPeriod() {
    return this.period;
  }

  public Timestamp getEndTime() {
    return this.end_time;
  }

  public Timestamp[] getTI() {
    return this.ti;
  }

	public String getKISId() {
		return this.kis_id;
	}

  public Analysis getAnalysis() {
    return this.analysis;
  }

  public Evaluation getEvaluation() {
    return this.evaluation;
  }

	public Timestamp getDuration() {
		return this.duration;
	}

	#sql private iterator EvaluationResultIterator (String id,
																									Timestamp elementary_start_time);

	private void retrieveElementaryTestAlarms() throws SQLException {
		EvaluationResultIterator erIt;
		#sql erIt = { SELECT id, elementary_start_time
										FROM amficom.results
										WHERE evaluation_id = (
											SELECT evaluation_id
												FROM amficom.tests
												WHERE id = :(this.id)) };
		LinkedList ll = new LinkedList();
		while (erIt.next()) {
			String alarm_id, alarm_type_name;
			try {
				#sql {SELECT al.id, altyp.name
								INTO :alarm_id, :alarm_type_name
								FROM amficom.alarms al, amficom.alarmtypes altyp
								WHERE al.event_id = (
									SELECT id from amficom.events
										WHERE descriptor = :(erIt.id()))
									AND al.type_id = altyp.id };
				ll.add(new ElementaryTestAlarm(erIt.elementary_start_time().getTime(),
																															alarm_id,
																															alarm_type_name));
			}
			catch (Exception e) {
				Log.debugMessage("Exception while retrieving elementary test alarms for test_id: '" + super.id + "', result_id = '" + erIt.id() + "' -- no alarms", Log.DEBUGLEVEL05);
				continue;
			}
		}
		erIt.close();
		this.elementaryTestAlarms = (ElementaryTestAlarm[])ll.toArray(new ElementaryTestAlarm[ll.size()]);
	}

	public void update(ClientTest_Transferable tt) throws SQLException {
		if (tt.id.compareTo(super.id) != 0)
			return;

		this.start_time = new Timestamp(tt.start_time);
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.tests
						SET start_time = :(this.start_time),
								modified = :(this.modified)
						WHERE id = :(this.id) };

		TestTimeStamps tts1 = tt.time_stamps;
		switch(this.temporal_type) {
			case TestTemporalType._TEST_TEMPORAL_TYPE_ONETIME:
				break;
			case TestTemporalType._TEST_TEMPORAL_TYPE_PERIODICAL:
				PeriodicalTestParameters ptpars = tts1.ptpars();
				this.period = new Timestamp(ptpars.dt);
				this.end_time = new Timestamp(ptpars.end_time);
				#sql {UPDATE amficom.tests
								SET period = :(this.period),
										end_time = :(this.end_time)
								WHERE id = :(this.id) };
				break;
			case TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE:
				long[] lti = tts1.ti();
				this.ti = new Timestamp[lti.length];
				for (int i = 0; i < this.ti.length; i++)
					this.ti[i] = new Timestamp(lti[i]);
				#sql {DELETE FROM amficom.testtimetablestamps
								WHERE test_id = :(this.id) };
				this.saveTestTimeTableStamps();
				break;
			default:
				Log.errorMessage("Test.update | Unknown temporal type: " + this.temporal_type + " for test id '" + super.id + "'");
		}

		#sql { COMMIT };
	}

	public void delete() throws SQLException {
		super.deleted = new Timestamp(System.currentTimeMillis());
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.tests
						SET deleted = :(this.deleted),
								modified = :(this.modified)
						WHERE id = :(this.id)};
		#sql { COMMIT };
	}

	#sql private iterator ResultIdsIterator (String id); 

	private String[] getResultIds() throws SQLException {
		ResultIdsIterator residIt;
		#sql residIt = {SELECT id FROM amficom.results WHERE test_id = :(this.id) };
		LinkedList llrid = new LinkedList();
		while (residIt.next())
			llrid.add(residIt.id());
		residIt.close();
		String[] resids = new String[llrid.size()];
		return (String[])llrid.toArray(resids);
	}

  protected void updateStatus(int status) throws SQLException {
    this.status = status;
		super.modified = new Timestamp(System.currentTimeMillis());
    #sql {UPDATE amficom.tests 
            SET status = :(this.status),
								modified = :(this.modified)
            WHERE id = :(this.id)};
    #sql {COMMIT};
  }

	public boolean isModified() throws SQLException {
		Timestamp new_modified;
		#sql {SELECT modified
						INTO :new_modified
						FROM amficom.tests
						WHERE id = :(this.id) };
		return new_modified.after(super.modified);
	}

	public void setModified() throws SQLException {
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.tests
						SET modified = :(super.modified)
						WHERE id = :(this.id) };
		#sql { COMMIT };
	}
//
//	#sql private iterator ResultsIterator (String id,
//																				 Timestamp elementary_start_time,
//																				 String result_set_id,
//																				 String user_id,
//																				 String test_id,
//																				 String analysis_id,
//																				 String evaluation_id,
//																				 String modeling_id);
//
//	public List getResults(String resultSort) throws SQLException {
//		List results = new LinkedList();
//		ResultIterator rIt;
//		#sql rIt = { SELECT test_id,
//												analysis_id,
//												evaluation_id,
//												modeling_id,
//												result_type,
//												elementary_start_time,
//												user_id,
//												result_set_id
//									FROM amficom.results
//									WHERE test_id = :(this.id) };
//		while (rIt.next()) {
//			results.add(new Result());
//		}
//	}


	#sql private static iterator TestIdIterator (String id);

	public static Test[] retrieveScheduledTests(String agent_id, long interval) throws SQLException {
		TestIdIterator tIt = null;
		Timestamp hightime = new Timestamp(System.currentTimeMillis() + interval);
		#sql tIt = { SELECT id
						        FROM amficom.tests
							      WHERE status = :(TestStatus._TEST_STATUS_SCHEDULED)
											AND start_time < :hightime
								      AND deleted IS NULL
									    AND kis_id IN (SELECT id 
										                   FROM amficom.equipments 
											                 WHERE agent_id = :agent_id
																				 AND is_kis = 1 ) };
		LinkedList lltest = new LinkedList();
    while (tIt.next())
			lltest.add(new Test(tIt.id()));
		tIt.close();
		return (Test[])lltest.toArray(new Test[lltest.size()]);
	}

	public static Test retrieveTestForAnalysis(String analysis_id) throws SQLException {
		String test_id;
		#sql {SELECT id
						INTO :test_id
						FROM amficom.tests
						WHERE analysis_id = :analysis_id};
		return new Test(test_id);
	}

	public static Test retrieveTestForEvaluation(String evaluation_id) throws SQLException {
		String test_id;
		#sql {SELECT id
						INTO :test_id
						FROM amficom.tests
						WHERE evaluation_id = :evaluation_id};
		return new Test(test_id);
	}

  public static Test[] retrieveTests() throws SQLException {
		TestIdIterator tIt = null;
		#sql tIt = { SELECT id
						       FROM amficom.tests
									 WHERE deleted IS NULL };
		LinkedList lltest = new LinkedList();
    while (tIt.next())
			lltest.add(new Test(tIt.id()));
		tIt.close();
		return (Test[])lltest.toArray(new Test[lltest.size()]);
	}

	public static Test[] retrieveTests(String domain_id) throws SQLException {
		TestIdIterator tIt = null;
		#sql tIt = {SELECT id
						      FROM amficom.tests
									WHERE monitored_element_id IN (
										SELECT id FROM amficom.monitoredelements
											WHERE domain_id = :domain_id) };
		LinkedList lltest = new LinkedList();
    while (tIt.next())
			lltest.add(new Test(tIt.id()));
		tIt.close();
		return (Test[])lltest.toArray(new Test[lltest.size()]);
	}

	public static Test[] retrieveAbortedTests(String agent_id) throws SQLException {
		TestIdIterator tIt = null;
		#sql tIt = { SELECT id
						        FROM amficom.tests
							      WHERE status = :(TestStatus._TEST_STATUS_PROCESSING)
											AND deleted IS NOT NULL
											AND kis_id IN (SELECT id 
										                   FROM amficom.equipments 
											                 WHERE agent_id = :agent_id
																				 AND is_kis = 1 ) };
		LinkedList lltest = new LinkedList();
    while (tIt.next())
			lltest.add(new Test(tIt.id()));
		tIt.close();
		return (Test[])lltest.toArray(new Test[lltest.size()]);
	}

  #sql private iterator TestTimeTableStampsIterator (Timestamp time_stamp);

  private Timestamp[] getTestTimeTableStamps() throws SQLException {
    TestTimeTableStampsIterator ttsIt = null;
    #sql ttsIt = {SELECT time_stamp
                    FROM amficom.testtimetablestamps
                    WHERE test_id = :(this.id) };
    LinkedList lltts = new LinkedList();
    while (ttsIt.next())
      lltts.add(ttsIt.time_stamp());
    ttsIt.close();
    Timestamp[] ts = null;
		if (lltts.size() > 0) {
			ts = new Timestamp[lltts.size()];
      ts = (Timestamp[])lltts.toArray(ts);
		}
		else
			Log.errorMessage("AMFICOMKIS | No time stamps for test id: " + super.id);
    return ts;
  }

	private void saveTestTimeTableStamps() throws SQLException {
		String tts_id;
    Timestamp ts;
    for (int i = 0; i < this.ti.length; i++) {
      tts_id = ResourcedbInterface.getUid(CONN, "testtimestamp");
      ts = this.ti[i];
      #sql {INSERT INTO amficom.testtimetablestamps (id,
                                                     test_id,
                                                     time_stamp)
              VALUES (:tts_id,
                      :(this.id),
                      :ts ) };
    }
	}

  private static String getLocalAddress(String monitored_element_id) throws SQLException {
    String local_address1;
    #sql { SELECT local_address INTO :local_address1 FROM monitoredelements WHERE id = :monitored_element_id};
    return local_address1;
  }

//Maybe remove later...
  protected void setMyRequestStatusCompleted()  throws SQLException {
    int count;
    int count1;
    #sql {SELECT count(*) INTO :count FROM amficom.tests 
              WHERE request_id = :(this.request_id) };
    #sql {SELECT count(*) INTO :count1 FROM amficom.tests 
            WHERE request_id = :(this.request_id) 
              AND (status = :(TestStatus._TEST_STATUS_COMPLETED)
										OR status = :(TestStatus._TEST_STATUS_ABORTED)) };
    if (count == count1) {
//Dodelat'!!!
      #sql {UPDATE amficom.testrequests 
              SET status = :(TestRequestStatus._TEST_REQUEST_STATUS_COMPLETED)
                WHERE id = :(this.request_id) };
      #sql { COMMIT };
      Log.debugMessage("Testrequest '" + this.request_id + "' set as COMPLETED", Log.DEBUGLEVEL03);
    }
  }
}
