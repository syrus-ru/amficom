package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.sql.*;
import com.syrus.AMFICOM.CORBA.KIS.Result_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientResult_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.AMFICOM.CORBA.General.TestStatus;
import com.syrus.AMFICOM.CORBA.General.TestTemporalType;
import com.syrus.AMFICOM.server.ResourcedbInterface;
import com.syrus.util.Log;
import sqlj.runtime.ref.DefaultContext;

public class Result {
	private static final Connection CONN = DefaultContext.getDefaultContext().getConnection(); 

	public static final String RESULT_TYPE_TEST = "test";
	public static final String RESULT_TYPE_ANALYSIS = "analysis";
	public static final String RESULT_TYPE_EVALUATION = "evaluation";
	public static final String RESULT_TYPE_MODELING = "modeling";

  private String id;
  private String action_id;
  private String result_type;
  private Timestamp elementary_start_time;
  private Parameter[] parameters;
  private String result_set_id;
	private String user_id;

  public Result(Result_Transferable rest) throws Exception {
    this.id = ResourcedbInterface.getUid(CONN, "result");
    this.action_id = rest.action_id;
    this.result_type = rest.result_type;
    this.elementary_start_time = new Timestamp(rest.elementary_start_time);
		this.user_id = this.retrieveUserId();
		this.retrieveResultSetId();

		this.write();
    
    this.parameters = new Parameter[rest.parameters.length];
    for (int i = 0; i < this.parameters.length; i++)
      this.parameters[i] = new Parameter(rest.parameters[i],
                                         this.id,
                                         this.result_type);
  }

	public Result(ClientResult_Transferable crest) throws Exception {
    this.id = crest.id;
		this.action_id = crest.action_id;
    this.result_type = crest.result_type;
    this.elementary_start_time = new Timestamp(crest.elementary_start_time);
		this.user_id = crest.user_id;
		this.retrieveResultSetId();
		
		this.write();

		this.parameters = new Parameter[crest.parameters.length];
    for (int i = 0; i < this.parameters.length; i++)
      this.parameters[i] = new Parameter(crest.parameters[i],
                                         this.id,
                                         this.result_type);
	}

	private void retrieveResultSetId() throws SQLException {
		String domain_id = this.getAction().getDomainId();
		#sql { SELECT id
					 INTO :(this.result_set_id)
					 FROM amficom.resultsets
					 WHERE domain_id = :domain_id
						 AND active = 1 };
	}

	private String retrieveUserId() throws SQLException {
		String userid;
		if (this.result_type.equals(RESULT_TYPE_TEST)) {
			#sql {SELECT user_id
							INTO :userid
							FROM amficom.testrequests
							WHERE id = (SELECT request_id
														FROM amficom.tests
														WHERE id = :(this.action_id) )};
		}
		else
			if (this.result_type.equals(RESULT_TYPE_ANALYSIS)) {
				#sql {SELECT user_id
								INTO :userid
								FROM amficom.analysis
								WHERE id = :(this.action_id) };
			}
			else
				if (this.result_type.equals(RESULT_TYPE_EVALUATION)) {
					#sql {SELECT user_id
									INTO :userid
									FROM amficom.evaluations
									WHERE id = :(this.action_id) };
				}
				else
					if (this.result_type.equals(RESULT_TYPE_MODELING)) {
						#sql {SELECT user_id
										INTO :userid
										FROM amficom.modeling
										WHERE id = :(this.action_id) };
					}
					else
						throw new SQLException ("Unknown result type: '" + this.result_type + "'");
		return userid;
	}

	private void write() throws SQLException {
		if (this.result_type.equals(RESULT_TYPE_TEST)) {
      #sql {INSERT INTO amficom.results (id,
                                         test_id,
                                         elementary_start_time,
																				 user_id,
                                         result_set_id,
                                         result_type)
              VALUES (:(this.id),
                      :(this.action_id),
                      :(this.elementary_start_time),
											:(this.user_id),
                      :(this.result_set_id),
                      :(this.result_type) ) };
    }
    else
      if (this.result_type.equals(RESULT_TYPE_ANALYSIS)) {
        #sql {INSERT INTO amficom.results (id,
                                           analysis_id,
                                           elementary_start_time,
																					 user_id,
                                           result_set_id,
                                           result_type)
                VALUES (:(this.id),
                        :(this.action_id),
                        :(this.elementary_start_time),
												:(this.user_id),
                        :(this.result_set_id),
                        :(this.result_type) ) };
      }
      else
        if (this.result_type.equals(RESULT_TYPE_EVALUATION)) {
          #sql {INSERT INTO amficom.results (id,
                                             evaluation_id,
                                             elementary_start_time,
																						 user_id,
                                             result_set_id,
                                             result_type)
                  VALUES (:(this.id),
                          :(this.action_id),
                          :(this.elementary_start_time),
													:(this.user_id),
                          :(this.result_set_id),
                          :(this.result_type) ) };
        }
        else
          if (this.result_type.equals(RESULT_TYPE_MODELING)) {
            #sql {INSERT INTO amficom.results (id,
                                               modeling_id,
                                               elementary_start_time,
																							 user_id,
                                               result_set_id,
                                               result_type)
                    VALUES (:(this.id),
                            :(this.action_id),
                            :(this.elementary_start_time),
														:(this.user_id),
                            :(this.result_set_id),
                            :(this.result_type) ) };
          }
          else
            throw new SQLException("Unknown type of result: '" + this.result_type + "'");
		#sql {COMMIT };
	}

  public Result(String id) throws SQLException {
    this.id = id;
    String test_id, analysis_id, evaluation_id, modeling_id;
    #sql {SELECT test_id,
                 analysis_id,
                 evaluation_id,
                 modeling_id,
                 result_type,
                 elementary_start_time,
								 user_id,
                 result_set_id
            INTO :test_id,
                 :analysis_id,
                 :evaluation_id,
                 :modeling_id,
                 :(this.result_type),
                 :(this.elementary_start_time),
								 :(this.user_id),
                 :(this.result_set_id)
            FROM amficom.results
            WHERE id = :(this.id)};
		this.user_id = (this.user_id == null)?"":this.user_id;
    if (this.result_type.equals(RESULT_TYPE_TEST))
      this.action_id = test_id;
    else
      if (this.result_type.equals(RESULT_TYPE_ANALYSIS))
        this.action_id = analysis_id;
      else
        if (this.result_type.equals(RESULT_TYPE_EVALUATION))
          this.action_id = evaluation_id;
        else
          if (this.result_type.equals(RESULT_TYPE_MODELING))
            this.action_id = modeling_id;
          else
            throw new SQLException("Unknown type of result in database: '" + this.result_type + "'");
    this.parameters = Parameter.retrieveParameters(this.id, this.result_type);
  }

	private Result(String id,
								 String action_id,
								 String result_type,
								 Timestamp elementary_start_time,
								 Parameter[] parameters,
								 String result_set_id,
								 String user_id) {
		this.id = id;
		this.action_id = action_id;
		this.result_type = result_type;
		this.elementary_start_time = elementary_start_time;
		this.parameters = parameters;
		this.result_set_id = result_set_id;
		this.user_id = user_id;
	}

  public String getId() {
    return this.id;
  }

  public Action getAction() throws SQLException {
		Action action = null;
		if (this.result_type.equals(RESULT_TYPE_TEST))
			action = new Test(this.action_id);
		else
			if (this.result_type.equals(RESULT_TYPE_ANALYSIS))
				action = new Analysis(this.action_id);
			else
				if (this.result_type.equals(RESULT_TYPE_EVALUATION))
					action = new Evaluation(this.action_id);
				else
					if (this.result_type.equals(RESULT_TYPE_MODELING))
						action = new Modeling(this.action_id);
					else {
						String mesg = "Result.getAction | Unknown type of result: '" + this.result_type + "', id == '" + this.id + "'";
						Log.debugMessage(mesg, Log.DEBUGLEVEL05);
						throw new SQLException(mesg);
					}
    return action;
  }

  public String getResultType() {
    return this.result_type;
  }

  public Timestamp getElementaryStartTime() {
    return this.elementary_start_time;
  }

	public String getUserId() {
    return this.user_id;
  }

  public Parameter[] getParameters() {
    return this.parameters;
  }

  public String getResultSetId() {
    return this.result_set_id;
  }

	public ClientResult_Transferable getClientTransferable() throws SQLException {
		ClientParameter_Transferable[] parameters_t = new ClientParameter_Transferable[this.parameters.length];
		for (int i = 0; i < parameters_t.length; i++)
			parameters_t[i] = this.parameters[i].getClientTransferable();
		return new ClientResult_Transferable(this.id,
																				 this.elementary_start_time.getTime(),
																				 this.result_type,
																				 this.action_id,
																				 this.user_id,
																				 this.result_set_id,
																				 parameters_t);
	}

  public boolean setMyTestStatusCompleted() throws SQLException {
    if (this.result_type.equals(RESULT_TYPE_TEST)) {
      Test test = new Test(this.action_id);
      int temptype = test.getTemporalType();
      String test_id = test.getId();
      switch (temptype) {
        case TestTemporalType._TEST_TEMPORAL_TYPE_ONETIME:
          test.updateStatus(TestStatus._TEST_STATUS_COMPLETED);
					Log.debugMessage("Test '" + test_id + "' set as COMPLETED", Log.DEBUGLEVEL03);
          return true;
        case TestTemporalType._TEST_TEMPORAL_TYPE_PERIODICAL:
					if (Math.abs(test.getEndTime().getTime() - this.elementary_start_time.getTime()) < test.getPeriod().getTime()) {
            test.updateStatus(TestStatus._TEST_STATUS_COMPLETED);
						Log.debugMessage("Test '" + test_id + "' set as COMPLETED", Log.DEBUGLEVEL03);
            return true;
          }
          break;
        case TestTemporalType._TEST_TEMPORAL_TYPE_TIMETABLE:
          Timestamp[] ti = test.getTI();
          if (this.elementary_start_time.getTime() == ti[ti.length - 1].getTime()) {
            test.updateStatus(TestStatus._TEST_STATUS_COMPLETED);
						Log.debugMessage("Test '" + test_id + "' set as COMPLETED", Log.DEBUGLEVEL03);
            return true;
          }
          break;
        default:
					Log.errorMessage("AMFICOMKIS | Unknown temporal type of test " + test_id + " corresponding to result " + this.id + ": " + temptype);
      }
    }
    else
			Log.errorMessage("Result.setMyTestStatusCompleted | Warning: cannot execute this function for result_type: '" + this.result_type + "'");
		return false;
  }

	#sql private static iterator ResultIterator(String id,
																							Timestamp elementary_start_time,
																							String result_set_id,
																							String user_id,
																							String test_id,
																							String analysis_id,
																							String evaluation_id,
																							String modeling_id);

	public static Result[] retrieveResults(String result_type, String action_id) throws SQLException {
		ResultIterator resIt;
		if (result_type.equals(RESULT_TYPE_TEST)) {
			#sql resIt = { SELECT id,
														result_set_id,
														elementary_start_time,
														user_id,
														test_id,
														analysis_id,
														evaluation_id,
														modeling_id
											 FROM amficom.results
											 WHERE result_type = :RESULT_TYPE_TEST
												 AND test_id = :(action_id) };
		}
		else
			if (result_type.equals(RESULT_TYPE_ANALYSIS)) {
				#sql resIt = { SELECT id,
															result_set_id,
															elementary_start_time,
															user_id,
															test_id,
															analysis_id,
															evaluation_id,
															modeling_id
												 FROM amficom.results
												 WHERE result_type = :RESULT_TYPE_ANALYSIS
													 AND analysis_id = :(action_id) };
			}
			else
				if (result_type.equals(RESULT_TYPE_EVALUATION)) {
					#sql resIt = { SELECT id,
																result_set_id,
																elementary_start_time,
																user_id,
																test_id,
																analysis_id,
																evaluation_id,
																modeling_id
													 FROM amficom.results
													 WHERE result_type = :RESULT_TYPE_EVALUATION
														 AND evaluation_id = :(action_id) };
				}
				else
					if (result_type.equals(RESULT_TYPE_MODELING)) {
						#sql resIt = { SELECT id,
																	result_set_id,
																	elementary_start_time,
																	user_id,
																	test_id,
																	analysis_id,
																	evaluation_id,
																	modeling_id
														 FROM amficom.results
														 WHERE result_type = :RESULT_TYPE_MODELING
															 AND modeling_id = :(action_id) };
					}
					else
            throw new SQLException("Unknown type of result: '" + result_type + "'");

		LinkedList llr = new LinkedList();
		String user_id;
		while (resIt.next()) {
			user_id = resIt.user_id();
			llr.add(new Result(resIt.id(),
												 action_id,
												 result_type,
												 resIt.elementary_start_time(),
												 Parameter.retrieveParameters(resIt.id(), result_type),
												 resIt.result_set_id(),
												 (user_id == null)?"":user_id));
		}
		resIt.close();

		Result[] results = new Result[llr.size()];
		return (Result[])llr.toArray(results);
	}
}
