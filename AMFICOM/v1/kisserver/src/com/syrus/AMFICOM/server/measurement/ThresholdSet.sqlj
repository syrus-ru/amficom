package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.util.Vector;
import java.sql.Timestamp;
import java.sql.SQLException;
import com.syrus.AMFICOM.CORBA.KIS.Parameter_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientThresholdSet_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.util.Log;

public class ThresholdSet {
  private String id;
  private String evaluation_type_id;
  private String name;
  private Timestamp created;
  private String created_by;
  private SetParameter[] thresholds;
  private Vector monitored_elements;

	#sql private iterator ThresholdSetMELinkIterator (String monitored_element_id);

  public ThresholdSet(String id) throws SQLException {
    this.id = id;
    #sql {SELECT evaluation_type_id,
                 name,
                 created,
                 created_by
            INTO :(this.evaluation_type_id),
                 :(this.name),
                 :(this.created),
                 :(this.created_by)
            FROM amficom.thresholdsets
            WHERE id = :(this.id) };
		this.name = (this.name == null)?"":this.name;
		this.created_by = (this.created_by == null)?"":this.created_by;

    this.thresholds = SetParameter.retrieveParameters(this.id, "evaluation", "threshold");

		ThresholdSetMELinkIterator melnkIt;
    #sql melnkIt = {SELECT monitored_element_id
                      FROM amficom.thresholdsetmelinks
                      WHERE set_id = :(this.id) };
    this.monitored_elements = new Vector();
    while (melnkIt.next())
      this.monitored_elements.add(melnkIt.monitored_element_id());
		melnkIt.close();
		Log.debugMessage("ThresholdSet.<init> | Retrieved " + this.monitored_elements.size() + " monitored element identities for threshold set id: '" + this.id + "'", Log.DEBUGLEVEL05);
  }

  public ThresholdSet(ClientThresholdSet_Transferable threshold_set_t) throws Exception {
    this.id = threshold_set_t.id;//ResourcedbInterface.getUId("thresholdset");
//------------------------
		Log.debugMessage("************* CREATING THRESHOLD SET: '" + this.id + "'", Log.DEBUGLEVEL05);
//------------------------
		this.evaluation_type_id = threshold_set_t.evaluation_type_id;
    this.name = threshold_set_t.name;
    this.created_by = threshold_set_t.created_by;
    this.created = new Timestamp(System.currentTimeMillis());

		#sql { INSERT INTO amficom.thresholdsets (id,
				                                      name,
					                                    evaluation_type_id,
						                                  created,
							                                created_by)
							VALUES (:(this.id),
								      :(this.name),
									    :(this.evaluation_type_id),
										  :(this.created),
											:(this.created_by) ) };

    this.thresholds = new SetParameter[threshold_set_t.thresholds.length];
		for (int i = 0; i < this.thresholds.length; i++)
			this.thresholds[i] = new SetParameter(threshold_set_t.thresholds[i],
																						this.id,
																						"evaluation",
																						"threshold");

    #sql { COMMIT };

    this.monitored_elements = new Vector(0);
  }

  public String getId() {
    return this.id;
  }

  public String getEvaluationTypeId() {
    return this.evaluation_type_id;
  }

  public String getName() {
    return this.name;
  }

  public String getCreatedBy() {
    return this.created_by;
  }

  public SetParameter[] getThresholds() {
    return this.thresholds;
  }

	public Parameter_Transferable[] getKISThresholds() throws SQLException {
    Parameter_Transferable[] kis_thresholds = new Parameter_Transferable[this.thresholds.length];
    for (int i = 0; i < kis_thresholds.length; i++)
      kis_thresholds[i] = this.thresholds[i].getTransferable();
    return kis_thresholds;
  }

	public ClientThresholdSet_Transferable getTransferable() throws SQLException {
		ClientParameter_Transferable[] thresholds_t = new ClientParameter_Transferable[this.thresholds.length];
		for (int i = 0; i < thresholds_t.length; i++)
			thresholds_t[i] = this.thresholds[i].getClientTransferable();
    return new ClientThresholdSet_Transferable(this.id,
																							 this.evaluation_type_id,
                                               this.name,
																							 this.created.getTime(),
																							 this.created_by,
																							 thresholds_t);
  }

	public void update(ClientThresholdSet_Transferable threshold_set_t) throws Exception {
//------------------------
		Log.debugMessage("************* UPDATING THRESHOLD SET: '" + this.id + "'", Log.DEBUGLEVEL05);
//------------------------
		if (threshold_set_t.id.compareTo(this.id) != 0)
			return;

		this.evaluation_type_id = threshold_set_t.evaluation_type_id;
    this.name = threshold_set_t.name;
    this.created_by = threshold_set_t.created_by;
    //this.created = new Timestamp(System.currentTimeMillis());

		#sql {UPDATE amficom.thresholdsets
							SET name = :(this.name),
									evaluation_type_id = :(this.evaluation_type_id),
									created = :(this.created),
									created_by = :(this.created_by)
							WHERE id = :(this.id) };
		for (int i = 0; i < this.thresholds.length; i++)
			this.thresholds[i].update(threshold_set_t.thresholds[i]);
		#sql { COMMIT };
	}

	public void attachToMonitoredElement(String monitored_element_id) throws SQLException {
    if (this.isAttachedToMonitoredElement(monitored_element_id))
      return;
    #sql {INSERT INTO amficom.thresholdsetmelinks (set_id,
																									 monitored_element_id)
            VALUES (:(this.id),
                    :monitored_element_id) };
		#sql { COMMIT };
    this.monitored_elements.add(monitored_element_id);
  }

  public void detachFromMonitoredElement(String monitored_element_id) throws SQLException {
    if (!this.isAttachedToMonitoredElement(monitored_element_id))
      return;
    #sql {DELETE FROM amficom.thresholdsetmelinks
            WHERE set_id = :(this.id)
              AND monitored_element_id = :monitored_element_id };
		#sql { COMMIT };
    this.monitored_elements.remove(monitored_element_id);
  }

  public Vector getAttachedMonitoredElements() {
    return this.monitored_elements;
  }

  public boolean isAttachedToMonitoredElement(String monitored_element_id) {
    return this.monitored_elements.contains(monitored_element_id);
  }

	#sql private static iterator ThresholdSetIterator(String id);

  public static ThresholdSet[] retrieveThresholdSets() throws SQLException {
    ThresholdSetIterator thsetIt;
    #sql thsetIt = {SELECT id FROM amficom.thresholdsets };
    LinkedList linkedlist = new LinkedList();
    while (thsetIt.next())
      linkedlist.add(new ThresholdSet(thsetIt.id()));
    thsetIt.close();
    return (ThresholdSet[])linkedlist.toArray(new ThresholdSet[linkedlist.size()]);
  }

	public static ThresholdSet[] retrieveThresholdSets(String monitored_element_id) throws SQLException {
    ThresholdSetIterator thsetIt;
    #sql thsetIt = { SELECT set_id id
                        FROM amficom.thresholdsetmelinks
                        WHERE monitored_element_id = :monitored_element_id};
    LinkedList linkedlist = new LinkedList();
    while (thsetIt.next())
      linkedlist.add(new ThresholdSet(thsetIt.id()));
    thsetIt.close();
    return (ThresholdSet[])linkedlist.toArray(new ThresholdSet[linkedlist.size()]);
  }

  public static ThresholdSet[] retrieveThresholdSets(String monitored_element_id, String evaluation_type_id) throws SQLException {
    ThresholdSetIterator thsetIt;
    #sql thsetIt = { SELECT id
                       FROM amficom.thresholdsets
                       WHERE evaluation_type_id = :evaluation_type_id
                         AND id IN (
                           SELECT set_id 
                             FROM amficom.thresholdsetmelinks
                             WHERE monitored_element_id = :monitored_element_id) };
    LinkedList linkedlist = new LinkedList();
    while (thsetIt.next())
      linkedlist.add(new ThresholdSet(thsetIt.id()));
    thsetIt.close();
    return (ThresholdSet[])linkedlist.toArray(new ThresholdSet[linkedlist.size()]);
  }
}