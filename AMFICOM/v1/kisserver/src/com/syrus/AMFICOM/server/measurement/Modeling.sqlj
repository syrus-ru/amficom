package com.syrus.AMFICOM.server.measurement;

import java.util.LinkedList;
import java.sql.SQLException;
import java.sql.Timestamp;
import com.syrus.AMFICOM.CORBA.Survey.ClientParameter_Transferable;
import com.syrus.AMFICOM.CORBA.Survey.ClientModeling_Transferable;

public class Modeling extends Action {
	private String scheme_path_id;
	private Argument[] arguments;

	public Modeling(String id) throws SQLException {
		super.id = id;
		#sql {SELECT name,
								 modified,
								 user_id,
								 deleted,
								 type_id,
								 scheme_path_id,
								 domain_id
						INTO :(this.name),
								 :(this.modified),
								 :(this.user_id),
								 :(this.deleted),
								 :(this.type_id),
								 :(this.scheme_path_id),
								 :(this.domain_id)
						FROM amficom.modeling
						WHERE id = :(this.id) };
		super.name = (super.name == null)?"":super.name;
		super.user_id = (super.user_id == null)?"":super.user_id;
		super.description = (super.description == null)?"":super.description;
		super.domain_id = (super.domain_id == null)?"":super.domain_id;

		this.arguments = Argument.retrieveArguments(super.id, "modeling");
	}

	public Modeling(ClientModeling_Transferable modeling_t) throws Exception {
		super.id = modeling_t.id;
		super.name = modeling_t.name;
		super.modified = new Timestamp(System.currentTimeMillis());
		super.user_id = modeling_t.user_id;
		super.deleted = null;
		super.type_id = modeling_t.type_id;
		this.scheme_path_id = modeling_t.scheme_path_id;
		super.domain_id = modeling_t.domain_id;

		#sql {INSERT INTO amficom.modeling (id,
																				name,
																				modified,
																				user_id,
																				deleted,
																				type_id,
																				scheme_path_id,
																				domain_id)
						VALUES (:(this.id),
										:(this.name),
										:(this.modified),
										:(this.user_id),
										:(this.deleted),
										:(this.type_id),
										:(this.scheme_path_id),
										:(super.domain_id) ) };

		this.arguments = new Argument[modeling_t.arguments.length];
    for (int i = 0; i < this.arguments.length; i++)
      this.arguments[i] = new Argument(modeling_t.arguments[i], super.id, "modeling");

    #sql { COMMIT };
	}

	public ClientModeling_Transferable getClientTransferable() throws SQLException {
    ClientParameter_Transferable[] arguments_t = new ClientParameter_Transferable[this.arguments.length];
    for (int i = 0; i < arguments_t.length; i++)
      arguments_t[i] = this.arguments[i].getClientTransferable();
		return new ClientModeling_Transferable(super.id,
																					 super.name,
																					 super.modified.getTime(),
																					 super.user_id,
																					 (super.deleted == null)?0:super.deleted.getTime(),
																					 super.type_id,
																					 this.scheme_path_id,
																					 super.domain_id,
																					 arguments_t);
	}

	public boolean isModified() throws SQLException {
		Timestamp new_modified;
		#sql {SELECT modified
						INTO :new_modified
						FROM amficom.modeling
						WHERE id = :(this.id) };
		return new_modified.after(super.modified);
	}

	protected void setModified() throws SQLException {
		super.modified = new Timestamp(System.currentTimeMillis());
		#sql {UPDATE amficom.modeling
						SET modified = :(super.modified)
						WHERE id = :(this.id) };
		#sql {COMMIT};
	}

	#sql private static iterator ModelingIterator(String id);

  public static Modeling[] retrieveModelings() throws SQLException {
    ModelingIterator mdIt;
    #sql mdIt = {SELECT id FROM amficom.modeling};
    LinkedList linkedlist = new LinkedList();
    while (mdIt.next())
      linkedlist.add(new Modeling(mdIt.id()));
    mdIt.close();
    return (Modeling[])linkedlist.toArray(new Modeling[linkedlist.size()]);
  }

	public static Modeling[] retrieveModelings(String scheme_path_id) throws SQLException {
		ModelingIterator mdIt;
    #sql mdIt = {SELECT id FROM amficom.modeling WHERE scheme_path_id = :scheme_path_id};
    LinkedList linkedlist = new LinkedList();
    while (mdIt.next())
      linkedlist.add(new Modeling(mdIt.id()));
    mdIt.close();
    return (Modeling[])linkedlist.toArray(new Modeling[linkedlist.size()]);
	}

	public static Modeling[] retrieveModelingsByDomain(String domain_id) throws SQLException {
		ModelingIterator mdIt;
    #sql mdIt = {SELECT id FROM amficom.modeling WHERE domain_id = :domain_id};
    LinkedList linkedlist = new LinkedList();
    while (mdIt.next())
      linkedlist.add(new Modeling(mdIt.id()));
    mdIt.close();
    return (Modeling[])linkedlist.toArray(new Modeling[linkedlist.size()]);
	}
}