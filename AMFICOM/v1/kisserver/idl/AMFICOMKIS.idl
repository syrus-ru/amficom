#ifndef _amficomkis_idl_
#define _amficomkis_idl_

#include <general.idl>
#include <KIS.idl>

module com {
module syrus {
module AMFICOM {
module CORBA {
interface AMFICOMKIS {/*
	long preregisterKIS(in long validationcode,		// код подтверждения инсталляции
              				in wstring address,			// адрес КИС
              				in wstring name,			// имя КИС
              				in wstring contact_person,	// контактное лицо, обслуж. КИС
              				in wstring inventory_number,// инвентарный номер КИС
              				in wstring contact_info,	// контактная информация
              				in wstring sw_version,		// версия ПО КИС
              				in wstring hw_version,		// верси аппаратных средств КИС
              				in long connection_type,	// тип соединения КИС с РИСД
              				in wstring tcp,				// TCP-адрес КИС
              				in wstring ip,				// IP-адрес КИС
              				in wstring dns,				// IP-адрес КИС
              				in wstring netmask,			// IP-адрес КИС
              				out KIS::AgentIdentity_Transferable agentid)	// идентификатор КИС
                                    			raises (General::AMFICOMRemoteException);*/
/*
  long query(in KIS::AgentIdentity_Transferable agentid,
             out KIS::TestSeq_Transferable testseq)
                                          raises (General::AMFICOMRemoteException);
*/
  KIS::TestSeq_Transferable queryTests(in KIS::AgentIdentity_Transferable agentid,
																	in long long interval)
                                          raises (General::AMFICOMRemoteException);

	General::wstringSeq queryAbortedTests(in KIS::AgentIdentity_Transferable agentid)
																					raises (General::AMFICOMRemoteException);

  long reportResult(in KIS::AgentIdentity_Transferable agentid,
              in KIS::Result_Transferable result) 
                                          raises (General::AMFICOMRemoteException);
/*
	long reportAlarm(in KIS::AgentIdentity_Transferable agentid,
									 in KIS::AlarmMessage_Transferable alarmMessage) 
                                          raises (General::AMFICOMRemoteException);*/
/*
	long getKISIdentities(in KIS::AgentIdentity_Transferable agentid,
                        out KIS::KISIdentitySeq_Transferable kisseq) 
                                          raises (General::AMFICOMRemoteException);
*/
  KIS::KISIdentitySeq_Transferable getKISIdentities(in KIS::AgentIdentity_Transferable agentid) 
                                          raises (General::AMFICOMRemoteException);
/*
  long getEtalons(in KIS::AgentIdentity_Transferable agentid,
                  in boolean onlyChanged,
                  out KIS::KISEtalonsSeq_Transferable kisetalonseq) 
                                          raises (General::AMFICOMRemoteException);

  long setKISAlarm(in KIS::AgentIdentity_Transferable agentid,
                   in wstring source_type,
                   in wstring source_id, 
                   in wstring descriptor) 
                                          raises (General::AMFICOMRemoteException);

  long reportEvaluation(in KIS::AgentIdentity_Transferable agentid,
                        in KIS::Evaluation_Transferable evaluation,
                        in KIS::Result_Transferable result)
                                          raises (General::AMFICOMRemoteException);
*/
};

};
};
};
};

#endif

