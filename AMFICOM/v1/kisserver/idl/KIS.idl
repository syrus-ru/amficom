#include <general.idl>

module com {
module syrus {
module AMFICOM {
module CORBA {
module KIS {

  struct AgentIdentity_Transferable {
    wstring agent_id;
    wstring agent_auth;
  };

  typedef sequence <wstring> KISIdentitySeq_Transferable;

  struct Parameter_Transferable {
    wstring name;
    wstring type_id;
    sequence <octet> value;
  };

//////////////////// Analysis /////////////////////

  struct Analysis_Transferable {
    wstring id;
    wstring analysis_type_id;
    sequence <Parameter_Transferable> criterias;
  };

//////////////////// Evaluation /////////////////////

  struct Etalon_Transferable {
    wstring id;
    wstring etalon_type_id;
    sequence <Parameter_Transferable> etalon_arguments;
  };

  struct Evaluation_Transferable {
    wstring id;
    wstring evaluation_type_id;
    sequence <Parameter_Transferable> thresholds;
    Etalon_Transferable etalon;
  };

/////////////////////// Test ////////////////////////
  
	struct Test_Transferable {
    wstring id;
    wstring test_type_id;
    wstring test_request_id;
    General::TestTemporalType temporal_type;
    long long start_time;
    General::TestTimeStamps time_stamps;
    General::TestStatus status;
    wstring kis_id;
    wstring monitored_element_id;
    wstring local_address;
    sequence <Parameter_Transferable> parameters;
    Analysis_Transferable analysis;
    Evaluation_Transferable evaluation;
    General::TestReturnType return_type;
	};

  typedef sequence <Test_Transferable> TestSeq_Transferable;

  struct Result_Transferable {
    wstring id;
    wstring action_id;
		wstring test_id;
    wstring result_type;
    long long elementary_start_time;
    sequence <Parameter_Transferable> parameters;
		General::AlarmLevel alarmLevel;
  };

//  typedef sequence <ResultLight_Transferable> ResultLightSeq_Transferable;

  struct TestRequest_Transferable {
    wstring id;
    wstring name;
    long long created;
    long long deleted;
    General::TestRequestStatus status;
    wstring user_id;
    TestSeq_Transferable tests;
  };
};
};
};
};
};
