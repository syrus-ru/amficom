/*
 * $Id: ResultSetChecker.sqlj,v 1.2 2004/09/09 11:06:00 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.process;

import com.syrus.AMFICOM.server.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.2 $, $Date: 2004/09/09 11:06:00 $
 * @module serverprocess
 */
public final class ResultSetChecker extends Thread {
	private static final Connection CONN = DefaultContext.getDefaultContext().getConnection();

	int timeInterval = 10000;

	static SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yy HH:mm:ss");
	LogWriter log;

	private volatile boolean running = true;

	public ResultSetChecker(LogWriter log)
	{
		this.log = log;
	}

	private ResultSetChecker()
	{
	}

	public void stopRunning()
	{
		running = false;
	}

	public void run() {
		while (running) {
			try {
				sleep( timeInterval );

				IdIterator idIt = null;
				try {
					#sql idIt = {
						SELECT id FROM amficom.domains
					};
					while (idIt.next())
						checkResultSet(idIt.id());
				} finally {
					if (idIt != null)
						idIt.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void checkResultSet(String domain_id) {
		try {
			Timestamp active_start_time;
			Timestamp active_end_time;
			String active_id = "";
			long active_period = 2592000000L;// default 2592000000 == 30 days

			#sql {
				select ID, START_TIME, END_TIME, PERIOD
				into :active_id, :active_start_time, :active_end_time, :active_period
				from AMFICOM.RESULTSETS
				where ACTIVE = 1 and DOMAIN_ID = :domain_id
			};
			if (active_start_time == null) {
				#sql {
					select CREATED into :active_start_time
					from AMFICOM.RESULTSETS
					where ID = :active_id
				};
				#sql {
					update AMFICOM.RESULTSETS set
					START_TIME = :active_start_time
					where ID = :active_id
				};
				CONN.commit();
			}
			if (active_end_time == null) {
				active_end_time = correctEndTime(active_start_time);

				#sql {
					update AMFICOM.RESULTSETS set
					END_TIME = :active_end_time
					where ID = :active_id
				};
				CONN.commit();
			}
			if (active_end_time.getTime() <= System.currentTimeMillis()) {
				log.log("Active result set for domain '" + domain_id + "' changed");
				log.log("	Previous range : " + sdf.format(active_start_time) + " --- " + sdf.format(active_end_time));
				String id = ResourcedbInterface.getUid(CONN, "resultset");

				Timestamp new_start_time = incrementTime(active_end_time);
				Timestamp new_end_time = correctEndTime(new_start_time);

				log.log("	New range      : " + sdf.format(new_start_time) + " --- " + sdf.format(new_end_time));
				String name = id;
				#sql {
					insert into resultsets(
						ID,
						NAME,
						COMMENTS,
						DOMAIN_ID,
						ACTIVE,
						PERIOD,
						CREATED,
						MODIFIED,
						START_TIME,
						END_TIME)
					values(
						:id,
						:name,
						'',
						:domain_id,
						1,
						:active_period,
						SYSDATE,
						SYSDATE,
						:active_end_time,
						:new_end_time)
				};
				#sql {
					update resultsets set active = 0 where id = :active_id
				};
				CONN.commit();
			}
		} catch (Exception ex) {
			try {
				String id2 = ResourcedbInterface.getUid(CONN, "resultset");

				Timestamp active_start_time = new Timestamp(System.currentTimeMillis());
				Timestamp active_end_time = correctEndTime(active_start_time);
				long active_period = 2592000000L;

				log.log("Active result set for domain '" + domain_id + "' instantiated");
				log.log("	Range is       : " + sdf.format(active_start_time) + " --- " + sdf.format(active_end_time));

				#sql {
					insert into resultsets(
						ID,
						NAME,
						COMMENTS,
						DOMAIN_ID,
						ACTIVE,
						PERIOD,
						CREATED,
						MODIFIED,
						START_TIME,
						END_TIME)
					values(
						:id2,
						:id2,
						'',
						:domain_id,
						1,
						:active_period,
						SYSDATE,
						SYSDATE,
						:active_start_time,
						:active_end_time)
				};
				CONN.commit();
			}
			catch (Exception exx) {
				exx.printStackTrace();
			}
		}
	}

	Timestamp correctEndTime(Timestamp ts) {
		GregorianCalendar calendar = new GregorianCalendar(
			ts.getYear(),
			ts.getMonth(),
			ts.getDate());
		calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		return new Timestamp(
			ts.getYear(),
			ts.getMonth(),
			calendar.getActualMaximum(Calendar.DATE),
			23,
			59,
			59,
			0);
	}

	Timestamp incrementTime(Timestamp ts) {
		return new Timestamp(ts.getTime() + 1000);
	}

	#sql private final iterator IdIterator(String id);
}
