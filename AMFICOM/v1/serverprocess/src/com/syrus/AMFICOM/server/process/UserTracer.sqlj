/*
 * $Id: UserTracer.sqlj,v 1.1 2004/06/22 09:57:10 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.server.process;

import com.syrus.AMFICOM.corba.portable.client.*;
import com.syrus.AMFICOM.server.LogWriter;
import com.syrus.util.corba.JavaSoftORBUtil;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.omg.CORBA.*;

/**
 * Whenever we need to handle data of type NUMBER,
 * <code>java.math.BigDecimal</code> is used instead of
 * <code>oracle.sql.NUMBER</code> for compatibility reasons, though code
 * utilizing the latter option seems more elegant.
 * 
 * @bug If server and server process are running on different machines and clock
 *      is not in sync, then session timeout will vary just by this value.
 * 
 * @version $Revision: 1.1 $, $Date: 2004/06/22 09:57:10 $
 * @author $Author: bass $
 * @module serverprocess
 */
public final class UserTracer extends Thread {
	/**
	 * The monitoring thread falls asleep either for <code>TIME_INTERVAL</code>,
	 * or for <code>SESSION_TIMEOUT</code>, which is less.
	 */
	private static final long TIME_INTERVAL = 10000L;

	private ProgressThread progressThread;

	private LogWriter logWriter;

	private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("dd.MM.yy HH:mm:ss");

	private static final boolean DEBUG = false;

	/**
	 * The runtime state flag of this process.
	 * 
	 * @see #isRunning()
	 * @see #setRunning(boolean)
	 */
	private volatile boolean running = false;

	/**
	 * The CORBA session timeout (in milliseconds); is fixed since r1.27
	 */
	private static final long SESSION_TIMEOUT = 1200000L;

	private static final int PING_RESULT_SUCCESS = 1;
	private static final int PING_RESULT_FAILED = 0;
	private static final int PING_RESULT_UNKNOWN = -1;

	public UserTracer(LogWriter logWriter) {
		this.logWriter = logWriter;
	}

	/**
	 * Don't let anyone invoke this constructor directly.
	 */
	private UserTracer() {
	}

	/**
	 * Stops the current process.
	 * 
	 * @see #run()
	 */
	public void stopRunning() {
		try {
			setRunning(false);
		} catch (IllegalStateException ise) {
			logWriter.log(ise.getLocalizedMessage());
			logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Exiting...");
			return;
		}
		logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Stopping UserTracer...");
		try {
			progressThread.interrupt();
		} catch (NullPointerException npe) {
			/*
			 * progressThread not yet created.
			 */
		}
	}

	private synchronized void setRunning(boolean running) throws IllegalStateException {
		if (this.running && running)
			throw new IllegalStateException("UserTracer already running.");
		else if (! (this.running || running))
			throw new IllegalStateException("UserTracer already stopped.");
		this.running = running;
	}

	private synchronized boolean isRunning() {
		return running;
	}

	public void run() {
		try {
			setRunning(true);
		} catch (IllegalStateException ise) {
			logWriter.log(ise.getLocalizedMessage());
			logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Exiting...");
			return;
		}
		logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Starting UserTracer...");

		/*
		 * These variables correspond to the appropriate fields of
		 * LoggedUserIterator; only alarm_receiver and removable are declared
		 * boolean instead of java.math.BigDecimal (their database equivalens
		 * are of type NUMBER(1)) as logically they are boolean.
		 */
		String id;
		long accessed;
		String user_id;
//		long logged;
//		String name;
//		boolean alarm_receiver;
		boolean removable;
		String ior;

		int pingResult;

		LoggedUserIterator loggedUserIterator = null;
		while (isRunning()) {
			try {
				long l = System.currentTimeMillis();
				#sql {
					DELETE FROM amficom.iors WHERE id NOT IN (SELECT id FROM amficom.loggedusers)
				};
				#sql {
					DELETE FROM amficom.loggedusers WHERE id NOT IN (SELECT id FROM amficom.iors)
				};
				#sql {
					COMMIT;	
				};
				#sql loggedUserIterator = {
					SELECT loggedusers.id, accessed, user_id, logged, name, alarm_receiver, removable, ior FROM amficom.loggedusers, amficom.iors WHERE loggedusers.id = iors.id ORDER BY id
				};
				while (loggedUserIterator.next()) {
					id = loggedUserIterator.id();
					user_id = loggedUserIterator.user_id(); 
					/*
					 * If ping is OK, then set REMOVABLE to false.
					 * If ping fails and REMOVABLE is false, then set ACCESSED
					 * to SYSDATE, REMOVABLE to true.
					 * If ping fails and REMOVABLE is true, then remove the
					 * table entry if (SYSDATE - ACCESSED) is less than
					 * session timeout.
					 */

					/*
					 * First, pop up the IOR and try to ping the corresponding
					 * client instance. Ping is considered to fail if we receive
					 * an AMFICOMRemoteException.
					 */
					try {
						Blob _ior = loggedUserIterator.ior();

						long length = _ior.length();

						if (length > Integer.MAX_VALUE)
							length = Integer.MAX_VALUE;

						byte b[] = _ior.getBytes(1L, (int) length);
						try {
							ior = new String(b, "US-ASCII");
						} catch (UnsupportedEncodingException uee) {
							ior = new String(b);
						}
						Client client = ClientHelper.narrow(JavaSoftORBUtil.getInstance().getORB().string_to_object(ior));

						long serverTimeMillis = System.currentTimeMillis();
						try {
							LongHolder clientTimeMillis = new LongHolder();
							client.syncPing(clientTimeMillis);
							pingResult = PING_RESULT_SUCCESS;
						} catch (SystemException se) {
							/*
							 * To be more specific, VisiBroker throws
							 * NO_IMPLEMENT. No log entry here as this will
							 * happen very often.
							 */
							pingResult = PING_RESULT_FAILED;
						} catch (NullPointerException npe) {
							/*
							 * AMFICOMClientHelper.narrow() returned null.
							 * Object pointed to by IOR supplied is not an
							 * AMFICOMClient instance. Client's fault.
							 */
							logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Failed pinging client, session id: " + id + ", user id: " + user_id + ", cause: object pointed to by IOR is not a valid client object.");
							pingResult = PING_RESULT_FAILED;
						} catch (Throwable t) {
							logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Failed pinging client, session id: " + id + ", user id: " + user_id + ", cause: unknown.");
							t.printStackTrace(System.out);
							pingResult = PING_RESULT_UNKNOWN;
						}
					} catch (SystemException se) {
						/*
						 * IOR is invalid, ORB fails to resolve it.
						 * JavaSoft ORB throws BAD_PARAM; VisiBroker throws INV_OBJREF.
						 * 
						 * Client's fault.
						 */
						pingResult = PING_RESULT_FAILED;
					} catch (SQLException sqle) {
						pingResult = PING_RESULT_UNKNOWN;
					}

					switch (pingResult) {
						case PING_RESULT_SUCCESS:
							#sql {
								UPDATE amficom.loggedusers SET removable = 0 WHERE id = :id	
							};
							#sql {
								COMMIT	
							};
							break;
						case PING_RESULT_FAILED:
							try {
//								removable = loggedUserIterator.removable().booleanValue();
								removable = (loggedUserIterator.removable().byteValue() != 0);
							} catch (NullPointerException npe) {
								removable = false;
							}
							accessed = loggedUserIterator.accessed().getTime();
							if (removable) {
								/*
								 * Perform removal if wait period is over, wait
								 * more otherwise.
								 */
								if ((System.currentTimeMillis() - accessed) > SESSION_TIMEOUT) {
									#sql {
										DELETE FROM amficom.iors WHERE id = :id
									};
									#sql {
										DELETE FROM amficom.loggedusers WHERE id = :id
									};
									#sql {
										COMMIT	
									};
									logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Kicking off client, session id: " + id + ", user id: " + user_id + ", last action: " + SIMPLE_DATE_FORMAT.format(new Date(accessed)));
								}
							} else {
								#sql {
									UPDATE amficom.loggedusers SET accessed = SYSDATE, removable = 1 WHERE id = :id
								};
								#sql {
									COMMIT
								};
								logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Scheduling for removal client, session id: " + id + ", user id: " + user_id + ", last action: " + SIMPLE_DATE_FORMAT.format(new Date(accessed)));
							}
							break;
						case PING_RESULT_UNKNOWN:
						default:
							logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Ping result for client, session id: " + id + ", user id: " + user_id + " is undetermined. Performing no action.");
					}
				}
			} catch (SQLException sqle) {
				logWriter.log(SIMPLE_DATE_FORMAT.format(new Date(System.currentTimeMillis())) + ": Error tracing users: " + sqle.getLocalizedMessage());
			} finally {
				try {
					loggedUserIterator.close();
				} catch (NullPointerException npe) {
				} catch (SQLException sqle) {
				}
			}
			long sleepTimeout = (TIME_INTERVAL < SESSION_TIMEOUT) ? TIME_INTERVAL : SESSION_TIMEOUT;

			/**
			 * @todo Rewrite LogWriter to extend
			 *       java.io.PrintWriter and thus have methods
			 *       print() and println().
			 */
			if (DEBUG)
				logWriter.log("Falling asleep for " + TIME_INTERVAL + " millisecond(s)...");
//			progressThread = new ProgressThread(TIME_INTERVAL, logWriter);
			progressThread = new ProgressThread(TIME_INTERVAL);
			progressThread.start();
			try {
				progressThread.join();
			} catch (InterruptedException ie) {
			}
			if (DEBUG)
				logWriter.log("Waking up...");
		}
		logWriter.log("UserTracer finished...");
	}

	/**
	 * @version $Revision: 1.1 $, $Date: 2004/06/22 09:57:10 $
	 * @author $Author: bass $
	 * @module serverprocess
	 */
	#sql private final iterator LoggedUserIterator(String id, Timestamp accessed, String user_id, Timestamp logged, String name, BigDecimal alarm_receiver, BigDecimal removable, Blob ior);
}
