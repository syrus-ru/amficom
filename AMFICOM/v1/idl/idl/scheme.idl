#ifndef _scheme_idl_
#define _scheme_idl_

#include <general.idl>
#include <network.idl>

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module Scheme
{
	struct ElementAttribute_Transferable
	{
		wstring id;
		wstring name;
		wstring value;
		wstring type_id;
		boolean editable;
		boolean visible;
	};
	typedef sequence <ElementAttribute_Transferable> ElementAttributeSeq_Transferable;

	struct ElementAttributeType_Transferable
	{
		wstring id;
		wstring name;
		wstring default_value;
		wstring value_type_id;
		boolean editable;
		boolean visible;
		long long modified;
	};
	typedef sequence <ElementAttributeType_Transferable> ElementAttributeTypeSeq_Transferable;

	struct SchemePort_Transferable
	{
		wstring id;
		wstring name;
		wstring device_id;
		wstring link_id;

		wstring port_type_id;
		wstring port_id;

		boolean is_access_port;
		wstring access_port_type_id;
		wstring access_port_id;
		wstring direction_type;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePort_Transferable> SchemePortSeq_Transferable;

	struct SchemeCablePort_Transferable
	{
		wstring id;
		wstring name;
		wstring device_id;
		wstring cable_link_id;

		wstring cable_port_type_id;
		wstring cable_port_id;

		boolean is_access_port;
		wstring access_port_type_id;
		wstring access_port_id;
		wstring direction_type;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCablePort_Transferable> SchemeCablePortSeq_Transferable;

	struct SchemeDevice_Transferable
	{
		wstring id;
		wstring name;

		SchemePortSeq_Transferable ports;
		SchemeCablePortSeq_Transferable cableports;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeDevice_Transferable> SchemeDeviceSeq_Transferable;

	struct SchemeLink_Transferable
	{
		wstring id;
		wstring name;
		wstring source_port_id;
		wstring target_port_id;
		wstring link_type_id;
		wstring link_id;
		wstring physical_length;
		wstring optical_length;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeLink_Transferable> SchemeLinkSeq_Transferable;

	struct SchemeCableThread_Transferable
	{
		wstring id;
		wstring name;
		wstring link_type_id;
		wstring thread_id;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCableThread_Transferable> SchemeCableThreadSeq_Transferable;

	struct SchemeCableLink_Transferable
	{
		wstring id;
		wstring name;
		wstring source_port_id;
		wstring target_port_id;
		wstring cable_link_type_id;
		wstring cable_link_id;
		wstring physical_length;
		wstring optical_length;
		SchemeCableThreadSeq_Transferable cable_threads;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCableLink_Transferable> SchemeCableLinkSeq_Transferable;

	struct PathElement_Transferable
	{
		long n;
		boolean is_cable;
		wstring link_id;
		wstring thread_id;
	};
	typedef sequence <PathElement_Transferable> PathElementSeq_Transferable;

	struct SchemePath_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring start_device_id;
		wstring end_device_id;

		wstring path_id;

		PathElementSeq_Transferable links;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePath_Transferable> SchemePathSeq_Transferable;

	struct SchemeProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring equipment_type_id;
		wstring domain_id;
		long long modified;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		General::wstringSeq proto_element_ids;

		wstring symbol_id;
		wstring label;
		General::octetSeq ugocell;
		General::octetSeq schemecell;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeProtoElement_Transferable> SchemeProtoElementSeq_Transferable;

	struct SchemeElement_Transferable
	{
		wstring id;
		wstring name;
		wstring proto_element_id;
		wstring equipment_id;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		General::wstringSeq element_ids;

		wstring scheme_id;
		boolean is_scheme;

		wstring description;
		General::octetSeq ugocell;
		General::octetSeq schemecell;
		ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeElement_Transferable> SchemeElementSeq_Transferable;

	struct Scheme_Transferable
	{
		wstring id;
		wstring name;
		wstring scheme_type;
		long long created;
		long long modified;
		wstring created_by;
		wstring modified_by;
		wstring owner_id;
		wstring domain_id;
		wstring description;
		SchemeElementSeq_Transferable elements;
		SchemeLinkSeq_Transferable links;
		SchemeCableLinkSeq_Transferable cable_links;
		SchemePathSeq_Transferable paths;
		General::wstringSeq element_ids;

		wstring symbol_id;
		wstring label;
		General::octetSeq ugocell;
		General::octetSeq schemecell;

		long width;
		long height;
		General::octetSeq clonez;
	};
	typedef sequence <Scheme_Transferable> SchemeSeq_Transferable;

	struct MapProtoGroup_Transferable
	{
		wstring id;
		wstring name;
		wstring parent_id;
		General::wstringSeq group_ids;
		General::wstringSeq mapproto_ids;
		long long modified;
	};
	typedef sequence <MapProtoGroup_Transferable> MapProtoGroupSeq_Transferable;

	struct SchemeOptimizeInfo_Transferable
	{
		wstring id;					// идентификатор решения
		wstring scheme_id;			// идентификаор схемы
		wstring solution_compact_id;// идентификатор решения (SchemeMonitoringSolution), которое хранится в БД отдельно от схемы
		wstring date;				// дата проведения оптимизации

		long optimize_mode;			// режим оптимизации

		double iterations;			// счётчик итераций
		double price;				// цена решения
		double wavelength;
									// параметры оптимизации
		double len_margin;
		double mutation_rate;
		double mutation_degree;
		double rtu_delete_prob;
		double rtu_create_prob;
		double nodes_splice_prob;
		double nodes_cut_prob;
		double survivor_rate;
									// цены на оборудование
		General::doubleSeq refl_prices;
		General::wstringSeq refl_names;
		General::doubleSeq refl_ranges;
		General::doubleSeq switch_prices;
		General::doubleSeq switch_nports;
		General::wstringSeq switch_names;
	};
	typedef sequence <SchemeOptimizeInfo_Transferable> SchemeOptimizeInfoSeq_Transferable;

	struct SchemeMonitoringSolution_Transferable // Scheme Monitoring Solution - решение для какой-либо схемы
	{
		wstring id;
		wstring name;
		wstring scheme_id; // идентификатор схемы , к которой это решение относится
		double price;
		SchemePathSeq_Transferable paths;
	};
	typedef sequence <SchemeMonitoringSolution_Transferable> SchemeMonitoringSolutionSeq_Transferable;

};
};
};
};
};

#endif

