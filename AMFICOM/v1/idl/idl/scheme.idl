/*-
 * $Id: scheme.idl,v 1.24 2005/06/15 09:56:11 bass Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef SCHEME_IDL
#define SCHEME_IDL

#include "general.idl"

module com {
	module syrus {
		module AMFICOM {
			module scheme {
				module corba {
					struct SchemeProtoGroup_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier symbolId;
						general::corba::Identifier parentSchemeProtoGroupId;
					};

					typedef SchemeProtoGroup_Transferable SchemeProtoGroup;
					typedef sequence<SchemeProtoGroup> SchemeProtoGroupSeq;

					struct SchemeProtoElement_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;

						general::corba::Identifier equipmentTypeId;
						general::corba::Identifier symbolId;
						general::corba::Identifier ugoCellId;
						general::corba::Identifier schemeCellId;
						general::corba::Identifier parentSchemeProtoGroupId;
						general::corba::Identifier parentSchemeProtoElementId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeProtoElement_Transferable SchemeProtoElement;
					typedef sequence<SchemeProtoElement> SchemeProtoElementSeq;

					struct Scheme_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;
						long width;
						long height;
						enum Kind {
							BUILDING,
							CABLE_SUBNETWORK,
							NETWORK,
							FLOOR,
							ROOM,
							RACK,
							BAY,
							CARDCAGE
						} kind;

						general::corba::Identifier domainId;
						general::corba::Identifier mapId;
						general::corba::Identifier symbolId;
						general::corba::Identifier ugoCellId;
						general::corba::Identifier schemeCellId;
						general::corba::Identifier currentSchemeMonitoringSolutionId;
						general::corba::Identifier parentSchemeElementId;
					};

					typedef Scheme_Transferable Scheme;
					typedef sequence<Scheme> SchemeSeq;

					struct SchemeElement_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;

						general::corba::Identifier equipmentTypeId;
						general::corba::Identifier equipmentId;
						general::corba::Identifier kisId;
						general::corba::Identifier siteNodeId;
						general::corba::Identifier symbolId;
						general::corba::Identifier ugoCellId;
						general::corba::Identifier schemeCellId;
						general::corba::Identifier parentSchemeId;
						general::corba::Identifier parentSchemeElementId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeElement_Transferable SchemeElement;
					typedef sequence<SchemeElement> SchemeElementSeq;

					struct SchemeOptimizeInfo_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						long optimizationMode;
						long iterations;
						double price;
						double waveLength;
						double lenMargin;
						double mutationRate;
						double mutationDegree;
						double rtuDeleteProb;
						double rtuCreateProb;
						double nodesSpliceProb;
						double nodesCutProb;
						double survivorRate;

						general::corba::Identifier parentSchemeId;
					};

					typedef SchemeOptimizeInfo_Transferable SchemeOptimizeInfo;
					typedef sequence<SchemeOptimizeInfo> SchemeOptimizeInfoSeq;

					struct SchemeOptimizeInfoSwitch_Transferable {
						general::corba::StorableObject header;
					};

					typedef SchemeOptimizeInfoSwitch_Transferable SchemeOptimizeInfoSwitch;
					typedef sequence<SchemeOptimizeInfoSwitch> SchemeOptimizeInfoSwitchSeq;

					struct SchemeOptimizeInfoRtu_Transferable {
						general::corba::StorableObject header;
					};

					typedef SchemeOptimizeInfoRtu_Transferable SchemeOptimizeInfoRtu;
					typedef sequence<SchemeOptimizeInfoRtu> SchemeOptimizeInfoRtuSeq;

					struct SchemeMonitoringSolution_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						long priceUsd;

						general::corba::Identifier parentSchemeOptimizeInfoId;
					};

					typedef SchemeMonitoringSolution_Transferable SchemeMonitoringSolution;
					typedef sequence<SchemeMonitoringSolution> SchemeMonitoringSolutionSeq;

					struct SchemeDevice_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier parentSchemeProtoElementId;
						general::corba::Identifier parentSchemeElementId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeDevice_Transferable SchemeDevice;
					typedef sequence<SchemeDevice> SchemeDeviceSeq;					

					enum AbstractSchemePortDirectionType {
						_IN,
						_OUT
					};

					struct SchemePort_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						AbstractSchemePortDirectionType directionType;

						general::corba::Identifier portTypeId;
						general::corba::Identifier portId;
						general::corba::Identifier measurementPortId;
						general::corba::Identifier parentSchemeDeviceId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemePort_Transferable SchemePort;
					typedef sequence<SchemePort> SchemePortSeq;

					struct SchemeCablePort_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						AbstractSchemePortDirectionType directionType;

						general::corba::Identifier cablePortTypeId;
						general::corba::Identifier cablePortId;
						general::corba::Identifier measurementPortId;
						general::corba::Identifier parentSchemeDeviceId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeCablePort_Transferable SchemeCablePort;
					typedef sequence<SchemeCablePort> SchemeCablePortSeq;

					struct SchemeLink_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						double physicalLength;
						double opticalLength;

						general::corba::Identifier linkTypeId;
						general::corba::Identifier linkId;
						general::corba::Identifier siteNodeId;
						general::corba::Identifier sourceSchemePortId;
						general::corba::Identifier targetSchemePortId;
						general::corba::Identifier parentSchemeId;
						general::corba::Identifier parentSchemeElementId;
						general::corba::Identifier parentSchemeProtoElementId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeLink_Transferable SchemeLink;
					typedef sequence<SchemeLink> SchemeLinkSeq;

					struct SchemeCableLink_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						double physicalLength;
						double opticalLength;

						general::corba::Identifier cableLinkTypeId;
						general::corba::Identifier cableLinkId;
						general::corba::Identifier sourceSchemeCablePortId;
						general::corba::Identifier targetSchemeCablePortId;
						general::corba::Identifier parentSchemeId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeCableLink_Transferable SchemeCableLink;
					typedef sequence<SchemeCableLink> SchemeCableLinkSeq;

					struct SchemeCableThread_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier cableThreadTypeId;
						general::corba::Identifier linkId;
						general::corba::Identifier sourceSchemePortId;
						general::corba::Identifier targetSchemePortId;
						general::corba::Identifier parentSchemeCableLinkId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemeCableThread_Transferable SchemeCableThread;
					typedef sequence<SchemeCableThread> SchemeCableThreadSeq;

					struct CableChannelingItem_Transferable {
						general::corba::StorableObject header;

						double startSpare;
						double endSpare;
						long rowX;
						long placeY;
						long sequentialNumber;

						general::corba::Identifier physicalLinkId;
						general::corba::Identifier startSiteNodeId;
						general::corba::Identifier endSiteNodeId;
						general::corba::Identifier parentSchemeCableLinkId;
					};

					typedef CableChannelingItem_Transferable CableChannelingItem;
					typedef sequence<CableChannelingItem> CableChannelingItemSeq;

					struct SchemePath_Transferable {
						general::corba::StorableObject header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier transmissionPathId;
						general::corba::Identifier parentSchemeMonitoringSolutionId;
						general::corba::Identifier parentSchemeId;

						general::corba::IdentifierSeq characteristicIds;
					};

					typedef SchemePath_Transferable SchemePath;
					typedef sequence<SchemePath> SchemePathSeq;

					struct PathElement_Transferable {
						general::corba::StorableObject header;

						general::corba::Identifier parentSchemePathId;
						long sequentialNumber;
						union Data switch (enum Kind{
								SCHEME_ELEMENT,
								SCHEME_CABLE_LINK,
								SCHEME_LINK}) {
							case SCHEME_ELEMENT:
								struct SchemeElementData {
									general::corba::Identifier startAbstractSchemePortId;
									general::corba::Identifier endAbstractSchemePortId;
								} schemeElementData;
							case SCHEME_CABLE_LINK:
								general::corba::Identifier schemeCableThreadId;
							case SCHEME_LINK:
								general::corba::Identifier schemeLinkId;
						} data;
					};

					typedef PathElement_Transferable PathElement;
					typedef sequence<PathElement> PathElementSeq;
				};
			};
		};
	};
};

#endif // SCHEME_IDL
