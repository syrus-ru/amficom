/*-
 * $Id: scheme.idl,v 1.19 2005/04/19 08:55:26 bass Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef SCHEME_IDL
#define SCHEME_IDL

#include "general.idl"

module com {
	module syrus {
		module AMFICOM {
			module scheme {
				module corba {
					struct SchemeProtoGroup_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier_Transferable symbolId;
						general::corba::Identifier_Transferable parentSchemeProtoGroupId;
					};

					typedef sequence<SchemeProtoGroup_Transferable> SchemeProtoGroupSeq_Transferable;

					struct SchemeProtoElement_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;

						general::corba::Identifier_Transferable equipmentTypeId;
						general::corba::Identifier_Transferable symbolId;
						general::corba::Identifier_Transferable ugoCellId;
						general::corba::Identifier_Transferable schemeCellId;
						general::corba::Identifier_Transferable parentSchemeProtoGroupId;
						general::corba::Identifier_Transferable parentSchemeProtoElementId;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeProtoElement_Transferable> SchemeProtoElementSeq_Transferable;

					struct Scheme_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;
						long width;
						long height;
						enum Kind {
							BUILDING,
							CABLE_SUBNETWORK,
							NETWORK,
							FLOOR,
							ROOM,
							RACK,
							BAY,
							CARDCAGE
						} kind;

						general::corba::Identifier_Transferable domainId;
						general::corba::Identifier_Transferable mapId;
						general::corba::Identifier_Transferable symbolId;
						general::corba::Identifier_Transferable ugoCellId;
						general::corba::Identifier_Transferable schemeCellId;
						general::corba::Identifier_Transferable currentSchemeMonitoringSolutionId;
						general::corba::Identifier_Transferable parentSchemeElementId;
					};

					typedef sequence<Scheme_Transferable> SchemeSeq_Transferable;

					struct SchemeElement_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						general::corba::WString64 label;

						general::corba::Identifier_Transferable equipmentTypeId;
						general::corba::Identifier_Transferable equipmentId;
						general::corba::Identifier_Transferable kisId;
						general::corba::Identifier_Transferable siteNodeId;
						general::corba::Identifier_Transferable symbolId;
						general::corba::Identifier_Transferable ugoCellId;
						general::corba::Identifier_Transferable schemeCellId;
						general::corba::Identifier_Transferable parentSchemeId;
						general::corba::Identifier_Transferable parentSchemeElementId;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeElement_Transferable> SchemeElementSeq_Transferable;

					struct SchemeOptimizeInfo_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						long optimizationMode;
						long iterations;
						double price;
						double waveLength;
						double lenMargin;
						double mutationRate;
						double mutationDegree;
						double rtuDeleteProb;
						double rtuCreateProb;
						double nodesSpliceProb;
						double nodesCutProb;
						double survivorRate;

						general::corba::Identifier_Transferable parentSchemeId;
					};

					typedef sequence<SchemeOptimizeInfo_Transferable> SchemeOptimizeInfoSeq_Transferable;

					struct SchemeMonitoringSolution_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						long priceUsd;

						general::corba::Identifier_Transferable parentSchemeOptimizeInfoId;
					};

					typedef sequence<SchemeMonitoringSolution_Transferable> SchemeMonitoringSolutionSeq_Transferable;

					struct SchemeDevice_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::Identifier_Transferable parentSchemeProtoElementId;
						general::corba::Identifier_Transferable parentSchemeElementId;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeDevice_Transferable> SchemeDeviceSeq_Transferable;					

					enum AbstractSchemePortDirectionType {
						_IN,
						_OUT
					};

					struct SchemePort_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						AbstractSchemePortDirectionType directionType;

						general::corba::Identifier_Transferable portTypeId;
						general::corba::Identifier_Transferable portId;
						general::corba::Identifier_Transferable measurementPortTypeId;
						general::corba::Identifier_Transferable measurementPortId;
						general::corba::Identifier_Transferable parentSchemeDeviceId;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemePort_Transferable> SchemePortSeq_Transferable;

					struct SchemeCablePort_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
						AbstractSchemePortDirectionType directionType;

						general::corba::Identifier_Transferable cablePortTypeId;
						general::corba::Identifier_Transferable cablePortId;
						general::corba::Identifier_Transferable measurementPortTypeId;
						general::corba::Identifier_Transferable measurementPortId;
						general::corba::Identifier_Transferable parentSchemeDeviceId;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeCablePort_Transferable> SchemeCablePortSeq_Transferable;

					struct SchemeLink_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeLink_Transferable> SchemeLinkSeq_Transferable;

					struct SchemeCableLink_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeCableLink_Transferable> SchemeCableLinkSeq_Transferable;

					struct SchemeCableThread_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemeCableThread_Transferable> SchemeCableThreadSeq_Transferable;

					struct CableChannelingItem_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;
					};

					typedef sequence<CableChannelingItem_Transferable> CableChannelingItemSeq_Transferable;

					struct SchemePath_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::WString32 name;
						general::corba::WString256 description;

						general::corba::IdentifierSeq_Transferable characteristicIds;
					};

					typedef sequence<SchemePath_Transferable> SchemePathSeq_Transferable;

					struct PathElement_Transferable {
						general::corba::StorableObject_Transferable header;

						general::corba::Identifier_Transferable parentSchemePathId;
						long sequentialNumber;
						union Data switch (enum Kind{
								SCHEME_ELEMENT,
								SCHEME_CABLE_LINK,
								SCHEME_LINK}) {
							case SCHEME_ELEMENT:
								struct SchemeElementData {
									general::corba::Identifier_Transferable startAbstractSchemePortId;
									general::corba::Identifier_Transferable endAbstractSchemePortId;
								} schemeElementData;
							case SCHEME_CABLE_LINK:
								general::corba::Identifier_Transferable schemeCableThreadId;
							case SCHEME_LINK:
								general::corba::Identifier_Transferable schemeLinkId;
						} data;
					};

					typedef sequence<PathElement_Transferable> PathElementSeq_Transferable;
				};
			};
		};
	};
};

#endif // SCHEME_IDL
