/*
 * $Id: scheme.idl,v 1.6 2004/09/13 08:10:45 krupenn Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef _scheme_idl_
#define _scheme_idl_

#include "general.idl"
#include "network.idl"
#include "streams.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module Scheme
{
	struct SchemePort_Transferable
	{
		wstring id;
		wstring name;
		wstring deviceId;
		wstring linkId;

		wstring portTypeId;
		wstring portId;

		wstring measurementPortTypeId;
		wstring measurementPortId;
		wstring directionType;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePort_Transferable> SchemePortSeq_Transferable;

	struct SchemeCablePort_Transferable
	{
		wstring id;
		wstring name;
		wstring deviceId;
		wstring cableLinkId;

		wstring cablePortTypeId;
		wstring cablePortId;

		wstring measurementPortTypeId;
		wstring measurementPortId;
		wstring directionType;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCablePort_Transferable> SchemeCablePortSeq_Transferable;

	struct PortThreadMap_Transferable
	{
		wstring portId;
		wstring cableLinkId;
		wstring threadId;
	};
	typedef sequence <PortThreadMap_Transferable> PortThreadMapSeq_Transferable;

	struct SchemeDevice_Transferable
	{
		wstring id;
		wstring name;

		SchemePortSeq_Transferable ports;
		SchemeCablePortSeq_Transferable cableports;
		General::ElementAttributeSeq_Transferable attributes;
		PortThreadMapSeq_Transferable portmap;
	};
	typedef sequence <SchemeDevice_Transferable> SchemeDeviceSeq_Transferable;

	struct SchemeLink_Transferable
	{
		wstring id;
		wstring name;
		wstring sourcePortId;
		wstring targetPortId;
		wstring linkTypeId;
		wstring linkId;
		wstring physicalLength;
		wstring opticalLength;
		
		wstring siteId;
		
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeLink_Transferable> SchemeLinkSeq_Transferable;

	struct SchemeCableThread_Transferable
	{
		wstring id;
		wstring name;
		wstring linkTypeId;
		wstring threadId;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCableThread_Transferable> SchemeCableThreadSeq_Transferable;

	struct CableChannelingItem_Transferable
	{
		wstring id;
		long n;
		wstring startSiteId;
		double startSpare;
		wstring physicalLinkId;
		double endSpare;
		wstring endSiteId;
	};
	typedef sequence <CableChannelingItem_Transferable> CableChannelingItemSeq_Transferable;

	struct SchemeCableLink_Transferable
	{
		wstring id;
		wstring name;
		wstring sourcePortId;
		wstring targetPortId;
		wstring cableLinkTypeId;
		wstring cableLinkId;
		wstring physicalLength;
		wstring opticalLength;
		SchemeCableThreadSeq_Transferable cableThreads;

		General::ElementAttributeSeq_Transferable attributes;
		
		CableChannelingItemSeq_Transferable channeling;
	};
	typedef sequence <SchemeCableLink_Transferable> SchemeCableLinkSeq_Transferable;

	struct PathElement_Transferable
	{
		long n;
		long type;
		wstring elementId;
		wstring threadId;
		wstring startPortId;
		wstring endPortId;
		wstring schemeId;
	};
	typedef sequence <PathElement_Transferable> PathElementSeq_Transferable;

	struct SchemePath_Transferable
	{
		wstring id;
		wstring name;
		wstring _typeId;
		wstring startTeviceId;
		wstring endDeviceId;

		wstring pathId;

		PathElementSeq_Transferable links;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePath_Transferable> SchemePathSeq_Transferable;

	struct SchemeProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring equipmentTypeId;
		wstring domainId;
		long long modified;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		::CORBA::WStringSeq protoElementIds;

		wstring symbolId;
		wstring label;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeProtoElement_Transferable> SchemeProtoElementSeq_Transferable;

	struct SchemeElement_Transferable
	{
		wstring id;
		wstring name;
		wstring protoElementId;
		wstring equipmentId;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		::CORBA::WStringSeq elementIds;

		wstring schemeId;

		wstring description;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;

		wstring siteId;
		
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeElement_Transferable> SchemeElementSeq_Transferable;

	struct SchemeMonitoringSolution_Transferable
	{
		wstring id;
		wstring name;
		wstring schemeId;
		double price;
		SchemePathSeq_Transferable paths;
	};
	typedef sequence <SchemeMonitoringSolution_Transferable> SchemeMonitoringSolutionSeq_Transferable;

	struct Scheme_Transferable
	{
		wstring id;
		wstring name;
		wstring schemeType;
		long long created;
		long long modified;
		wstring createdBy;
		wstring modifiedBy;
		wstring ownerId;
		wstring domainId;
		wstring description;

		SchemeElementSeq_Transferable elements;
		SchemeLinkSeq_Transferable links;
		SchemeCableLinkSeq_Transferable cableLinks;

		SchemeMonitoringSolution_Transferable solution;

		::CORBA::WStringSeq elementIds;

		wstring symbolId;
		wstring label;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;

		long width;
		long height;
		::CORBA::OctetSeq clonez;
		
		wstring mapId;
	};
	typedef sequence <Scheme_Transferable> SchemeSeq_Transferable;

	struct SchemeProtoGroup_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring symbolId;

		wstring parentId;

		long long modified;

		wstring peClass;
		boolean peIsKis;

		::CORBA::WStringSeq groupIds;
		::CORBA::WStringSeq peIds;
	};
	typedef sequence <SchemeProtoGroup_Transferable> SchemeProtoGroupSeq_Transferable;

	struct SchemeOptimizeInfo_Transferable
	{
		wstring id;
		wstring schemeId;
		wstring solutionCompactId;// identifier for SchemeMonitoringSolution
		wstring date;

		long optimizeMode;

		double iterations;
		double price;
		double wavelength;
									// optimization parameters
		double lenMargin;
		double mutationRate;
		double mutationDegree;
		double rtuDeleteProb;
		double rtuCreateProb;
		double nodesSpliceProb;
		double nodesCutProb;
		double survivorRate;

		::CORBA::DoubleSeq reflPrices;
		::CORBA::WStringSeq reflNames;
		::CORBA::DoubleSeq reflRanges;
		::CORBA::DoubleSeq switchPrices;
		::CORBA::DoubleSeq switchNports;
		::CORBA::WStringSeq switchNames;
	};
	typedef sequence <SchemeOptimizeInfo_Transferable> SchemeOptimizeInfoSeq_Transferable;
};
};
};
};
};

#endif
