/*
 * $Id: scheme.idl,v 1.13 2004/11/18 16:54:43 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 * Defines that can be specified at compile time:
 *
 * SCHEME_COMMON (off by default) -- will turn on compilation of valuetyped
 *  scheme types, such as SchemeCableLink and SchemeCableThread (as opposed to
 *  SchemeCableLink and SchemeCableThread, respectively);
 *
 * NUMERIC_IDENTIFIER (off by default, implies SCHEME_COMMON) -- Identifier will
 *  hold primitive major and minor fields rather than a string;
 *
 * REDUNDANT_DEPS (off by default, implies SCHEME_COMMON) -- StorableObject will
 *  depend on User.
 */

#ifndef SCHEME_IDL
#define SCHEME_IDL

#include <streams.idl>

#ifdef NUMERIC_IDENTIFIER
#define SCHEME_COMMON
#endif // NUMERIC_IDENTIFIER

#ifdef REDUNDANT_DEPS
#define SCHEME_COMMON
#endif // REDUNDANT_DEPS

#include "configuration.idl"
#include "map.idl"
#include "resource.idl"

module com {
	module syrus {
		module AMFICOM {
#ifdef SCHEME_COMMON
			module scheme {
				module corba {
					valuetype AbstractSchemeLink;
					valuetype Scheme;
					valuetype SchemeCableLink;
					valuetype SchemeCableThread;
					valuetype SchemeDevice;
					valuetype SchemeElement;
					valuetype SchemeLink;
					valuetype SchemeProtoElement;
					valuetype SchemeProtoGroup;

					typedef sequence<SchemeElement> SchemeElementSeq;
					typedef sequence<SchemeProtoElement> SchemeProtoElementSeq;
					typedef sequence<SchemeProtoGroup> SchemeProtoGroupSeq;

					valuetype AbstractSchemePort:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum DirectionType {
							_IN,
							_OUT
						};

						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeDeviceId;
						/**
						 * Depending on implementation, may reference either {@link SchemeLink} or {@link SchemeCableLink}.
						 */
						private general::corba::Identifier abstractSchemeLinkId;
						/**
						 * Depending on implementation, may reference either {@link PortType port type} or {@link PortType cable port type}.
						 */
						private general::corba::Identifier portTypeId;
						/**
						 * Depending on implementation, may reference either {@link Port port} or {@link Port cable port}.
						 */
						private general::corba::Identifier portId;
						private general::corba::Identifier measurementPortTypeId;
						private general::corba::Identifier measurementPortId;
						private DirectionType thisDirectionType;
						private general::corba::IdentifierSeq characteristicIds;

						readonly attribute SchemeDevice schemeDevice;
						/**
						 * @see #abstractSchemeLinkId
						 */
						readonly attribute AbstractSchemeLink abstractSchemeLink;
						/**
						 * @see #portTypeId
						 */
						readonly attribute configuration::corba::PortType portType;
						/**
						 * @see #portId
						 */
						readonly attribute configuration::corba::Port port;
						readonly attribute configuration::corba::MeasurementPortType measurementPortType;
						readonly attribute configuration::corba::MeasurementPort measurementPort;
						readonly attribute DirectionType directionType;
						attribute configuration::corba::CharacteristicSeq characteristics;
					};

					valuetype SchemePort: AbstractSchemePort {
						private general::corba::Identifier schemeCableThreadId;

						/**
						 * @see AbstractSchemePort#abstractSchemeLinkId
						 */
						readonly attribute SchemeLink schemeLink;
						/**
						 * This is a circular dependency on {@link SchemeCableThread}, see {@link SchemeCableThread#schemePort()}.
						 *
						 * @return scheme cable thread attached to this scheme port.
						 * @see #schemeCableThreadId
						 * @see SchemeCableThread#schemePort()
						 */
						readonly attribute SchemeCableThread schemeCableThread;

						SchemePort cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemePort> SchemePortSeq;

					valuetype SchemeCablePort: AbstractSchemePort {
						/**
						 * @see AbstractSchemePort#abstractSchemeLinkId
						 */
						readonly attribute SchemeCableLink schemeCableLink;

						SchemeCablePort cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeCablePort> SchemeCablePortSeq;

					valuetype SchemeDevice:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::IdentifierSeq schemePortIds;
						private general::corba::IdentifierSeq schemeCablePortIds;
						private general::corba::IdentifierSeq characteristicIds;

						readonly attribute SchemePortSeq schemePorts;
						readonly attribute SchemeCablePortSeq schemeCablePorts;
						attribute configuration::corba::CharacteristicSeq characteristics;

						SchemeDevice cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeDevice> SchemeDeviceSeq;

					valuetype AbstractSchemeElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private general::corba::IdentifierSeq characteristicIds;

						/**
						 * Getter returns scheme parent to this scheme link or scheme cable link or scheme element.
						 * @see #schemeId
						 */
						attribute Scheme scheme;
						attribute configuration::corba::CharacteristicSeq characteristics;
					};

					valuetype AbstractSchemeLink: AbstractSchemeElement {
						/**
						 * Depending on implementation, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier sourceAbstractSchemePortId;
						/**
						 * Depending on implementation, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier targetAbstractSchemePortId;
						/**
						 * Depending on implementation, may reference either {@link LinkType link type} or {@link LinkType cable link type}.
						 */
						private general::corba::Identifier linkTypeId;
						/**
						 * Depending on implementation, may reference either {@link Link link} or {@link Link cable link}.
						 */
						private general::corba::Identifier linkId;
						/**
						 * 0 means either zero or unspecified length.
						 *
						 * @see #physicalLength()
						 */
						private double thisPhysicalLength;
						/**
						 * 0 means either zero or unspecified length.
						 *
						 * @see #opticalLength()
						 */
						private double thisOpticalLength;

						readonly attribute AbstractSchemePort sourceAbstractSchemePort;
						readonly attribute AbstractSchemePort targetAbstractSchemePort;
						readonly attribute configuration::corba::LinkType linkType;
						readonly attribute configuration::corba::Link link;
						/**
						 * Getter returns physical length of this scheme link or scheme cable link.
						 * @see #physicalLength
						 */
						readonly attribute double physicalLength;
						/**
						 * Getter returns optical length of this scheme link or scheme cable link.
						 * @see #opticalLength
						 */
						readonly attribute double opticalLength;
					};

					valuetype SchemeLink: AbstractSchemeLink {
						private general::corba::Identifier siteId;

						/**
						 * @see AbstractSchemeLink#sourceAbstractSchemePortId
						 */
						readonly attribute SchemePort sourceSchemePort;
						/**
						 * @see AbstractSchemeLink#targetAbstractSchemePortId
						 */
						readonly attribute SchemePort targetSchemePort;
						readonly attribute CORBA::Map::MapSiteElement site;

						SchemeLink cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeLink> SchemeLinkSeq;

					valuetype SchemeCableThread:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier linkTypeId;
						private general::corba::Identifier schemePortId;
						private general::corba::Identifier schemeCableLinkId;
						private general::corba::Identifier threadId;
						private general::corba::IdentifierSeq characteristicIds;

						readonly attribute configuration::corba::LinkType linkType;
						/**
						 * This is a circular dependency on {@link SchemePort}, see {@link SchemePort#schemeCableThread()}.
						 *
						 * @return scheme port this scheme cable thread is attached to.
						 * @see #schemePortId
						 * @see SchemePort#schemeCableThread()
						 */
						readonly attribute SchemePort schemePort;
						/**
						 * @return scheme cable link containing this scheme cable thread.
						 * @see #schemeCableLinkId
						 */
						readonly attribute SchemeCableLink schemeCablelink;
						readonly attribute configuration::corba::Link thread;
						attribute configuration::corba::CharacteristicSeq characteristics;

						SchemeCableThread cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeCableThread> SchemeCableThreadSeq;

					valuetype CableChannelingItem:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private long thisSequentialNumber;
						private general::corba::Identifier physicalLinkId;
						private long thisRowX;
						private long thisPlaceY;
						private double thisStartSpare;
						private double thisEndSpare;
						private general::corba::Identifier startSiteId;
						private general::corba::Identifier endSiteId;

						readonly attribute long sequentialNumber;
						readonly attribute CORBA::Map::MapPhysicalLinkElement physicalLink;
						readonly attribute long rowX;
						readonly attribute long placeY;
						readonly attribute double startSpare;
						readonly attribute double endSpare;
						readonly attribute CORBA::Map::MapSiteElement startSite;
						readonly attribute CORBA::Map::MapSiteElement endSite;

						CableChannelingItem cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<CableChannelingItem> CableChannelingItemSeq;

					valuetype SchemeCableLink: AbstractSchemeLink {
						private general::corba::IdentifierSeq SchemeCableThreadIds;
						private general::corba::IdentifierSeq CableChannelingItemIds;

						/**
						 * @see AbstractSchemeLink#sourceAbstractSchemePortId
						 */
						readonly attribute SchemeCablePort sourceSchemeCablePort;
						/**
						 * @see AbstractSchemeLink#targetAbstractSchemePortId
						 */
						readonly attribute SchemeCablePort targetSchemeCablePort;
						readonly attribute SchemeCableThreadSeq schemeCableThreads;
						readonly attribute CableChannelingItemSeq cableChannelingItems;

						SchemeCableLink cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeCableLink> SchemeCableLinkSeq;

					/**
					 * PathElement has no associated <code>name</code> (or <code>thisName</code>) field: its {@link #name()} method actually returns {@link #abstractSchemeElement()}<code>.</code>{@link AbstractSchemeElement#name()}.
					 */
					valuetype PathElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum Type {
							SCHEME_CABLE_LINK,
							SCHEME_ELEMENT,
							SCHEME_LINK
						};

						private wstring thisDescription;
						private long thisSequentialNumber;
						private Type thisType;
						/**
						 * Empty if type is other than {@link com.syrus.AMFICOM.scheme.corba.PathElementPackage.Type#SCHEME_CABLE_LINK}.
						 */
						private general::corba::Identifier schemeCableThreadId;
						/**
						 * Depending on {@link #type}, may reference either {@link SchemeLink} or {@link SchemeCableLink} or {@link SchemeElement}.
						 */
						private general::corba::Identifier abstractSchemeElementId;
						/**
						 * Depending on {@link #type}, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier startAbstractSchemePortId;
						/**
						 * Depending on {@link #type}, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier endAbstractSchemePortId;
						private general::corba::Identifier schemeId;

						readonly attribute long sequentialNumber;
						readonly attribute Type type;
						readonly attribute SchemeCableThread schemeCableThread;
						readonly attribute AbstractSchemeElement abstractSchemeElement;
						readonly attribute AbstractSchemePort startAbstractSchemePort;
						readonly attribute AbstractSchemePort endAbstractSchemePort;
						readonly attribute Scheme scheme;

						PathElement cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<PathElement> PathElementSeq;

					valuetype SchemePath:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier _typeId;
						private general::corba::Identifier startDeviceId;
						private general::corba::Identifier endDeviceId;
						private general::corba::Identifier pathId;
						private general::corba::IdentifierSeq links;
						private general::corba::IdentifierSeq characteristicIds;

						readonly attribute configuration::corba::TransmissionPathType type;
						readonly attribute SchemeElement startDevice;
						readonly attribute SchemeElement endDevice;
						readonly attribute configuration::corba::TransmissionPath path;
						readonly attribute PathElementSeq links;
						attribute configuration::corba::CharacteristicSeq characteristics;

						SchemePath cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemePath> SchemePathSeq;

					valuetype SchemeProtoElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier equipmentTypeId;
						private general::corba::Identifier domainId;
						private general::corba::IdentifierSeq deviceIds;
						private general::corba::IdentifierSeq linkIds;
						private general::corba::IdentifierSeq protoElementIds;
						private general::corba::Identifier symbolId;
						private wstring thisLabel;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private general::corba::IdentifierSeq characteristicIds;

						readonly attribute configuration::corba::EquipmentType equipmentType;
						readonly attribute configuration::corba::Domain domain;
						readonly attribute SchemeDeviceSeq devices;
						readonly attribute SchemeLinkSeq links;
						/**
						 * Getter returns an array of this node's child nodes.
						 * @see #protoElementIds
						 */
						readonly attribute SchemeProtoElementSeq protoElements;
						attribute CORBA::Resource::ImageResource symbol;
						attribute wstring label;
						/**
						 * @see #ugoCellId
						 */
						readonly attribute CORBA::Resource::ImageResource ugoCell;
						/**
						 * @see #schemeCellId
						 */
						readonly attribute CORBA::Resource::ImageResource schemeCell;
						attribute configuration::corba::CharacteristicSeq characteristics;

						SchemeProtoElement cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					valuetype SchemeElement: AbstractSchemeElement {
						/**
						 * May be empty. Probably is subject removal (see {@link #equipmentTypeId}).
						 */
						private general::corba::Identifier schemeProtoElementId;
						/**
						 * Value is either taken from entity pointed to by {@link #schemeProtoElementId} or assigned directly.
						 */
						private general::corba::Identifier equipmentTypeId;
						private general::corba::Identifier equipmentId;
						private general::corba::Identifier rtuId;
						private general::corba::IdentifierSeq schemeDeviceIds;
						private general::corba::IdentifierSeq schemeLinkIds;
						private general::corba::IdentifierSeq schemeElementIds;
						private general::corba::Identifier internalSchemeId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private general::corba::Identifier siteId;
						private general::corba::Identifier symbolId;

						readonly attribute SchemeProtoElement schemeProtoElement;
						attribute configuration::corba::EquipmentType equipmentType;
						attribute configuration::corba::Equipment equipment;
						attribute configuration::corba::Rtu rtu;
						attribute SchemeDeviceSeq schemeDevices;
						attribute SchemeLinkSeq schemeLinks;
						/**
						 * Getter returns only elements enclosed by this scheme element.
						 */
						attribute SchemeElementSeq schemeElements;
						/**
						 * Getter/setter pair for internalScheme property.
						 */
						attribute Scheme internalScheme;
						/**
						 * @see #ugoCellId
						 */
						readonly attribute CORBA::Resource::ImageResource ugoCell;
						/**
						 * @see #schemeCellId
						 */
						readonly attribute CORBA::Resource::ImageResource schemeCell;
						attribute CORBA::Map::MapSiteElement site;
						attribute CORBA::Resource::ImageResource symbol;

						SchemeElement cloneInstance();

						factory newInstance(
							in general::corba::Identifier id,
							in SchemeProtoElement schemeProtoElement,
							in Scheme internalScheme,
							in Scheme scheme
						);
					};

					valuetype SchemeMonitoringSolution:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private double thisPrice;
						private general::corba::IdentifierSeq schemePathIds;

						readonly attribute Scheme scheme;
						readonly attribute double price;
						readonly attribute SchemePathSeq schemePaths;

						SchemeMonitoringSolution cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeMonitoringSolution> SchemeMonitoringSolutionSeq;

					valuetype Scheme:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum Type {
							BUILDING,
							CABLE_SUBNETWORK,
							NETWORK
						};

						private wstring thisName;
						private wstring thisDescription;
						private Type thisType;
						/**
						 * Value is assigned automatically.
						 */
						private general::corba::Identifier ownerId;
						/**
						 * Value is assigned automatically.
						 */
						private general::corba::Identifier domainId;
						private general::corba::IdentifierSeq schemeElementIds;
						private general::corba::IdentifierSeq schemeLinkIds;
						private general::corba::IdentifierSeq schemeCableLinkIds;
						private general::corba::Identifier schemeMonitoringSolutionId;
						private general::corba::Identifier symbolId;
						private wstring thisLabel;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private long thisWidth;
						private long thisHeight;
						private general::corba::Identifier mapId;

						readonly attribute Type type;
						/**
						 * @see #ownerId
						 */
						readonly attribute configuration::corba::User owner;
						/**
						 * @see #domainId
						 */
						readonly attribute configuration::corba::Domain domain;
						attribute SchemeElementSeq schemeElements;
						attribute SchemeLinkSeq schemeLinks;
						attribute SchemeCableLinkSeq schemeCableLinks;
						attribute SchemeMonitoringSolution schemeMonitoringSolution;
						attribute CORBA::Resource::ImageResource symbol;
						attribute wstring label;
						/**
						 * @see #ugoCellId
						 */
						readonly attribute CORBA::Resource::ImageResource ugoCell;
						/**
						 * @see #schemeCellId
						 */
						readonly attribute CORBA::Resource::ImageResource schemeCell;
						attribute long width;
						attribute long height;
						attribute CORBA::Map::Map map;

						Scheme cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<Scheme> SchemeSeq;

					valuetype SchemeProtoGroup:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier symbolId;
						private general::corba::Identifier parentId;
						private wstring thisSchemeProtoElementClass;
						private general::corba::IdentifierSeq SchemeProtoGroupIds;
						private general::corba::IdentifierSeq SchemeProtoElementIds;

						attribute CORBA::Resource::ImageResource symbol;
						readonly attribute SchemeProtoGroup parent;
						readonly attribute wstring schemeProtoElementClass;
						readonly attribute SchemeProtoGroupSeq schemeProtoGroups;
						readonly attribute SchemeProtoElementSeq schemeProtoElements;

						SchemeProtoGroup cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					valuetype SchemeOptimizeInfo:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum OptimizationMode {
							_DEFAULT
						};

						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private general::corba::Identifier schemeMonitoringSolutionId;
						private OptimizationMode thisOptimizationMode;
						private double thisIterations;
						private double thisPrice;
						private double thisWavelength;
						private double thisLenMargin;
						private double thisMutationRate;
						private double thisMutationDegree;
						private double thisRtuDeleteProb;
						private double thisRtuCreateProb;
						private double thisNodesSpliceProb;
						private double thisNodesCutProb;
						private double thisSurvivorRate;
						private ::CORBA::DoubleSeq thisReflPrices;
						private ::CORBA::WStringSeq thisReflNames;
						private ::CORBA::DoubleSeq thisReflRanges;
						private ::CORBA::DoubleSeq thisSwitchPrices;
						private ::CORBA::DoubleSeq thisSwitchNports;
						private ::CORBA::WStringSeq thisSwitchNames;

						readonly attribute Scheme scheme;
						readonly attribute SchemeMonitoringSolution schemeMonitoringSolution;
						readonly attribute OptimizationMode optimizationMode;
						readonly attribute double iterations;
						readonly attribute double price;
						readonly attribute double wavelength;
						readonly attribute double lenMargin;
						readonly attribute double mutationRate;
						readonly attribute double mutationDegree;
						readonly attribute double rtuDeleteProb;
						readonly attribute double rtuCreateProb;
						readonly attribute double nodesSpliceProb;
						readonly attribute double nodesCutProb;
						readonly attribute double survivorRate;
						readonly attribute ::CORBA::DoubleSeq reflPrices;
						readonly attribute ::CORBA::WStringSeq reflNames;
						readonly attribute ::CORBA::DoubleSeq reflRanges;
						readonly attribute ::CORBA::DoubleSeq switchPrices;
						readonly attribute ::CORBA::DoubleSeq switchNports;
						readonly attribute ::CORBA::WStringSeq switchNames;

						SchemeOptimizeInfo cloneInstance();

						factory newInstance(
							in general::corba::Identifier id
						);
					};

					typedef sequence<SchemeOptimizeInfo> SchemeOptimizeInfoSeq;
				};
			};
#else // SCHEME_COMMON
			module CORBA {
				module Scheme {
					struct SchemePort_Transferable {
						wstring id;
						wstring name;
						wstring deviceId;
						wstring linkId;

						wstring portTypeId;
						wstring portId;

#ifdef SERVER
						boolean isMeasurementPort;
#endif
						wstring measurementPortTypeId;
						wstring measurementPortId;
						wstring directionType;

						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemePort_Transferable> SchemePortSeq_Transferable;

					struct SchemeCablePort_Transferable {
						wstring id;
						wstring name;
						wstring deviceId;
						wstring cableLinkId;

						wstring cablePortTypeId;
						wstring cablePortId;

#ifdef SERVER
						boolean isMeasurementPort;
#endif
						wstring measurementPortTypeId;
						wstring measurementPortId;
						wstring directionType;

						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemeCablePort_Transferable> SchemeCablePortSeq_Transferable;

					struct PortThreadMap_Transferable {
						wstring deviceId;
						wstring portId;
						wstring cableLinkId;
						wstring threadId;
					};

					typedef sequence<PortThreadMap_Transferable> PortThreadMapSeq_Transferable;

					struct SchemeDevice_Transferable {
						wstring id;
						wstring name;

						SchemePortSeq_Transferable ports;
						SchemeCablePortSeq_Transferable cableports;
						General::ElementAttributeSeq_Transferable attributes;
#ifndef SERVER
						PortThreadMapSeq_Transferable portmap;
#endif
					};

					typedef sequence<SchemeDevice_Transferable> SchemeDeviceSeq_Transferable;

					struct SchemeLink_Transferable {
						wstring id;
						wstring name;
						wstring sourcePortId;
						wstring targetPortId;
						wstring linkTypeId;
						wstring linkId;
#ifndef SERVER
						wstring schemeId;
#endif
						wstring physicalLength;
						wstring opticalLength;

#ifndef SERVER
						wstring siteId;
#endif

						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemeLink_Transferable> SchemeLinkSeq_Transferable;

					struct SchemeCableThread_Transferable {
						wstring id;
						wstring name;
						wstring linkTypeId;
#ifndef SERVER
						wstring cableLinkId;
#endif
						wstring threadId;
						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemeCableThread_Transferable> SchemeCableThreadSeq_Transferable;

					struct CableChannelingItem_Transferable {
						wstring id;
						long n;
						wstring startSiteId;
						double startSpare;
						wstring physicalLinkId;
						long row_x;
						long place_y;
						double endSpare;
						wstring endSiteId;
					};

					typedef sequence<CableChannelingItem_Transferable> CableChannelingItemSeq_Transferable;

					struct SchemeCableLink_Transferable {
						wstring id;
						wstring name;
						wstring sourcePortId;
						wstring targetPortId;
						wstring cableLinkTypeId;
						wstring cableLinkId;
#ifndef SERVER
						wstring schemeId;
#endif
						wstring physicalLength;
						wstring opticalLength;
						SchemeCableThreadSeq_Transferable cableThreads;

						General::ElementAttributeSeq_Transferable attributes;

#ifndef SERVER
						CableChannelingItemSeq_Transferable channeling;
#endif
					};

					typedef sequence<SchemeCableLink_Transferable> SchemeCableLinkSeq_Transferable;

					struct PathElement_Transferable {
						long n;
#ifdef SERVER
						boolean isCable;
						wstring linkId;
#else
						long type;
						wstring elementId;
#endif
						wstring threadId;
#ifndef SERVER
						wstring startPortId;
						wstring endPortId;
						wstring schemeId;
#endif
					};

					typedef sequence<PathElement_Transferable> PathElementSeq_Transferable;

					struct SchemePath_Transferable {
						wstring id;
						wstring name;
						wstring _typeId;
						wstring startDeviceId;
						wstring endDeviceId;

						wstring pathId;

						PathElementSeq_Transferable links;

						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemePath_Transferable> SchemePathSeq_Transferable;

					struct SchemeProtoElement_Transferable {
						wstring id;
						wstring name;
						wstring equipmentTypeId;
						wstring domainId;
						long long modified;
						SchemeDeviceSeq_Transferable devices;
						SchemeLinkSeq_Transferable links;
						::CORBA::WStringSeq protoElementIds;

						wstring symbolId;
						wstring label;
						::CORBA::OctetSeq ugocell;
						::CORBA::OctetSeq schemecell;
						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemeProtoElement_Transferable> SchemeProtoElementSeq_Transferable;

					struct SchemeElement_Transferable {
						wstring id;
						wstring name;
						wstring protoElementId;
						wstring equipmentId;
#ifndef SERVER
						wstring kisId;
#endif
						SchemeDeviceSeq_Transferable devices;
						SchemeLinkSeq_Transferable links;
						::CORBA::WStringSeq elementIds;

#ifndef SERVER
						wstring internalSchemeId;
#endif
						wstring schemeId;
#ifdef SERVER
						boolean isScheme;
#endif

						wstring description;
						::CORBA::OctetSeq ugocell;
						::CORBA::OctetSeq schemecell;

#ifndef SERVER
						wstring siteId;

						wstring imageId;
#endif

						General::ElementAttributeSeq_Transferable attributes;
					};

					typedef sequence<SchemeElement_Transferable> SchemeElementSeq_Transferable;

					struct SchemeMonitoringSolution_Transferable {
						wstring id;
						wstring name;
						wstring schemeId;
						double price;
						SchemePathSeq_Transferable paths;
					};

					typedef sequence<SchemeMonitoringSolution_Transferable> SchemeMonitoringSolutionSeq_Transferable;

					struct Scheme_Transferable {
						wstring id;
						wstring name;
						wstring schemeType;
						long long created;
						long long modified;
						wstring createdBy;
						wstring modifiedBy;
						wstring ownerId;
						wstring domainId;
						wstring description;

						SchemeElementSeq_Transferable elements;
						SchemeLinkSeq_Transferable links;
						SchemeCableLinkSeq_Transferable cableLinks;

#ifdef SERVER
						SchemePathSeq_Transferable paths;
#else
						SchemeMonitoringSolution_Transferable solution;
#endif

						::CORBA::WStringSeq elementIds;

						wstring symbolId;
						wstring label;
						::CORBA::OctetSeq ugocell;
						::CORBA::OctetSeq schemecell;

						long width;
						long height;
						::CORBA::OctetSeq clonez;

#ifndef SERVER
						wstring mapId;

						wstring imageId;
#endif
					};

					typedef sequence<Scheme_Transferable> SchemeSeq_Transferable;

					struct SchemeProtoGroup_Transferable {
						wstring id;
						wstring name;
#ifndef SERVER
						wstring description;
						wstring symbolId;
#endif

						wstring parentId;

						long long modified;

#ifndef SERVER
						wstring peClass;
						boolean peIsKis;
#endif

						::CORBA::WStringSeq groupIds;
						::CORBA::WStringSeq peIds;
					};

					typedef sequence<SchemeProtoGroup_Transferable> SchemeProtoGroupSeq_Transferable;

					struct SchemeOptimizeInfo_Transferable {
						wstring id;
						wstring schemeId;
						wstring solutionCompactId;// identifier for SchemeMonitoringSolution
						wstring date;

						long optimizeMode;

						double iterations;
						double price;
						double wavelength;
						// optimization parameters
						double lenMargin;
						double mutationRate;
						double mutationDegree;
						double rtuDeleteProb;
						double rtuCreateProb;
						double nodesSpliceProb;
						double nodesCutProb;
						double survivorRate;

						::CORBA::DoubleSeq reflPrices;
						::CORBA::WStringSeq reflNames;
						::CORBA::DoubleSeq reflRanges;
						::CORBA::DoubleSeq switchPrices;
						::CORBA::DoubleSeq switchNports;
						::CORBA::WStringSeq switchNames;
					};

					typedef sequence<SchemeOptimizeInfo_Transferable> SchemeOptimizeInfoSeq_Transferable;
				};
			};
#endif // SCHEME_COMMON
		};
	};
};

#endif // SCHEME_IDL
