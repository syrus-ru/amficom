/*
 * $Id: scheme.idl,v 1.5 2004/09/10 10:01:53 krupenn Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef _scheme_idl_
#define _scheme_idl_

#include "general.idl"
#include "network.idl"
#include "streams.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module Scheme
{
	struct SchemePort_Transferable
	{
		wstring id;
		wstring name;
		wstring device_id;
		wstring link_id;

		wstring port_type_id;
		wstring port_id;

		boolean is_access_port;
		wstring access_port_type_id;
		wstring access_port_id;
		wstring direction_type;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePort_Transferable> SchemePortSeq_Transferable;

	struct SchemeCablePort_Transferable
	{
		wstring id;
		wstring name;
		wstring device_id;
		wstring cable_link_id;

		wstring cable_port_type_id;
		wstring cable_port_id;

		boolean is_access_port;
		wstring access_port_type_id;
		wstring access_port_id;
		wstring direction_type;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCablePort_Transferable> SchemeCablePortSeq_Transferable;

	struct PortThreadMap_Transferable
	{
		wstring port_id;
		wstring cable_link_id;
		wstring thread_id;
	};
	typedef sequence <PortThreadMap_Transferable> PortThreadMapSeq_Transferable;

	struct SchemeDevice_Transferable
	{
		wstring id;
		wstring name;

		SchemePortSeq_Transferable ports;
		SchemeCablePortSeq_Transferable cableports;
		General::ElementAttributeSeq_Transferable attributes;
		PortThreadMapSeq_Transferable portmap;
	};
	typedef sequence <SchemeDevice_Transferable> SchemeDeviceSeq_Transferable;

	struct SchemeLink_Transferable
	{
		wstring id;
		wstring name;
		wstring source_port_id;
		wstring target_port_id;
		wstring link_type_id;
		wstring link_id;
		wstring physical_length;
		wstring optical_length;
		
		wstring site_id;
		
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeLink_Transferable> SchemeLinkSeq_Transferable;

	struct SchemeCableThread_Transferable
	{
		wstring id;
		wstring name;
		wstring link_type_id;
		wstring thread_id;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeCableThread_Transferable> SchemeCableThreadSeq_Transferable;

	struct CableChannelingItem_Transferable
	{
		wstring id;
		long n;
		wstring start_site_id;
		double start_spare;
		wstring physical_link_id;
		double end_spare;
		wstring end_site_id;
	};
	typedef sequence <CableChannelingItem_Transferable> CableChannelingItemSeq_Transferable;

	struct SchemeCableLink_Transferable
	{
		wstring id;
		wstring name;
		wstring source_port_id;
		wstring target_port_id;
		wstring cable_link_type_id;
		wstring cable_link_id;
		wstring physical_length;
		wstring optical_length;
		SchemeCableThreadSeq_Transferable cable_threads;
		General::ElementAttributeSeq_Transferable attributes;
		
		CableChannelingItemSeq_Transferable channeling;
	};
	typedef sequence <SchemeCableLink_Transferable> SchemeCableLinkSeq_Transferable;

	struct PathElement_Transferable
	{
		long n;
		long type;
		wstring link_id;
		wstring thread_id;
		wstring start_port_id;
		wstring end_port_id;
		wstring scheme_element_id;
		wstring scheme_id;
	};
	typedef sequence <PathElement_Transferable> PathElementSeq_Transferable;

	struct SchemePath_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring start_device_id;
		wstring end_device_id;

		wstring path_id;

		PathElementSeq_Transferable links;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemePath_Transferable> SchemePathSeq_Transferable;

	struct SchemeProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring equipment_type_id;
		wstring domain_id;
		long long modified;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		::CORBA::WStringSeq proto_element_ids;

		wstring symbol_id;
		wstring label;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeProtoElement_Transferable> SchemeProtoElementSeq_Transferable;

	struct SchemeElement_Transferable
	{
		wstring id;
		wstring name;
		wstring proto_element_id;
		wstring equipment_id;
		SchemeDeviceSeq_Transferable devices;
		SchemeLinkSeq_Transferable links;
		::CORBA::WStringSeq element_ids;

		wstring scheme_id;
		boolean is_scheme;

		wstring description;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;

		wstring site_id;
		
		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <SchemeElement_Transferable> SchemeElementSeq_Transferable;

	struct SchemeMonitoringSolution_Transferable
	{
		wstring id;
		wstring name;
		wstring scheme_id;
		double price;
		SchemePathSeq_Transferable paths;
	};
	typedef sequence <SchemeMonitoringSolution_Transferable> SchemeMonitoringSolutionSeq_Transferable;

	struct Scheme_Transferable
	{
		wstring id;
		wstring name;
		wstring scheme_type;
		long long created;
		long long modified;
		wstring created_by;
		wstring modified_by;
		wstring owner_id;
		wstring domain_id;
		wstring description;
		SchemeElementSeq_Transferable elements;
		SchemeLinkSeq_Transferable links;
		SchemeCableLinkSeq_Transferable cable_links;
		SchemeMonitoringSolution_Transferable solution;
		::CORBA::WStringSeq element_ids;

		wstring symbol_id;
		wstring label;
		::CORBA::OctetSeq ugocell;
		::CORBA::OctetSeq schemecell;

		long width;
		long height;
		::CORBA::OctetSeq clonez;
		
		wstring map_id;
	};
	typedef sequence <Scheme_Transferable> SchemeSeq_Transferable;

	struct SchemeProtoGroup_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring symbol_id;

		wstring parent_id;

		long long modified;

		wstring pe_class;
		boolean pe_is_kis;

		::CORBA::WStringSeq group_ids;
		::CORBA::WStringSeq pe_ids;
	};
	typedef sequence <SchemeProtoGroup_Transferable> SchemeProtoGroupSeq_Transferable;

	struct SchemeOptimizeInfo_Transferable
	{
		wstring id;
		wstring scheme_id;
		wstring solution_compact_id;// identifier for SchemeMonitoringSolution
		wstring date;

		long optimize_mode;

		double iterations;
		double price;
		double wavelength;
									// optimization parameters
		double len_margin;
		double mutation_rate;
		double mutation_degree;
		double rtu_delete_prob;
		double rtu_create_prob;
		double nodes_splice_prob;
		double nodes_cut_prob;
		double survivor_rate;

		::CORBA::DoubleSeq refl_prices;
		::CORBA::WStringSeq refl_names;
		::CORBA::DoubleSeq refl_ranges;
		::CORBA::DoubleSeq switch_prices;
		::CORBA::DoubleSeq switch_nports;
		::CORBA::WStringSeq switch_names;
	};
	typedef sequence <SchemeOptimizeInfo_Transferable> SchemeOptimizeInfoSeq_Transferable;
};
};
};
};
};

#endif
