/*
 * $Id: general-vt.idl,v 1.9 2005/02/28 14:16:00 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 *
 * Defines that can be specified at compile time:
 *
 * NUMERIC_IDENTIFIER (off by default) -- Identifier
 *  will hold primitive major and minor fields rather than a string;
 */

#ifndef GENERAL_VT_IDL
#define GENERAL_VT_IDL

#include "general.idl"

module com {
	module syrus {
		module AMFICOM {
			module general {
				module corba {
					native StorableObjectFactory;

					valuetype Identifier {
						const char SEPARATOR = '_';
#ifdef NUMERIC_IDENTIFIER
						const string IDENTIFIER_STRING_UNINITIALIZED = "";
#else // NUMERIC_IDENTIFIER
						const short MAJOR_UNINITIALIZED = -1;
						const long long MINOR_UNINITIALIZED = -1;
#endif // NUMERIC_IDENTIFIER

#ifdef NUMERIC_IDENTIFIER
						private short thisMajor;
						private long long thisMinor;
#else // NUMERIC_IDENTIFIER  
						private string thisIdentifierString;
#endif // NUMERIC_IDENTIFIER

						readonly attribute short major;
						readonly attribute long long minor;
						readonly attribute string identifierString;

						/**
						 * Utility method introduced to provide interoperability with native Java Identifier.
						 */						
						readonly attribute Identifier_Transferable transferable;
						/**
						 * Utility method introduced to provide interoperability with native Java Identifier.
						 */						
						readonly attribute string hexString;

						factory newInstanceFromString(in string identifierString);
						factory newInstanceFromPrimitive(in short major, in long long minor);
						factory newInstanceFromTransferable(in Identifier_Transferable identifier);
					};

					typedef sequence<Identifier> IdentifierSeq;

					abstract valuetype Identifiable {
						readonly attribute Identifier id;
					};

					abstract valuetype Namable {
						attribute WString32 name;
					};

					abstract valuetype Describable {
						attribute WString256 description;
					};

					abstract valuetype IStorableObject: Identifiable {
						readonly attribute long long created;
						readonly attribute long long modified;
						readonly attribute Identifier creatorId;
						readonly attribute Identifier modifierId;
						readonly attribute long long version;

						readonly attribute boolean isChanged;
						void setChanged(in StorableObjectFactory storableObjectFactory, in boolean changed);
						readonly attribute StorableObject_Transferable headerTransferable;
						/**
						 * Since dependencies may include both valuetyped and non-valuetyped storable
						 * objects, they are returned as a sequence of valuetyped identifiers, as
						 * valutyped and non-valuetyped ones can be easily converted into each other.
						 */
						readonly attribute IdentifierSeq dependencies;
					};

					valuetype StorableObject: IStorableObject {
						private Identifier thisId;

						private long long thisCreated;
						private long long thisModified;
						private Identifier thisCreatorId;
						private Identifier thisModifierId;
						private long long thisVersion;

						StorableObject cloneInstance();

						void setAttributes(in long long created,
								in long long modified,
								in general::corba::Identifier creatorId,
								in general::corba::Identifier modifierId,
								in long long version);

						factory newInstance(in general::corba::Identifier id,
								in long long created,
								in long long modified,
								in general::corba::Identifier creatorId,
								in general::corba::Identifier modifierId,
								in long long version);
						factory getInstance(in general::corba::Identifier id);
					};

					typedef sequence<StorableObject> StorableObjectSeq;
				};
			};
		};
	};
};

#endif // GENERAL_VT_IDL
