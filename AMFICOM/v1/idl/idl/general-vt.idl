/*
 * $Id: general-vt.idl,v 1.10 2005/03/01 13:58:23 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 *
 * Defines that can be specified at compile time:
 *
 * NUMERIC_IDENTIFIER (off by default) -- Identifier
 *  will hold primitive major and minor fields rather than a string;
 */

#ifndef GENERAL_VT_IDL
#define GENERAL_VT_IDL

#include "general.idl"

module com {
	module syrus {
		module AMFICOM {
			module general {
				module corba {
					native StorableObjectFactory;

					valuetype Identifier {
						const char SEPARATOR = '_';
#ifdef NUMERIC_IDENTIFIER
						const string IDENTIFIER_STRING_UNINITIALIZED = "";
#else // NUMERIC_IDENTIFIER
						const short MAJOR_UNINITIALIZED = -1;
						const long long MINOR_UNINITIALIZED = -1;
#endif // NUMERIC_IDENTIFIER

#ifdef NUMERIC_IDENTIFIER
						private short major;
						private long long minor;
#else // NUMERIC_IDENTIFIER  
						private string identifierString;
#endif // NUMERIC_IDENTIFIER

						readonly attribute short getMajor;
						readonly attribute long long getMinor;
						readonly attribute string getIdentifierString;

						/**
						 * Utility method introduced to provide interoperability with native Java Identifier.
						 */						
						readonly attribute Identifier_Transferable getTransferable;
						/**
						 * Utility method introduced to provide interoperability with native Java Identifier.
						 */						
						readonly attribute string toHexString;

						factory newInstanceFromString(in string identifierString);
						factory newInstanceFromPrimitive(in short major, in long long minor);
						factory newInstanceFromTransferable(in Identifier_Transferable identifier);
					};

					typedef sequence<Identifier> IdentifierSeq;

					abstract valuetype Identifiable {
						readonly attribute Identifier getId;
					};

					abstract valuetype Namable {
						attribute WString32 name;
					};

					abstract valuetype Describable {
						attribute WString256 description;
					};

					abstract valuetype IStorableObject: Identifiable {
						readonly attribute long long getCreated;
						readonly attribute long long getModified;
						readonly attribute Identifier getCreatorId;
						readonly attribute Identifier getModifierId;
						readonly attribute long long getVersion;

						readonly attribute boolean isChanged;
						void setChanged(in StorableObjectFactory invoker, in boolean changed);
						readonly attribute StorableObject_Transferable getHeaderTransferable;
						/**
						 * Since dependencies may include both valuetyped and non-valuetyped storable
						 * objects, they are returned as a sequence of valuetyped identifiers, as
						 * valutyped and non-valuetyped ones can be easily converted into each other.
						 */
						readonly attribute IdentifierSeq getDependencies;
					};

					valuetype StorableObject: IStorableObject {
						private Identifier id;

						private long long created;
						private long long modified;
						private Identifier creatorId;
						private Identifier modifierId;
						private long long version;

						StorableObject cloneInstance();

						void setAttributes(in long long created,
								in long long modified,
								in general::corba::Identifier creatorId,
								in general::corba::Identifier modifierId,
								in long long version);

						factory newInstance(in general::corba::Identifier id,
								in long long created,
								in long long modified,
								in general::corba::Identifier creatorId,
								in general::corba::Identifier modifierId,
								in long long version);
						factory getInstance(in general::corba::Identifier id);
					};

					typedef sequence<StorableObject> StorableObjectSeq;
				};
			};
		};
	};
};

#endif // GENERAL_VT_IDL
