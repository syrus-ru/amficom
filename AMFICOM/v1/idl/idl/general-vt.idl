/*
 * $Id: general-vt.idl,v 1.4 2004/11/29 10:18:11 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 *
 * Defines that can be specified at compile time:
 *
 * NUMERIC_IDENTIFIER (off by default) -- Identifier
 *  will hold primitive major and minor fields rather than a string;
 *
 * REDUNDANT_DEPS (off by default) -- StorableObject
 *  will depend on User.
 */

#ifndef GENERAL_VT_IDL
#define GENERAL_VT_IDL

#include "general.idl"

module java {
	module util {
		native Date;

		native List;

		abstract valuetype JavaUtilIStorableObject {
			Date getCreated();
			Date getModified();
			List getDependencies();
		};
	};
};

module com {
	module syrus {
		module AMFICOM {

#ifdef REDUNDANT_DEPS

			module configuration {
				module corba {
					valuetype User;
				};
			};

#endif // REDUNDANT_DEPS

			module general {
				native Identifier;

				abstract valuetype ComSyrusAmficomGeneralIStorableObject {
					Identifier getId();
					Identifier getCreatorId();
					Identifier getModifierId();
				};

				module corba {
					/**
					 * Common superinterface for both "valuetyped" and "native java"
					 * identifiers.
					 *
					 * @see com.syrus.AMFICOM.general.Identifier
					 * @see Identifier
					 * @see IdentifierImpl
					 */
					abstract valuetype IIdentifier {
						const char SEPARATOR = '_';
						string getIdentifierString();
						short getMajor();
						long long getMinor();
						string toHexString();
					};

					/**
					 * Common superinterface for both "valuetyped" and "native java"
					 * storable objects.
					 *
					 * @see com.syrus.AMFICOM.general.StorableObject
					 * @see StorableObject
					 * @see StorableObjectImpl
					 */
					abstract valuetype IStorableObject:
							::java::util::JavaUtilIStorableObject,
							::com::syrus::AMFICOM::general::ComSyrusAmficomGeneralIStorableObject {
						boolean isChanged();
						StorableObject_Transferable getHeaderTransferable();
					};

					valuetype Identifier: IIdentifier {
#ifdef NUMERIC_IDENTIFIER
						const string IDENTIFIER_STRING_UNINITIALIZED = "";
#else // NUMERIC_IDENTIFIER
						const short MAJOR_UNINITIALIZED = -1;
						const long long MINOR_UNINITIALIZED = -1;
#endif // NUMERIC_IDENTIFIER

#ifdef NUMERIC_IDENTIFIER
						private short thisMajor;
						private long long thisMinor;
#else // NUMERIC_IDENTIFIER  
						private string thisIdentifierString;
#endif // NUMERIC_IDENTIFIER

						readonly attribute short major;
						readonly attribute long long minor;
						readonly attribute string identifierString;

						Identifier cloneInstance();

						/**
						 * Utility method introduced to provide interoperability with native Java Identifier.
						 */						
						Identifier_Transferable getTransferable();

						factory newInstanceFromString(in string identifierString);
						factory newInstanceFromPrimitive(in short major, in long long minor);
					};

					typedef sequence<Identifier> IdentifierSeq;

					abstract valuetype Identifiable {
						readonly attribute Identifier id;
					};

					abstract valuetype Namable {
						attribute wstring name;
					};

					abstract valuetype Describable {
						attribute wstring description;
					};

					valuetype StorableObject: IStorableObject, Identifiable {
						private Identifier thisId;
						private long long thisCreated;
						private long long thisModified;
						private Identifier creatorId;
						private Identifier modifierId;
						private long long thisVersion;

						readonly attribute long long created;
						readonly attribute long long modified;
#ifdef REDUNDANT_DEPS
						readonly attribute configuration::corba::User creator;
						readonly attribute configuration::corba::User modifier;
#endif // REDUNDANT_DEPS
						readonly attribute long long version;
					};
				};
			};

#ifdef REDUNDANT_DEPS

			module configuration {
				module corba {
					valuetype User:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum Sort {
							SYSADMIN,
							REGULAR,
							SERVER,
							MCM
						};

						private wstring login;
						private Sort sort;
						private wstring thisName;
						private wstring thisDescription;
					};

					typedef sequence<User> UserSeq;
				};
			};

#endif // REDUNDANT_DEPS

		};
	};
};

#endif // GENERAL_VT_IDL
