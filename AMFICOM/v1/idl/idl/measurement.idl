/*-
 * $Id: measurement.idl,v 1.69 2005/06/23 18:45:09 bass Exp $
 *
 * Copyright © 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef MEASUREMENT_IDL
#define	MEASUREMENT_IDL

#include "general.idl"

module com {
module syrus {
module AMFICOM {
module measurement {
module corba {

////////////////////////// Type ///////////////////////////	

	typedef struct IdlMeasurementType {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq inParameterTypeIds;
		general::corba::IdentifierSeq outParameterTypeIds;
		general::corba::IdentifierSeq measurementPortTypeIds;
	} MeasurementType;

	typedef sequence<MeasurementType> MeasurementTypeSeq;

	typedef struct IdlAnalysisType {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq inParameterTypeIds;
		general::corba::IdentifierSeq criteriaParameterTypeIds;
		general::corba::IdentifierSeq etalonParameterTypeIds;
		general::corba::IdentifierSeq outParameterTypeIds;

		general::corba::IdentifierSeq measurementTypeIds;
	} AnalysisType;

	typedef sequence<AnalysisType> AnalysisTypeSeq;

	typedef struct IdlEvaluationType {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq inParameterTypeIds;
		general::corba::IdentifierSeq thresholdParameterTypeIds;
		general::corba::IdentifierSeq etalonParameterTypeIds;
		general::corba::IdentifierSeq outParameterTypeIds;

		general::corba::IdentifierSeq measurementTypeIds;
	} EvaluationType;

	typedef sequence<EvaluationType> EvaluationTypeSeq;

	typedef struct IdlModelingType {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq inParameterTypeIds;
		general::corba::IdentifierSeq outParameterTypeIds;
	} ModelingType;

	typedef sequence<ModelingType> ModelingTypeSeq;

/////////////////// Parameter and Set /////////////////////

//	XXX
//	XXX A shared type that is NOT a StorableObject.
//	XXX
	typedef struct IdlParameter {
		general::corba::Identifier id;
		general::corba::Identifier _typeId;
		::CORBA::OctetSeq value;
	} Parameter;

	typedef sequence<Parameter> ParameterSeq;

	typedef struct IdlParameterSet {
		general::corba::StorableObject header;

		enum ParameterSetSort {
			SET_SORT_MEASUREMENT_PARAMETERS,
			SET_SORT_ANALYSIS_CRITERIA,
			SET_SORT_EVALUATION_THRESHOLDS,
			SET_SORT_ETALON,
			SET_SORT_MODELING_PARAMETERS,
			SET_SORT_PREDICTION_PARAMETERS
		} sort;
		general::corba::WString256 description;
		ParameterSeq parameters;
		general::corba::IdentifierSeq monitoredElementIds;
	} ParameterSet;

	typedef sequence<ParameterSet> ParameterSetSeq;

/////////////////// Modeling /////////////////////

	typedef struct IdlModeling {
		general::corba::StorableObject header;

		general::corba::Identifier _typeId;
		general::corba::Identifier monitoredElementId;

		general::corba::WString128 name;

		general::corba::Identifier argumentSetId;
	} Modeling;

	typedef sequence<Modeling> ModelingSeq;

/////////////////// Measurement /////////////////////

	typedef struct IdlMeasurementSetup {
		general::corba::StorableObject header;

		general::corba::Identifier parameterSetId;
		general::corba::Identifier criteriaSetId;
		general::corba::Identifier thresholdSetId;
		general::corba::Identifier etalonId;
		general::corba::WString256 description;
		long long measurementDuration;
		general::corba::IdentifierSeq monitoredElementIds;
		general::corba::IdentifierSeq measurementTypeIds;
	} MeasurementSetup;

	typedef sequence<MeasurementSetup> MeasurementSetupSeq;

	typedef struct IdlMeasurement {
		general::corba::StorableObject header;

		general::corba::Identifier _typeId;
		general::corba::Identifier monitoredElementId;

		general::corba::WString128 name;

		general::corba::Identifier setupId;
		long long startTime;
		long long duration;
		enum MeasurementStatus {
			MEASUREMENT_STATUS_SCHEDULED,
			MEASUREMENT_STATUS_ACQUIRING,
			MEASUREMENT_STATUS_ACQUIRED,
			MEASUREMENT_STATUS_ANALYZED_OR_EVALUATED,
			MEASUREMENT_STATUS_COMPLETED,
			MEASUREMENT_STATUS_ABORTED
		} status;
		general::corba::WString64 localAddress;
		general::corba::Identifier testId;
	} Measurement;

	typedef sequence<Measurement> MeasurementSeq;

/////////////////////// Temporal Pattern ////////////////////////

	typedef struct IdlCronTemporalPattern {
		general::corba::StorableObject header;

		general::corba::WString256 description;
		general::corba::WString64Seq cronStrings;
	} CronTemporalPattern;

	typedef sequence<CronTemporalPattern> CronTemporalPatternSeq;

//	XXX
//	XXX Move _inside_ the valuetype
//	XXX
//	module IdlIntervalsTemporalPatternPackage {
		struct IntervalTemporalPatternId {
			long long ms;
			general::corba::Identifier temporalPatternId;
		};

		typedef sequence<IntervalTemporalPatternId> IntervalTemporalPatternIdSeq;

		struct IntervalDuration {
			long long ms;
			long long duration;
		};

		typedef sequence<IntervalDuration> IntervalDurationSeq;
//	};

	typedef struct IdlIntervalsTemporalPattern {
		general::corba::StorableObject header;

//		IdlIntervalsTemporalPatternPackage::
		IntervalTemporalPatternIdSeq intervalsTemporalPatternId;
//		IdlIntervalsTemporalPatternPackage::
		IntervalDurationSeq intervalsDuration;
	} IntervalsTemporalPattern;

	typedef sequence<IntervalsTemporalPattern> IntervalsTemporalPatternSeq;

	typedef struct IdlPeriodicalTemporalPattern {
		general::corba::StorableObject header;

		long long period;
	} PeriodicalTemporalPattern;

	typedef sequence<PeriodicalTemporalPattern> PeriodicalTemporalPatternSeq;

/////////////////////// Test ////////////////////////

	typedef struct IdlTest {
		general::corba::StorableObject header;
		union IdlTestTimeStamps switch (enum TestTemporalType {
				TEST_TEMPORAL_TYPE_ONETIME,
				TEST_TEMPORAL_TYPE_PERIODICAL,
				TEST_TEMPORAL_TYPE_CONTINUOUS}) {
			case TEST_TEMPORAL_TYPE_ONETIME:
				long long startTime;
			case TEST_TEMPORAL_TYPE_PERIODICAL:
				struct PeriodicalTestTimeStamps {
					long long startTime;
					long long endTime;
					general::corba::Identifier temporalPatternId;
				} ptts;
			case TEST_TEMPORAL_TYPE_CONTINUOUS:
				struct ContinuousTestTimeStamps {
					long long startTime;
					long long endTime;
				} ctts;
		} timeStamps;
		general::corba::Identifier measurementTypeId;
		general::corba::Identifier analysisTypeId;
		general::corba::Identifier evaluationTypeId;
		general::corba::Identifier groupTestId;
		enum TestStatus {
			TEST_STATUS_NEW,	//Сохранён в БД на сервере
			TEST_STATUS_SCHEDULED,	//Передан на МУИ и сохранён в БД
//			TEST_STATUS_QUEUED,	//Поставлен МУИ в очередь
			TEST_STATUS_PROCESSING,	//Извлечён из очереди; первое измерение начинает выполняться
			TEST_STATUS_COMPLETED,	//Последнее измерение завершено
			TEST_STATUS_ABORTED	//Прерван
		} status;		
		general::corba::Identifier monitoredElementId;
		enum TestReturnType {
			TEST_RETURN_TYPE_WHOLE,
			TEST_RETURN_TYPE_EVENTS,
			TEST_RETURN_TYPE_REFERENCE
		} returnType;
		general::corba::WString256 description;
		long numberOfMeasurements;
		general::corba::IdentifierSeq measurementSetupIds;
	} Test;

	typedef sequence<Test> TestSeq;

//////////////////// Analysis ///////////////////////

	typedef struct IdlAnalysis {
		general::corba::StorableObject header;

		general::corba::Identifier _typeId;
		general::corba::Identifier monitoredElementId;
		general::corba::Identifier measurementId;

		general::corba::WString128 name;

		general::corba::Identifier criteriaSetId;
	} Analysis;

	typedef sequence<Analysis> AnalysisSeq;

//////////////////// Evaluation /////////////////////

	typedef struct IdlEvaluation {
		general::corba::StorableObject header;

		general::corba::Identifier _typeId;
		general::corba::Identifier monitoredElementId;
		general::corba::Identifier measurementId;

		general::corba::Identifier thresholdSetId;
	} Evaluation;

	typedef sequence<Evaluation> EvaluationSeq;

////////////////////// Result ///////////////////////

	typedef struct IdlResult {
		general::corba::StorableObject header;

		general::corba::Identifier measurementId;
		general::corba::Identifier analysisId;
		general::corba::Identifier evaluationId;
		general::corba::Identifier modelingId;
		enum ResultSort {
			RESULT_SORT_MEASUREMENT,
			RESULT_SORT_ANALYSIS,
			RESULT_SORT_EVALUATION,
			RESULT_SORT_MODELING
		} sort;
		ParameterSeq parameters;
	} Result;

	typedef sequence<Result> ResultSeq;
};
};
};
};
};

#endif // MEASUREMENT_IDL
