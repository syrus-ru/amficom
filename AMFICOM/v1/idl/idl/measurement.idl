#ifndef _MEASUREMENT_IDL_
#define	_MEASUREMENT_IDL_

#include <general.idl>
#include <event.idl>

module com {
module syrus {
module AMFICOM {
module measurement {
module corba {

////////////////////////// Type ///////////////////////////

	struct ParameterType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		wstring name;
	};

	struct MeasurementType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};

	struct AnalysisType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable criteria_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};

	struct EvaluationType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable threshold_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};

/////////////////// Parameter and Set /////////////////////

	struct Parameter_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		sequence <octet> value;
		
		wstring typeCodename;
	};

	typedef sequence <Parameter_Transferable> ParameterSeq_Transferable;

	enum SetSort {
		SET_SORT_MEASUREMENT_PARAMETERS,
		SET_SORT_ANALYSIS_CRITERIA,
		SET_SORT_EVALUATION_THRESHOLDS,
		SET_SORT_ETALON
	};

	struct Set_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		SetSort sort;
		wstring description;
		ParameterSeq_Transferable parameters;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};

/////////////////// Measurement /////////////////////

	struct MeasurementSetup_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable parameter_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable criteria_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable threshold_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable etalon_id;
		wstring description;
		long long measurement_duration;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};

	enum MeasurementStatus {
		MEASUREMENT_STATUS_SCHEDULED,
		MEASUREMENT_STATUS_ACQUIRING,
		MEASUREMENT_STATUS_ACQUIRED,
		MEASUREMENT_STATUS_ANALYZED_OR_EVALUATED,
		MEASUREMENT_STATUS_COMPLETED,
		MEASUREMENT_STATUS_ABORTED
	};

	struct Measurement_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable setup_id;
		long long start_time;
		long long duration;
		MeasurementStatus status;
		wstring local_address;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable test_id;
	};

	typedef sequence <Measurement_Transferable> MeasurementSeq_Transferable;

/////////////////////// Temporal Pattern ////////////////////////


	struct TemporalPattern_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring description;
		sequence <wstring> cron_strings;
	};

/////////////////////// Test ////////////////////////

	enum TestStatus {
		TEST_STATUS_SCHEDULED,	//Сохранён в БД
//		TEST_STATUS_QUEUED,			//Поставлен МУИ в очередь
		TEST_STATUS_PROCESSING,	//Извлечён из очереди; первое измерение начинает выполняться
		TEST_STATUS_COMPLETED,	//Последнее измерение завершено
		TEST_STATUS_ABORTED			//Прерван
	};

	enum TestReturnType {
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestTemporalType {
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_CONTINUOUS
	};

	union TestTimeStamps_Transferable switch (TestTemporalType) {
		case TEST_TEMPORAL_TYPE_ONETIME:
			long long start_time;
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestTimeStamps {
				long long start_time;
				long long end_time;
				com::syrus::AMFICOM::general::corba::Identifier_Transferable temporal_pattern_id;
			} ptts;
		case TEST_TEMPORAL_TYPE_CONTINUOUS:
			struct ContinuousTestTimeStamps {
				long long start_time;
				long long end_time;
			} ctts;
	};

	struct Test_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    TestTemporalType temporal_type;
		TestTimeStamps_Transferable time_stamps;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable analysis_type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable evaluation_type_id;
    TestStatus status;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		TestReturnType return_type;
		wstring description;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable measurement_setup_ids;
	};

	typedef sequence <Test_Transferable> TestSeq_Transferable;

//////////////////// Analysis ///////////////////////

	struct Analysis_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable criteria_set_id;
  };

//////////////////// Evaluation /////////////////////

  struct Evaluation_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable threshold_set_id;
  };

////////////////////// Result ///////////////////////

	enum ResultSort {
		RESULT_SORT_MEASUREMENT,
		RESULT_SORT_ANALYSIS,
		RESULT_SORT_EVALUATION
	};

	struct Result_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_id;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable analysis_id;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable evaluation_id;
    ResultSort sort;
    sequence <Parameter_Transferable> parameters;
		com::syrus::AMFICOM::event::corba::AlarmLevel alarm_level;
  };

	typedef sequence <Result_Transferable> ResultSeq_Transferable;

};
};
};
};
};

#endif

