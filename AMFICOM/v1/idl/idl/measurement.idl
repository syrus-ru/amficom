/*
 * $Id: measurement.idl,v 1.27 2004/10/07 14:27:23 bob Exp $
 *
 * Copyright ╘ 2004 Syrus Systems.
 * мЮСВМН-РЕУМХВЕЯЙХИ ЖЕМРП.
 * оПНЕЙР: юлтхйнл.
 */

#ifndef MEASUREMENT_IDL
#define	MEASUREMENT_IDL

#include "event.idl"
#include "general.idl"

module com {
module syrus {
module AMFICOM {
module measurement {
module corba {

////////////////////////// Type ///////////////////////////

	struct ParameterType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		wstring name;
	};	
	typedef sequence <ParameterType_Transferable> ParameterTypeSeq_Transferable;

	struct MeasurementType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable measurement_port_type_ids;
	};
	
	typedef sequence <MeasurementType_Transferable> MeasurementTypeSeq_Transferable;

	struct AnalysisType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable criteria_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};
	
	typedef sequence <AnalysisType_Transferable> AnalysisTypeSeq_Transferable;

	struct EvaluationType_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring codename;
		wstring description;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable threshold_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};
	
	typedef sequence <EvaluationType_Transferable> EvaluationTypeSeq_Transferable;

/////////////////// Parameter and Set /////////////////////

	struct Parameter_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		sequence <octet> value;
		
		wstring typeCodename;
	};

	typedef sequence <Parameter_Transferable> ParameterSeq_Transferable;

	enum SetSort {
		SET_SORT_MEASUREMENT_PARAMETERS,
		SET_SORT_ANALYSIS_CRITERIA,
		SET_SORT_EVALUATION_THRESHOLDS,
		SET_SORT_ETALON
	};

	struct Set_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		SetSort sort;
		wstring description;
		ParameterSeq_Transferable parameters;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};
	
	typedef sequence <Set_Transferable> SetSeq_Transferable;

/////////////////// Modeling /////////////////////
	struct Modeling_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
		long long modified;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;
		
		wstring name;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;		
		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable argument_set_id;		
	};
	
	typedef sequence <Modeling_Transferable> ModelingSeq_Transferable;

/////////////////// Measurement /////////////////////

	struct MeasurementSetup_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable parameter_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable criteria_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable threshold_set_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable etalon_id;
		wstring description;
		long long measurement_duration;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};
	
	typedef sequence <MeasurementSetup_Transferable> MeasurementSetupSeq_Transferable;

	enum MeasurementStatus {
		MEASUREMENT_STATUS_SCHEDULED,
		MEASUREMENT_STATUS_ACQUIRING,
		MEASUREMENT_STATUS_ACQUIRED,
		MEASUREMENT_STATUS_ANALYZED_OR_EVALUATED,
		MEASUREMENT_STATUS_COMPLETED,
		MEASUREMENT_STATUS_ABORTED
	};

	struct Measurement_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;
		wstring name;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable setup_id;
		long long start_time;
		long long duration;
		MeasurementStatus status;
		wstring local_address;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable test_id;
	};

	typedef sequence <Measurement_Transferable> MeasurementSeq_Transferable;

/////////////////////// Temporal Pattern ////////////////////////


	struct TemporalPattern_Transferable {
		com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		wstring description;
		sequence <wstring> cron_strings;
	};

	typedef sequence <TemporalPattern_Transferable> TemporalPatternSeq_Transferable;

/////////////////////// Test ////////////////////////

	enum TestStatus {
		TEST_STATUS_NEW,				//Сохранён в БД на сервере
		TEST_STATUS_SCHEDULED,	//Передан на МУИ и сохранён в БД
//		TEST_STATUS_QUEUED,		//Поставлен МУИ в очередь
		TEST_STATUS_PROCESSING,	//Извлечён из очереди; первое измерение начинает выполняться
		TEST_STATUS_COMPLETED,	//Последнее измерение завершено
		TEST_STATUS_ABORTED			//Прерван
	};

	enum TestReturnType {
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestTemporalType {
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_CONTINUOUS
	};

	union TestTimeStamps_Transferable switch (TestTemporalType) {
		case TEST_TEMPORAL_TYPE_ONETIME:
			long long start_time;
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestTimeStamps {
				long long start_time;
				long long end_time;
				com::syrus::AMFICOM::general::corba::Identifier_Transferable temporal_pattern_id;
			} ptts;
		case TEST_TEMPORAL_TYPE_CONTINUOUS:
			struct ContinuousTestTimeStamps {
				long long start_time;
				long long end_time;
			} ctts;
	};

	struct Test_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    TestTemporalType temporal_type;
		TestTimeStamps_Transferable time_stamps;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable analysis_type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable evaluation_type_id;
    TestStatus status;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		TestReturnType return_type;
		wstring description;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable measurement_setup_ids;
	};

	typedef sequence <Test_Transferable> TestSeq_Transferable;

//////////////////// Analysis ///////////////////////

	struct Analysis_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable criteria_set_id;
  };
  
	typedef sequence <Analysis_Transferable> AnalysisSeq_Transferable;
	
//////////////////// Evaluation /////////////////////

  struct Evaluation_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable monitored_element_id;
		
		wstring typeCodename;

    com::syrus::AMFICOM::general::corba::Identifier_Transferable threshold_set_id;
  };
  
  typedef sequence <Evaluation_Transferable> EvaluationSeq_Transferable;

////////////////////// Result ///////////////////////

	enum ResultSort {
		RESULT_SORT_MEASUREMENT,
		RESULT_SORT_ANALYSIS,
		RESULT_SORT_EVALUATION
	};

	struct Result_Transferable {
    com::syrus::AMFICOM::general::corba::Identifier_Transferable id;
		long long created;
	  long long modified;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable creator_id;
	  com::syrus::AMFICOM::general::corba::Identifier_Transferable modifier_id;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_id;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable analysis_id;
    com::syrus::AMFICOM::general::corba::Identifier_Transferable evaluation_id;
    ResultSort sort;
    sequence <Parameter_Transferable> parameters;
		com::syrus::AMFICOM::event::corba::AlarmLevel alarm_level;
  };

	typedef sequence <Result_Transferable> ResultSeq_Transferable;
//////////////// Conditions //////////////
	
	struct LinkedIdsCondition_Transferable {
			short	entity_code;
			com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
			com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable linked_ids;		
	};
	
	struct MeasurementSetupCondition_Transferable {
			short	entity_code;
			com::syrus::AMFICOM::general::corba::Identifier_Transferable object_id;
	};

	struct TestCondition_Transferable {	
			short	entity_code;
			com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
			long long start;
			long long end;
	};

	struct StringFieldCondition_Transferable {	
			short	entity_code;
			wstring field_string;
	};
	
};
};
};
};
};

#endif

