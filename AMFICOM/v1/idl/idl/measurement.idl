/*
 * $Id: measurement.idl,v 1.50 2005/01/27 07:51:12 arseniy Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef MEASUREMENT_IDL
#define	MEASUREMENT_IDL

#include "general.idl"

module com {
module syrus {
module AMFICOM {
module measurement {
module corba {

////////////////////////// Type ///////////////////////////	

	struct MeasurementType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable measurement_port_type_ids;
	};

	typedef sequence <MeasurementType_Transferable> MeasurementTypeSeq_Transferable;

	struct AnalysisType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable criteria_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};
	
	typedef sequence <AnalysisType_Transferable> AnalysisTypeSeq_Transferable;

	struct EvaluationType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable threshold_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable etalon_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};
	
	typedef sequence <EvaluationType_Transferable> EvaluationTypeSeq_Transferable;

	struct ModelingType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq_Transferable in_parameter_type_ids;
		general::corba::IdentifierSeq_Transferable out_parameter_type_ids;
	};
	
	typedef sequence <ModelingType_Transferable> ModelingTypeSeq_Transferable;

/////////////////// Parameter and Set /////////////////////

	struct Parameter_Transferable {
		general::corba::Identifier_Transferable id;
		general::corba::Identifier_Transferable type_id;
		sequence <octet> value;
	};

	typedef sequence <Parameter_Transferable> ParameterSeq_Transferable;

	enum SetSort {
		SET_SORT_MEASUREMENT_PARAMETERS,
		SET_SORT_ANALYSIS_CRITERIA,
		SET_SORT_EVALUATION_THRESHOLDS,
		SET_SORT_ETALON,
		SET_SORT_MODELING_PARAMETERS,
		SET_SORT_PREDICTION_PARAMETERS
	};

	struct Set_Transferable {
		general::corba::StorableObject_Transferable header;

		SetSort sort;
		general::corba::WString256 description;
		ParameterSeq_Transferable parameters;
		general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};
	
	typedef sequence <Set_Transferable> SetSeq_Transferable;

/////////////////// Modeling /////////////////////

	struct Modeling_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		general::corba::Identifier_Transferable monitored_element_id;
		
		general::corba::WString128 name;

		general::corba::Identifier_Transferable argument_set_id;
	};

	typedef sequence <Modeling_Transferable> ModelingSeq_Transferable;

/////////////////// Measurement /////////////////////

	struct MeasurementSetup_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable parameter_set_id;
		general::corba::Identifier_Transferable criteria_set_id;
		general::corba::Identifier_Transferable threshold_set_id;
		general::corba::Identifier_Transferable etalon_id;
		general::corba::WString256 description;
		long long measurement_duration;
		general::corba::IdentifierSeq_Transferable monitored_element_ids;
	};
	
	typedef sequence <MeasurementSetup_Transferable> MeasurementSetupSeq_Transferable;

	enum MeasurementStatus {
		MEASUREMENT_STATUS_SCHEDULED,
		MEASUREMENT_STATUS_ACQUIRING,
		MEASUREMENT_STATUS_ACQUIRED,
		MEASUREMENT_STATUS_ANALYZED_OR_EVALUATED,
		MEASUREMENT_STATUS_COMPLETED,
		MEASUREMENT_STATUS_ABORTED
	};

	struct Measurement_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		general::corba::Identifier_Transferable monitored_element_id;

		general::corba::WString128 name;

		general::corba::Identifier_Transferable setup_id;
		long long start_time;
		long long duration;
		MeasurementStatus status;
		general::corba::WString64 local_address;
		general::corba::Identifier_Transferable test_id;
	};

	typedef sequence <Measurement_Transferable> MeasurementSeq_Transferable;

/////////////////////// Temporal Pattern ////////////////////////


	struct TemporalPattern_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString256 description;
		sequence <general::corba::WString64> cron_strings;
	};

	typedef sequence <TemporalPattern_Transferable> TemporalPatternSeq_Transferable;

/////////////////////// Test ////////////////////////

	enum TestStatus {
		TEST_STATUS_NEW,				//Сохранён в БД на сервере
		TEST_STATUS_SCHEDULED,	//Передан на МУИ и сохранён в БД
//		TEST_STATUS_QUEUED,		//Поставлен МУИ в очередь
		TEST_STATUS_PROCESSING,	//Извлечён из очереди; первое измерение начинает выполняться
		TEST_STATUS_COMPLETED,	//Последнее измерение завершено
		TEST_STATUS_ABORTED			//Прерван
	};

	enum TestReturnType {
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestTemporalType {
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_CONTINUOUS
	};

	union TestTimeStamps_Transferable switch (TestTemporalType) {
		case TEST_TEMPORAL_TYPE_ONETIME:
			long long start_time;
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestTimeStamps {
				long long start_time;
				long long end_time;
				general::corba::Identifier_Transferable temporal_pattern_id;
			} ptts;
		case TEST_TEMPORAL_TYPE_CONTINUOUS:
			struct ContinuousTestTimeStamps {
				long long start_time;
				long long end_time;
			} ctts;
	};

	struct Test_Transferable {
		general::corba::StorableObject_Transferable header;

    TestTemporalType temporal_type;
		TestTimeStamps_Transferable time_stamps;
		general::corba::Identifier_Transferable measurement_type_id;
		general::corba::Identifier_Transferable analysis_type_id;
		general::corba::Identifier_Transferable evaluation_type_id;
		TestStatus status;
		general::corba::Identifier_Transferable monitored_element_id;
		TestReturnType return_type;
		general::corba::WString256 description;
		general::corba::IdentifierSeq_Transferable measurement_setup_ids;
	};

	typedef sequence <Test_Transferable> TestSeq_Transferable;

//////////////////// Analysis ///////////////////////

	struct Analysis_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		general::corba::Identifier_Transferable monitored_element_id;
		general::corba::Identifier_Transferable measurement_id;

		general::corba::Identifier_Transferable criteria_set_id;
  };

	typedef sequence <Analysis_Transferable> AnalysisSeq_Transferable;

//////////////////// Evaluation /////////////////////

  struct Evaluation_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		general::corba::Identifier_Transferable monitored_element_id;
		general::corba::Identifier_Transferable measurement_id;

		general::corba::Identifier_Transferable threshold_set_id;
  };

	typedef sequence <Evaluation_Transferable> EvaluationSeq_Transferable;

////////////////////// Result ///////////////////////

	enum ResultSort {
		RESULT_SORT_MEASUREMENT,
		RESULT_SORT_ANALYSIS,
		RESULT_SORT_EVALUATION,
		RESULT_SORT_MODELING
	};

	struct Result_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable measurement_id;
		general::corba::Identifier_Transferable analysis_id;
		general::corba::Identifier_Transferable evaluation_id;
		general::corba::Identifier_Transferable modeling_id;
		ResultSort sort;
		sequence <Parameter_Transferable> parameters;
  };

	typedef sequence <Result_Transferable> ResultSeq_Transferable;

//////////////// Conditions //////////////

	struct TemporalCondition_Transferable {	
			short	entity_code;
			general::corba::Identifier_Transferable domain_id;
			long long start;
			long long end;
	};

	struct ResultCondition_Transferable {	
			short	entity_code;
			general::corba::Identifier_Transferable domain_id;
			long long start;
			long long end;
	};

	struct ResultSortCondition_Transferable {
			short	entity_code;
			general::corba::Identifier_Transferable measurement_id;
			ResultSort sort;
	};

};
};
};
};
};

#endif
