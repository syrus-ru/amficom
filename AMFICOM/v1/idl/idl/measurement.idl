/*
 * $Id: measurement.idl,v 1.66 2005/05/13 10:51:23 bob Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef MEASUREMENT_IDL
#define	MEASUREMENT_IDL

#include "general.idl"

module com {
module syrus {
module AMFICOM {
module measurement {
module corba {

////////////////////////// Type ///////////////////////////	

	struct MeasurementType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq in_parameter_type_ids;
		general::corba::IdentifierSeq out_parameter_type_ids;
		general::corba::IdentifierSeq measurement_port_type_ids;
	};

	typedef sequence <MeasurementType_Transferable> MeasurementTypeSeq_Transferable;

	struct AnalysisType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq in_parameter_type_ids;
		general::corba::IdentifierSeq criteria_parameter_type_ids;
		general::corba::IdentifierSeq etalon_parameter_type_ids;
		general::corba::IdentifierSeq out_parameter_type_ids;

		general::corba::IdentifierSeq measurement_type_ids;
	};

	typedef sequence <AnalysisType_Transferable> AnalysisTypeSeq_Transferable;

	struct EvaluationType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq in_parameter_type_ids;
		general::corba::IdentifierSeq threshold_parameter_type_ids;
		general::corba::IdentifierSeq etalon_parameter_type_ids;
		general::corba::IdentifierSeq out_parameter_type_ids;

		general::corba::IdentifierSeq measurement_type_ids;
	};

	typedef sequence <EvaluationType_Transferable> EvaluationTypeSeq_Transferable;

	struct ModelingType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq in_parameter_type_ids;
		general::corba::IdentifierSeq out_parameter_type_ids;
	};

	typedef sequence <ModelingType_Transferable> ModelingTypeSeq_Transferable;

/////////////////// Parameter and Set /////////////////////

	struct Parameter_Transferable {
		general::corba::Identifier id;
		general::corba::Identifier type_id;
		sequence <octet> value;
	};

	typedef sequence <Parameter_Transferable> ParameterSeq_Transferable;

	enum SetSort {
		SET_SORT_MEASUREMENT_PARAMETERS,
		SET_SORT_ANALYSIS_CRITERIA,
		SET_SORT_EVALUATION_THRESHOLDS,
		SET_SORT_ETALON,
		SET_SORT_MODELING_PARAMETERS,
		SET_SORT_PREDICTION_PARAMETERS
	};

	struct Set_Transferable {
		general::corba::StorableObject header;

		SetSort sort;
		general::corba::WString256 description;
		ParameterSeq_Transferable parameters;
		general::corba::IdentifierSeq monitored_element_ids;
	};

	typedef sequence <Set_Transferable> SetSeq_Transferable;

/////////////////// Modeling /////////////////////

	struct Modeling_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::Identifier monitored_element_id;

		general::corba::WString128 name;

		general::corba::Identifier argument_set_id;
	};

	typedef sequence <Modeling_Transferable> ModelingSeq_Transferable;

/////////////////// Measurement /////////////////////

	struct MeasurementSetup_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier parameter_set_id;
		general::corba::Identifier criteria_set_id;
		general::corba::Identifier threshold_set_id;
		general::corba::Identifier etalon_id;
		general::corba::WString256 description;
		long long measurement_duration;
		general::corba::IdentifierSeq monitored_element_ids;
		general::corba::IdentifierSeq measurement_type_ids;
	};

	typedef sequence <MeasurementSetup_Transferable> MeasurementSetupSeq_Transferable;

	enum MeasurementStatus {
		MEASUREMENT_STATUS_SCHEDULED,
		MEASUREMENT_STATUS_ACQUIRING,
		MEASUREMENT_STATUS_ACQUIRED,
		MEASUREMENT_STATUS_ANALYZED_OR_EVALUATED,
		MEASUREMENT_STATUS_COMPLETED,
		MEASUREMENT_STATUS_ABORTED
	};

	struct Measurement_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::Identifier monitored_element_id;

		general::corba::WString128 name;

		general::corba::Identifier setup_id;
		long long start_time;
		long long duration;
		MeasurementStatus status;
		general::corba::WString64 local_address;
		general::corba::Identifier test_id;
	};

	typedef sequence <Measurement_Transferable> MeasurementSeq_Transferable;

/////////////////////// Temporal Pattern ////////////////////////

	struct CronTemporalPattern_Transferable {
		general::corba::StorableObject header;

		general::corba::WString256 description;
		sequence <general::corba::WString64> cron_strings;
	};

	typedef sequence <CronTemporalPattern_Transferable> CronTemporalPatternSeq_Transferable;



	struct ITP_Interval_Temporal_Pattern_Id {
		long long ms;
		general::corba::Identifier temporal_pattern_id;
	};

	struct ITP_Interval_Duration {
		long long ms;
		long long duration;
	};

	struct IntervalsTemporalPattern_Transferable {
		general::corba::StorableObject header;

		sequence <ITP_Interval_Temporal_Pattern_Id> intervals_temporal_pattern_id;
		sequence <ITP_Interval_Duration> intervals_duration;
	};
	
	typedef sequence <IntervalsTemporalPattern_Transferable> IntervalsTemporalPatternSeq_Transferable;
	
	struct PeriodicalTemporalPattern_Transferable {
		general::corba::StorableObject header;

		long long period;
	};
	
	typedef sequence <PeriodicalTemporalPattern_Transferable> PeriodicalTemporalPatternSeq_Transferable;

/////////////////////// Test ////////////////////////

	enum TestStatus {
		TEST_STATUS_NEW,				//Сохранён в БД на сервере
		TEST_STATUS_SCHEDULED,	//Передан на МУИ и сохранён в БД
//		TEST_STATUS_QUEUED,		//Поставлен МУИ в очередь
		TEST_STATUS_PROCESSING,	//Извлечён из очереди; первое измерение начинает выполняться
		TEST_STATUS_COMPLETED,	//Последнее измерение завершено
		TEST_STATUS_ABORTED			//Прерван
	};

	enum TestReturnType {
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestTemporalType {
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_CONTINUOUS
	};

	union TestTimeStamps_Transferable switch (TestTemporalType) {
		case TEST_TEMPORAL_TYPE_ONETIME:
			long long start_time;
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestTimeStamps {
				long long start_time;
				long long end_time;
				general::corba::Identifier temporal_pattern_id;
			} ptts;
		case TEST_TEMPORAL_TYPE_CONTINUOUS:
			struct ContinuousTestTimeStamps {
				long long start_time;
				long long end_time;
			} ctts;
	};

	struct Test_Transferable {
		general::corba::StorableObject header;
		TestTemporalType temporal_type;
		TestTimeStamps_Transferable time_stamps;
		general::corba::Identifier measurement_type_id;
		general::corba::Identifier analysis_type_id;
		general::corba::Identifier evaluation_type_id;
		general::corba::Identifier group_test_id;
		TestStatus status;		
		general::corba::Identifier monitored_element_id;
		TestReturnType return_type;
		general::corba::WString256 description;
		long number_of_measurements;
		general::corba::IdentifierSeq measurement_setup_ids;
	};

	typedef sequence <Test_Transferable> TestSeq_Transferable;

//////////////////// Analysis ///////////////////////

	struct Analysis_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::Identifier monitored_element_id;
		general::corba::Identifier measurement_id;

		general::corba::WString128 name;

		general::corba::Identifier criteria_set_id;
	};

	typedef sequence <Analysis_Transferable> AnalysisSeq_Transferable;

//////////////////// Evaluation /////////////////////

	struct Evaluation_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::Identifier monitored_element_id;
		general::corba::Identifier measurement_id;

		general::corba::Identifier threshold_set_id;
	};

	typedef sequence <Evaluation_Transferable> EvaluationSeq_Transferable;

////////////////////// Result ///////////////////////

	enum ResultSort {
		RESULT_SORT_MEASUREMENT,
		RESULT_SORT_ANALYSIS,
		RESULT_SORT_EVALUATION,
		RESULT_SORT_MODELING
	};

	struct Result_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier measurement_id;
		general::corba::Identifier analysis_id;
		general::corba::Identifier evaluation_id;
		general::corba::Identifier modeling_id;
		ResultSort sort;
		sequence <Parameter_Transferable> parameters;
	};

	typedef sequence <Result_Transferable> ResultSeq_Transferable;

};
};
};
};
};

#endif
