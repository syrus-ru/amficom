//////////////////////////////////////////////////////////////////////////////
// *                                                                      * //
// * Syrus Systems                                                        * //
// * Департамент Системных Исследований и Разработок                      * //
// *                                                                      * //
// * Проект: АМФИКОМ - система Автоматизированного Многофункционального   * //
// *         Интеллектуального Контроля и Объектного Мониторинга          * //
// *                                                                      * //
// *         реализация Интегрированной Системы Мониторинга               * //
// *                                                                      * //
// * Название: Реализация серверной части интерфейса прототипа РИСД       * //
// *           (включает реализацию пакета pmServer и класса pmRISDImpl)  * //
// * Тип: Java 1.2.2                                                      * //
// *                                                                      * //
// * Автор: Крупенников А.В.                                              * //
// *                                                                      * //
// * Версия: 0.1                                                          * //
// * От: 22 jan 2002                                                      * //
// * Расположение: ISM\prog\java\AMFICOMConfigure\                        * //
// *        com\syrus\AMFICOM\Client\Configure\ISM\AccessPoint.java       * //
// *                                                                      * //
// * Компилятор: Oracle JDeveloper (javac)                                * //
// *                                                                      * //
// * Статус: разработка                                                   * //
// *                                                                      * //
// * Изменения:                                                           * //
// *  Кем         Верс   Когда      Комментарии                           * //
// * -----------  ----- ---------- -------------------------------------- * //
// *                                                                      * //
// * Описание:                                                            * //
// *                                                                      * //
//////////////////////////////////////////////////////////////////////////////

#ifndef _ism_idl_
#define _ism_idl_

#include <general.idl>
#include <network.idl>

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module ISM
{
	struct AccessPort_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring port_id;
		wstring KIS_id;
		wstring local_id;
		wstring domain_id;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <AccessPort_Transferable> AccessPortSeq_Transferable;

	struct TransmissionPathElement_Transferable
	{
		long n;
		boolean is_cable;
		wstring link_id;
		wstring thread_id;
	};
	typedef sequence <TransmissionPathElement_Transferable> TransmissionPathElementSeq_Transferable;

	struct TransmissionPath_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring KIS_id;
		wstring access_port_id;
		wstring local_address;
		wstring monitored_element_id;
		wstring domain_id;

		long long modified;

		TransmissionPathElementSeq_Transferable links;
		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <TransmissionPath_Transferable> TransmissionPathSeq_Transferable;

	struct MonitoredElement_Transferable
	{
		wstring id;
		wstring element_name;
		wstring element_id;
		wstring element_type;
		wstring local_address;
		wstring access_port_id;
		wstring domain_id;

		long long modified;
	};
	typedef sequence <MonitoredElement_Transferable> MonitoredElementSeq_Transferable;

};

module ISMDirectory
{
// catalogue
	struct AccessPortType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring access_type;
		long long modified;

		General::wstringSeq test_type_ids;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <AccessPortType_Transferable> AccessPortTypeSeq_Transferable;

	struct TransmissionPathType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		long long modified;
	};
	typedef sequence <TransmissionPathType_Transferable> TransmissionPathTypeSeq_Transferable;







/*
	struct KISHolderSlot_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring type_id;
		wstring slot_interface;
		wstring size;
		wstring inventory_nr;
	};
	typedef sequence <KISHolderSlot_Transferable> KISHolderSlotSeq_Transferable;
*/
/*
	struct KIS_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring type_id;

		wstring longitude;
		wstring latitude;

		wstring hw_serial;
		wstring sw_serial;
		wstring hw_version;
		wstring sw_version;
		wstring inventory_nr;
		wstring manufacturer;
		wstring manufacturer_code;
		wstring supplier;
		wstring supplier_code;

		wstring eq_class;
//		General::wstringSeq remarks;
		boolean is_holder;
		wstring holder_id;
//		wstring holder_slot_id;
		wstring image_id;
		wstring agent_id;

//		wstring holder_slot_id;
		General::wstringSeq port_ids;
		General::wstringSeq access_port_ids;
		General::wstringSeq slot_ids;
		Network::CharacteristicSeq_Transferable characteristics;

	};
	typedef sequence <KIS_Transferable> KISSeq_Transferable;
*/
/*
	struct KISConnectionType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
	};
	typedef sequence <KISConnectionType_Transferable> KISConnectionTypeSeq_Transferable;

	struct KISType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring manufacturer;
		wstring eq_class;
		boolean is_holder;

		wstring image_id;

		General::wstringSeq port_ids;
		General::wstringSeq access_port_ids;

		General::wstringSeq slot_ids;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <KISType_Transferable> KISTypeSeq_Transferable;
*/
};
};
};
};
};

#endif
