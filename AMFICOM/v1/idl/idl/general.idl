/*
 * $Id: general.idl,v 1.30 2004/11/18 14:35:20 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 *
 * Defines that can be specified at compile time:
 *
 * GENERAL_COMMON (off by default) -- will turn on compilation of valuetyped
 *  basic types, such as Identifier and StorableObject (as opposed to
 *  Identifier_Transferable and StorableObject_Transferable, respectively);
 *
 * NUMERIC_IDENTIFIER (off by default, implies GENERAL_COMMON) -- Identifier
 *  will hold primitive major and minor fields rather than a string;
 *
 * REDUNDANT_DEPS (off by default, implies GENERAL_COMMON) -- StorableObject
 *  will depend on User.
 */

#ifndef GENERAL_IDL
#define GENERAL_IDL

#ifdef SCHEME_COMMON

#define GENERAL_BASE
#define GENERAL_COMMON

#else // SCHEME_COMMON

#ifdef NUMERIC_IDENTIFIER
#define GENERAL_COMMON
#else // NUMERIC_IDENTIFIER
#ifdef REDUNDANT_DEPS
#define GENERAL_COMMON
#else // REDUNDANT_DEPS
#ifndef GENERAL_COMMON
#define GENERAL_BASE
#endif // GENERAL_COMMON
#endif // REDUNDANT_DEPS
#endif // NUMERIC_IDENTIFIER

#endif // SCHEME_COMMON

module com {
module syrus {
module AMFICOM {

#ifdef GENERAL_COMMON
#ifdef REDUNDANT_DEPS

module configuration {
module corba {
	valuetype User;
};
};

#endif // REDUNDANT_DEPS
#endif // GENERAL_COMMON

module general {
module corba {

#ifdef GENERAL_BASE

	struct Identifier_Transferable {
		wstring identifier_string;
	};

	typedef sequence <Identifier_Transferable> IdentifierSeq_Transferable;

	struct StorableObject_Transferable {
		Identifier_Transferable id;
		long long created;
		long long modified;
		Identifier_Transferable creator_id;
		Identifier_Transferable modifier_id;
		long long version;
	};
	
	typedef sequence <StorableObject_Transferable> StorableObjectSeq_Transferable;

#endif // GENERAL_BASE
#ifdef GENERAL_COMMON

	valuetype Identifier {
#ifdef NUMERIC_IDENTIFIER
		private short thisMajor;
		private long long thisMinor;
#else // NUMERIC_IDENTIFIER  
		private string thisIdentifierString;
#endif // NUMERIC_IDENTIFIER 
		readonly attribute short major;
		readonly attribute long long minor;
		readonly attribute string identifierString;

		Identifier cloneInstance();

		factory newInstanceFromString(in string identifierString);
		factory newInstanceFromPrimitive(in short major, in long long minor);
	};

	typedef sequence<Identifier> IdentifierSeq;

	abstract valuetype Identifiable {
		readonly attribute Identifier id;
	};

	abstract valuetype Namable {
		attribute wstring name;
	};

	abstract valuetype Describable {
		attribute wstring description;
	};

	valuetype StorableObject: Identifiable {
		private Identifier thisId;
		private long long thisCreated;
		private long long thisModified;
		private Identifier creatorId;
		private Identifier modifierId;
		private long long thisVersion;

		readonly attribute long long created;
		readonly attribute long long modified;
#ifdef REDUNDANT_DEPS
		readonly attribute configuration::corba::User creator;
		readonly attribute configuration::corba::User modifier;
#endif // REDUNDANT_DEPS
		readonly attribute long long version;
	};

#endif // GENERAL_COMMON
#ifdef GENERAL_BASE

	enum DataType {
		DATA_TYPE_INTEGER,
		DATA_TYPE_DOUBLE,
		DATA_TYPE_STRING,
		DATA_TYPE_DATE,
		DATA_TYPE_LONG,
		DATA_TYPE_DATA
	};

	enum ErrorCode {
		ERROR_NO_ERROR,
		ERROR_RISD_ERROR,
		ERROR_WRONG_PASSWORD,
		ERROR_WRONG_LOGIN,
		ERROR_ILLEGAL_OBJECT_ENTITY,
		ERROR_NO_CONNECT,
		ERROR_SAVE,
		ERROR_NOT_FOUND,
		ERROR_RETRIEVE,
		ERROR_INSUFFICIENT_PRIVILEGES,
		ERROR_UPDATE,
		ERROR_EMPTY,
		ERROR_UID,
		ERROR_DELETE,
		ERROR_VERSION_COLLISION,
		ERROR_PASSWORD_EXPIRED
	};

	enum CompletionStatus {
		COMPLETED_YES,
		COMPLETED_NO,
		COMPLETED_PARTIALLY
	};

	exception AMFICOMRemoteException {
		ErrorCode error_code;
		CompletionStatus completion_status;
		wstring message;
	};

	abstract interface NameResolver {
		wstring<64> lookupDomainName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		string<32> lookupUserLogin(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		wstring<64> lookupUserName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupDomainName(in wstring<64> domainName) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserLogin(in string<32> userLogin) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserName(in wstring<64> userName) raises (AMFICOMRemoteException);
	};

//	abstract
	interface IdentifierGeneratorServer {
		Identifier_Transferable getGeneratedIdentifier(in unsigned short entity) raises (AMFICOMRemoteException);
		IdentifierSeq_Transferable getGeneratedIdentifierRange(in unsigned short entity, in unsigned long size) raises (AMFICOMRemoteException);
	};

#endif // GENERAL_BASE

};
};

#ifdef GENERAL_BASE

module CORBA {
module General {
	exception AMFICOMRemoteException
	{
		long code;
		wstring message;
	};

	enum TestTemporalType
	{
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_TIMETABLE
	};

	union TestTimeStamps switch (TestTemporalType)
	{
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestParameters
			{
				long long dt;
				long long end_time;
			} ptpars;
		case TEST_TEMPORAL_TYPE_TIMETABLE:
			sequence<long long> ti;
	};

	enum TestStatus
	{
		TEST_STATUS_SCHEDULED,
		TEST_STATUS_PROCESSING,
		TEST_STATUS_COMPLETED,
		TEST_STATUS_ABORTED
	};

	enum TestReturnType
	{
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestRequestStatus
	{
		TEST_REQUEST_STATUS_SHEDULED,
		TEST_REQUEST_STATUS_PROCESSING,
		TEST_REQUEST_STATUS_COMPLETED,
		TEST_REQUEST_STATUS_INCOMPLETED,
		TEST_REQUEST_STATUS_ABORTED
	};

	enum AlarmStatus
	{
		ALARM_STATUS_GENERATED,
		ALARM_STATUS_ASSIGNED,
		ALARM_STATUS_FIXED,
		ALARM_STATUS_DELETED
	};

	enum AlarmLevel
	{
		ALARM_LEVEL_NONE,
		ALARM_LEVEL_SOFT,
		ALARM_LEVEL_HARD
	};

	enum EventStatus
	{
		EVENT_STATUS_GENERATED,
		EVENT_STATUS_PROCESSED
	};

	struct ElementAttribute_Transferable
	{
		wstring id;
		wstring name;
		wstring value;
		wstring type_id;
		boolean editable;
		boolean visible;
	};
	typedef sequence <ElementAttribute_Transferable> ElementAttributeSeq_Transferable;

	struct ElementAttributeType_Transferable
	{
		wstring id;
		wstring name;
		wstring default_value;
		wstring value_type_id;
		boolean editable;
		boolean visible;
		long long modified;
	};
	typedef sequence <ElementAttributeType_Transferable> ElementAttributeTypeSeq_Transferable;

	struct Characteristic_Transferable
	{
		wstring id;
		wstring ch_class;
		wstring name;
		wstring description;
		wstring type_id;
		wstring value;
		wstring value_type_id;
	};
	typedef sequence <Characteristic_Transferable> CharacteristicSeq_Transferable;

	struct CharacteristicType_Transferable
	{
		wstring id;
		wstring ch_class;
		wstring name;
		wstring description;
		wstring value_type_id;
		boolean editable;
		boolean visible;
		long long modified;
	};
	typedef sequence <CharacteristicType_Transferable> CharacteristicTypeSeq_Transferable;

};
};

#endif // GENERAL_BASE
#ifdef GENERAL_COMMON
#ifdef REDUNDANT_DEPS

module configuration {
module corba {
	valuetype User:
			general::corba::StorableObject,
			general::corba::Namable,
			general::corba::Describable {
		enum Sort {
			SYSADMIN,
			REGULAR,
			SERVER,
			MCM
		};

		private wstring login;
		private Sort sort;
		private wstring thisName;
		private wstring thisDescription;
	};

	typedef sequence<User> UserSeq;
};
};

#endif // REDUNDANT_DEPS
#endif // GENERAL_COMMON

};
};
};

#endif // GENERAL_IDL
