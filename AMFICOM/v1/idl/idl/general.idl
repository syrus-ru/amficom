//////////////////////////////////////////////////////////////////////////////
// *                                                                      * //
// * Syrus Systems                                                        * //
// * Департамент Системных Исследований и Разработок                      * //
// *                                                                      * //
// * Проект: АМФИКОМ - система Автоматизированного Многофункционального   * //
// *         Интеллектуального Контроля и Объектного Мониторинга          * //
// *                                                                      * //
// *         реализация Интегрированной Системы Мониторинга               * //
// *                                                                      * //
// * Название: Реализация серверной части интерфейса прототипа РИСД       * //
// *           (включает реализацию пакета pmServer и класса pmRISDImpl)  * //
// * Тип: Java 1.2.2                                                      * //
// *                                                                      * //
// * Автор: Крупенников А.В.                                              * //
// *                                                                      * //
// * Версия: 0.1                                                          * //
// * От: 22 jan 2002                                                      * //
// * Расположение: ISM\prog\java\AMFICOMConfigure\                        * //
// *        com\syrus\AMFICOM\Client\Configure\ISM\AccessPoint.java       * //
// *                                                                      * //
// * Компилятор: Oracle JDeveloper (javac)                                * //
// *                                                                      * //
// * Статус: разработка                                                   * //
// *                                                                      * //
// * Изменения:                                                           * //
// *  Кем         Верс   Когда      Комментарии                           * //
// * -----------  ----- ---------- -------------------------------------- * //
// *                                                                      * //
// * Описание:                                                            * //
// *                                                                      * //
//////////////////////////////////////////////////////////////////////////////

#ifndef _GENERAL_IDL_
#define _GENERAL_IDL_

module com
{
module syrus
{
module AMFICOM
{

module general {
module corba {

	typedef sequence <octet> octetSeq;
	typedef sequence <wstring> wstringSeq;
	typedef sequence <long> longSeq;

	struct Identifier_Transferable {
		wstring identifier_string;
	};

	typedef sequence <Identifier_Transferable> IdentifierSeq_Transferable;

	enum DataType {
		DATA_TYPE_INTEGER,
		DATA_TYPE_DOUBLE,
		DATA_TYPE_STRING,
		DATA_TYPE_DATE
	};

	enum ErrorCode {
		ERROR_NO_ERROR,
		ERROR_RISD_ERROR,
		ERROR_WRONG_PASSWORD,
		ERROR_WRONG_LOGIN,
		ERROR_NO_CONNECT,
		ERROR_SAVE,
		ERROR_INSUFFICIENT_PRIVILEGES,
		ERROR_LOAD,
		ERROR_UPDATE,
		ERROR_EMPTY,
		ERROR_UID,
		ERROR_DELETE,
		ERROR_PASSWORD_EXPIRED
	};

	enum CompletionStatus {
		COMPLETED_YES,
		COMPLETED_NO,
		COMPLETED_PARTIALLY
	};

	exception AMFICOMRemoteException {
		ErrorCode error_code;
		CompletionStatus completion_status;
		wstring message;
	};

};
};

module CORBA
{

module General
{
	typedef sequence <octet> octetSeq;

	typedef sequence <wstring> wstringSeq;

	typedef sequence <long> longSeq;

   	typedef sequence <double> doubleSeq;

	exception AMFICOMRemoteException
	{
		long code;
		wstring message;
	};

	enum TestTemporalType
	{
		TEST_TEMPORAL_TYPE_ONETIME,
		TEST_TEMPORAL_TYPE_PERIODICAL,
		TEST_TEMPORAL_TYPE_TIMETABLE
	};

	union TestTimeStamps switch (TestTemporalType)
	{
		case TEST_TEMPORAL_TYPE_PERIODICAL:
			struct PeriodicalTestParameters
			{
				long long dt;
				long long end_time;
			} ptpars;
		case TEST_TEMPORAL_TYPE_TIMETABLE:
			sequence<long long> ti;
	};

	enum TestStatus
	{
		TEST_STATUS_SCHEDULED,
		TEST_STATUS_PROCESSING,
		TEST_STATUS_COMPLETED,
		TEST_STATUS_ABORTED
	};

	enum TestReturnType
	{
		TEST_RETURN_TYPE_WHOLE,
		TEST_RETURN_TYPE_EVENTS,
		TEST_RETURN_TYPE_REFERENCE
	};

	enum TestRequestStatus
	{
		TEST_REQUEST_STATUS_SHEDULED,
		TEST_REQUEST_STATUS_PROCESSING,
		TEST_REQUEST_STATUS_COMPLETED,
		TEST_REQUEST_STATUS_INCOMPLETED,
		TEST_REQUEST_STATUS_ABORTED
	};

	enum AlarmStatus
	{
		ALARM_STATUS_GENERATED,
		ALARM_STATUS_ASSIGNED,
		ALARM_STATUS_FIXED,
		ALARM_STATUS_DELETED
	};

	enum AlarmLevel
	{
		ALARM_LEVEL_NONE,
		ALARM_LEVEL_SOFT,
		ALARM_LEVEL_HARD
	};

	enum EventStatus
	{
		EVENT_STATUS_GENERATED,
		EVENT_STATUS_PROCESSED
	};
};
};
};
};
};

#endif
