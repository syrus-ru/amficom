/*
 * $Id: general.idl,v 1.87 2005/06/01 15:45:52 arseniy Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef GENERAL_IDL
#define GENERAL_IDL

#include <streams.idl>

module com {
module syrus {
module AMFICOM {

module security {
module corba {
	typedef wstring<128> WString128;

//////////////////// SecurityKey ///////////////////
	struct SessionKey_Transferable {
		WString128 session_code;
	};

	typedef SessionKey_Transferable SessionKey;
};
};

module general {
module corba {

	typedef string<32> String32;
	typedef wstring<32> WString32;
	typedef wstring<64> WString64;
	typedef wstring<128> WString128;
	typedef wstring<256> WString256;

	struct Identifier_Transferable {
#ifdef NUMERIC_IDENTIFIER
		short major;
		long long minor;
#else // NUMERIC_IDENTIFIER
		wstring identifier_string;
#endif // NUMERIC_IDENTIFIER
	};

	typedef Identifier_Transferable Identifier;
	typedef sequence<Identifier> IdentifierSeq;

	struct StorableObject_Transferable {
		Identifier id;
		long long created;
		long long modified;
		Identifier creator_id;
		Identifier modifier_id;
		long long version;
	};

	typedef StorableObject_Transferable StorableObject;
	typedef sequence<StorableObject> StorableObjectSeq;

	enum DataType {
		DATA_TYPE_INTEGER,
		DATA_TYPE_DOUBLE,
		DATA_TYPE_STRING,
		DATA_TYPE_DATE,
		DATA_TYPE_LONG,
		DATA_TYPE_RAW,
		DATA_TYPE_BOOLEAN
	};

	enum ErrorCode {
		ERROR_LOGIN_NOT_FOUND,
		ERROR_ILLEGAL_DATA,
		ERROR_ILLEGAL_OBJECT_ENTITY,
		ERROR_SAVE,
		ERROR_NOT_FOUND,
		ERROR_RETRIEVE,
		ERROR_UPDATE,
		ERROR_DELETE,
		ERROR_VERSION_COLLISION,
		ERROR_ILLEGAL_LOGIN,
		ERROR_ILLEGAL_PASSWORD,
		ERROR_NO_DOMAINS_AVAILABLE,
		ERROR_NOT_LOGGED_IN,
		ERROR_ALREADY_LOGGED,
		ERROR_ACCESS_VALIDATION,
		ERROR_UNKNOWN
	};

	enum CompletionStatus {
		COMPLETED_YES,
		COMPLETED_NO,
		COMPLETED_PARTIALLY
	};

	exception AMFICOMRemoteException {
		ErrorCode error_code;
		CompletionStatus completion_status;
		wstring message;
	};
/*
	exception RemoteVersionCollisionException {
		long long desiredVersion;
		long long actualVersion;
		wstring message;
	};
*/

////////////////////// ParameterType //////////////////////

	struct ParameterType_Transferable {
		StorableObject header;

		WString32 codename;
		WString256 description;

		WString128 name;
		DataType data_type;
		
		IdentifierSeq characteristic_ids;
	};

	typedef ParameterType_Transferable ParameterType;
	typedef sequence<ParameterType> ParameterTypeSeq;

//////////////////// CharacteristicType ///////////////////
	enum CharacteristicTypeSort {
		CHARACTERISTICTYPESORT_OPTICAL,
		CHARACTERISTICTYPESORT_ELECTRICAL,
		CHARACTERISTICTYPESORT_OPERATIONAL,
		CHARACTERISTICTYPESORT_INTERFACE,
		CHARACTERISTICTYPESORT_VISUAL
	};

	struct CharacteristicType_Transferable {
		StorableObject header;

		WString32 codename;
		WString256 description;
		DataType data_type;
		CharacteristicTypeSort sort;
	};

	typedef CharacteristicType_Transferable CharacteristicType;
	typedef sequence<CharacteristicType> CharacteristicTypeSeq;

////////////////////// Characteristic /////////////////////
	struct Characteristic_Transferable {
		StorableObject header;

		Identifier type_id;
		WString128 name;
		WString256 description;
		WString256 value;
		Identifier characterizable_id;
		boolean is_editable;
		boolean is_visible;
		
	};

	typedef Characteristic_Transferable Characteristic;
	typedef sequence<Characteristic> CharacteristicSeq;

///////////////////////// Verifiable //////////////////////////
	abstract interface Verifiable {
		void verify(in octet i);
	};

////////////////////// IdentifierGeneratorServer ///////////////

	abstract interface IdentifierGeneratorServer {
		Identifier getGeneratedIdentifier(in unsigned short entity) raises (AMFICOMRemoteException);
		IdentifierSeq getGeneratedIdentifierRange(in unsigned short entity, in unsigned long size) raises (AMFICOMRemoteException);
	};

/////////////////////////// CommonServer //////////////////////

	abstract interface CommonServer:
			Verifiable,
			IdentifierGeneratorServer {
		void delete(in general::corba::IdentifierSeq ids,
				in security::corba::SessionKey sessionKey)
				raises (general::corba::AMFICOMRemoteException);

		general::corba::IdentifierSeq transmitRefreshedStorableObjects(
				in general::corba::StorableObjectSeq storableObjects,
				in security::corba::SessionKey sessionKey)
				raises (general::corba::AMFICOMRemoteException);
	};

///////////////////////////// Condition ////////////////////////

	struct LinkedIdsCondition_Transferable {
		short entity_code;
		short linked_entity_code;
		IdentifierSeq linked_ids;
	};

	typedef LinkedIdsCondition_Transferable LinkedIdsCondition;

	enum TypicalSort {
		TYPE_NUMBER_INT,
		TYPE_NUMBER_LONG,
		TYPE_NUMBER_DOUBLE,
		TYPE_STRING,
		TYPE_DATE
	};

	enum OperationSort {
		OPERATION_EQUALS,
		OPERATION_GREAT,
		OPERATION_LESS,
		OPERATION_GREAT_EQUALS,
		OPERATION_LESS_EQUALS,
		OPERATION_IN_RANGE,
		OPERATION_SUBSTRING,
		OPERATION_REGEXP,
		OPERATION_CI_REGEXP
	};
	
	
	struct TypicalCondition_Transferable {
		short	entity_code;
		WString256 key;
		WString256 value;
		WString256 otherValue;		
		TypicalSort type;		
		OperationSort operation; 
	};

	typedef TypicalCondition_Transferable TypicalCondition;

	struct EquivalentCondition_Transferable {
		short	entity_code;
	};

	typedef EquivalentCondition_Transferable EquivalentCondition;

	struct CompoundCondition_Transferable {
		enum CompoundConditionSort {
			AND,
			OR} sort;
		/**
		 * <code>innerConditions</code> must be an array containing 
		 * instances of {@link StorableObjectCondition_Transferable}.
		 */
		::CORBA::AnySeq innerConditions;
	};

	typedef CompoundCondition_Transferable CompoundCondition;

	union StorableObjectCondition_Transferable switch(enum StorableObjectConditionSort {
			LINKED_IDS,
			COMPOUND,
			TYPICAL,
			EQUIVALENT}) {
		case LINKED_IDS:
			LinkedIdsCondition linkedIdsCondition;
		case COMPOUND:
			CompoundCondition compoundCondition;
		case TYPICAL:
			TypicalCondition typicalCondition;
		case EQUIVALENT:
			EquivalentCondition equialentCondition;
		
	};

	typedef StorableObjectCondition_Transferable StorableObjectCondition;

};
};

};
};
};

#endif // GENERAL_IDL
