/*
 * $Id: general.idl,v 1.40 2004/12/23 12:24:37 bob Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef GENERAL_IDL
#define GENERAL_IDL

#include <streams.idl>

module com {
module syrus {
module AMFICOM {
module general {
module corba {
	typedef string<32> String32;

	typedef wstring<32> WString32;

	typedef wstring<64> WString64;

	typedef wstring<256> WString256;

	struct Identifier_Transferable {
		wstring identifier_string;
	};

	typedef sequence <Identifier_Transferable> IdentifierSeq_Transferable;

	struct StorableObject_Transferable {
		Identifier_Transferable id;
		long long created;
		long long modified;
		Identifier_Transferable creator_id;
		Identifier_Transferable modifier_id;
		long long version;
	};

	typedef sequence<StorableObject_Transferable> StorableObjectSeq_Transferable;

	enum DataType {
		DATA_TYPE_INTEGER,
		DATA_TYPE_DOUBLE,
		DATA_TYPE_STRING,
		DATA_TYPE_DATE,
		DATA_TYPE_LONG,
		DATA_TYPE_DATA
	};

	enum ErrorCode {
		ERROR_NO_ERROR,
		ERROR_RISD_ERROR,
		ERROR_WRONG_PASSWORD,
		ERROR_WRONG_LOGIN,
		ERROR_ILLEGAL_OBJECT_ENTITY,
		ERROR_NO_CONNECT,
		ERROR_SAVE,
		ERROR_NOT_FOUND,
		ERROR_RETRIEVE,
		ERROR_INSUFFICIENT_PRIVILEGES,
		ERROR_UPDATE,
		ERROR_EMPTY,
		ERROR_UID,
		ERROR_DELETE,
		ERROR_VERSION_COLLISION,
		ERROR_PASSWORD_EXPIRED
	};

	enum CompletionStatus {
		COMPLETED_YES,
		COMPLETED_NO,
		COMPLETED_PARTIALLY
	};

	exception AMFICOMRemoteException {
		ErrorCode error_code;
		CompletionStatus completion_status;
		wstring message;
	};

	abstract interface NameResolver {
		WString64 lookupDomainName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		String32 lookupUserLogin(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		WString64 lookupUserName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupDomainName(in WString64 domainName) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserLogin(in String32 userLogin) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserName(in WString64 userName) raises (AMFICOMRemoteException);
	};

//	abstract
	interface IdentifierGeneratorServer {
		Identifier_Transferable getGeneratedIdentifier(in unsigned short entity) raises (AMFICOMRemoteException);
		IdentifierSeq_Transferable getGeneratedIdentifierRange(in unsigned short entity, in unsigned long size) raises (AMFICOMRemoteException);
	};

	enum StringFieldSort {
		STRINGSORT_BASE,
		STRINGSORT_USERNAME,
		STRINGSORT_USERLOGIN,
		STRINGSORT_INTEGER
	};

	/**
	 * If {@link StringFieldCondition_Transferable#sort} is
	 * {@link StringFieldSort#STRINGSORT_INTEGER}, then
	 * {@link StringFieldCondition_Transferable#field_string}'s value is
	 * interpreted as an integer rather than a string. Mapping of this
	 * value to the specific column in a table is entity-specific (i. e.
	 * depends on {@link StringFieldCondition_Transferable#entity_code}).
	 */
	struct StringFieldCondition_Transferable {	
		short entity_code;
		wstring field_string;
		StringFieldSort sort;
	};
	
	struct LinkedIdsCondition_Transferable {
			short	entity_code;
			com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
			com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable linked_ids;		
	};
};
};

module CORBA {
module General {
	exception AMFICOMRemoteException
	{
		long code;
		wstring message;
	};
};
};
};
};
};

#endif // GENERAL_IDL
