/*
 * $Id: general.idl,v 1.63 2005/03/29 20:59:36 arseniy Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef GENERAL_IDL
#define GENERAL_IDL

#include <streams.idl>

module com {
module syrus {
module AMFICOM {
module general {
module corba {
	typedef string<32> String32;

	typedef wstring<32> WString32;

	typedef wstring<64> WString64;

	typedef wstring<128> WString128;

	typedef wstring<256> WString256;

	struct Identifier_Transferable {
#ifdef NUMERIC_IDENTIFIER
		short major;
		long long minor;
#else // NUMERIC_IDENTIFIER
		wstring identifier_string;
#endif // NUMERIC_IDENTIFIER
	};

	typedef sequence <Identifier_Transferable> IdentifierSeq_Transferable;

	struct StorableObject_Transferable {
		Identifier_Transferable id;
		long long created;
		long long modified;
		Identifier_Transferable creator_id;
		Identifier_Transferable modifier_id;
		long long version;
	};

	typedef sequence<StorableObject_Transferable> StorableObjectSeq_Transferable;

	enum DataType {
		DATA_TYPE_INTEGER,
		DATA_TYPE_DOUBLE,
		DATA_TYPE_STRING,
		DATA_TYPE_DATE,
		DATA_TYPE_LONG,
		DATA_TYPE_RAW
	};

	enum ErrorCode {
		ERROR_NO_ERROR,
		ERROR_RISD_ERROR,
		ERROR_WRONG_PASSWORD,
		ERROR_WRONG_LOGIN,
		ERROR_LOGIN_NOT_FOUND,
		ERROR_ILLEGAL_DATA,
		ERROR_ILLEGAL_OBJECT_ENTITY,
		ERROR_NO_CONNECT,
		ERROR_SAVE,
		ERROR_NOT_FOUND,
		ERROR_RETRIEVE,
		ERROR_INSUFFICIENT_PRIVILEGES,
		ERROR_UPDATE,
		ERROR_EMPTY,
		ERROR_UID,
		ERROR_DELETE,
		ERROR_VERSION_COLLISION,
		ERROR_PASSWORD_EXPIRED
	};

	enum CompletionStatus {
		COMPLETED_YES,
		COMPLETED_NO,
		COMPLETED_PARTIALLY
	};

	exception AMFICOMRemoteException {
		ErrorCode error_code;
		CompletionStatus completion_status;
		wstring message;
	};
/*
	exception RemoteVersionCollisionException {
		long long desiredVersion;
		long long actualVersion;
		wstring message;
	};
*/
//////////////////// AccessIdentifier ///////////////////
	struct AccessIdentifier_Transferable {
		long long started;
		general::corba::Identifier_Transferable domain_id;
		general::corba::Identifier_Transferable user_id;		
		general::corba::Identifier_Transferable session_id;
	};

////////////////////// ParameterType //////////////////////
	struct ParameterType_Transferable {
		StorableObject_Transferable header;

		WString32 codename;
		WString256 description;

		WString128 name;
		DataType data_type;
	};

	typedef sequence <ParameterType_Transferable> ParameterTypeSeq_Transferable;

//////////////////// CharacteristicType ///////////////////
	enum CharacteristicTypeSort {
		CHARACTERISTICTYPESORT_OPTICAL,
		CHARACTERISTICTYPESORT_ELECTRICAL,
		CHARACTERISTICTYPESORT_OPERATIONAL,
		CHARACTERISTICTYPESORT_INTERFACE,
		CHARACTERISTICTYPESORT_VISUAL
	};

	struct CharacteristicType_Transferable {
		StorableObject_Transferable header;

		WString32 codename;
		WString256 description;
		DataType data_type;
		CharacteristicTypeSort sort;
	};

	typedef sequence <CharacteristicType_Transferable> CharacteristicTypeSeq_Transferable;

////////////////////// Characteristic /////////////////////
	enum CharacteristicSort {
		CHARACTERISTIC_SORT_DOMAIN,
		CHARACTERISTIC_SORT_SERVER,
		CHARACTERISTIC_SORT_MCM,
		CHARACTERISTIC_SORT_TRANSMISSIONPATH,
		CHARACTERISTIC_SORT_EQUIPMENT,
		CHARACTERISTIC_SORT_PORT,
		CHARACTERISTIC_SORT_CABLEPORT,
		CHARACTERISTIC_SORT_MEASUREMENTPORT,
		CHARACTERISTIC_SORT_MONITORINGPORT,
		CHARACTERISTIC_SORT_LINK,
		CHARACTERISTIC_SORT_CABLELINK,
		CHARACTERISTIC_SORT_CABLELINKTYPE,
		CHARACTERISTIC_SORT_KIS,
		CHARACTERISTIC_SORT_EQUIPMENTTYPE,
		CHARACTERISTIC_SORT_PORTTYPE,
		CHARACTERISTIC_SORT_MEASUREMENTPORTTYPE,
		CHARACTERISTIC_SORT_TRANSMISSIONPATHTYPE,
		CHARACTERISTIC_SORT_LINKTYPE,
		CHARACTERISTIC_SORT_SCHEMECABLELINK,
		CHARACTERISTIC_SORT_SCHEMECABLEPORT,
		CHARACTERISTIC_SORT_SCHEMECABLETHREAD,
		CHARACTERISTIC_SORT_SCHEMEDEVICE,
		CHARACTERISTIC_SORT_SCHEMEELEMENT,
		CHARACTERISTIC_SORT_SCHEMELINK,
		CHARACTERISTIC_SORT_SCHEMEPATH,
		CHARACTERISTIC_SORT_SCHEMEPORT,
		CHARACTERISTIC_SORT_SCHEMEPROTOELEMENT,
		CHARACTERISTIC_SORT_COLLECTOR,
		CHARACTERISTIC_SORT_MARK,
		CHARACTERISTIC_SORT_NODE_LINK,
		CHARACTERISTIC_SORT_PHYSICAL_LINK,
		CHARACTERISTIC_SORT_PHYSICAL_LINK_TYPE,
		CHARACTERISTIC_SORT_TOPOLOGICAL_NODE,
		CHARACTERISTIC_SORT_SITE_NODE,
		CHARACTERISTIC_SORT_SITE_NODE_TYPE
	};

	struct Characteristic_Transferable {
		StorableObject_Transferable header;

		Identifier_Transferable type_id;
		WString128 name;
		WString256 description;
		CharacteristicSort sort;
		WString256 value;
		Identifier_Transferable characterizable_id;
		boolean is_editable;
		boolean is_visible;
		
	};

	typedef sequence <Characteristic_Transferable> CharacteristicSeq_Transferable;
	typedef Characteristic_Transferable Characteristic;
	typedef sequence<Characteristic> CharacteristicSeq;

///////////////////////// NameResolver ///////////////////////
	abstract interface NameResolver {
		WString64 lookupDomainName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		String32 lookupUserLogin(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		WString64 lookupUserName(in Identifier_Transferable id) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupDomainName(in WString64 domainName) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserLogin(in String32 userLogin) raises (AMFICOMRemoteException);

		Identifier_Transferable reverseLookupUserName(in WString64 userName) raises (AMFICOMRemoteException);
	};

////////////////////// IdentifierGeneratorServer ///////////////
	abstract interface IdentifierGeneratorServer {
		Identifier_Transferable getGeneratedIdentifier(in unsigned short entity) raises (AMFICOMRemoteException);
		IdentifierSeq_Transferable getGeneratedIdentifierRange(in unsigned short entity, in unsigned long size) raises (AMFICOMRemoteException);
	};

///////////////////////////// Condition ////////////////////////
	enum StringFieldSort {
		STRINGSORT_BASE,
		STRINGSORT_USERNAME,
		STRINGSORT_USERLOGIN,
		STRINGSORT_INTEGER
	};

	/**
	 * If {@link StringFieldCondition_Transferable#sort} is
	 * {@link StringFieldSort#STRINGSORT_INTEGER}, then
	 * {@link StringFieldCondition_Transferable#field_string}'s value is
	 * interpreted as an integer rather than a string. Mapping of this
	 * value to the specific column in a table is entity-specific (i. e.
	 * depends on {@link StringFieldCondition_Transferable#entity_code}).
	 *
	 * @deprecated use {@link TypicalCondition_Transferable} instead.
	 */
	struct StringFieldCondition_Transferable {
		short entity_code;
		wstring field_string;
		StringFieldSort sort;
	};

	struct LinkedIdsCondition_Transferable {
		short entity_code;
		short linked_entity_code;
		IdentifierSeq_Transferable linked_ids;
	};
	
		
	enum TypicalSort {
		TYPE_NUMBER_INT,
		TYPE_NUMBER_LONG,
		TYPE_NUMBER_DOUBLE,
		TYPE_STRING,
		TYPE_DATE
	};
	
	enum OperationSort {
		OPERATION_EQUALS,
		OPERATION_GREAT,
		OPERATION_LESS,
		OPERATION_GREAT_EQUALS,
		OPERATION_LESS_EQUALS,
		OPERATION_IN_RANGE,
		OPERATION_SUBSTRING,
		OPERATION_REGEXP,
		OPERATION_CI_REGEXP
	};
	
	
	struct TypicalCondition_Transferable {
		short	entity_code;
		WString256 key;
		WString256 value;
		WString256 otherValue;		
		TypicalSort type;		
		OperationSort operation; 
	};
	
	struct EquivalentCondition_Transferable {
		short	entity_code;
	};

	struct CompoundCondition_Transferable {
		enum CompoundConditionSort {
			AND,
			OR} sort;
		/**
		 * <code>innerConditions</code> must be an array containing 
		 * instances of {@link StorableObjectCondition_Transferable}.
		 */
		::CORBA::AnySeq innerConditions;
	};

	union StorableObjectCondition_Transferable switch(enum StorableObjectConditionSort {
			LINKED_IDS,
			COMPOUND,
			TYPICAL,
			EQUIVALENT}) {
		case LINKED_IDS:
			LinkedIdsCondition_Transferable linkedIdsCondition;
		case COMPOUND:
			CompoundCondition_Transferable compoundCondition;
		case TYPICAL:
			TypicalCondition_Transferable typicalCondition;
		case EQUIVALENT:
			EquivalentCondition_Transferable equialentCondition;
		
	};

};
};
};
};
};

#endif // GENERAL_IDL
