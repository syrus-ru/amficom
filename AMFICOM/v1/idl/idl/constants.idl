//////////////////////////////////////////////////////////////////////////////
// *                                                                      * //
// * Syrus Systems                                                        * //
// * Департамент Системных Исследований и Разработок                      * //
// *                                                                      * //
// * Проект: АМФИКОМ - система Автоматизированного Многофункционального   * //
// *         Интеллектуального Контроля и Объектного Мониторинга          * //
// *                                                                      * //
// *         реализация Интегрированной Системы Мониторинга               * //
// *                                                                      * //
// * Название: Реализация серверной части интерфейса прототипа РИСД       * //
// *           (включает реализацию пакета pmServer и класса pmRISDImpl)  * //
// * Тип: IDL                                                             * //
// *                                                                      * //
// * Автор: Крупенников А.В.                                              * //
// *                                                                      * //
// * Версия: 0.1                                                          * //
// * От: 22 jan 2002                                                      * //
// * Расположение: ISM\prog\java\AMFICOM\Object.idl                       * //
// *                                                                      * //
// * Компилятор: Oracle JDeveloper (javac)                                * //
// *                                                                      * //
// * Статус: разработка                                                   * //
// *                                                                      * //
// * Изменения:                                                           * //
// *  Кем         Верс   Когда      Комментарии                           * //
// * -----------  ----- ---------- -------------------------------------- * //
// *                                                                      * //
// * Описание:                                                            * //
// *                                                                      * //
//////////////////////////////////////////////////////////////////////////////

#ifndef _constants_idl_
#define _constants_idl_

//#include <general.idl>

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

interface Constants
{
	const long ERROR_NO_ERROR = 0;
	const long ERROR_RISD_ERROR = 1;
	const long ERROR_WRONG_PASSWORD = 2;
	const long ERROR_WRONG_LOGIN = 3;
	const long ERROR_NO_CONNECT = 4;
	const long ERROR_SAVING = 5;
	const long ERROR_INSUFFICIENT_PRIVILEGES = 6;
	const long ERROR_LOADING = 7;
	const long ERROR_UPDATING = 8;
	const long ERROR_EMPTY = 9;
	const long ERROR_UID = 10;
	const long ERROR_DELETING = 11;
	const long ERROR_PASSWORD_EXPIRED = 12;
/*
//	typedef wstring ErrorCodeArray[12];
//	const ErrorCodeArray ErrorCode = {

	ConstantDef ErrorCodes
	const wstringSeq ErrorCode = {
		"ERROR_NO_ERROR",
		"ERROR_RISD_ERROR",
		"ERROR_WRONG_PASSWORD",
		"ERROR_WRONG_LOGIN",
		"ERROR_NO_CONNECT",
		"ERROR_SAVING",
		"ERROR_INSUFFICIENT_PRIVILEGES",
		"ERROR_LOADING",
		"ERROR_UPDATING",
		"ERROR_EMPTY",
		"ERROR_UID",
		"ERROR_DELETING" };
*/
	const long ALARM_GENERATED = 0;
	const long ALARM_ASSIGNED = 1;
	const long ALARM_FIXED = 2;
	const long ALARM_DELETED = 3;
};

module Constant
{

	interface ErrorCodeConstants
	{
		const long ERROR_NO_ERROR = 0;
		const long ERROR_RISD_ERROR = 1;
		const long ERROR_WRONG_PASSWORD = 2;
		const long ERROR_WRONG_LOGIN = 3;
		const long ERROR_NO_CONNECT = 4;
		const long ERROR_SAVING = 5;
		const long ERROR_INSUFFICIENT_PRIVILEGES = 6;
		const long ERROR_LOADING = 7;
		const long ERROR_UPDATING = 8;
		const long ERROR_EMPTY = 9;
		const long ERROR_UID = 10;
		const long ERROR_DELETING = 11;
		const long ERROR_PASSWORD_EXPIRED = 12;
    };

	interface AlarmTypeConstants
	{
		const string ID_RTU_HW_ALARM = "rtuhwalarm";
		const string ID_RTU_SW_ALARM = "rtuswalarm";
		const string ID_RTU_TEST_ALARM = "rtutestalarm";
		const string ID_RTU_TEST_WARNING = "rtutestwarning";
	};

	interface AlertingTypeConstants
	{
		const string ID_EMAIL = "email";
		const string ID_FAX = "fax";
		const string ID_LOG = "log";
		const string ID_PAGING = "paging";
		const string ID_POPUP = "popup";
		const string ID_SMS = "sms";
		const string ID_VOICE = "voice";
	};

	interface EventSourceTypeConstants
	{
		const string ID_CLIENT_SOURCE = "clientsource";
		const string ID_EQUIPMENT_SOURCE = "equipmentsource";
		const string ID_ISM_SOURCE = "ismsource";
		const string ID_KIS_SOURCE = "KISsource";
		const string ID_NET_SOURCE = "netsource";
		const string ID_SERVER_SOURCE = "serversource";
		const string ID_USER_SOURCE = "usersource";
	};

	interface EventTypeConstants
	{
		const string ID_ALARM_CHANGE_EVENT = "alarmchangeevent";
		const string ID_ALARM_EVENT = "alarmevent";
		const string ID_ALERT_EVENT = "alertevent";
		const string ID_ANALYSE_EVENT = "analyseevent";
		const string ID_CHANGE_EVENT = "changeevent";
		const string ID_CONNECT_EVENT = "connectevent";
		const string ID_CONNECT_PORT_EVENT = "connectportevent";
		const string ID_DISCONNECT_EVENT = "disconnectevent";
		const string ID_DISCONNECT_PORT_EVENT = "disconnectportevent";
		const string ID_EVALUATE_EVENT = "evaluateevent";
		const string ID_EVALUATION_ALARM_EVENT = "evaluationalarmevent";
		const string ID_EVALUATION_WARNING_EVENT = "evaluationwarningevent";
		const string ID_HW_ALARM_EVENT = "hwalarmevent";
		const string ID_LOGIN_EVENT = "loginevent";
		const string ID_LOGOFF_EVENT = "logoffevent";
		const string ID_READ_EVENT = "readevent";
		const string ID_RESULT_EVENT = "resultevent";
		const string ID_SW_ALARM_EVENT = "swalarmevent";
		const string ID_SWITCH_OFF_EVENT = "switchoffevent";
		const string ID_SWITCH_ON_EVENT = "switchonevent";
		const string ID_TEST_ALARM_EVENT = "testalarmevent";
		const string ID_TEST_WARNING_EVENT = "testwarningevent";
		const string ID_TIMER_EVENT = "timerevent";
		const string ID_WRITE_EVENT = "writeevent";
	};

	interface MessageTypeConstants
	{
		const string ID_ALARM = "alarm";
		const string ID_CRITICAL = "critical";
		const string ID_DIAGNOSTICS = "diagnostics";
		const string ID_ERROR = "error";
		const string ID_INFO = "info";
		const string ID_WARNING = "warning";
	};

};

};
};
};
};

#endif

