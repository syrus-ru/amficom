/*
 * $Id: AMFICOM.idl,v 1.10 2004/10/19 13:57:54 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef AMFICOM_IDL
#define AMFICOM_IDL

#include "ISM.idl"
#include "admin.idl"
#include "client.idl"
#include "map.idl"
#include "network.idl"
#include "report.idl"
#include "scheme.idl"
#include "survey.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

interface AMFICOM: ::com::syrus::AMFICOM::general::corba::NameResolver
{
	void registerAlarmReceiver(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in AMFICOMClient cli)
		raises (General::AMFICOMRemoteException);

	void unregisterAlarmReceiver(
			in Admin::AccessIdentity_Transferable accessIdentity)
		raises (General::AMFICOMRemoteException);

	void syncPing(out long long serverTimeMillis)
		raises (General::AMFICOMRemoteException);

/*
 * Session management
 */

	long Logon(
			in wstring username,
			in ::CORBA::OctetSeq password,
			in wstring category,
			out Admin::AccessIdentity_Transferable accessIdentity)
		raises (General::AMFICOMRemoteException);

	long Logoff(
			in Admin::AccessIdentity_Transferable accessIdentity)
		raises (General::AMFICOMRemoteException);

	long GetLoggedUserIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out ::CORBA::WStringSeq userids)
		raises (General::AMFICOMRemoteException);

	long ChangePassword(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::OctetSeq oldpassword,
			in ::CORBA::OctetSeq newpassword)
		raises (General::AMFICOMRemoteException);

/*
 * General functions
 */

	long GetUId(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring type,
			out wstring id)
		raises (General::AMFICOMRemoteException);

	long GetResourceDescriptors(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring type,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetResourceDescriptor(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring type,
			in wstring id,
			out Resource::ResourceDescriptor_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetResourceDescriptorsByIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring type,
			in ::CORBA::WStringSeq ids,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetResultDescriptorsByIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetDomainResourceDescriptors(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring type,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetImages(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Resource::ImageResourceSeq_Transferable imgs)
		raises (General::AMFICOMRemoteException);

/**
 * Administration
 */

	long GetObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Admin::DomainSeq_Transferable domainseq,
			out Admin::OperatorCategorySeq_Transferable categoryseq,
			out Admin::OperatorGroupSeq_Transferable groupseq,
			out Admin::OperatorProfileSeq_Transferable profileseq,
			out Admin::CommandPermissionAttributesSeq_Transferable execseq,
			out Admin::UserSeq_Transferable userseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq catagory_ids,
			in ::CORBA::WStringSeq group_ids,
			in ::CORBA::WStringSeq profile_ids,
			out Admin::OperatorCategorySeq_Transferable categoryseq,
			out Admin::OperatorGroupSeq_Transferable groupseq,
			out Admin::OperatorProfileSeq_Transferable profileseq)
		raises (General::AMFICOMRemoteException);

	long GetUserDescriptors(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Admin::DomainSeq_Transferable domainseq,
			out Admin::UserSeq_Transferable userseq)
		raises (General::AMFICOMRemoteException);

	long GetExecDescriptors(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Admin::CommandPermissionAttributesSeq_Transferable execseq)
		raises (General::AMFICOMRemoteException);

	long SaveObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Resource::ImageResourceSeq_Transferable imageseq,
			in Admin::DomainSeq_Transferable domainseq,
			in Admin::OperatorCategorySeq_Transferable categoryseq,
			in Admin::OperatorGroupSeq_Transferable groupseq,
			in Admin::OperatorProfileSeq_Transferable profileseq,
			in Admin::CommandPermissionAttributesSeq_Transferable execseq,
			in Admin::UserSeq_Transferable userseq)
		raises (General::AMFICOMRemoteException);

	long RemoveObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq domainseq,
			in ::CORBA::WStringSeq categoryseq,
			in ::CORBA::WStringSeq groupseq,
			in ::CORBA::WStringSeq profileseq,
			in ::CORBA::WStringSeq execseq,
			in ::CORBA::WStringSeq userseq)
		raises (General::AMFICOMRemoteException);

	long GetAdminObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Admin::ServerSeq_Transferable serverseq,
			out Admin::ClientSeq_Transferable clientseq,
			out Admin::AgentSeq_Transferable agentseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedAdminObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq server_ids,
			in ::CORBA::WStringSeq client_ids,
			in ::CORBA::WStringSeq agent_ids,
			out Admin::ServerSeq_Transferable serverseq,
			out Admin::ClientSeq_Transferable clientseq,
			out Admin::AgentSeq_Transferable agentseq)
		raises (General::AMFICOMRemoteException);

	long SaveAdminObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Admin::ServerSeq_Transferable serverseq,
			in Admin::ClientSeq_Transferable clientseq,
			in Admin::AgentSeq_Transferable agentseq)
		raises (General::AMFICOMRemoteException);

	long RemoveAdminObjects(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq serverseq,
			in ::CORBA::WStringSeq clientseq,
			in ::CORBA::WStringSeq agentseq)
		raises (General::AMFICOMRemoteException);

/**
 * Maps
 */

	long GetMaps(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Map::MapSeq_Transferable mapseq,
			out Map::MapSiteElementSeq_Transferable equipmentseq,
			out Map::MapMarkElementSeq_Transferable markseq,
			out Map::MapPhysicalNodeElementSeq_Transferable nodeseq,
			out Map::MapNodeLinkElementSeq_Transferable nodelinkseq,
			out Map::MapPhysicalLinkElementSeq_Transferable linkseq,
			out Map::MapPipePathElementSeq_Transferable collectorseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedMaps(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq map_ids,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Map::MapSeq_Transferable mapseq,
			out Map::MapSiteElementSeq_Transferable siteseq,
			out Map::MapMarkElementSeq_Transferable markseq,
			out Map::MapPhysicalNodeElementSeq_Transferable nodeseq,
			out Map::MapNodeLinkElementSeq_Transferable nodelinkseq,
			out Map::MapPhysicalLinkElementSeq_Transferable linkseq,
			out Map::MapPipePathElementSeq_Transferable collectorseq)
		raises (General::AMFICOMRemoteException);

	long SaveMaps(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Resource::ImageResourceSeq_Transferable imageseq,
			in Map::MapSeq_Transferable mapseq,
			in Map::MapSiteElementSeq_Transferable siteseq,
			in Map::MapMarkElementSeq_Transferable markseq,
			in Map::MapPhysicalNodeElementSeq_Transferable nodeseq,
			in Map::MapNodeLinkElementSeq_Transferable nodelinkseq,
			in Map::MapPhysicalLinkElementSeq_Transferable linkseq,
			in Map::MapPipePathElementSeq_Transferable collectorseq)
		raises (General::AMFICOMRemoteException);

	long RemoveMaps(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq mapseq,
			in ::CORBA::WStringSeq siteseq,
			in ::CORBA::WStringSeq markseq,
			in ::CORBA::WStringSeq nodeseq,
			in ::CORBA::WStringSeq nodelinkseq,
			in ::CORBA::WStringSeq linkseq,
			in ::CORBA::WStringSeq collectorseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedMapViews(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq mv_ids,
			out Map::MapViewSeq_Transferable mvseq)
		raises (General::AMFICOMRemoteException);

	long SaveMapViews(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Map::MapViewSeq_Transferable mvseq)
		raises (General::AMFICOMRemoteException);

	long RemoveMapViews(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq mvseq)
		raises (General::AMFICOMRemoteException);

/**
 * Map Proto Elements
 */
 
	long GetMapProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Map::MapNodeProtoElementSeq_Transferable protoseq,
			out Map::MapLinkProtoElementSeq_Transferable linkseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedMapProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq element_ids,
			in ::CORBA::WStringSeq link_ids,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Map::MapNodeProtoElementSeq_Transferable protoseq,
			out Map::MapLinkProtoElementSeq_Transferable linkseq)
		raises (General::AMFICOMRemoteException);

	long SaveMapProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Resource::ImageResourceSeq_Transferable imageseq,
			in Map::MapNodeProtoElementSeq_Transferable protoseq,
			in Map::MapLinkProtoElementSeq_Transferable linkseq)
		raises (General::AMFICOMRemoteException);

	long RemoveMapProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq proto_ids,
			in ::CORBA::WStringSeq link_ids)
		raises (General::AMFICOMRemoteException);
/**
 * Attribute types
 */

	long LoadAttributeTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out General::ElementAttributeTypeSeq_Transferable attrseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedAttributeTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out General::ElementAttributeTypeSeq_Transferable attrseq)
		raises (General::AMFICOMRemoteException);

/**
 * Scheme Proto elements & Groups
 */
 
	long GetStatedSchemeProtoGroups(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq group_ids,
			out Scheme::SchemeProtoGroupSeq_Transferable groupseq,
			out Resource::ImageResourceSeq_Transferable imageseq)
		raises (General::AMFICOMRemoteException);

	long SaveSchemeProtoGroups(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Scheme::SchemeProtoGroupSeq_Transferable groupseq,
			in Resource::ImageResourceSeq_Transferable imageseq)
		raises (General::AMFICOMRemoteException);

	long RemoveSchemeProtoGroups(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq group_ids)
		raises (General::AMFICOMRemoteException);

	long GetStatedSchemeProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Scheme::SchemeProtoElementSeq_Transferable elementseq)
		raises (General::AMFICOMRemoteException);

	long SaveSchemeProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Resource::ImageResourceSeq_Transferable imageseq,
			in Scheme::SchemeProtoElementSeq_Transferable elementseq)
		raises (General::AMFICOMRemoteException);

	long RemoveSchemeProtoElements(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq element_ids)
		raises (General::AMFICOMRemoteException);

/**
 * Schemes
 */

	long GetStatedSchemes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Resource::ImageResourceSeq_Transferable imageseq,
			out Scheme::SchemeSeq_Transferable schemeseq)
		raises (General::AMFICOMRemoteException);

	long SaveSchemes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Resource::ImageResourceSeq_Transferable imageseq,
			in Scheme::SchemeSeq_Transferable schemeseq)
		raises (General::AMFICOMRemoteException);

	long RemoveSchemes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq scheme_ids,
			in ::CORBA::WStringSeq scheme_path_ids,
			in ::CORBA::WStringSeq scheme_link_ids,
			in ::CORBA::WStringSeq scheme_element_ids)
		raises (General::AMFICOMRemoteException);

/**
 * ISM & Network
 */
	long LoadStatedNet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq p_ids,
			in ::CORBA::WStringSeq cp_ids,
			in ::CORBA::WStringSeq eq_ids,
			in ::CORBA::WStringSeq l_ids,
			in ::CORBA::WStringSeq cl_ids,
			out Network::PortSeq_Transferable ports,
			out Network::CablePortSeq_Transferable cports,
			out Network::EquipmentSeq_Transferable equipments,
			out Network::LinkSeq_Transferable links,
			out Network::CableLinkSeq_Transferable clinks)
		raises (General::AMFICOMRemoteException);

	long RemoveNet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq p_ids,
			in ::CORBA::WStringSeq cp_ids,
			in ::CORBA::WStringSeq eq_ids,
			in ::CORBA::WStringSeq l_ids,
			in ::CORBA::WStringSeq cl_ids)
		raises (General::AMFICOMRemoteException);

	long SaveNet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Network::PortSeq_Transferable ports,
			in Network::CablePortSeq_Transferable cports,
			in Network::EquipmentSeq_Transferable equipments,
			in Network::LinkSeq_Transferable links,
			in Network::CableLinkSeq_Transferable clinks)
		raises (General::AMFICOMRemoteException);

	long LoadStatedISM(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq me_ids,
			in ::CORBA::WStringSeq tp_ids,
			in ::CORBA::WStringSeq mp_ids,
			in ::CORBA::WStringSeq kis_ids,
			out ISM::MonitoredElementSeq_Transferable mes,
			out ISM::TransmissionPathSeq_Transferable paths,
			out ISM::MeasurementPortSeq_Transferable mports,
			out ISM::KISSeq_Transferable kiss)
		raises (General::AMFICOMRemoteException);

	long RemoveISM(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq me_ids,
			in ::CORBA::WStringSeq tp_ids,
			in ::CORBA::WStringSeq mp_ids,
			in ::CORBA::WStringSeq kis_ids)
		raises (General::AMFICOMRemoteException);

	long SaveISM(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ISM::MonitoredElementSeq_Transferable mes,
			in ISM::TransmissionPathSeq_Transferable paths,
			in ISM::MeasurementPortSeq_Transferable mports,
			in ISM::KISSeq_Transferable kiss)
		raises (General::AMFICOMRemoteException);

/**
 * Network & ISM Directory
 */

	long LoadStatedCharacteristicTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq cht_ids,
			out General::CharacteristicTypeSeq_Transferable characteristictypes)
		raises (General::AMFICOMRemoteException);

	long LoadStatedNetDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq pt_ids,
			in ::CORBA::WStringSeq eqt_ids,
			in ::CORBA::WStringSeq lt_ids,
			in ::CORBA::WStringSeq cpt_ids,
			in ::CORBA::WStringSeq clt_ids,
			out NetworkDirectory::PortTypeSeq_Transferable porttypes,
			out NetworkDirectory::EquipmentTypeSeq_Transferable equipmenttypes,
			out NetworkDirectory::LinkTypeSeq_Transferable linktypes,
			out NetworkDirectory::CablePortTypeSeq_Transferable cableporttypes,
			out NetworkDirectory::CableLinkTypeSeq_Transferable cablelinktypes)
		raises (General::AMFICOMRemoteException);

	long LoadStatedISMDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq kis_ids,
			in ::CORBA::WStringSeq measurementPortTypeIds,
			in ::CORBA::WStringSeq path_ids,
			out ISMDirectory::KISTypeSeq_Transferable kistypes,
			out ISMDirectory::MeasurementPortTypeSeq_Transferable measurementPortTypes,
			out ISMDirectory::TransmissionPathTypeSeq_Transferable pathtypes)
		raises (General::AMFICOMRemoteException);

	long RemoveCharacteristicTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq cht_ids)
		raises (General::AMFICOMRemoteException);

	long RemoveNetDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq pt_ids,
			in ::CORBA::WStringSeq cpt_ids,
			in ::CORBA::WStringSeq eqt_ids,
			in ::CORBA::WStringSeq lt_ids,
			in ::CORBA::WStringSeq clt_ids)
		raises (General::AMFICOMRemoteException);

	long RemoveISMDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq kst_ids,
			in ::CORBA::WStringSeq measurementPortTypeIds,
			in ::CORBA::WStringSeq tpt_ids)
		raises (General::AMFICOMRemoteException);

	long SaveCharacteristicTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in General::CharacteristicTypeSeq_Transferable characteristictypes)
		raises (General::AMFICOMRemoteException);

	long SaveNetDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in NetworkDirectory::PortTypeSeq_Transferable porttypes,
			in NetworkDirectory::EquipmentTypeSeq_Transferable equipmenttypes,
			in NetworkDirectory::LinkTypeSeq_Transferable linktypes,
			in NetworkDirectory::CablePortTypeSeq_Transferable cableporttypes,
			in NetworkDirectory::CableLinkTypeSeq_Transferable cablelinktypes)
		raises (General::AMFICOMRemoteException);

	long SaveISMDirectory(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ISMDirectory::KISTypeSeq_Transferable kistypes,
			in ISMDirectory::MeasurementPortTypeSeq_Transferable mporttypes,
			in ISMDirectory::TransmissionPathTypeSeq_Transferable pathtypes)
		raises (General::AMFICOMRemoteException);

/**
 * Alarms
 */

	long GetAlarmTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Alarm::AlarmTypeSeq_Transferable atseq)
		raises (General::AMFICOMRemoteException);

	long GetAlarms(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Alarm::AlarmSeq_Transferable alarmseq,
			out Alarm::EventSourceSeq_Transferable eventsourceseq,
			out Alarm::EventSeq_Transferable eventseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedAlarms(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Alarm::AlarmSeq_Transferable alarmseq,
			out Alarm::EventSourceSeq_Transferable eventsourceseq,
			out Alarm::EventSeq_Transferable eventseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedAlarmsFiltered(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
            in Resource::Filter_Transferable filter,
			out Alarm::AlarmSeq_Transferable alarmseq,
			out Alarm::EventSourceSeq_Transferable eventsourceseq,
			out Alarm::EventSeq_Transferable eventseq)
		raises (General::AMFICOMRemoteException);

	long GetMessages(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Alarm::MessageSeq_Transferable messageseq)
		raises (General::AMFICOMRemoteException);

	long SetAlarm(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Alarm::Alarm_Transferable alarm)
		raises (General::AMFICOMRemoteException);

	long DeleteAlarm(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring alarm_id)
		raises (General::AMFICOMRemoteException);

	long SetUserAlarm(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring source_id,
			in wstring descriptor)
		raises (General::AMFICOMRemoteException);

	long GetAlarmIdsForMonitoredElement(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long LoadMaintenanceData(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Alarm::EventSourceTypeSeq_Transferable est,
			out Alarm::AlertingMessageSeq_Transferable am,
			out Alarm::AlertingMessageUserSeq_Transferable amu)
		raises (General::AMFICOMRemoteException);

	long SaveMaintenanceData(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Alarm::AlertingMessageSeq_Transferable am,
			in Alarm::AlertingMessageUserSeq_Transferable amu)
		raises (General::AMFICOMRemoteException);

	long RemoveMaintenanceData(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring amu_id)
		raises (General::AMFICOMRemoteException);

/**
 * Survey Resource management
 */

	long GetResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientResultSeq_Transferable resultseq)
		raises (General::AMFICOMRemoteException);

	long GetTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientTestSeq_Transferable testseq)
		raises (General::AMFICOMRemoteException);

	long GetStatedTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientTestSeq_Transferable testseq)
		raises (General::AMFICOMRemoteException);

	long GetTestIdsInDiapazon(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in long long start_time,
			in long long end_time,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetTestIdsForMonitoredElement(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientAnalysisSeq_Transferable analysisseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientAnalysisSeq_Transferable as)
		raises (General::AMFICOMRemoteException);

	long GetAnalysisIdsForMonitoredElement(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetModelings(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientModelingSeq_Transferable modelingseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedModelings(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientModelingSeq_Transferable ms)
		raises (General::AMFICOMRemoteException);

	long GetModelingIdsForSchemePath(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring scheme_path_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetEvaluations(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientEvaluationSeq_Transferable evaluationseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedEvaluations(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientEvaluationSeq_Transferable es)
		raises (General::AMFICOMRemoteException);

	long GetEvaluationIdsForMonitoredElement(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetRequests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientTestRequestSeq_Transferable treqseq)
		raises (General::AMFICOMRemoteException);

	long GetRequestTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring request_id,
			out Survey::ClientTestSeq_Transferable testseq)
		raises (General::AMFICOMRemoteException);

	long GetAlarmedTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long RequestTest(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientTestRequest_Transferable treq,
			in Survey::ClientTestSeq_Transferable testseq)
		raises (General::AMFICOMRemoteException);

	long RemoveTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq testids)
		raises (General::AMFICOMRemoteException);

	long UpdateTests(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientTestSeq_Transferable testseq)
		raises (General::AMFICOMRemoteException);

	long QueryResource(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring parameter_id,
			in wstring kis_id,
			in wstring parameter_type_id)
		raises (General::AMFICOMRemoteException);

/**
 * Results
 */

	long GetLastResult(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long GetTestResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id,
			out Survey::ClientResultSeq_Transferable results)
		raises (General::AMFICOMRemoteException);

	long GetAnalysisResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring analysis_id,
			out Survey::ClientResultSeq_Transferable results)
		raises (General::AMFICOMRemoteException);

	Survey::ClientResultSeq_Transferable GetStatisticsAnalysisResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in long long start_time,
			in long long end_time)
		raises (General::AMFICOMRemoteException);

	Survey::ClientResultSeq_Transferable GetStatisticsAnalysisResultsByTS(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in long long start_time,
			in long long end_time,
			in wstring test_setup_id)
		raises (General::AMFICOMRemoteException);

	long GetModelingResult(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring modeling_id,
			out Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long GetEvaluationResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring evaluation_id,
			out Survey::ClientResultSeq_Transferable results)
		raises (General::AMFICOMRemoteException);

	long GetLastResultId(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring me_id,
			out Resource::ResourceDescriptor_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetTestResultIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetAnalysisResultIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring analysis_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetModelingResultId(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring modeling_id,
			out Resource::ResourceDescriptor_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetEvaluationResultIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring evaluation_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetResult(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring result_id,
			out Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long GetStatedResults(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientResultSeq_Transferable resultseq)
		raises (General::AMFICOMRemoteException);

	long SaveAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientAnalysis_Transferable analysis,
			in Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long SaveModeling(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientModeling_Transferable modeling,
			in Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long SaveEvaluation(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientEvaluation_Transferable evaluation,
			in Survey::ClientResult_Transferable result)
		raises (General::AMFICOMRemoteException);

	long GetResultSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ResultSetSeq_Transferable resultset)
		raises (General::AMFICOMRemoteException);

	long GetStatedResultSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ResultSetSeq_Transferable resultset)
		raises (General::AMFICOMRemoteException);

	long GetResultSetResultIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring result_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

	long GetResultSetResultMEIds(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring result_id,
			in wstring me_id,
			out Resource::ResourceDescriptorSeq_Transferable desc)
		raises (General::AMFICOMRemoteException);

/**
 * Measurement-related types and templates
 */

	long LoadGlobalParameterTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::GlobalParameterTypeSeq_Transferable params)
		raises (General::AMFICOMRemoteException);

	long LoadStatedGlobalParameterTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::GlobalParameterTypeSeq_Transferable params)
		raises (General::AMFICOMRemoteException);

	long LoadTestTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::TestTypeSeq_Transferable ttypeseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedTestTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::TestTypeSeq_Transferable ttypeseq)
		raises (General::AMFICOMRemoteException);

	long LoadAnalysisTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::AnalysisTypeSeq_Transferable atypes)
		raises (General::AMFICOMRemoteException);

	long LoadStatedAnalysisTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::AnalysisTypeSeq_Transferable atypes)
		raises (General::AMFICOMRemoteException);

	long LoadEvaluationTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::EvaluationTypeSeq_Transferable etypes)
		raises (General::AMFICOMRemoteException);

	long LoadStatedEvaluationTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::EvaluationTypeSeq_Transferable etypes)
		raises (General::AMFICOMRemoteException);

	long LoadModelingTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ModelingTypeSeq_Transferable mtypeseq)
		raises (General::AMFICOMRemoteException);

	long LoadStatedModelingTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ModelingTypeSeq_Transferable mtypeseq)
		raises (General::AMFICOMRemoteException);

	long LoadCriteriaSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientCriteriaSetSeq_Transferable css)
		raises (General::AMFICOMRemoteException);

	long LoadStatedCriteriaSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientCriteriaSetSeq_Transferable css)
		raises (General::AMFICOMRemoteException);

	long LoadThresholdSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientThresholdSetSeq_Transferable tss)
		raises (General::AMFICOMRemoteException);

	long LoadStatedThresholdSets(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Survey::ClientThresholdSetSeq_Transferable tss)
		raises (General::AMFICOMRemoteException);

	long LoadEtalons(
			in Admin::AccessIdentity_Transferable accessIdentity,
			out Survey::ClientEtalonSeq_Transferable ets)
		raises (General::AMFICOMRemoteException);

	Survey::AnalysisTypeSeq_Transferable getAnalysisTypes(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_type_id)
		raises (General::AMFICOMRemoteException);

	wstring createAnalysisType(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::AnalysisType_Transferable analysis_type)
		raises (General::AMFICOMRemoteException);

/**
 * Tests
 */

	Survey::ClientTest_Transferable getTestByAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring analysis_id)
		raises (General::AMFICOMRemoteException);

	Resource::ResourceDescriptor_Transferable getTestIdByAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring analysis_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientTest_Transferable getTestByEvaluation(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring evaluation_id)
		raises (General::AMFICOMRemoteException);

	Resource::ResourceDescriptor_Transferable getTestIdByEvaluation(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring evaluation_id)
		raises (General::AMFICOMRemoteException);

/**
 * Analysis
 */

	wstring createAnalysis(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientAnalysis_Transferable analysis)
		raises (General::AMFICOMRemoteException);

	Survey::ClientAnalysis_Transferable getAnalysisById(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientAnalysis_Transferable getAnalysisByTest(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id)
		raises (General::AMFICOMRemoteException);

	Resource::ResourceDescriptor_Transferable getAnalysisIdByTest(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id)
		raises (General::AMFICOMRemoteException);

/**
 * Evaluations
 */

	wstring createEvaluation(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientEvaluation_Transferable evaluation)
		raises (General::AMFICOMRemoteException);

	Survey::ClientEvaluation_Transferable getEvaluationById(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientEvaluation_Transferable getEvaluationByTest(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id)
		raises (General::AMFICOMRemoteException);

	Resource::ResourceDescriptor_Transferable getEvaluationIdByTest(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_id)
		raises (General::AMFICOMRemoteException);

/**
 * Modelings
 */

	Survey::ClientModeling_Transferable getModelingById(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

/**
 * Test setups
 */

	wstring createTestSetup(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::TestSetup_Transferable test_setup)
		raises (General::AMFICOMRemoteException);

	void attachTestSetupToME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_setup_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	void detachTestSetupFromME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_setup_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::TestSetup_Transferable getTestSetup(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::TestSetupSeq_Transferable getTestSetupsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::TestSetupSeq_Transferable getTestSetupsByTestType(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_type_id)
		raises (General::AMFICOMRemoteException);

	Survey::TestSetupSeq_Transferable getTestSetupsByTestTypeAndME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in wstring test_type_id)
		raises (General::AMFICOMRemoteException);

	::CORBA::WStringSeq getTestSetupIdsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	::CORBA::WStringSeq getTestSetupIdsByTestType(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring test_type_id)
		raises (General::AMFICOMRemoteException);

/**
 * Test argument sets
 */

	wstring createTestArgumentSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientTestArgumentSet_Transferable arg_set)
		raises (General::AMFICOMRemoteException);

	void attachTestArgumentSetToME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring arg_set_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientTestArgumentSet_Transferable getTestArgumentSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientTestArgumentSetSeq_Transferable getTestArgumentSetsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

/**
 * Criteria sets
 */

	wstring createCriteriaSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientCriteriaSet_Transferable criteria_set)
		raises (General::AMFICOMRemoteException);

	void attachCriteriaSetToME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring criteria_set_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientCriteriaSet_Transferable getCriteriaSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientCriteriaSetSeq_Transferable getCriteriaSetsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientCriteriaSetSeq_Transferable getCriteriaSetsByAnalysisType(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in wstring analysis_type_id)
		raises (General::AMFICOMRemoteException);

/**
 * Threshold sets
 */

	wstring createThresholdSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientThresholdSet_Transferable th_set)
		raises (General::AMFICOMRemoteException);

	void attachThresholdSetToME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring th_set_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientThresholdSet_Transferable getThresholdSet(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientThresholdSetSeq_Transferable getThresholdSetsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientThresholdSetSeq_Transferable getThresholdSetsByAnalysisType(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in wstring analysis_type_id)
		raises (General::AMFICOMRemoteException);

/**
 * Etalons
 */

	wstring createEtalon(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Survey::ClientEtalon_Transferable e)
		raises (General::AMFICOMRemoteException);

	void attachEtalonToME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring e_id,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientEtalon_Transferable getEtalon(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientEtalonSeq_Transferable getEtalonsByME(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id)
		raises (General::AMFICOMRemoteException);

	Survey::ClientEtalon_Transferable getEtalonByMEandTime(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in wstring monitored_element_id,
			in long long time)
		raises (General::AMFICOMRemoteException);

/**
 * Reports
 */

	wstring saveReportTemplates(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Report::ReportTemplateSeq_Transferable rts)
		raises (General::AMFICOMRemoteException);

	void getStatedReportTemplates(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq ids,
			out Report::ReportTemplateSeq_Transferable reportTemplates)
		raises (General::AMFICOMRemoteException);

	void removeReportTemplates(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq reportTemplate_ids)
		raises (General::AMFICOMRemoteException);

/**
 * Optimization
 */

	Scheme::SchemeOptimizeInfoSeq_Transferable getSchemeOptimizeInfo(
			in Admin::AccessIdentity_Transferable accessIdentity)
		raises (General::AMFICOMRemoteException);

	wstring saveSchemeOptimizeInfo(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Scheme::SchemeOptimizeInfo_Transferable soi)
    	raises (General::AMFICOMRemoteException);

	void removeSchemeOptimizeInfo(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq soi_ids)
		raises (General::AMFICOMRemoteException);

/**
 * Optimization solutions
 */

	Scheme::SchemeMonitoringSolutionSeq_Transferable getSchemeMonitoringSolutions(
			in Admin::AccessIdentity_Transferable accessIdentity)
		raises (General::AMFICOMRemoteException);

	wstring saveSchemeMonitoringSolutions(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in Scheme::SchemeMonitoringSolution_Transferable sol)
    	raises (General::AMFICOMRemoteException);

	void removeSchemeMonitoringSolutions(
			in Admin::AccessIdentity_Transferable accessIdentity,
			in ::CORBA::WStringSeq sol_ids)
		raises (General::AMFICOMRemoteException);

//////////////////////////////////////////////////////////////////////////////
};
};
};
};
};

#endif
