/*-
 * $Id: event.idl,v 1.66 2006/06/29 09:45:49 bass Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef EVENT_IDL
#define	EVENT_IDL

#include "general.idl"
#include "reflectometry.idl"

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
module com {
module syrus {
module AMFICOM {
#else // MY_COMPILER_IS_NOT_BRAINDEAD
#pragma prefix "AMFICOM.syrus.com"
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

module eventv2 {
	module corba {
		/*\u002a\u002f@SuppressWarnings("all")/**/
		abstract valuetype IdlEvent {
			/*\u002a\u002f@SuppressWarnings("all")/**/
			enum IdlEventType {
				REFLECTOGRAM_MISMATCH,
				LINE_MISMATCH,
				NOTIFICATION,
				MEASUREMENT_STATUS_CHANGED
			};

			IdlEventType getType();

			eventv2::Event getNativeEvent() raises (general::corba::IdlCreateObjectException);
		};
		/*\u002a\u002f@SuppressWarnings("all")/**/
		typedef sequence <IdlEvent> IdlEventSeq;

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlReflectogramMismatchEvent : general::corba::IdlStorableObject, IdlEvent {
			union IdlMismatchData switch (
				/*\u002a\u002f@SuppressWarnings("all")/**/
				enum IdlMismatch {
					_FALSE,
					_TRUE}) {
				case _TRUE:
					struct IdlMismatchPair {
						double minMismatch;
						double maxMismatch;
					} mismatchPair;
			};
			private IdlMismatchData mismatchData;
			private reflectometry::corba::IdlSeverity severity;
			union IdlAnchorData switch (
				/*\u002a\u002f@SuppressWarnings("all")/**/
				enum IdlAnchor {
					_FALSE,
					_TRUE}) {
				case _TRUE:
					struct IdlAnchorPair {
						general::corba::IdlIdentifier anchor1Id;
						general::corba::IdlIdentifier anchor2Id;
						long anchor1Coord;
						long anchor2Coord;
					} anchorPair;
			};
			private IdlAnchorData anchorData;
			private long coord;
			private long endCoord;
			private reflectometry::corba::IdlAlarmType alarmType;
			private double deltaX;
			private general::corba::IdlIdentifier measurementId;

			long long getCreated();
			boolean hasMismatch();
			double getMinMismatch();
			double getMaxMismatch();
			reflectometry::corba::IdlSeverity getSeverity();
			boolean hasAnchors();
			general::corba::IdlIdentifier getAnchor1Id();
			general::corba::IdlIdentifier getAnchor2Id();
			long getAnchor1Coord();
			long getAnchor2Coord();
			long getCoord();
			long getEndCoord();
			reflectometry::corba::IdlAlarmType getAlarmType();
			double getDeltaX();
			general::corba::IdlIdentifier getMeasurementId();

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in IdlMismatchData mismatchData,
					in reflectometry::corba::IdlSeverity severity,
					in IdlAnchorData anchorData,
					in long coord,
					in long endCoord,
					in reflectometry::corba::IdlAlarmType alarmType,
					in double deltaX,
					in general::corba::IdlIdentifier measurementId);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlLineMismatchEvent : general::corba::IdlStorableObject, IdlEvent {
			private general::corba::IdlIdentifier affectedPathElementId;
			union IdlSpacialData switch (
				/*\u002a\u002f@SuppressWarnings("all")/**/
				enum IdlAffectedPathElementSpacious {
					_FALSE,
					_TRUE}) {
				case _TRUE:
					struct IdlPhysicalDistancePair {
						double physicalDistanceToStart;
						double physicalDistanceToEnd;
					} physicalDistancePair;
			};
			private IdlSpacialData spacialData;
			private double mismatchOpticalDistance;
			private double mismatchPhysicalDistance;
			private general::corba::WString4000 plainTextMessage;
			private general::corba::WString4000 richTextMessage;
			private general::corba::IdlIdentifier reflectogramMismatchEventId;
			/*\u002a\u002f@SuppressWarnings("all")/**/
			enum IdlAlarmStatus {
				PENDING,
				XTRA_ASSIGNED,
				IGNORED,
				ACKNOWLEDGED,
				IN_PROGRESS,
				XTRA_TT_COMPLETED,
				XTRA_VTEST_IN_PROGRESS,
				RESOLVED,
				ABANDONED,
				TIMED_OUT,
				XTRA_VERIFIED,
				XTRA_CLOSED
			};
			private IdlAlarmStatus alarmStatus;
			private general::corba::IdlIdentifier parentLineMismatchEventId;
			struct IdlChangeLogRecord {
				long long modified;
				general::corba::String32 key;
				/**
				 * Nullable.
				 */
				general::corba::WString4000Value oldValue;
				/**
				 * Nullable.
				 */
				general::corba::WString4000Value newValue;
			};
			/*\u002a\u002f@SuppressWarnings("all")/**/
			typedef sequence<IdlChangeLogRecord> IdlChangeLogRecordSeq;
			private IdlChangeLogRecordSeq changeLog;

			general::corba::IdlIdentifier getAffectedPathElementId();
			boolean isAffectedPathElementSpacious();
			double getPhysicalDistanceToStart();
			double getPhysicalDistanceToEnd();
			double getMismatchOpticalDistance();
			double getMismatchPhysicalDistance();
			general::corba::WString4000 getPlainTextMessage();
			general::corba::WString4000 getRichTextMessage();
			general::corba::IdlIdentifier getReflectogramMismatchEventId();
			IdlAlarmStatus getAlarmStatus();
			void setAlarmStatus(in IdlAlarmStatus alarmStatus);
			general::corba::IdlIdentifier getParentLineMismatchEventId();
			void setParentLineMismatchEventId(in general::corba::IdlIdentifier parentLineMismatchEventId);
			IdlChangeLogRecordSeq getChangeLog();

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::IdlIdentifier affectedPathElementId,
					in IdlSpacialData spacialData,
					in double mismatchOpticalDistance,
					in double mismatchPhysicalDistance,
					in general::corba::WString4000 plainTextMessage,
					in general::corba::WString4000 richTextMessage,
					in general::corba::IdlIdentifier reflectogramMismatchEventId,
					in IdlAlarmStatus alarmStatus,
					in general::corba::IdlIdentifier parentLineMismatchEventId,
					in IdlChangeLogRecordSeq changeLog);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		abstract valuetype IdlNotificationEvent : IdlEvent {
			/*\u002a\u002f@SuppressWarnings("all")/**/
			enum IdlDeliveryMethod {
				EMAIL,
				SMS,
				POPUP
			};

			IdlDeliveryMethod getDeliveryMethod();
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlEmailNotificationEvent : general::corba::IdlStorableObject, IdlNotificationEvent {
			private string email;
			private wstring subject;
			private wstring plainTextMessage;
			private wstring richTextMessage;

			string getEmail();
			wstring getSubject();
			wstring getPlainTextMessage();
			wstring getRichTextMessage();

			factory init(in string email, in wstring subject, in wstring plainTextMessage, in wstring richTextMessage);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlSmsNotificationEvent : general::corba::IdlStorableObject, IdlNotificationEvent {
			private string cellular;
			private wstring message;

			string getCellular();
			wstring getMessage();
			
			factory init(in string cellular, in wstring message);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlPopupNotificationEvent : general::corba::IdlStorableObject, IdlNotificationEvent {
			private general::corba::IdlIdentifier targetUserId;
			private general::corba::IdlIdentifier lineMismatchEventId;

			general::corba::IdlIdentifier getTargetUserId();
			general::corba::IdlIdentifier getLineMismatchEventId();

			factory init(in general::corba::IdlIdentifier targetUserId,
					in general::corba::IdlIdentifier lineMismatchEventId);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		abstract valuetype IdlMeasurementStatusChangedEvent : IdlEvent {
			long long getCreated();
			general::corba::IdlIdentifier getMeasurementId();
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlMeasurementStartedEvent : general::corba::IdlStorableObject, IdlMeasurementStatusChangedEvent {
			private general::corba::IdlIdentifier measurementId;

			factory init(in long long created,
					in general::corba::IdlIdentifier measurementId);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlMeasurementCompletedEvent : general::corba::IdlStorableObject, IdlMeasurementStatusChangedEvent {
			union QClause switch (
				/*\u002a\u002f@SuppressWarnings("all")/**/
				enum QPresence { YES, NO }) {
				case YES:
					double quality;
			};

			private general::corba::IdlIdentifier measurementId;
			private QClause qClause;

			boolean hasQ();
			double getQ();

			factory init(in long long created,
					in general::corba::IdlIdentifier measurementId,
					in QClause qClause);
		};


/////////////////// EventReceiver ////////////////////

		/*\u002a\u002f@SuppressWarnings("all")/**/
		interface EventReceiver {
			void receiveEvent(in IdlEvent event);
		};
	};
};

module event {
	module corba {


/////////////////////// EventType ////////////////////////

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlEventType : general::corba::IdlStorableObject {
			struct IdlUserAlertKinds {
				general::corba::IdlIdentifier userId;
				sequence<eventv2::corba::IdlNotificationEvent::IdlDeliveryMethod> alertKinds;
			};

			/*\u002a\u002f@SuppressWarnings("all")/**/
			typedef sequence<IdlUserAlertKinds> IdlUserAlertKindsSeq;

			public general::corba::WString32 codename;
			public general::corba::WString256 description;

			public general::corba::IdlParameterTypeSeq parameterTypes;
			public IdlUserAlertKindsSeq userAlertKinds;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::WString32 codename,
					in general::corba::WString256 description,
					in general::corba::IdlParameterTypeSeq parameterTypes,
					in IdlUserAlertKindsSeq userAlertKinds);
		};


/////////////////////// EventSource ////////////////////////

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlEventSource : general::corba::IdlStorableObject {
			public general::corba::IdlIdentifier sourceEntityId;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::IdlIdentifier sourceEntityId);
		};


/////////////////////// Event ////////////////////////

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlEvent : general::corba::IdlStorableObject {
			/*\u002a\u002f@SuppressWarnings("all")/**/
			typedef struct IdlEventParameter {
				general::corba::IdlIdentifier id;
				general::corba::IdlParameterType type;
				wstring value;
			} EventParameter;
			/*\u002a\u002f@SuppressWarnings("all")/**/
			typedef sequence<EventParameter> EventParameterSeq;

			public general::corba::IdlIdentifier _typeId;
			public general::corba::WString256 description;

			public EventParameterSeq parameters;
			public general::corba::IdlIdentifierSeq eventSourceIds;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::IdlIdentifier _typeId,
					in general::corba::WString256 description,
					in EventParameterSeq parameters,
					in general::corba::IdlIdentifierSeq eventSourceIds);
		};

		/*\u002a\u002f@SuppressWarnings("all")/**/
		typedef sequence<IdlEvent> IdlEventSeq;

		/*\u002a\u002f@SuppressWarnings("all")/**/
		valuetype IdlDeliveryAttributes : general::corba::IdlStorableObject {
			public reflectometry::corba::IdlSeverity severity;
			public general::corba::IdlIdentifierSeq roleIds;
			public general::corba::IdlIdentifierSeq systemUserIds;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in reflectometry::corba::IdlSeverity severity,
					in general::corba::IdlIdentifierSeq roleIds,
					in general::corba::IdlIdentifierSeq systemUserIds);
		};
	};
};

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
};
};
};
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

#endif // EVENT_IDL
