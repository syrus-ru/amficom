/*-
 * $Id: event.idl,v 1.25 2005/10/07 14:58:58 bass Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef EVENT_IDL
#define	EVENT_IDL

#include "general.idl"
#include "reflectometry.idl"

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
module com {
module syrus {
module AMFICOM {
#else // MY_COMPILER_IS_NOT_BRAINDEAD
#pragma prefix "AMFICOM.syrus.com"
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

module event {
	module corba {


/////////////////////// EventType ////////////////////////

		valuetype IdlEventType : general::corba::IdlStorableObject {
			enum AlertKind {
				ALERT_KIND_WINDOW,
				ALERT_KIND_EMAIL,
				ALERT_KIND_SMS
			};

			typedef sequence<AlertKind> AlertKindSeq;

			struct IdlUserAlertKinds {
				general::corba::IdlIdentifier userId;
				AlertKindSeq alertKinds;
			};

			typedef sequence<IdlUserAlertKinds> IdlUserAlertKindsSeq;

			public general::corba::WString32 codename;
			public general::corba::WString256 description;

			public general::corba::IdlParameterTypeSeq parameterTypes;
			public IdlUserAlertKindsSeq userAlertKinds;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::WString32 codename,
					in general::corba::WString256 description,
					in general::corba::IdlParameterTypeSeq parameterTypes,
					in IdlUserAlertKindsSeq userAlertKinds);
		};


/////////////////////// EventSource ////////////////////////

		valuetype IdlEventSource : general::corba::IdlStorableObject {
			public general::corba::IdlIdentifier sourceEntityId;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::IdlIdentifier sourceEntityId);
		};


/////////////////////// Event ////////////////////////

		valuetype IdlEvent : general::corba::IdlStorableObject {
			typedef struct IdlEventParameter {
				general::corba::IdlIdentifier id;
				general::corba::IdlParameterType type;
				wstring value;
			} EventParameter;
			typedef sequence<EventParameter> EventParameterSeq;

			public general::corba::IdlIdentifier _typeId;
			public general::corba::WString256 description;

			public EventParameterSeq parameters;
			public general::corba::IdlIdentifierSeq eventSourceIds;

			factory init(in general::corba::IdlIdentifier id,
					in long long created,
					in long long modified,
					in general::corba::IdlIdentifier creatorId,
					in general::corba::IdlIdentifier modifierId,
					in long long version,
					in general::corba::IdlIdentifier _typeId,
					in general::corba::WString256 description,
					in EventParameterSeq parameters,
					in general::corba::IdlIdentifierSeq eventSourceIds);
		};

		typedef sequence<IdlEvent> IdlEventSeq;

/////////////////// EventListener ////////////////////

		abstract interface EventListener {
			void receiveEvent(in IdlEvent event) raises (general::corba::AMFICOMRemoteException);
		};


	};
};

module eventv2 {
	module corba {
		abstract valuetype IdlEvent {
			enum IdlEventType {
				REFLECTOGRAM_MISMATCH,
				LINE_MISMATCH,
				NOTIFICATION
			};

			eventv2::Event getNative();
		};

		valuetype IdlReflectogramMismatchEvent : IdlEvent {
			union IdlMismatchData switch (
				enum IdlMismatch {
					_FALSE,
					_TRUE}) {
				case _TRUE:
					struct IdlMismatchPair {
						double minMismatch;
						double maxMismatch;
					} mismatchPair;
			};
			private IdlMismatchData mismatchData;
			private reflectometry::corba::IdlSeverity severity;
			private double distance;
			union IdlAnchorData switch (
				enum IdlAnchor {
					_FALSE,
					_TRUE}) {
				case _TRUE:
					struct IdlAnchorPair {
						general::corba::IdlIdentifier anchor1Id;
						general::corba::IdlIdentifier anchor2Id;
						long anchor1Coord;
						long anchor2Coord;
					} anchorPair;
			};
			private IdlAnchorData anchorData;
			private long coord;
			private long endCoord;
			private reflectometry::corba::IdlAlarmType alarmType;
			private double deltaX;

			boolean hasMismatch();
			double getMinMismatch();
			double getMaxMismatch();
			reflectometry::corba::IdlSeverity getSeverity();
			double getDistance();
			boolean hasAnchors();
			general::corba::IdlIdentifier getAnchor1Id();
			general::corba::IdlIdentifier getAnchor2Id();
			long getAnchor1Coord();
			long getAnchor2Coord();
			long getCoord();
			long getEndCoord();
			reflectometry::corba::IdlAlarmType getAlarmType();
			double getDeltaX();

			factory init(in IdlMismatchData mismatchData,
					in reflectometry::corba::IdlSeverity severity,
					in double distance,
					in IdlAnchorData anchorData,
					in long coord,
					in long endCoord,
					in reflectometry::corba::IdlAlarmType alarmType,
					in double deltaX);
		};

		abstract valuetype IdlNotificationEvent : IdlEvent {
			enum IdlDeliveryMethod {
				EMAIL,
				SMS
			};
		};
	};
};

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
};
};
};
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

#endif // EVENT_IDL
