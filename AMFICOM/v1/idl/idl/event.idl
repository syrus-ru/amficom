/*
 * $Id: event.idl,v 1.7 2005/01/28 15:16:32 arseniy Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef EVENT_IDL
#define	EVENT_IDL

#include "administration.idl"
#include "configuration.idl"
#include "measurement.idl"

module com {
module syrus {
module AMFICOM {
module event {
module corba {

////////////////// MeasurementEvent //////////////////

	enum MeasurementEventSort {
		TEST_STATUS_CHANGED,
		NEW_MEASUREMENT_GENERATED,
		MEASUREMENT_STATUS_CHANGED,
		MEASUREMENT_ALARM
	};

	struct MeasurementEvent {
		MeasurementEventSort sort;
		any data;
	};

	abstract interface MeasurementEventListener {
		void event_notification(in MeasurementEvent event);
	};

///////////////// ConfigurationEvent /////////////////

	enum ConfigurationEventSort {
		MCM_CONNECTION_LOST,
		MCM_CONNECTION_RESTORED,
		KIS_CONNECTION_LOST,
		KIS_CONNECTION_RESTORED
	};

	struct ConfigurationEvent {
		ConfigurationEventSort sort;
		any data;
	};

	abstract interface ConfigurationEventListener {
		void event_notification(in ConfigurationEvent event);
	};

/////////////////////// Event ////////////////////////

	struct EventType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;

		general::corba::IdentifierSeq_Transferable parameter_type_ids;
	};

	typedef sequence <EventType_Transferable> EventTypeSeq_Transferable;

	struct EventParameter_Transferable {
		general::corba::Identifier_Transferable id;
		general::corba::Identifier_Transferable type_id;
		enum EventParameterSort {
			SORT_NUMBER,
			SORT_STRING,
			SORT_RAW
		} sort;
		union EventParameterValue switch (EventParameterSort) {
			case SORT_NUMBER:
				long value_number;
			case SORT_STRING:
				wstring value_string;
			case SORT_RAW:
				sequence <octet> value_raw;
		} value;
	};

	typedef sequence <EventParameter_Transferable> EventParameterSeq_Transferable;

	enum EventStatus {
		EVENT_STATUS_GENERATED,
		EVENT_STATUS_PROCESSED
	};

	struct Event_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		EventStatus status;
		general::corba::WString256 description;

		EventParameterSeq_Transferable parameters;
	};

	typedef sequence <Event_Transferable> EventSeq_Transferable;

/////////////////////// Alarm ////////////////////////

	struct AlarmType_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::WString32 codename;
		general::corba::WString256 description;
	};

	typedef sequence <AlarmType_Transferable> AlarmTypeSeq_Transferable;

	enum AlarmStatus {
		ALARM_STATUS_GENERATED,
		ALARM_STATUS_ASSIGNED,
		ALARM_STATUS_FIXED,
		ALARM_STATUS_DELETED
	};

	enum AlarmLevel {
		ALARM_LEVEL_NONE,
		ALARM_LEVEL_SOFT,
		ALARM_LEVEL_HARD
	};

	struct Alarm_Transferable {
		general::corba::StorableObject_Transferable header;

		general::corba::Identifier_Transferable type_id;
		general::corba::Identifier_Transferable event_id;
		AlarmStatus status;
		AlarmLevel level;
		general::corba::WString256 description;
	};

	typedef sequence <Alarm_Transferable> AlarmSeq_Transferable;

};
};
};
};
};

#endif
