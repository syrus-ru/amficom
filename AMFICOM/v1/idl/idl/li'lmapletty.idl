/*
 * $Id: li'lmapletty.idl,v 1.5 2004/11/25 11:20:04 bob Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 * Describe a geak li'l mapletty 
 * 
 * Defines that can be specified at compile time:
 *
 * NUMERIC_IDENTIFIER (off by default, implies MAP_COMMON) -- Identifier will
 *  hold primitive major and minor fields rather than a string;
 *
 * REDUNDANT_DEPS (off by default, implies MAP_COMMON) -- StorableObject will
 *  depend on User.
 */

#ifndef MAPLETTY_IDL
#define MAPLETTY_IDL

#include <streams.idl>

#include "general.idl"

#include "configuration.idl"

#include "resource.idl"

module com {
	module syrus {
		module AMFICOM {
			module map {
				module corba {
				
					// was MapNodeProtoElement
					// MapNodeProtoElement is node type
					
					struct SiteNodeType_Transferable {
							general::corba::StorableObject_Transferable header;
							
							wstring codename;
							wstring name;
							wstring description;
							
							general::corba::Identifier_Transferable imageId;
							boolean topological;
							general::corba::IdentifierSeq_Transferable characteristicIds;
					};
				
					// was MapLinkProtoElement
					// MapLinkProtoElement is physical line type such as tunnel, subway
					struct PhysicalLinkType_Transferable {
							general::corba::StorableObject_Transferable header;
							
							general::corba::Identifier_Transferable domain_id;
							wstring name;
							wstring description;
							
							general::corba::IdentifierSeq_Transferable characteristicIds;
					};
					
					// was MapSiteElement
					// MapSiteElement is node
					struct SiteNode_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;
							wstring description;
							
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor
							
							general::corba::Identifier_Transferable imageId;
							general::corba::Identifier_Transferable siteNodeTypeId;			
							//SiteNodeType siteNodeType;
							
							wstring city;
							wstring street;
							wstring building;

							general::corba::IdentifierSeq_Transferable characteristicIds;				
					};
					
					typedef sequence<SiteNode_Transferable> SiteNodeSeq_Transferable;
					
					// was MapPhysicalNodeElement
					// MapPhysicalNodeElement is topological node
					struct TopologicalNode_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;
							wstring description;
							
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor

							general::corba::Identifier_Transferable physicalLinkId;
							//PhysicalLink physicalLink;

							boolean active;

							general::corba::IdentifierSeq_Transferable characteristicIds;
					};
					
					typedef sequence<TopologicalNode_Transferable> TopologicalNodeSeq_Transferable;
					
					// was MapNodeLinkElement
					// MapNodeLinkElement is map item, line fragment
					
					struct NodeLink_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;

							general::corba::Identifier_Transferable physicalLinkId;
							//PhysicalLink physicalLink;

							general::corba::Identifier_Transferable startNodeId;
							//Node startNode;
							general::corba::Identifier_Transferable endNodeId;
							//Node endNode;							

							double length;
							
							general::corba::IdentifierSeq_Transferable characteristicIds;							
					};
					
					typedef sequence<NodeLink_Transferable> NodeLinkSeq_Transferable;
					
					// was MapMarkElement
					// MapMarkElement is mark, have coordinates and bound to subway (MapLink) by distance
					struct Mark_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;
							wstring description;
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor
							
							general::corba::Identifier_Transferable physicalLinkId;
							//PhysicalLink physicalLink;

							double distance;

							wstring city;
							wstring street;
							wstring building;
							
							general::corba::IdentifierSeq_Transferable characteristicIds;
					};
					typedef sequence<Mark_Transferable> MarkSeq_Transferable;
					
						// was MapPhysicalLinkElement
					// MapPhysicalLinkElement is line item
					struct PhysicalLink_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;
							wstring description;
							
							general::corba::Identifier_Transferable physicalLinkTypeId;
							//PhysicalLineType physicalLinkType;

							general::corba::Identifier_Transferable startNodeId;
							//Node startNode;
							general::corba::Identifier_Transferable endNodeId;
							//Node endNode;

							wstring city;
							wstring street;
							wstring building;

							long long dimensionX;
							long long dimensionY;
							
							boolean leftToRight;
							boolean topToBottom;

							general::corba::IdentifierSeq_Transferable nodeLinkIds;
							//NodeLinkSeq nodeLinks;

							general::corba::IdentifierSeq_Transferable characteristicIds;
					};					
					
					typedef sequence<PhysicalLink_Transferable> PhysicalLinkSeq;
					
					// was MapPipePathElement
					// MapPipePathElement is collector
					struct Collector_Transferable {
							general::corba::StorableObject_Transferable header;

							wstring name;
							wstring description;							
							
							general::corba::IdentifierSeq_Transferable physicalLinkIds;
							//PhysicalLinkSeq physicalLinks;
							
							general::corba::IdentifierSeq_Transferable characteristicIds;
					};
					
					typedef sequence<Collector_Transferable> CollectorSeq_Transferable;

					struct Map_Transferable {
							general::corba::StorableObject_Transferable header;
							
							general::corba::Identifier_Transferable domain_id;
							
							wstring name;
							wstring description;

							general::corba::IdentifierSeq_Transferable siteIds;
							//SiteNodeSeq siteNodes;
							general::corba::IdentifierSeq_Transferable topologicalNodeIds;
							//TopologicalNodeSeq topologicalNodes;
							general::corba::IdentifierSeq_Transferable nodeLinkIds;
							//NodeLinkSeq nodeLinks;
							general::corba::IdentifierSeq_Transferable physicalNodeLinkIds;
							//PhysicalLinkSeq physicalLinks;
							general::corba::IdentifierSeq_Transferable markIds;
							//MarkSeq marks;
							general::corba::IdentifierSeq_Transferable collectorIds;
							//CollectorSeq collectors;
					};

					struct MapView_Transferable {
							general::corba::StorableObject_Transferable header;

							general::corba::Identifier_Transferable domain_id;
							wstring name;
							wstring description;

							double longitude;
							double latitude;
							double scale;
							double defaultScale;

							general::corba::Identifier_Transferable mapId;
							general::corba::IdentifierSeq_Transferable schemeIds;
					};
					
			};
		};
		};
	};
};
#endif // MAPLETTY_IDL
