/*
 * $Id: scheme-vt.idl,v 1.6 2004/12/10 16:51:11 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 *
 * Defines that can be specified at compile time:
 *
 * NUMERIC_IDENTIFIER (off by default) -- Identifier will
 *  hold primitive major and minor fields rather than a string;
 */

#ifndef SCHEME_VT_IDL
#define SCHEME_VT_IDL

#include "map.idl"
#include "scheme-configuration.idl"
#include "scheme-java.idl"
#include "scheme-resource.idl"

module com {
	module syrus {
		module AMFICOM {
			module scheme {
				module corba {
					valuetype AbstractSchemeLink;
					valuetype Scheme;
					valuetype SchemeCableLink;
					valuetype SchemeCableThread;
					valuetype SchemeDevice;
					valuetype SchemeElement;
					valuetype SchemeLink;
					valuetype SchemeProtoElement;
					valuetype SchemeProtoGroup;

					typedef sequence<SchemeElement> SchemeElementSeq;
					typedef sequence<SchemeProtoElement> SchemeProtoElementSeq;
					typedef sequence<SchemeProtoGroup> SchemeProtoGroupSeq;

					valuetype AbstractSchemePort:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							::java::util::JavaUtilCharacterizable,
							configuration::ComSyrusAmficomConfigurationAbstractSchemePort {
						enum DirectionType {
							_IN,
							_OUT
						};

						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeDeviceId;
						/**
						 * Depending on implementation, may reference either {@link SchemeLink} or {@link SchemeCableLink}.
						 */
						private general::corba::Identifier abstractSchemeLinkId;
						/**
						 * Depending on implementation, may reference either {@link com.syrus.AMFICOM.configuration.PortType port type} or {@link com.syrus.AMFICOM.configuration.PortType cable port type}.
						 */
						private general::corba::Identifier portTypeId;
						/**
						 * Depending on implementation, may reference either {@link com.syrus.AMFICOM.configuration.Port port} or {@link com.syrus.AMFICOM.configuration.Port cable port}.
						 */
						private general::corba::Identifier portId;
						private general::corba::Identifier measurementPortTypeId;
						private general::corba::Identifier measurementPortId;
						private DirectionType thisDirectionType;
						private general::corba::IdentifierSeq characteristicIds;

						attribute SchemeDevice schemeDevice;
						/**
						 * @see #abstractSchemeLinkId
						 */
						attribute AbstractSchemeLink abstractSchemeLink;
						attribute DirectionType directionType;
					};

					valuetype SchemePort: AbstractSchemePort {
						private general::corba::Identifier schemeCableThreadId;

						/**
						 * @see AbstractSchemePort#abstractSchemeLinkId
						 */
						attribute SchemeLink schemeLink;
						/**
						 * This is a circular dependency on {@link SchemeCableThread}, see {@link SchemeCableThread#schemePort()}.
						 * Getter returns scheme cable thread attached to this scheme port.
						 *
						 * @see #schemeCableThreadId
						 * @see SchemeCableThread#schemePort()
						 */
						attribute SchemeCableThread schemeCableThread;

						SchemePort cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemePort> SchemePortSeq;

					valuetype SchemeCablePort: AbstractSchemePort {
						/**
						 * @see AbstractSchemePort#abstractSchemeLinkId
						 */
						attribute SchemeCableLink schemeCableLink;

						SchemeCablePort cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeCablePort> SchemeCablePortSeq;

					valuetype SchemeDevice:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							::java::util::JavaUtilCharacterizable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::IdentifierSeq schemePortIds;
						private general::corba::IdentifierSeq schemeCablePortIds;
						private general::corba::IdentifierSeq characteristicIds;

						attribute SchemePortSeq schemePorts;
						attribute SchemeCablePortSeq schemeCablePorts;

						SchemeDevice cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeDevice> SchemeDeviceSeq;

					valuetype AbstractSchemeElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							::java::util::JavaUtilCharacterizable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private general::corba::IdentifierSeq characteristicIds;

						/**
						 * Getter returns scheme parent to this scheme link or scheme cable link or scheme element.
						 * @see #schemeId
						 */
						attribute Scheme scheme;

						/**
						 * Transient attribute
						 */
						attribute boolean alarmed;
					};

					valuetype AbstractSchemeLink:
							AbstractSchemeElement,
							configuration::ComSyrusAmficomConfigurationAbstractSchemeLink {
						/**
						 * Depending on implementation, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier sourceAbstractSchemePortId;
						/**
						 * Depending on implementation, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier targetAbstractSchemePortId;
						/**
						 * Depending on implementation, may reference either {@link com.syrus.AMFICOM.configuration.LinkType link type} or {@link com.syrus.AMFICOM.configuration.LinkType cable link type}.
						 */
						private general::corba::Identifier abstractLinkTypeId;
						/**
						 * Depending on implementation, may reference either {@link com.syrus.AMFICOM.configuration.Link link} or {@link com.syrus.AMFICOM.configuration.Link cable link}.
						 */
						private general::corba::Identifier linkId;
						/**
						 * 0 means either zero or unspecified length.
						 *
						 * @see #physicalLength()
						 */
						private double thisPhysicalLength;
						/**
						 * 0 means either zero or unspecified length.
						 *
						 * @see #opticalLength()
						 */
						private double thisOpticalLength;

						attribute AbstractSchemePort sourceAbstractSchemePort;
						attribute AbstractSchemePort targetAbstractSchemePort;
						/**
						 * Getter returns physical length of this scheme link or scheme cable link.
						 * @see #thisPhysicalLength
						 */
						attribute double physicalLength;
						/**
						 * Getter returns optical length of this scheme link or scheme cable link.
						 * @see #thisOpticalLength
						 */
						attribute double opticalLength;
					};

					valuetype SchemeLink:
							AbstractSchemeLink,
							configuration::ComSyrusAmficomConfigurationSchemeLink {
						private general::corba::Identifier siteId;

						/**
						 * @see AbstractSchemeLink#sourceAbstractSchemePortId
						 */
						attribute SchemePort sourceSchemePort;
						/**
						 * @see AbstractSchemeLink#targetAbstractSchemePortId
						 */
						attribute SchemePort targetSchemePort;
						attribute CORBA::Map::MapSiteElement site;

						SchemeLink cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeLink> SchemeLinkSeq;

					valuetype SchemeCableThread:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							::java::util::JavaUtilCharacterizable,
							configuration::ComSyrusAmficomConfigurationSchemeCableThread {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier cableThreadTypeId;
						private general::corba::Identifier schemePortId;
						private general::corba::Identifier schemeCableLinkId;
						private general::corba::Identifier threadId;
						private general::corba::IdentifierSeq characteristicIds;

						/**
						 * This is a circular dependency on {@link SchemePort}, see {@link SchemePort#schemeCableThread()}.
						 * Getter returns scheme port this scheme cable thread is attached to.
						 *
						 * @see #schemePortId
						 * @see SchemePort#schemeCableThread()
						 */
						attribute SchemePort schemePort;
						/**
						 * Getter returns scheme cable link containing this scheme cable thread.
						 *
						 * @see #schemeCableLinkId
						 */
						attribute SchemeCableLink schemeCablelink;

						SchemeCableThread cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeCableThread> SchemeCableThreadSeq;

					valuetype CableChannelingItem:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private long thisSequentialNumber;
						private general::corba::Identifier physicalLinkId;
						private long thisRowX;
						private long thisPlaceY;
						private double thisStartSpare;
						private double thisEndSpare;
						private general::corba::Identifier startSiteId;
						private general::corba::Identifier endSiteId;

						attribute long sequentialNumber;
						attribute CORBA::Map::MapPhysicalLinkElement physicalLink;
						attribute long rowX;
						attribute long placeY;
						attribute double startSpare;
						attribute double endSpare;
						attribute CORBA::Map::MapSiteElement startSite;
						attribute CORBA::Map::MapSiteElement endSite;

						CableChannelingItem cloneInstance();

						factory newInstance();
					};

					typedef sequence<CableChannelingItem> CableChannelingItemSeq;

					valuetype SchemeCableLink:
							AbstractSchemeLink,
							configuration::ComSyrusAmficomConfigurationSchemeCableLink {
						private general::corba::IdentifierSeq schemeCableThreadIds;
						private general::corba::IdentifierSeq cableChannelingItemIds;

						/**
						 * @see AbstractSchemeLink#sourceAbstractSchemePortId
						 */
						attribute SchemeCablePort sourceSchemeCablePort;
						/**
						 * @see AbstractSchemeLink#targetAbstractSchemePortId
						 */
						attribute SchemeCablePort targetSchemeCablePort;
						attribute SchemeCableThreadSeq schemeCableThreads;
						attribute CableChannelingItemSeq cableChannelingItems;

						SchemeCableLink cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeCableLink> SchemeCableLinkSeq;

					/**
					 * PathElement has no associated <code>name</code> (or <code>thisName</code>) field: its {@link PathElement#name() name()} method actually returns {@link PathElement#abstractSchemeElement() abstractSchemeElement()}<code>.</code>{@link AbstractSchemeElement#name() name()}.
					 */
					valuetype PathElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum Type {
							SCHEME_CABLE_LINK,
							SCHEME_ELEMENT,
							SCHEME_LINK
						};

						private wstring thisDescription;
						private long thisSequentialNumber;
						private Type thisType;
						/**
						 * Empty if type is other than {@link com.syrus.AMFICOM.scheme.corba.PathElementPackage.Type#SCHEME_CABLE_LINK}.
						 */
						private general::corba::Identifier schemeCableThreadId;
						/**
						 * Depending on {@link #thisType}, may reference either {@link SchemeLink} or {@link SchemeCableLink} or {@link SchemeElement}.
						 */
						private general::corba::Identifier abstractSchemeElementId;
						/**
						 * Depending on {@link #thisType}, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier startAbstractSchemePortId;
						/**
						 * Depending on {@link #thisType}, may reference either {@link SchemePort} or {@link SchemeCablePort}.
						 */
						private general::corba::Identifier endAbstractSchemePortId;
						private general::corba::Identifier schemeId;

						attribute long sequentialNumber;
						attribute Type type;
						attribute SchemeCableThread schemeCableThread;
						attribute AbstractSchemeElement abstractSchemeElement;
						attribute AbstractSchemePort startAbstractSchemePort;
						attribute AbstractSchemePort endAbstractSchemePort;
						attribute Scheme scheme;

						PathElement cloneInstance();

						factory newInstance();
					};

					typedef sequence<PathElement> PathElementSeq;

					valuetype SchemePath:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							::java::util::JavaUtilCharacterizable,
							configuration::ComSyrusAmficomConfigurationSchemePath {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier _typeId;
						private general::corba::Identifier startDeviceId;
						private general::corba::Identifier endDeviceId;
						private general::corba::Identifier pathId;
						private general::corba::IdentifierSeq links;
						private general::corba::IdentifierSeq characteristicIds;

						attribute SchemeElement startDevice;
						attribute SchemeElement endDevice;
						attribute PathElementSeq links;

						SchemePath cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemePath> SchemePathSeq;

					valuetype SchemeProtoElement:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							resource::SchemeCellContainer,
							::java::util::JavaUtilCharacterizable,
							configuration::ComSyrusAmficomConfigurationSchemeProtoElement {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier equipmentTypeId;
						private general::corba::Identifier domainId;
						private general::corba::IdentifierSeq deviceIds;
						private general::corba::IdentifierSeq linkIds;
						private general::corba::IdentifierSeq protoElementIds;
						private general::corba::Identifier symbolId;
						private wstring thisLabel;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private general::corba::IdentifierSeq characteristicIds;

						attribute SchemeDeviceSeq devices;
						attribute SchemeLinkSeq links;
						/**
						 * Getter returns an array of this node's child nodes.
						 * @see #protoElementIds
						 */
						attribute SchemeProtoElementSeq protoElements;
						attribute wstring label;

						SchemeProtoElement cloneInstance();

						factory newInstance();
					};

					valuetype SchemeElement:
							AbstractSchemeElement,
							resource::SchemeCellContainer,
							configuration::ComSyrusAmficomConfigurationSchemeElement {
						/**
						 * May be empty. Probably is subject removal (see {@link #equipmentTypeId}).
						 */
						private general::corba::Identifier schemeProtoElementId;
						/**
						 * Value is either taken from entity pointed to by {@link #schemeProtoElementId} or assigned directly.
						 */
						private general::corba::Identifier equipmentTypeId;
						private general::corba::Identifier equipmentId;
						private general::corba::Identifier rtuId;
						private general::corba::IdentifierSeq schemeDeviceIds;
						private general::corba::IdentifierSeq schemeLinkIds;
						private general::corba::IdentifierSeq schemeElementIds;
						private general::corba::Identifier internalSchemeId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private general::corba::Identifier siteId;
						private general::corba::Identifier symbolId;

						attribute SchemeProtoElement schemeProtoElement;
						attribute SchemeDeviceSeq schemeDevices;
						attribute SchemeLinkSeq schemeLinks;
						/**
						 * Getter returns only elements enclosed by this scheme element.
						 */
						attribute SchemeElementSeq schemeElements;
						/**
						 * Getter/setter pair for internalScheme property.
						 */
						attribute Scheme internalScheme;
						attribute CORBA::Map::MapSiteElement site;

						SchemeElement cloneInstance();

						factory newInstance();

						/**
						 * Transient attribute.
						 */
						attribute SchemePath alarmedPath;
						/**
						 * Transient attribute.
						 */
						attribute PathElement alarmedPathElement;
					};

					valuetype SchemeMonitoringSolution:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private double thisPrice;
						private general::corba::IdentifierSeq schemePathIds;

						attribute Scheme scheme;
						attribute double price;
						attribute SchemePathSeq schemePaths;

						SchemeMonitoringSolution cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeMonitoringSolution> SchemeMonitoringSolutionSeq;

					valuetype Scheme:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							resource::SchemeCellContainer,
							configuration::ComSyrusAmficomConfigurationScheme {
						enum Type {
							BUILDING,
							CABLE_SUBNETWORK,
							NETWORK
						};

						private wstring thisName;
						private wstring thisDescription;
						private Type thisType;
						/**
						 * Value is assigned automatically.
						 */
						private general::corba::Identifier ownerId;
						/**
						 * Value is assigned automatically.
						 */
						private general::corba::Identifier domainId;
						private general::corba::IdentifierSeq schemeElementIds;
						private general::corba::IdentifierSeq schemeLinkIds;
						private general::corba::IdentifierSeq schemeCableLinkIds;
						private general::corba::Identifier schemeMonitoringSolutionId;
						private general::corba::Identifier symbolId;
						private wstring thisLabel;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier ugoCellId;
						/**
						 * Takes non-null value at pack time.
						 */
						private general::corba::Identifier schemeCellId;
						private long thisWidth;
						private long thisHeight;
						private general::corba::Identifier mapId;

						attribute Type type;
						attribute SchemeElementSeq schemeElements;
						attribute SchemeLinkSeq schemeLinks;
						attribute SchemeCableLinkSeq schemeCableLinks;
						attribute SchemeMonitoringSolution schemeMonitoringSolution;
						attribute wstring label;
						attribute long width;
						attribute long height;
						attribute CORBA::Map::Map map;

						Scheme cloneInstance();

						factory newInstance();
					};

					typedef sequence<Scheme> SchemeSeq;

					valuetype SchemeProtoGroup:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable,
							resource::SchemeSymbolContainer {
						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier symbolId;
						private general::corba::Identifier parentId;
						private wstring thisSchemeProtoElementClass;
						private general::corba::IdentifierSeq SchemeProtoGroupIds;
						private general::corba::IdentifierSeq SchemeProtoElementIds;

						attribute SchemeProtoGroup parent;
						attribute wstring schemeProtoElementClass;
						attribute SchemeProtoGroupSeq schemeProtoGroups;
						attribute SchemeProtoElementSeq schemeProtoElements;

						SchemeProtoGroup cloneInstance();

						factory newInstance();
					};

					valuetype SchemeOptimizeInfo:
							general::corba::StorableObject,
							general::corba::Namable,
							general::corba::Describable {
						enum OptimizationMode {
							_DEFAULT
						};

						private wstring thisName;
						private wstring thisDescription;
						private general::corba::Identifier schemeId;
						private general::corba::Identifier schemeMonitoringSolutionId;
						private OptimizationMode thisOptimizationMode;
						private double thisIterations;
						private double thisPrice;
						private double thisWavelength;
						private double thisLenMargin;
						private double thisMutationRate;
						private double thisMutationDegree;
						private double thisRtuDeleteProb;
						private double thisRtuCreateProb;
						private double thisNodesSpliceProb;
						private double thisNodesCutProb;
						private double thisSurvivorRate;
						private ::CORBA::DoubleSeq thisReflPrices;
						private ::CORBA::WStringSeq thisReflNames;
						private ::CORBA::DoubleSeq thisReflRanges;
						private ::CORBA::DoubleSeq thisSwitchPrices;
						private ::CORBA::DoubleSeq thisSwitchNports;
						private ::CORBA::WStringSeq thisSwitchNames;

						attribute Scheme scheme;
						attribute SchemeMonitoringSolution schemeMonitoringSolution;
						attribute OptimizationMode optimizationMode;
						attribute double iterations;
						attribute double price;
						attribute double wavelength;
						attribute double lenMargin;
						attribute double mutationRate;
						attribute double mutationDegree;
						attribute double rtuDeleteProb;
						attribute double rtuCreateProb;
						attribute double nodesSpliceProb;
						attribute double nodesCutProb;
						attribute double survivorRate;
						attribute ::CORBA::DoubleSeq reflPrices;
						attribute ::CORBA::WStringSeq reflNames;
						attribute ::CORBA::DoubleSeq reflRanges;
						attribute ::CORBA::DoubleSeq switchPrices;
						attribute ::CORBA::DoubleSeq switchNports;
						attribute ::CORBA::WStringSeq switchNames;

						SchemeOptimizeInfo cloneInstance();

						factory newInstance();
					};

					typedef sequence<SchemeOptimizeInfo> SchemeOptimizeInfoSeq;
				};
			};
		};
	};
};

#endif // SCHEME_VT_IDL
