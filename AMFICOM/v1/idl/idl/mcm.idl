#ifndef MCM_IDL
#define MCM_IDL

#include "measurement.idl"
#include "configuration.idl"

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
module com {
module syrus {
module AMFICOM {
#else // MY_COMPILER_IS_NOT_BRAINDEAD
#pragma prefix "AMFICOM.syrus.com"
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

module mcm {
module corba {

	interface MCM : general::corba::Verifiable {

		void receiveTests(in measurement::corba::TestSeq tests)
			raises (general::corba::AMFICOMRemoteException);

		void abortTests(in general::corba::IdentifierSeq test_ids)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::MeasurementSeq transmitMeasurements(in general::corba::IdentifierSeq ids)
				raises (general::corba::AMFICOMRemoteException);

		measurement::corba::MeasurementSeq transmitMeasurementsButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::AnalysisSeq transmitAnalyses(in general::corba::IdentifierSeq ids)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::AnalysisSeq transmitAnalysesButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::EvaluationSeq transmitEvaluations(in general::corba::IdentifierSeq ids)				
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::EvaluationSeq transmitEvaluationsButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition)
			raises (general::corba::AMFICOMRemoteException);

	};

};
};

#ifndef MY_COMPILER_IS_NOT_BRAINDEAD
};
};
};
#endif // MY_COMPILER_IS_NOT_BRAINDEAD

#endif // MCM_IDL
