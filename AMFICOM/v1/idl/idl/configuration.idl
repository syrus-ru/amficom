/*
 * $Id: configuration.idl,v 1.90 2005/06/21 12:43:33 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef CONFIGURATION_IDL
#define CONFIGURATION_IDL

#include "general.idl"

module com {
module syrus {
module AMFICOM {
module configuration {
module corba {

// Generic interface to Equipment, MonitoredElement, etc
//	abstract interface MonitoredDomainMember_Transferable {
//		attribute general::corba::IdentifierSeq monitored_element_ids;
//
//		void getKIS() raises (general::corba::AMFICOMRemoteException);
//	};


/////////////////////// EquipmentType /////////////////////
	struct EquipmentType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		general::corba::WString128 manufacturer;
		general::corba::WString32 manufacturerCode;
		
		general::corba::IdentifierSeq characteristic_ids;
	};
	
	typedef sequence <EquipmentType_Transferable> EquipmentTypeSeq_Transferable;
	typedef EquipmentType_Transferable EquipmentType;
	typedef sequence<EquipmentType> EquipmentTypeSeq;
	
/////////////////////// TransmissionPathType /////////////////////
	struct TransmissionPathType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		
		general::corba::IdentifierSeq characteristic_ids;
	};
	
	typedef sequence <TransmissionPathType_Transferable> TransmissionPathTypeSeq_Transferable;
	typedef TransmissionPathType_Transferable TransmissionPathType;
	typedef sequence<TransmissionPathType> TransmissionPathTypeSeq;

//////////////////// PortTypeSort ///////////////////
	enum PortTypeSort {
		PORTTYPESORT_OPTICAL,
		PORTTYPESORT_ELECTRICAL,
		PORTTYPESORT_THERMAL
	};

/////////////////////// PortType /////////////////////
	struct PortType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		PortTypeSort sort;
		general::corba::IdentifierSeq characteristic_ids;
	};
	
	typedef sequence <PortType_Transferable> PortTypeSeq_Transferable;
	typedef PortType_Transferable PortType;
	typedef sequence<PortType> PortTypeSeq;

	struct MeasurementPortType_Transferable {
		general::corba::StorableObject header;

		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		
		general::corba::IdentifierSeq characteristic_ids;
	};

	typedef sequence <MeasurementPortType_Transferable> MeasurementPortTypeSeq_Transferable;
	typedef MeasurementPortType_Transferable MeasurementPortType;
	typedef sequence<MeasurementPortType> MeasurementPortTypeSeq;
	
/////////////////////// LinkType /////////////////////	
/*
	enum AbstractLinkTypeSort {
		LINK_TYPE,
		CABLE_LINK_TYPE
	};
*/
	enum LinkTypeSort {
		LINKTYPESORT_OPTICAL_FIBER,
		LINKTYPESORT_ETHERNET,
		LINKTYPESORT_GSM
	};

	struct LinkType_Transferable {
		general::corba::StorableObject header;
	  
		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		LinkTypeSort sort;
		general::corba::WString128 manufacturer;
		general::corba::WString32 manufacturerCode;
		general::corba::Identifier image_id;
		general::corba::IdentifierSeq characteristic_ids;
	};
	typedef sequence<LinkType_Transferable> LinkTypeSeq_Transferable;
	typedef LinkType_Transferable LinkType;
	typedef sequence<LinkType> LinkTypeSeq;


	struct CableLinkType_Transferable {
		general::corba::StorableObject header;
		
		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		LinkTypeSort sort;
		general::corba::WString128 manufacturer;
		general::corba::WString32 manufacturerCode;
		general::corba::Identifier image_id;
		general::corba::IdentifierSeq characteristic_ids;
	};
	typedef sequence<CableLinkType_Transferable> CableLinkTypeSeq_Transferable;
	typedef CableLinkType_Transferable CableLinkType;
	typedef sequence<CableLinkType> CableLinkTypeSeq;

	typedef struct IdlCableThreadType {
		general::corba::StorableObject header;
		
		general::corba::WString32 codename;
		general::corba::WString256 description;
		general::corba::WString128 name;
		
		long color;
		
		general::corba::Identifier linkTypeId;
		general::corba::Identifier cableLinkTypeId;
	} CableThreadType;

	typedef sequence<CableThreadType> CableThreadTypeSeq;
/*
	union AbstractLinkType_Transferable switch (AbstractLinkTypeSort) {
		case LINK_TYPE:
			LinkType_Transferable linkType;
		case CABLE_LINK_TYPE:
			CableLinkType_Transferable cableLinkType;
	};
	
	typedef sequence <AbstractLinkType_Transferable> AbstractLinkTypeSeq_Transferable;	
	typedef AbstractLinkType_Transferable AbstractLinkType;	
	typedef sequence<AbstractLinkType> AbstractLinkTypeSeq;	
*/

///////////////////////// Equipment ///////////////////////
	struct Equipment_Transferable	{
		general::corba::StorableObject header;

		general::corba::Identifier domain_id;

		general::corba::Identifier type_id;

		general::corba::WString128 name;
		general::corba::WString256 description;

		general::corba::WString128 supplier;
		general::corba::WString32 supplierCode;
		
		float longitude;
		float latitude;
		
		general::corba::WString64 hwSerial;
		general::corba::WString64 hwVersion;
		general::corba::WString64 swSerial;
		general::corba::WString64 swVersion;
		general::corba::WString64 inventoryNumber;	
		
		general::corba::Identifier image_id;

		general::corba::IdentifierSeq characteristic_ids;
	};
	
	typedef sequence <Equipment_Transferable> EquipmentSeq_Transferable;
	typedef Equipment_Transferable Equipment;
	typedef sequence<Equipment> EquipmentSeq;

///////////////////// Transmission Path ///////////////////
	struct TransmissionPath_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier domain_id;

		general::corba::WString128 name;
		general::corba::WString256 description;

		general::corba::Identifier type_id;
		general::corba::Identifier start_port_id;
		general::corba::Identifier finish_port_id;
		
		general::corba::IdentifierSeq characteristic_ids;

	};
	
	typedef sequence <TransmissionPath_Transferable> TransmissionPathSeq_Transferable;
	typedef TransmissionPath_Transferable TransmissionPath;
	typedef sequence<TransmissionPath> TransmissionPathSeq;

/////////////////////////////// Port ////////////////////////////////
	enum PortSort {
		PORT_SORT_PORT,
		PORT_SORT_CABLE_PORT
	};

	struct Port_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::WString256 description;
		general::corba::Identifier equipment_id;

		PortSort sort;
		general::corba::IdentifierSeq characteristic_ids;
	};

	typedef sequence <Port_Transferable> PortSeq_Transferable;
	typedef Port_Transferable Port;
	typedef sequence<Port> PortSeq;

//////////////////////////////// KIS ////////////////////////////////
	struct KIS_Transferable	{
		general::corba::StorableObject header;

		general::corba::Identifier domain_id;

		general::corba::WString128 name;
		general::corba::WString256 description;
		general::corba::WString64 hostname;
		short tcp_port;
		general::corba::Identifier equipment_id;
		general::corba::Identifier mcm_id;
		general::corba::IdentifierSeq characteristic_ids;
	};
	
	typedef sequence <KIS_Transferable> KISSeq_Transferable;
	typedef KIS_Transferable Rtu;
	typedef sequence<Rtu> RtuSeq;

////////////////////////// MeasurementPort ///////////////////////////
	struct MeasurementPort_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier type_id;
		general::corba::WString128 name;
		general::corba::WString256 description;
		general::corba::Identifier kis_id;
		general::corba::Identifier port_id;
		general::corba::IdentifierSeq characteristic_ids;
	};

	typedef sequence <MeasurementPort_Transferable> MeasurementPortSeq_Transferable;
	typedef MeasurementPort_Transferable MeasurementPort;
	typedef sequence<MeasurementPort> MeasurementPortSeq;

///////////////////// Monitored Element ///////////////////
	enum MonitoredElementSort {
		MONITOREDELEMENT_SORT_LINK,
		MONITOREDELEMENT_SORT_TRANSMISSION_PATH,
		MONITOREDELEMENT_SORT_EQUIPMENT,
		MONITOREDELEMENT_SORT_PORT,
		MONITOREDELEMENT_SORT_CABLEPORT
	};

	struct MonitoredElement_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier domain_id;
		
		general::corba::WString128 name;
		general::corba::Identifier measurement_port_id;
		MonitoredElementSort sort;
		general::corba::WString64 local_address;

		general::corba::IdentifierSeq monitored_domain_member_ids;
	};

	typedef sequence <MonitoredElement_Transferable> MonitoredElementSeq_Transferable;

///////////////////// Link /////////////////////
	enum LinkSort{
		LINKSORT_LINK,
		LINKSORT_CABLELINK
	};

	struct Link_Transferable {
		general::corba::StorableObject header;

		general::corba::Identifier domain_id;
		
		general::corba::WString128 name;
		general::corba::WString256 description;
		general::corba::Identifier type_id;		
		
		LinkSort sort;		
		
		wstring inventoryNo;
		general::corba::WString128 supplier;
		general::corba::WString32 supplierCode;
		
		long color;
		general::corba::WString32 mark;
		general::corba::IdentifierSeq characteristic_ids;		
	};

	typedef sequence <Link_Transferable> LinkSeq_Transferable;
	typedef Link_Transferable Link;
	typedef sequence<Link> LinkSeq;
	
///////////////////// CableThread /////////////////////
	typedef struct IdlCableThread {
		general::corba::StorableObject header;
		general::corba::Identifier domainId;
		
		general::corba::WString128 name;
		general::corba::WString256 description;
		general::corba::Identifier _typeId;		
	} CableThread;

	typedef sequence <CableThread> CableThreadSeq;
};
};
};
};
};

#endif

