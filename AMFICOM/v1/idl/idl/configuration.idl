/*
 * $Id: configuration.idl,v 1.75 2004/12/28 13:51:06 arseniy Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef CONFIGURATION_IDL
#define CONFIGURATION_IDL

#include "general.idl"

module com {
module syrus {
module AMFICOM {
module configuration {
module corba {

// Generic interface to Equipment, MonitoredElement, etc
//	abstract interface MonitoredDomainMember_Transferable {
//		attribute com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;
//
//		void getKIS() raises (com::syrus::AMFICOM::general::corba::AMFICOMRemoteException);
//	};


//////////////////// AccessIdentifier ///////////////////
	struct AccessIdentifier_Transferable {
		long long started;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable user_id;		
		com::syrus::AMFICOM::general::corba::Identifier_Transferable session_id;
	};

//////////////////// CharacteristicType ///////////////////

	enum CharacteristicTypeSort {
		CHARACTERISTICTYPESORT_OPTICAL,
		CHARACTERISTICTYPESORT_ELECTRICAL,
		CHARACTERISTICTYPESORT_OPERATIONAL,
		CHARACTERISTICTYPESORT_INTERFACE,
		CHARACTERISTICTYPESORT_VISUAL
	};

	struct CharacteristicType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		wstring codename;
		wstring description;
		com::syrus::AMFICOM::general::corba::DataType data_type;
		CharacteristicTypeSort sort;
	};

	typedef sequence <CharacteristicType_Transferable> CharacteristicTypeSeq_Transferable;

/////////////////////// EquipmentType /////////////////////
	struct EquipmentType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString128 manufacturer;
		com::syrus::AMFICOM::general::corba::WString32 manufacturerCode;
		
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	
	typedef sequence <EquipmentType_Transferable> EquipmentTypeSeq_Transferable;
	typedef EquipmentType_Transferable EquipmentType;
	typedef sequence<EquipmentType> EquipmentTypeSeq;
	
/////////////////////// TransmissionPathType /////////////////////
	struct TransmissionPathType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	
	typedef sequence <TransmissionPathType_Transferable> TransmissionPathTypeSeq_Transferable;
	typedef TransmissionPathType_Transferable TransmissionPathType;
	typedef sequence<TransmissionPathType> TransmissionPathTypeSeq;

//////////////////// PortTypeSort ///////////////////
	enum PortTypeSort {
		PORTTYPESORT_OPTICAL,
		PORTTYPESORT_ELECTRICAL,
		PORTTYPESORT_THERMAL
	};

/////////////////////// PortType /////////////////////
	struct PortType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		PortTypeSort sort;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	
	typedef sequence <PortType_Transferable> PortTypeSeq_Transferable;
	typedef PortType_Transferable PortType;
	typedef sequence<PortType> PortTypeSeq;

	struct MeasurementPortType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};

	typedef sequence <MeasurementPortType_Transferable> MeasurementPortTypeSeq_Transferable;
	typedef MeasurementPortType_Transferable MeasurementPortType;
	typedef sequence<MeasurementPortType> MeasurementPortTypeSeq;
	
/////////////////////// LinkType /////////////////////	
	enum AbstractLinkTypeSort {
		LINK_TYPE,
		CABLE_LINK_TYPE
	};

	enum LinkTypeSort {
		LINKTYPESORT_OPTICAL_FIBER,
		LINKTYPESORT_ETHERNET,
		LINKTYPESORT_GSM
	};

	struct LinkType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;
	  
		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		LinkTypeSort sort;
		com::syrus::AMFICOM::general::corba::WString128 manufacturer;
		com::syrus::AMFICOM::general::corba::WString32 manufacturerCode;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable image_id;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	typedef sequence<LinkType_Transferable> LinkTypeSeq_Transferable;
	typedef LinkType_Transferable LinkType;
	typedef sequence<LinkType> LinkTypeSeq;


	struct CableLinkType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;
		
		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		LinkTypeSort sort;
		com::syrus::AMFICOM::general::corba::WString128 manufacturer;
		com::syrus::AMFICOM::general::corba::WString32 manufacturerCode;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable image_id;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
		
		general::corba::IdentifierSeq_Transferable cableThreadTypeIds;
	};
	typedef sequence<CableLinkType_Transferable> CableLinkTypeSeq_Transferable;
	typedef CableLinkType_Transferable CableLinkType;
	typedef sequence<CableLinkType> CableLinkTypeSeq;

	struct CableThreadType_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;
		
		com::syrus::AMFICOM::general::corba::WString32 codename;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 name;
		
		long color;
		
		general::corba::Identifier_Transferable linkTypeId;
	};
	typedef sequence<CableThreadType_Transferable> CableThreadTypeSeq_Transferable;
	typedef CableThreadType_Transferable CableThreadType;
	typedef sequence<CableThreadType> CableThreadTypeSeq;

	union AbstractLinkType_Transferable switch (AbstractLinkTypeSort) {
		case LINK_TYPE:
			LinkType_Transferable linkType;
		case CABLE_LINK_TYPE:
			CableLinkType_Transferable cableLinkType;
	};
	
	typedef sequence <AbstractLinkType_Transferable> AbstractLinkTypeSeq_Transferable;	
	typedef AbstractLinkType_Transferable AbstractLinkType;	
	typedef sequence<AbstractLinkType> AbstractLinkTypeSeq;	

//////////////////////////////////// User /////////////////////////////////
	enum UserSort {
		USER_SORT_SYSADMIN,
		USER_SORT_REGULAR,
		USER_SORT_SERVER,
		USER_SORT_MCM
	};

	struct User_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;
	
		com::syrus::AMFICOM::general::corba::WString32 login;
		UserSort sort;
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
	};
	
	typedef sequence <User_Transferable> UserSeq_Transferable;
	typedef User_Transferable User;
	typedef sequence<User> UserSeq;
	
	/////////////////////////////////// Domain ////////////////////////////////
	struct Domain_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	
	typedef sequence <Domain_Transferable> DomainSeq_Transferable;
	typedef Domain_Transferable Domain;
	typedef sequence<Domain> DomainSeq;

/////////////////////////////////// Server ////////////////////////////////
	struct Server_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable user_id;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};

	typedef sequence <Server_Transferable> ServerSeq_Transferable;
	
//////////////////////////////////// MCM //////////////////////////////////
	struct MCM_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable user_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable server_id;
		short tcp_port;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable kis_ids;
	};
	
	typedef sequence <MCM_Transferable> MCMSeq_Transferable;

////////////////////// Characteristic /////////////////////
	enum CharacteristicSort {
		CHARACTERISTIC_SORT_DOMAIN,
		CHARACTERISTIC_SORT_SERVER,
		CHARACTERISTIC_SORT_MCM,
		CHARACTERISTIC_SORT_TRANSMISSIONPATH,
		CHARACTERISTIC_SORT_EQUIPMENT,
		CHARACTERISTIC_SORT_PORT,
		CHARACTERISTIC_SORT_CABLEPORT,
		CHARACTERISTIC_SORT_MEASUREMENTPORT,
		CHARACTERISTIC_SORT_MONITORINGPORT,
		CHARACTERISTIC_SORT_LINK,
		CHARACTERISTIC_SORT_CABLELINK,
		CHARACTERISTIC_SORT_CABLELINKTYPE,
		CHARACTERISTIC_SORT_KIS,
		CHARACTERISTIC_SORT_EQUIPMENTTYPE,
		CHARACTERISTIC_SORT_PORTTYPE,
		CHARACTERISTIC_SORT_MEASUREMENTPORTTYPE,
		CHARACTERISTIC_SORT_TRANSMISSIONPATHTYPE,
		CHARACTERISTIC_SORT_LINKTYPE,
		CHARACTERISTIC_SORT_SCHEMECABLELINK,
		CHARACTERISTIC_SORT_SCHEMECABLEPORT,
		CHARACTERISTIC_SORT_SCHEMECABLETHREAD,
		CHARACTERISTIC_SORT_SCHEMEDEVICE,
		CHARACTERISTIC_SORT_SCHEMEELEMENT,
		CHARACTERISTIC_SORT_SCHEMELINK,
		CHARACTERISTIC_SORT_SCHEMEPATH,
		CHARACTERISTIC_SORT_SCHEMEPORT,
		CHARACTERISTIC_SORT_SCHEMEPROTOELEMENT,
		CHARACTERISTIC_SORT_COLLECTOR,
		CHARACTERISTIC_SORT_MARK,
		CHARACTERISTIC_SORT_NODE_LINK,
		CHARACTERISTIC_SORT_PHYSICAL_LINK,
		CHARACTERISTIC_SORT_PHYSICAL_LINK_TYPE,
		CHARACTERISTIC_SORT_TOPOLOGICAL_NODE,
		CHARACTERISTIC_SORT_SITE_NODE,
		CHARACTERISTIC_SORT_SITE_NODE_TYPE
	};

	struct Characteristic_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		CharacteristicSort sort;
		com::syrus::AMFICOM::general::corba::WString256 value;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable characterized_id;
		boolean is_editable;
		boolean is_visible;
		
	};

	typedef sequence <Characteristic_Transferable> CharacteristicSeq_Transferable;
	typedef Characteristic_Transferable Characteristic;
	typedef sequence<Characteristic> CharacteristicSeq;

///////////////////////// Equipment ///////////////////////
	struct Equipment_Transferable	{
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString128 supplier;
		com::syrus::AMFICOM::general::corba::WString32 supplierCode;
		
		float longitude;
		float latitude;
		
		wstring hwSerial;
		wstring hwVersion;
		wstring swSerial;
		wstring swVersion;
		wstring inventoryNumber;	
		
		com::syrus::AMFICOM::general::corba::Identifier_Transferable image_id;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable port_ids;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};
	
	typedef sequence <Equipment_Transferable> EquipmentSeq_Transferable;
	typedef Equipment_Transferable Equipment;
	typedef sequence<Equipment> EquipmentSeq;

///////////////////// Transmission Path ///////////////////
	struct TransmissionPath_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_element_ids;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable start_port_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable finish_port_id;
		
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;

	};
	
	typedef sequence <TransmissionPath_Transferable> TransmissionPathSeq_Transferable;
	typedef TransmissionPath_Transferable TransmissionPath;
	typedef sequence<TransmissionPath> TransmissionPathSeq;

/////////////////////////////// Port ////////////////////////////////
	enum PortSort {
		PORT_SORT_PORT,
		PORT_SORT_CABLE_PORT
	};

	struct Port_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		wstring description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable equipment_id;

		PortSort sort;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};

	typedef sequence <Port_Transferable> PortSeq_Transferable;
	typedef Port_Transferable Port;
	typedef sequence<Port> PortSeq;

//////////////////////////////// KIS ////////////////////////////////
	struct KIS_Transferable	{
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;

		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::WString64 hostname;
		short tcp_port;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable equipment_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable mcm_id;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable measurement_port_ids;
	};
	
	typedef sequence <KIS_Transferable> KISSeq_Transferable;
	typedef KIS_Transferable Rtu;
	typedef sequence<Rtu> RtuSeq;

////////////////////////// MeasurementPort ///////////////////////////
	struct MeasurementPort_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable kis_id;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable port_id;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;
	};

	typedef sequence <MeasurementPort_Transferable> MeasurementPortSeq_Transferable;
	typedef MeasurementPort_Transferable MeasurementPort;
	typedef sequence<MeasurementPort> MeasurementPortSeq;

///////////////////// Monitored Element ///////////////////
	enum MonitoredElementSort {
		MONITOREDELEMENT_SORT_LINK,
		MONITOREDELEMENT_SORT_TRANSMISSION_PATH,
		MONITOREDELEMENT_SORT_EQUIPMENT,
		MONITOREDELEMENT_SORT_PORT,
		MONITOREDELEMENT_SORT_CABLEPORT
	};

	struct MonitoredElement_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
		
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable measurement_port_id;
		MonitoredElementSort sort;
		com::syrus::AMFICOM::general::corba::WString64 local_address;

		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable monitored_domain_member_ids;
	};

	typedef sequence <MonitoredElement_Transferable> MonitoredElementSeq_Transferable;

///////////////////// Link /////////////////////
	enum LinkSort{
		LINKSORT_LINK,
		LINKSORT_CABLELINK		
	};

	struct Link_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;

		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
		
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;		
		
		LinkSort sort;		
		
		wstring inventoryNo;
		com::syrus::AMFICOM::general::corba::WString128 supplier;
		com::syrus::AMFICOM::general::corba::WString32 supplierCode;
		
		long color;
		com::syrus::AMFICOM::general::corba::WString32 mark;
		com::syrus::AMFICOM::general::corba::IdentifierSeq_Transferable characteristic_ids;		
	};

	typedef sequence <Link_Transferable> LinkSeq_Transferable;
	typedef Link_Transferable Link;
	typedef sequence<Link> LinkSeq;
	
///////////////////// CableThread /////////////////////
	struct CableThread_Transferable {
		com::syrus::AMFICOM::general::corba::StorableObject_Transferable header;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
		
		com::syrus::AMFICOM::general::corba::WString128 name;
		com::syrus::AMFICOM::general::corba::WString256 description;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable type_id;		
	};

	typedef sequence <CableThread_Transferable> CableThreadSeq_Transferable;
	typedef CableThread_Transferable CableThread;
	typedef sequence<Link> CableThreadSeq;
//////////////// Conditions //////////////

	struct DomainCondition_Transferable {
		short	entity_code;
		com::syrus::AMFICOM::general::corba::Identifier_Transferable domain_id;
	};
	
};
};
};
};
};

#endif

