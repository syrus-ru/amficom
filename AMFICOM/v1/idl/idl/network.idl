/*
 * $Id: network.idl,v 1.10 2004/10/05 11:11:52 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef NETWORK_IDL
#define NETWORK_IDL

#include <streams.idl>

#include "general.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module Network
{
	struct Port_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring _typeId;
		wstring interfaceId;
		wstring addressId;
		wstring localId;
		wstring equipmentId;
		wstring domainId;
#ifndef SERVER
		long long modified;
#endif

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <Port_Transferable> PortSeq_Transferable;

	struct CablePort_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring _typeId;
		wstring interfaceId;
		wstring addressId;
		wstring localId;
		wstring equipmentId;
		wstring domainId;
#ifndef SERVER
		long long modified;
#endif

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CablePort_Transferable> CablePortSeq_Transferable;

	struct Equipment_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring _typeId;

		wstring longitude;
		wstring latitude;

		wstring hwSerial;
		wstring swSerial;
		wstring hwVersion;
		wstring swVersion;
		wstring inventoryNr;
		wstring manufacturer;
		wstring manufacturerCode;
		wstring supplier;
		wstring supplierCode;
#ifndef SERVER
		wstring constructor;
		wstring constructorCode;
#endif

		wstring eqClass;

		wstring domainId;

		wstring imageId;

#ifdef SERVER
		wstring agentId;
		boolean is_kis;
#endif
		long long modified;

#ifdef SERVER
		::CORBA::WStringSeq port_ids;
		::CORBA::WStringSeq cport_ids;
		::CORBA::WStringSeq s_port_ids;
#endif
		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <Equipment_Transferable> EquipmentSeq_Transferable;

	struct Link_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring _typeId;

		wstring inventoryNr;
		wstring manufacturer;
		wstring manufacturerCode;
		wstring supplier;
		wstring supplierCode;

#ifdef SERVER
		wstring link_class;
		wstring image_id;
		wstring start_equipment_id;
		wstring start_port_id;
		wstring end_equipment_id;
		wstring end_port_id;
#endif
		wstring domainId;

		long long modified;

#ifdef SERVER
		wstring physical_length;
		wstring optical_length;
#endif
		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <Link_Transferable> LinkSeq_Transferable;

	struct CableLinkThread_Transferable
	{
		wstring id;
		wstring name;
		wstring color;
		wstring mark;
		wstring linkTypeId;
	};
	typedef sequence <CableLinkThread_Transferable> CableLinkThreadSeq_Transferable;

	struct CableLink_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring _typeId;

		wstring inventoryNr;
		wstring manufacturer;
		wstring manufacturerCode;
		wstring supplier;
		wstring supplierCode;
#ifdef SERVER
		wstring link_class;
#else
		wstring constructor;
		wstring constructorCode;
#endif

		wstring imageId;

#ifdef SERVER
		wstring start_equipment_id;
		wstring start_port_id;
		wstring end_equipment_id;
		wstring end_port_id;
#endif
		wstring domainId;

		long long modified;

#ifdef SERVER
		wstring physical_length;
		wstring optical_length;
		CableLinkThreadSeq_Transferable threads;
#endif
		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CableLink_Transferable> CableLinkSeq_Transferable;
};

module NetworkDirectory
{
	struct EquipmentType_Transferable
	{
		wstring id;
		wstring name;
#ifdef SERVER
		wstring codename;
#endif
		wstring description;
		wstring manufacturer;
#ifndef SERVER
		wstring manufacturerCode;
#endif
		wstring eqClass;
#ifdef SERVER
		boolean is_holder;
#endif

		wstring imageId;
		long long modified;

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <EquipmentType_Transferable> EquipmentTypeSeq_Transferable;

	struct PortType_Transferable
	{
		wstring id;
		wstring name;
#ifdef SERVER
		wstring codename;
#endif
		wstring description;
#ifdef SERVER
		wstring year;
		wstring body;
		wstring standard;
#endif
		wstring interfaceId;
		wstring pClass;

#ifndef SERVER
		wstring imageId;
#endif
		long long modified;

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <PortType_Transferable> PortTypeSeq_Transferable;

	struct CablePortType_Transferable
	{
		wstring id;
		wstring name;
#ifdef SERVER
		wstring codename;
#endif
		wstring description;
#ifdef SERVER
		wstring year;
		wstring body;
		wstring standard;
#endif
		wstring interfaceId;
		wstring pClass;

#ifndef SERVER
		wstring imageId;
#endif
		long long modified;

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CablePortType_Transferable> CablePortTypeSeq_Transferable;

	struct LinkType_Transferable
	{
		wstring id;
		wstring name;
#ifdef SERVER
		wstring codename;
#endif
		wstring description;
#ifdef SERVER
		wstring year;
		wstring standard;
#endif
		wstring linkClass;
		wstring manufacturer;
		wstring manufacturerCode;
#ifdef SERVER
		boolean is_holder;
#endif

		wstring imageId;
		long long modified;

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <LinkType_Transferable> LinkTypeSeq_Transferable;

	struct CableTypeThread_Transferable
	{
		wstring id;
		wstring name;
		wstring color;
		wstring mark;
		wstring linkTypeId;
#ifdef SERVER
		General::CharacteristicSeq_Transferable characteristics;
#endif
	};
	typedef sequence <CableTypeThread_Transferable> CableTypeThreadSeq_Transferable;

	struct CableLinkType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring linkClass;
		wstring manufacturer;
		wstring manufacturerCode;

		wstring imageId;
		long long modified;

		CableTypeThreadSeq_Transferable cableThreads;

		General::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CableLinkType_Transferable> CableLinkTypeSeq_Transferable;
};
};
};
};
};

#endif
