//////////////////////////////////////////////////////////////////////////////
// *                                                                      * //
// * Syrus Systems                                                        * //
// * Департамент Системных Исследований и Разработок                      * //
// *                                                                      * //
// * Проект: АМФИКОМ - система Автоматизированного Многофункционального   * //
// *         Интеллектуального Контроля и Объектного Мониторинга          * //
// *                                                                      * //
// *         реализация Интегрированной Системы Мониторинга               * //
// *                                                                      * //
// * Название: Реализация серверной части интерфейса прототипа РИСД       * //
// *           (включает реализацию пакета pmServer и класса pmRISDImpl)  * //
// * Тип: Java 1.2.2                                                      * //
// *                                                                      * //
// * Автор: Крупенников А.В.                                              * //
// *                                                                      * //
// * Версия: 0.1                                                          * //
// * От: 22 jan 2002                                                      * //
// * Расположение: ISM\prog\java\AMFICOMConfigure\                        * //
// *        com\syrus\AMFICOM\Client\Configure\ISM\AccessPoint.java       * //
// *                                                                      * //
// * Компилятор: Oracle JDeveloper (javac)                                * //
// *                                                                      * //
// * Статус: разработка                                                   * //
// *                                                                      * //
// * Изменения:                                                           * //
// *  Кем         Верс   Когда      Комментарии                           * //
// * -----------  ----- ---------- -------------------------------------- * //
// *                                                                      * //
// * Описание:                                                            * //
// *                                                                      * //
//////////////////////////////////////////////////////////////////////////////

#ifndef _network_idl_
#define _network_idl_

#include <general.idl>

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{

module Network
{
	struct Characteristic_Transferable
	{
		wstring id;
		wstring ch_class;
		wstring name;
		wstring description;
		wstring type_id;
		wstring value;
		wstring value_type_id;
	};
	typedef sequence <Characteristic_Transferable> CharacteristicSeq_Transferable;

	struct Port_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring interface_id;
		wstring address_id;
		wstring local_id;
		wstring type_id;
		wstring equipment_id;
		wstring domain_id;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <Port_Transferable> PortSeq_Transferable;

	struct CablePort_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring interface_id;
		wstring address_id;
		wstring local_id;
		wstring type_id;
		wstring equipment_id;
		wstring domain_id;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CablePort_Transferable> CablePortSeq_Transferable;
/*
	struct EquipmentHolderSlot_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring hw_serial;
		wstring sw_serial;
		wstring longitude;
		wstring latitude;
		wstring description;
		wstring slot_interface;
		wstring size;
		wstring inventory_nr;

		PortSeq_Transferable ports;
	};
	typedef sequence <EquipmentHolderSlot_Transferable> EquipmentHolderSlotSeq_Transferable;
*/
	struct Equipment_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring type_id;

		wstring longitude;
		wstring latitude;

		wstring hw_serial;
		wstring sw_serial;
		wstring hw_version;
		wstring sw_version;
		wstring inventory_nr;
		wstring manufacturer;
		wstring manufacturer_code;
		wstring supplier;
		wstring supplier_code;

		wstring eq_class;
		wstring image_id;

		wstring agent_id;
		wstring domain_id;
		boolean is_kis;
		long long modified;

		General::wstringSeq port_ids;
		General::wstringSeq cport_ids;
		General::wstringSeq s_port_ids;

		CharacteristicSeq_Transferable characteristics;

	};
	typedef sequence <Equipment_Transferable> EquipmentSeq_Transferable;

	struct Link_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring description;

		wstring inventory_nr;
		wstring manufacturer;
		wstring manufacturer_code;
		wstring supplier;
		wstring supplier_code;

		wstring link_class;
		wstring image_id;

		wstring start_equipment_id;
		wstring start_port_id;
		wstring end_equipment_id;
		wstring end_port_id;
		wstring domain_id;

		long long modified;

		wstring physical_length;
		wstring optical_length;
		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <Link_Transferable> LinkSeq_Transferable;

	struct CableLinkThread_Transferable
	{
		wstring id;
		wstring name;
		wstring color;
		wstring mark;
		wstring link_type_id;
	};
	typedef sequence <CableLinkThread_Transferable> CableLinkThreadSeq_Transferable;

	struct CableLink_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring description;

		wstring inventory_nr;
		wstring manufacturer;
		wstring manufacturer_code;
		wstring supplier;
		wstring supplier_code;

		wstring link_class;
		wstring image_id;

		wstring start_equipment_id;
		wstring start_port_id;
		wstring end_equipment_id;
		wstring end_port_id;
		wstring domain_id;

		long long modified;

		wstring physical_length;
		wstring optical_length;
		CableLinkThreadSeq_Transferable threads;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CableLink_Transferable> CableLinkSeq_Transferable;

	struct TestPort_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring equipment_id;
		wstring port_id;

		CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <TestPort_Transferable> TestPortSeq_Transferable;
/*
	struct TestPortGroup_Transferable
	{
		wstring id;
		wstring name;
		General::wstringSeq test_port_ids;
		TestPortSeq_Transferable test_ports;
	};
*/
};

module NetworkDirectory
{
// catalogue
	struct CharacteristicType_Transferable
	{
		wstring id;
		wstring ch_class;
		wstring name;
		wstring description;
		wstring value_type_id;
		boolean editable;
		boolean visible;
		long long modified;
	};
	typedef sequence <CharacteristicType_Transferable> CharacteristicTypeSeq_Transferable;
/*

	struct Technology_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring abbreviation;
		wstring year;
	};
	typedef sequence <Technology_Transferable> TechnologySeq_Transferable;

	struct Media_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring year;
		wstring body;
		wstring standard;
	};
	typedef sequence <Media_Transferable> MediaSeq_Transferable;

	struct Protocol_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring codename;
		wstring year;
		wstring body;
		wstring standard;
		wstring id_format;
		wstring layer_id;
	};
	typedef sequence <Protocol_Transferable> ProtocolSeq_Transferable;

	struct ProtocolStack_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring year;
		wstring body;
		wstring standard;
		ProtocolSeq_Transferable protocols;
	};
	typedef sequence <ProtocolStack_Transferable> ProtocolStackSeq_Transferable;

	struct Interface_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring codename;
		wstring protocol_stack_id;

		wstring year;
		wstring type_id;//GII
		wstring technology_id;
	};
	typedef sequence <Interface_Transferable> InterfaceSeq_Transferable;

	struct AddressType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring codename;
		wstring year;
		wstring body;
		wstring standard;
		wstring format;
		wstring protocol_id;
	};
	typedef sequence <AddressType_Transferable> AddressTypeSeq_Transferable;
*/
	struct LinkType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring year;
		wstring standard;
		wstring link_class;
		wstring manufacturer;
		wstring manufacturer_code;
		boolean is_holder;

		wstring image_id;
		long long modified;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <LinkType_Transferable> LinkTypeSeq_Transferable;

	struct EquipmentType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring manufacturer;
		wstring eq_class;
		boolean is_holder;

		wstring image_id;
		long long modified;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <EquipmentType_Transferable> EquipmentTypeSeq_Transferable;

	struct PortType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring year;
		wstring body;
		wstring standard;
		wstring interface_id;
		wstring p_class;
		long long modified;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <PortType_Transferable> PortTypeSeq_Transferable;

	struct TestPortType_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring port_type_id;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <TestPortType_Transferable> TestPortTypeSeq_Transferable;

	struct CablePortType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring year;
		wstring body;
		wstring standard;
		wstring interface_id;
		wstring p_class;
		long long modified;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CablePortType_Transferable> CablePortTypeSeq_Transferable;

	struct CableTypeThread_Transferable
	{
		wstring id;
		wstring name;
		wstring color;
		wstring mark;
		wstring link_type_id;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CableTypeThread_Transferable> CableTypeThreadSeq_Transferable;

	struct CableLinkType_Transferable
	{
		wstring id;
		wstring name;
		wstring codename;
		wstring link_class;
		wstring manufacturer;
		wstring manufacturer_code;

		wstring image_id;
		long long modified;

		CableTypeThreadSeq_Transferable cable_threads;

		Network::CharacteristicSeq_Transferable characteristics;
	};
	typedef sequence <CableLinkType_Transferable> CableLinkTypeSeq_Transferable;

/*
	struct NetworkResource_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
	};
	typedef sequence <NetworkResource_Transferable> NetworkResourceSeq_Transferable;
*/
/*
	struct EquipmentHolderSlotType_Transferable
	{
		wstring id;
		wstring name;
		wstring type;
		wstring hw_serial;
		wstring sw_serial;
		wstring longitude;
		wstring latitude;
		wstring description;

//		PortSeq_Transferable ports;
	};
	typedef sequence <EquipmentHolderSlotType_Transferable> EquipmentHolderSlotTypeSeq_Transferable;
*/
/*
	struct LinkHolderType_Transferable
	{
		wstring id;
		wstring name;
		wstring type;
		wstring description;

//		Equipment_Transferable start_equipment;
//		Port_Transferable start_port;
//		Equipment_Transferable end_equipment;
//		Port_Transferable end_port;
	};
	typedef sequence <LinkHolderType_Transferable> LinkHolderTypeSeq_Transferable;
*/
};
};
};
};
};

#endif
