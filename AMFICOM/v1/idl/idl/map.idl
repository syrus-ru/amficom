/*-
 * $Id: map.idl,v 1.16 2005/05/18 10:55:20 bass Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef MAP_IDL
#define MAP_IDL

#include "configuration.idl"
#include "resource.idl"

module com {
	module syrus {
		module AMFICOM {
			module map {
				module corba {
				
					// was MapNodeProtoElement
					// MapNodeProtoElement is node type
					
					struct SiteNodeType_Transferable {
							general::corba::StorableObject header;
							
							wstring codename;
							wstring name;
							wstring description;
							
							general::corba::Identifier imageId;
							boolean topological;
							general::corba::IdentifierSeq characteristicIds;
					};
					typedef sequence<SiteNodeType_Transferable> SiteNodeTypeSeq_Transferable;
				
					// was MapLinkProtoElement
					// MapLinkProtoElement is physical line type such as tunnel, subway
					struct PhysicalLinkType_Transferable {
							general::corba::StorableObject header;							

							wstring codename;
							wstring name;
							wstring description;
							
							long dimensionX;
							long dimensionY;
							
							general::corba::IdentifierSeq characteristicIds;
					};
					typedef sequence<PhysicalLinkType_Transferable> PhysicalLinkTypeSeq_Transferable;
					
					enum AbstractNodeSort {
							NODE_SORT_SITE,
							NODE_SORT_TOPOLOGICAL
						};
					
					// was MapSiteElement
					// MapSiteElement is node
					struct SiteNode_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;
							
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor
							
							general::corba::Identifier imageId;
							general::corba::Identifier siteNodeTypeId;			
							//SiteNodeType siteNodeType;
							
							wstring city;
							wstring street;
							wstring building;

							general::corba::IdentifierSeq characteristicIds;				
					};

					typedef sequence<SiteNode_Transferable> SiteNodeSeq_Transferable;
					typedef SiteNode_Transferable SiteNode;
					typedef sequence<SiteNode> SiteNodeSeq;

					// was MapPhysicalNodeElement
					// MapPhysicalNodeElement is topological node
					struct TopologicalNode_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;
							
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor

							general::corba::Identifier physicalLinkId;
							//PhysicalLink physicalLink;

							boolean active;

							general::corba::IdentifierSeq characteristicIds;
					};
					
					typedef sequence<TopologicalNode_Transferable> TopologicalNodeSeq_Transferable;
					
					union AbstractNode_Transferable switch (AbstractNodeSort) {
						case NODE_SORT_SITE:
							SiteNode_Transferable siteNode;
						case NODE_SORT_TOPOLOGICAL:
							TopologicalNode_Transferable topologicalNode;
					};
					
					// was MapNodeLinkElement
					// MapNodeLinkElement is map item, line fragment
					
					struct NodeLink_Transferable {
							general::corba::StorableObject header;

							wstring name;

							general::corba::Identifier physicalLinkId;
							//PhysicalLink physicalLink;

							general::corba::Identifier startNodeId;
							//Node startNode;
							general::corba::Identifier endNodeId;
							//Node endNode;							

							double length;
							
							general::corba::IdentifierSeq characteristicIds;							
					};
					
					typedef sequence<NodeLink_Transferable> NodeLinkSeq_Transferable;
					
					// was MapMarkElement
					// MapMarkElement is mark, have coordinates and bound to subway (MapLink) by distance
					struct Mark_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;
							// was wstring
							double  longitude;		// anchor
							// was wstring
							double latitude;		// anchor
							
							general::corba::Identifier physicalLinkId;
							//PhysicalLink physicalLink;

							double distance;

							wstring city;
							wstring street;
							wstring building;
							
							general::corba::IdentifierSeq characteristicIds;
					};
					typedef sequence<Mark_Transferable> MarkSeq_Transferable;
					
						// was MapPhysicalLinkElement
					// MapPhysicalLinkElement is line item
					struct PhysicalLink_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;
							
							general::corba::Identifier physicalLinkTypeId;
							//PhysicalLineType physicalLinkType;

							general::corba::Identifier startNodeId;
							//Node startNode;
							general::corba::Identifier endNodeId;
							//Node endNode;

							wstring city;
							wstring street;
							wstring building;

							long dimensionX;
							long dimensionY;
							
							boolean leftToRight;
							boolean topToBottom;

							general::corba::IdentifierSeq nodeLinkIds;
							//NodeLinkSeq nodeLinks;

							general::corba::IdentifierSeq characteristicIds;
					};					

					typedef sequence<PhysicalLink_Transferable> PhysicalLinkSeq_Transferable;
					typedef PhysicalLink_Transferable PhysicalLink;
					typedef sequence<PhysicalLink> PhysicalLinkSeq;

					// was MapPipePathElement
					// MapPipePathElement is collector
					struct Collector_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;							
							
							general::corba::IdentifierSeq physicalLinkIds;
							//PhysicalLinkSeq physicalLinks;
							
							general::corba::IdentifierSeq characteristicIds;
					};
					
					typedef sequence<Collector_Transferable> CollectorSeq_Transferable;

					struct Map_Transferable {
							general::corba::StorableObject header;
							
							general::corba::Identifier domain_id;
							
							wstring name;
							wstring description;

							general::corba::IdentifierSeq siteNodeIds;
							//SiteNodeSeq siteNodes;
							general::corba::IdentifierSeq topologicalNodeIds;
							//TopologicalNodeSeq topologicalNodes;
							general::corba::IdentifierSeq nodeLinkIds;
							//NodeLinkSeq nodeLinks;
							general::corba::IdentifierSeq physicalLinkIds;
							//PhysicalLinkSeq physicalLinks;
							general::corba::IdentifierSeq markIds;
							//MarkSeq marks;
							general::corba::IdentifierSeq collectorIds;
							//CollectorSeq collectors;
					};
					
					typedef sequence<Map_Transferable> MapSeq_Transferable;
					typedef Map_Transferable Map;
					typedef sequence<Map> MapSeq;

					struct MapView_Transferable {
							general::corba::StorableObject header;

							general::corba::Identifier domain_id;
							wstring name;
							wstring description;

							double longitude;
							double latitude;
							double scale;
							double defaultScale;

							general::corba::Identifier mapId;
							general::corba::IdentifierSeq schemeIds;
					};
					
				};
			};
		};
	};
};
#endif // MAP_IDL
