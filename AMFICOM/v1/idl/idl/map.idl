/**
 * $Id: map.idl,v 1.6 2004/09/15 10:58:40 krupenn Exp $
 *
 * Syrus Systems
 * Научно-технический центр
 * Проект: АМФИКОМ
 *
 * Платформа: java 1.4.1
*/
#ifndef _map_idl_
#define _map_idl_

#include "general.idl"
#include "scheme.idl"
#include "streams.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{
module Map
{
/*
	struct MapProtoGroup_Transferable
	{
		wstring id;
		wstring name;
		wstring parent_id;
		::CORBA::WStringSeq group_ids;
		::CORBA::WStringSeq mapproto_ids;
		long long modified;
	};
	typedef sequence <MapProtoGroup_Transferable> MapProtoGroupSeq_Transferable;
*/

	struct MapNodeProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		wstring symbolId;

		long long modified;

		boolean isTopological;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapNodeProtoElement_Transferable> MapNodeProtoElementSeq_Transferable;

	struct MapLinkProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		long long modified;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapLinkProtoElement_Transferable> MapLinkProtoElementSeq_Transferable;
/*
	struct MapPathProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		long long modified;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapPathProtoElement_Transferable> MapPathProtoElementSeq_Transferable;
*/
	struct MapSiteElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;		// anchor
		wstring latitude;		// anchor

		wstring mapId;

		wstring symbolId;

		wstring mapProtoId;

		long long modified;
		
		wstring city;
		wstring street;
		wstring building;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapSiteElement_Transferable> MapSiteElementSeq_Transferable;

	struct MapPhysicalNodeElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;
		wstring latitude;

		wstring mapId;

		wstring physicalLinkId;

		boolean active;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapPhysicalNodeElement_Transferable> MapPhysicalNodeElementSeq_Transferable;

	struct MapNodeLinkElement_Transferable
	{
		wstring id;
		wstring name;

		wstring mapId;

		wstring physicalLinkId;
		wstring startNodeId;
		wstring endNodeId;

		double length;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapNodeLinkElement_Transferable> MapNodeLinkElementSeq_Transferable;

	struct MapPhysicalLinkElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		wstring mapId;

		wstring mapProtoId;

		wstring startNodeId;
		wstring endNodeId;

		wstring city;
		wstring street;
		wstring building;
		
		boolean leftToRight;
		boolean topToBottom;

		::CORBA::WStringSeq nodeLinkIds;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapPhysicalLinkElement_Transferable> MapPhysicalLinkElementSeq_Transferable;

	struct MapMarkElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;
		wstring latitude;

		wstring mapId;

		wstring physicalLinkId;
		
		double distance;

		wstring city;
		wstring street;
		wstring building;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapMarkElement_Transferable> MapMarkElementSeq_Transferable;
/*
	struct MapCablePathElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		wstring mapId;

		wstring startNodeId;//начало
		wstring endNodeId;//конец
		General::ElementAttributeSeq_Transferable attributes;

		::CORBA::WStringSeq physicalLinkIds;
	};
	typedef sequence <MapCablePathElement_Transferable> MapCablePathElementSeq_Transferable;
*/
/*
	struct MapPathElement_Transferable
	{
		wstring id;
		wstring name;
		wstring typeId;
		wstring description;

		wstring mapViewId;

		wstring startNodeId;//начало
		wstring endNodeId;//конец
		General::ElementAttributeSeq_Transferable attributes;

		::CORBA::WStringSeq physicalLinkIds;
	};
	typedef sequence <MapPathElement_Transferable> MapPathElementSeq_Transferable;
*/
	struct Map_Transferable
	{
		wstring id;
		wstring name;
		wstring userId;
		wstring description;
		wstring domainId;

		long long created;
		wstring createdBy;
		long long modified;
		wstring modifiedBy;

		::CORBA::WStringSeq siteIds;//Вектор элементов наследников класса Node
		::CORBA::WStringSeq nodeIds;//Вектор элементов наследников класса Node
		::CORBA::WStringSeq nodeLinkIds;//Вектор элементов типа NodeLinks
		::CORBA::WStringSeq physicalLinkIds;
		::CORBA::WStringSeq markIds;
	};
	typedef sequence <Map_Transferable> MapSeq_Transferable;

	struct MapView_Transferable
	{
		wstring id;
		wstring name;
		wstring userId;
		wstring description;
		wstring domainId;

		long long created;
		wstring createdBy;
		long long modified;
		wstring modifiedBy;

		wstring longitude;
		wstring latitude;
		double scale;
		double defaultScale;
		
		wstring mapId;
		::CORBA::WStringSeq schemeIds;

//		::CORBA::WStringSeq cablePathIds;
	};
	typedef sequence <MapView_Transferable> MapViewSeq_Transferable;

};
};
};
};
};

#endif
