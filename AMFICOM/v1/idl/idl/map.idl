/*-
 * $Id: map.idl,v 1.22 2005/06/28 08:08:24 max Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef MAP_IDL
#define MAP_IDL

#include "configuration.idl"
#include "resource.idl"

module com {
	module syrus {
		module AMFICOM {
			module map {
				module corba {
					typedef struct IdlSiteNodeType {
						general::corba::StorableObject header;

						wstring codename;
						wstring name;
						wstring description;

						general::corba::Identifier imageId;
						boolean topological;
						general::corba::IdentifierSeq characteristicIds;
					} SiteNodeType;

					typedef sequence<SiteNodeType> SiteNodeTypeSeq;

					/**
					 * Physical line type such as tunnel, subway, etc.
					 */
					typedef struct IdlPhysicalLinkType {
						general::corba::StorableObject header;

						wstring codename;
						wstring name;
						wstring description;

						long dimensionX;
						long dimensionY;

						general::corba::IdentifierSeq characteristicIds;
					} PhysicalLinkType;

					typedef sequence<PhysicalLinkType> PhysicalLinkTypeSeq;

					/**
					 * Node.
					 */
					typedef struct IdlSiteNode {
						general::corba::StorableObject header;

						wstring name;
						wstring description;

						double  longitude;		// anchor
						double latitude;		// anchor

						general::corba::Identifier imageId;
						general::corba::Identifier siteNodeTypeId;

						wstring city;
						wstring street;
						wstring building;

						general::corba::IdentifierSeq characteristicIds;
					} SiteNode;

					typedef sequence<SiteNode> SiteNodeSeq;

					typedef struct IdlTopologicalNode {
						general::corba::StorableObject header;

						wstring name;
						wstring description;

						double  longitude;		// anchor
						double latitude;		// anchor

						general::corba::Identifier physicalLinkId;

						boolean active;

						general::corba::IdentifierSeq characteristicIds;
					} TopologicalNode;

					typedef sequence<TopologicalNode> TopologicalNodeSeq;

//					XXX
//					XXX
//					XXX
					typedef union IdlAbstractNode switch (enum AbstractNodeSort{
							NODE_SORT_SITE,
							NODE_SORT_TOPOLOGICAL}) {
						case NODE_SORT_SITE:
							SiteNode siteNode;
						case NODE_SORT_TOPOLOGICAL:
							TopologicalNode topologicalNode;
					} AbstractNode;

					typedef sequence<AbstractNode> AbstractNodeSeq;

					/**
					 * Map item, line fragment.
					 */
					typedef struct IdlNodeLink {
						general::corba::StorableObject header;

						wstring name;

						general::corba::Identifier physicalLinkId;

						general::corba::Identifier startNodeId;
						general::corba::Identifier endNodeId;

						double length;

						general::corba::IdentifierSeq characteristicIds;
					} NodeLink;

					typedef sequence<NodeLink> NodeLinkSeq;

					/**
					 * Mark which has coordinates and is bound to a subway (MapLink) by distance.
					 */
					typedef struct IdlMark {
						general::corba::StorableObject header;

						wstring name;
						wstring description;
						double  longitude;		// anchor
						double latitude;		// anchor

						general::corba::Identifier physicalLinkId;

						double distance;

						wstring city;
						wstring street;
						wstring building;

						general::corba::IdentifierSeq characteristicIds;
					} Mark;

					typedef sequence<Mark> MarkSeq;

					/**
					 * Line item.
					 */
					typedef struct IdlPhysicalLink {
						general::corba::StorableObject header;

						wstring name;
						wstring description;

						general::corba::Identifier physicalLinkTypeId;

						general::corba::Identifier startNodeId;
						general::corba::Identifier endNodeId;

						wstring city;
						wstring street;
						wstring building;

						long dimensionX;
						long dimensionY;

						boolean leftToRight;
						boolean topToBottom;

						general::corba::IdentifierSeq nodeLinkIds;

						general::corba::IdentifierSeq characteristicIds;
					} PhysicalLink;

					typedef sequence<PhysicalLink> PhysicalLinkSeq;

					typedef struct IdlCollector {
						general::corba::StorableObject header;

						wstring name;
						wstring description;

						general::corba::IdentifierSeq physicalLinkIds;

						general::corba::IdentifierSeq characteristicIds;
					} Collector;

					typedef sequence<Collector> CollectorSeq;

					typedef struct IdlMap {
						general::corba::StorableObject header;

						general::corba::Identifier domainId;

						wstring name;
						wstring description;

						general::corba::IdentifierSeq siteNodeIds;
						general::corba::IdentifierSeq topologicalNodeIds;
						general::corba::IdentifierSeq nodeLinkIds;
						general::corba::IdentifierSeq physicalLinkIds;
						general::corba::IdentifierSeq markIds;
						general::corba::IdentifierSeq collectorIds;
					} Map;

					typedef sequence<Map> MapSeq;

					typedef struct IdlMapView {
						general::corba::StorableObject header;

						general::corba::Identifier domainId;
						wstring name;
						wstring description;

						double longitude;
						double latitude;
						double scale;
						double defaultScale;

						general::corba::Identifier mapId;
						general::corba::IdentifierSeq schemeIds;
					} MapView;

					typedef sequence<MapView> MapViewSeq;
					
					typedef struct IdlTopologicalImageQuery {
						long mapImageWidth;
						long mapImageHeight;

						double topoCenterX;
						double topoCenterY;
						double topoScale;

						::CORBA::BooleanSeq layerVisibilities;
						::CORBA::BooleanSeq labelVisibilities;
					} TopologicalImageQuery;

					typedef struct IdlRenderedImage {
						::CORBA::OctetSeq image;
					} RenderedImage;

					typedef struct IdlMapFeature {
						double centerX;
						double centerY;

						wstring name;
					} MapFeature;

					typedef sequence<MapFeature> MapFeatureSeq;
				};
			};
		};
	};
};
#endif // MAP_IDL
