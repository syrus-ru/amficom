/*
 * $Id: map.idl,v 1.12 2004/11/22 12:02:17 krupenn Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

#ifndef MAP_IDL
#define MAP_IDL

#include <streams.idl>

#include "general.idl"

module com
{
module syrus
{
module AMFICOM
{
module CORBA
{
module Map
{
	/**
	 * протоэлемент (тип) сетевого узла
	 */
	struct MapNodeProtoElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring codename;
		wstring description;
		wstring owner_id;
		wstring symbolId;
		long long modified;
		wstring pe_class;
		boolean pe_is_kis;
		boolean is_visual;
		boolean isTopological;
		wstring domain_id;
		General::ElementAttributeSeq_Transferable attributes;
		::CORBA::WStringSeq pe_ids;
#else
		wstring id;
		wstring name;
		wstring description;

		/**
		 * ссылка на изображение. поскольку разные узлы могут иметь
		 * (и как правило имеют) одинаковый изображения, они ссылаются
		 * на один экземпляр изображения, который должен подгружаться отдельно
		 */
		wstring symbolId;

		long long modified;

		boolean isTopological;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapNodeProtoElement_Transferable> MapNodeProtoElementSeq_Transferable;

	/**
	 * протоэлемент (тип) тоннеля
	 */
	struct MapLinkProtoElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring description;
		wstring owner_id;
		wstring domain_id;
		long long modified;
		::CORBA::WStringSeq cable_type_ids;
		General::ElementAttributeSeq_Transferable attributes;
#else
		wstring id;
		wstring name;
		wstring description;

		long long modified;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapLinkProtoElement_Transferable> MapLinkProtoElementSeq_Transferable;

	/**
	 * сетевой узел
	 */
	struct MapSiteElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;
		wstring latitude;

		/**
		 * карта (Map_Transferable), на которой лежит сетевой узел. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		/**
		 * идентификатор изображения узла. поскольку разные узлы могут иметь
		 * (и как правило имеют) одинаковый изображения, они ссылаются
		 * на один экземпляр изображения, который должен подгружаться отдельно
		 */
		wstring symbolId;

		/**
		 * ссылка на тип сетевого узла (MapNodeProtoElement_Transferable)
		 */
		wstring mapProtoId;

		long long modified;
		
		wstring city;
		wstring street;
		wstring building;

		General::ElementAttributeSeq_Transferable attributes;
	};
	typedef sequence <MapSiteElement_Transferable> MapSiteElementSeq_Transferable;
	typedef MapSiteElement_Transferable MapSiteElement;
	typedef sequence<MapSiteElement> MapSiteElementSeq;

#ifdef SERVER
	/**
	 * @deprecated
	 */
	struct MapPathProtoElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;
		wstring owner_id;
		wstring domain_id;
		long long modified;
		::CORBA::WStringSeq path_type_ids;
		General::ElementAttributeSeq_Transferable attributes;
	};

	/**
	 * @deprecated
	 */
	typedef sequence<MapPathProtoElement_Transferable> MapPathProtoElementSeq_Transferable;

	/**
	 * @deprecated
	 */
	struct MapElement_Transferable
	{
		wstring id;
		wstring name;
		wstring type_id;
		wstring description;
		wstring owner_id;
		wstring longitude;		// anchor
		wstring latitude;		// anchor
		wstring mapId;
		wstring symbol_id;
		wstring element_id;
		wstring element_type_id;
		long long modified;
		boolean has_kis;
		wstring kisElementTypeId;
		wstring ism_map_id;
		wstring map_kis_id;
		General::ElementAttributeSeq_Transferable attributes;
	};

	/**
	 * @deprecated
	 */
	typedef sequence<MapElement_Transferable> MapElementSeq_Transferable;
#endif // SERVER

	/**
	 * топологический узел (ТУ). ТУ нужен для форматрования изгиба тоннеля,
	 * поэтому характеризуется принадлежностью к тоннелю
	 */
	struct MapPhysicalNodeElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring longitude;
		wstring latitude;
		wstring description;
		wstring ownerId;
		wstring mapId;
		wstring ismMapId;
		wstring symbolId;
		wstring physicalLinkId;
		boolean active;
		General::ElementAttributeSeq_Transferable attributes;
#else
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;
		wstring latitude;

		/**
		 * карта (Map_Transferable), на которой лежит ТУ. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		/**
		 * тоннель, которому принадлежит ТУ
		 * (MapPhysicalLinkElement_Transferable)
		 */
		wstring physicalLinkId;

		/**
		 * false если ТУ является концевым для тоннеля и true если лежит 
		 * в серединетоннеля
		 */
		boolean active;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapPhysicalNodeElement_Transferable> MapPhysicalNodeElementSeq_Transferable;

	/**
	 * фрагмент тоннеля. тоннель предстявляет собой набор фрагментов, 
	 * разделенных ТУ
	 */
	struct MapNodeLinkElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring ownerId;
		wstring mapId;
		wstring ismMapId;
		wstring startNodeId;
		wstring endNodeId;
		wstring physicalLinkId;
		General::ElementAttributeSeq_Transferable attributes;
#else
		wstring id;
		wstring name;

		/**
		 * карта (Map_Transferable), на которой лежит сетевой узел. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		/**
		 * тоннель, частью которого является фрагмент 
		 * (MapPhysicalLinkElement_Transferable)
		 */
		wstring physicalLinkId;
		
		/**
		 * один концевой узел фрагмента 
		 * (может быть MapPhysicalNodeElement_Transferable или
		 * MapSiteElement_Transferable)
		 */
		wstring startNodeId;

		/**
		 * другой концевой узел фрагмента
		 * (может быть MapPhysicalNodeElement_Transferable или
		 * MapSiteElement_Transferable)
		 */
		wstring endNodeId;

		double length;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapNodeLinkElement_Transferable> MapNodeLinkElementSeq_Transferable;

	/**
	 * тоннель. тоннель представляет собой набор фрагментов, разделенных ТУ.
	 * тоннель соединяет сетевые узлы или неактивные ТУ
	 */
	struct MapPhysicalLinkElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring _typeId;
		wstring description;
		wstring ownerId;
		wstring mapId;
		wstring ismMapId;
		wstring startNodeId;
		wstring endNodeId;
		General::ElementAttributeSeq_Transferable attributes;
		wstring linkId;
		wstring linkTypeId;
		::CORBA::WStringSeq nodeLinkIds;
#else
		wstring id;
		wstring name;
		wstring description;

		/**
		 * карта (Map_Transferable), на которой лежит сетевой узел. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		/**
		 * ссылка на тип сетевого узла (MapLinkProtoElement_Transferable)
		 */
		wstring mapProtoId;

		/**
		 * один концевой узел фрагмента 
		 * (может быть MapPhysicalNodeElement_Transferable или
		 * MapSiteElement_Transferable)
		 */
		wstring startNodeId;

		/**
		 * другой концевой узел фрагмента
		 * (может быть MapPhysicalNodeElement_Transferable или
		 * MapSiteElement_Transferable)
		 */
		wstring endNodeId;

		wstring city;
		wstring street;
		wstring building;

		long dimensionX;
		long dimensionY;

		boolean leftToRight;
		boolean topToBottom;
		boolean horizontalVertical;

		/**
		 * список идентификаторов фрагментов (MapNodeLinkElement_Transferable),
		 * из которых состоит тоннель
		 */
		::CORBA::WStringSeq nodeLinkIds;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapPhysicalLinkElement_Transferable> MapPhysicalLinkElementSeq_Transferable;
	typedef MapPhysicalLinkElement_Transferable MapPhysicalLinkElement;
	typedef sequence<MapPhysicalLinkElement> MapPhysicalLinkElementSeq;

	/**
	 * метка - точечный объект на тоннеле
	 */
	struct MapMarkElement_Transferable
	{
#ifdef SERVER
		wstring id;
		wstring name;
		wstring longitude;
		wstring latitude;
		wstring description;
		wstring ownerId;
		wstring mapId;
		wstring symbolId;
		wstring linkId;
		double distance;
		General::ElementAttributeSeq_Transferable attributes;
#else
		wstring id;
		wstring name;
		wstring description;
		wstring longitude;
		wstring latitude;

		/**
		 * карта (Map_Transferable), на которой лежит сетевой узел. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		/**
		 * тоннель, на котором находится метка
		 * (MapPhysicalLinkElement_Transferable)
		 */
		wstring physicalLinkId;

		double distance;

		wstring city;
		wstring street;
		wstring building;

		General::ElementAttributeSeq_Transferable attributes;
#endif // SERVER
	};
	typedef sequence <MapMarkElement_Transferable> MapMarkElementSeq_Transferable;

	/**
	 * коллектор. коллектор состоит из тоннелей. каждый тоннель может входить
	 * только в один коллектор (а может не входить ни в один)
	 */
	struct MapPipePathElement_Transferable
	{
		wstring id;
		wstring name;
		wstring description;

		/**
		 * карта (Map_Transferable), на которой лежит сетевой узел. теоретически
		 * узел может лежать в нескольких картах, в этом случае при подгрузке
		 * каждой карты экземпляр узла будет иметь ссылки на соотвутствующую
		 * карту
		 */
		wstring mapId;

		General::ElementAttributeSeq_Transferable attributes;

		/**
		 * список идентификаторов тоннелей (MapPhysicalLinkElement_Transferable),
		 * который входят в коллектор
		 */
		::CORBA::WStringSeq physicalLinkIds;
	};
	typedef sequence <MapPipePathElement_Transferable> MapPipePathElementSeq_Transferable;

#ifdef SERVER
	/**
	 * @deprecated
	 */
	struct MapPathElement_Transferable
	{
		wstring id;
		wstring name;
		wstring _typeId;
		wstring description;
		wstring ownerId;
		wstring mapId;
		wstring ismMapId;
		wstring startNodeId;
		wstring endNodeId;
		General::ElementAttributeSeq_Transferable attributes;
		wstring pathId;
		::CORBA::WStringSeq physicalLinkIds;
	};

	/**
	 * @deprecated
	 */
	typedef sequence<MapPathElement_Transferable> MapPathElementSeq_Transferable;
#endif // SERVER

	/**
	 * структура канализационной схемы ("карта").
	 * карта представляет собой набор сетевых узлов, связанных друг с другом
	 * тоннелями. тонели состоят из фрагментов и топологических узлов и могут
	 * содержать на себе метки. тоннели могут объединяться в коллекторы
	 */
	struct Map_Transferable
	{
#ifdef SERVER		
		wstring id;
		wstring name;
		wstring codename;
		wstring userId;
		wstring description;
		wstring domainId;
		long long created;
		wstring createdBy;
		long long modified;
		wstring modifiedBy;
		wstring schemeId;
		::CORBA::WStringSeq equipmentIds;
		::CORBA::WStringSeq kisIds;
		/**
		 * Sequence of ids of <code>Node</code> class descendants.
		 */
		::CORBA::WStringSeq nodeIds;
		/**
		 * Sequence of <code>NodeLink</code> ids.
		 */
		::CORBA::WStringSeq nodeLinkIds;
		::CORBA::WStringSeq physicalLinkIds;
		::CORBA::WStringSeq pathIds;
		::CORBA::WStringSeq markIds;
		boolean showPhysicalNodeElement;
		/**
		 * @deprecated Use {@link MapView_Transferable#longitude} instead.
		 */
		wstring longitude;
		/**
		 * @deprecated Use {@link MapView_Transferable#latitude} instead.
		 */
		wstring latitude;
		/**
		 * @deprecated Use {@link MapView_Transferable#scale} instead.
		 */
		double scale;
		/**
		 * @deprecated Use {@link MapView_Transferable#defaultScale} instead.
		 */
		double defaultScale;
		long mouseTolerancy;
#else
		wstring id;
		wstring name;
		wstring userId;
		wstring description;
		wstring domainId;

		long long created;
		wstring createdBy;
		long long modified;
		wstring modifiedBy;

		/**
		 * список идентификаторов сетевых узлов (MapSiteElement_Transferable)
		 */
		::CORBA::WStringSeq siteIds;
		/**
		 * список идентификаторов топологических узлов 
		 * (MapPhysicalNodeElement_Transferable)
		 */
		::CORBA::WStringSeq nodeIds;
		/**
		 * список идентификаторов фрагментов (MapNodeLinkElement_Transferable)
		 */
		::CORBA::WStringSeq nodeLinkIds;
		/**
		 * список идентификаторов тоннелей MapPhysicalLinkElement_Transferable
		 */
		::CORBA::WStringSeq physicalLinkIds;
		/**
		 * список идентификаторов меток (MapMarkElement_Transferable)
		 */
		::CORBA::WStringSeq markIds;
		/**
		 * список идентификаторов коллекторов (MapPipePathElement_Transferable
		 */
		::CORBA::WStringSeq collectorIds;
#endif // SERVER
	};
	typedef sequence <Map_Transferable> MapSeq_Transferable;
	typedef Map_Transferable Map;
	typedef sequence<Map> MapSeq;

	/**
	 * Вид карты. Включает в себя канализационную схему и список физических
	 * схем
	 */
	struct MapView_Transferable
	{
		wstring id;
		wstring name;
		wstring userId;
		wstring description;
		wstring domainId;

		long long created;
		wstring createdBy;
		long long modified;
		wstring modifiedBy;

		wstring longitude;
		wstring latitude;
		double scale;
		double defaultScale;

		/**
		 * карта, которую отображает вид
		 */
		wstring mapId;
		
		/**
		 * список идентификаторов физических схем, прокладка которых
		 * отображается в виде
		 */
		::CORBA::WStringSeq schemeIds;
	};
	typedef sequence <MapView_Transferable> MapViewSeq_Transferable;

};
};
};
};
};

#endif // MAP_IDL
