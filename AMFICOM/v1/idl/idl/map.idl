/*-
 * $Id: map.idl,v 1.18 2005/05/26 11:25:11 max Exp $
 *
 * Copyright ¿ 2004-2005 Syrus Systems.
 * Dept. of Science & Technology.
 * Project: AMFICOM.
 */

#ifndef MAP_IDL
#define MAP_IDL

#include "configuration.idl"
#include "resource.idl"
#include "streams.idl"

module com {
	module syrus {
		module AMFICOM {
			module map {
				module corba {
					struct SiteNodeType_Transferable {
							general::corba::StorableObject header;

							wstring codename;
							wstring name;
							wstring description;

							general::corba::Identifier imageId;
							boolean topological;
							general::corba::IdentifierSeq characteristicIds;
					};

					typedef SiteNodeType_Transferable SiteNodeType;
					typedef sequence<SiteNodeType> SiteNodeTypeSeq;

					/**
					 * Physical line type such as tunnel, subway, etc.
						*/
					struct PhysicalLinkType_Transferable {
							general::corba::StorableObject header;

							wstring codename;
							wstring name;
							wstring description;

							long dimensionX;
							long dimensionY;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef PhysicalLinkType_Transferable PhysicalLinkType;
					typedef sequence<PhysicalLinkType> PhysicalLinkTypeSeq;

					enum AbstractNodeSort {
							NODE_SORT_SITE,
							NODE_SORT_TOPOLOGICAL
						};

					/**
					 * Node.
						*/
					struct SiteNode_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;

							double  longitude;		// anchor
							double latitude;		// anchor

							general::corba::Identifier imageId;
							general::corba::Identifier siteNodeTypeId;

							wstring city;
							wstring street;
							wstring building;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef SiteNode_Transferable SiteNode;
					typedef sequence<SiteNode> SiteNodeSeq;

					struct TopologicalNode_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;

							double  longitude;		// anchor
							double latitude;		// anchor

							general::corba::Identifier physicalLinkId;

							boolean active;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef TopologicalNode_Transferable TopologicalNode;
					typedef sequence<TopologicalNode> TopologicalNodeSeq;

					union AbstractNode_Transferable switch (AbstractNodeSort) {
						case NODE_SORT_SITE:
							SiteNode siteNode;
						case NODE_SORT_TOPOLOGICAL:
							TopologicalNode topologicalNode;
					};

					typedef AbstractNode_Transferable AbstractNode;
					typedef sequence<AbstractNode> AbstractNodeSeq;

					/**
					 * Map item, line fragment.
						*/
					struct NodeLink_Transferable {
							general::corba::StorableObject header;

							wstring name;

							general::corba::Identifier physicalLinkId;

							general::corba::Identifier startNodeId;
							general::corba::Identifier endNodeId;

							double length;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef NodeLink_Transferable NodeLink;
					typedef sequence<NodeLink> NodeLinkSeq;

					/**
					 * Mark which has coordinates and is bound to a subway (MapLink) by distance.
						*/
					struct Mark_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;
							double  longitude;		// anchor
							double latitude;		// anchor

							general::corba::Identifier physicalLinkId;

							double distance;

							wstring city;
							wstring street;
							wstring building;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef Mark_Transferable Mark;
					typedef sequence<Mark> MarkSeq;

					/**
					 * Line item.
						*/
					struct PhysicalLink_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;

							general::corba::Identifier physicalLinkTypeId;

							general::corba::Identifier startNodeId;
							general::corba::Identifier endNodeId;

							wstring city;
							wstring street;
							wstring building;

							long dimensionX;
							long dimensionY;

							boolean leftToRight;
							boolean topToBottom;

							general::corba::IdentifierSeq nodeLinkIds;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef PhysicalLink_Transferable PhysicalLink;
					typedef sequence<PhysicalLink> PhysicalLinkSeq;

					struct Collector_Transferable {
							general::corba::StorableObject header;

							wstring name;
							wstring description;

							general::corba::IdentifierSeq physicalLinkIds;

							general::corba::IdentifierSeq characteristicIds;
					};

					typedef Collector_Transferable Collector;
					typedef sequence<Collector> CollectorSeq;

					struct Map_Transferable {
							general::corba::StorableObject header;

							general::corba::Identifier domain_id;

							wstring name;
							wstring description;

							general::corba::IdentifierSeq siteNodeIds;
							general::corba::IdentifierSeq topologicalNodeIds;
							general::corba::IdentifierSeq nodeLinkIds;
							general::corba::IdentifierSeq physicalLinkIds;
							general::corba::IdentifierSeq markIds;
							general::corba::IdentifierSeq collectorIds;
					};

					typedef Map_Transferable Map;
					typedef sequence<Map> MapSeq;

					struct MapView_Transferable {
							general::corba::StorableObject header;

							general::corba::Identifier domain_id;
							wstring name;
							wstring description;

							double longitude;
							double latitude;
							double scale;
							double defaultScale;

							general::corba::Identifier mapId;
							general::corba::IdentifierSeq schemeIds;
					};

					typedef MapView_Transferable MapView;
					typedef sequence<MapView> MapViewSeq;
					
					struct TopologicalImageQuery_Transferable {
						long mapImageWidth;
						long mapImageHeight;
		
						double topoCenterX;
						double topoCenterY;
						double topoScale;
		
						CORBA::BooleanSeq layerVisibilities;
						CORBA::BooleanSeq labelVisibilities;
		
						long long userId;		
					};
					
					struct RenderedImage_Transferable {
						CORBA::OctetSeq image;
					};
				};
			};
		};
	};
};
#endif // MAP_IDL
