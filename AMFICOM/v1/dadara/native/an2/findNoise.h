/*
 * findNoise.h
 */

#ifndef _findNoise_h
#define _findNoise_h

/*
 * findNoise3s()
 *
 * Определение общего уровня шума рефлектограммы, используя
 * модель "уровень шума не зависит от сигнала".
 *
 * На входе - рефлектограмма (ргдБ).
 * на выходе - абс. уровень шума (дБ) по уровню 3 сигма
 */
double findNoise3s(double *data, int size);

/*
 * findNoiseArray()
 *
 * Оценка кривой уровня шума рефлектограммы.
 * Сделана чтобы избежать проблемы Nettest, при которой
 * фильтр (GS?) включается резко, уменьшая при этом
 * уровень шума. При этом оказывалось, что слева
 * от точки включения GS фактический уровень шума был
 * существенно выше того, что оценивался по
 * findNoise3s.
 *
 * По входной р/г в окрестности каждой точки строится
 * гистограмма величины data[i+8]+data[i-8]-data[i]*2
 * и определяется медианное значение этой конечной разности.
 * На основании этой величины и медианного усреднения
 * самой р/г в этой же области, строится предварительное
 * значение абс. уровня шума. Это значение может быть
 * завышено на областях событий.
 * В этот же момент эта кривая расширяется на начало и
 * конец р/г, на которых не могли быть рассчитаны медианные значения.
 * Далее строится "кумулятивный минимум" к полученному
 * предварительному уровню шума, чтобы эффективно отследить
 * резкое снижение уровня шума с NetTest GS, но игнорировать
 * кажущееся увеличение шума в области событий.
 * Результирующая кривая переводится в относительные
 * децибеллы и выдается на выход.
 *
 * На входе - рефлектограмма (ргдБ).
 * на выходе - кривая отн. уровеня шума (дБ) по уровню 1 сигма,
 * варьирующаяся в диапазоне от около 0.001 дБ до 20 дБ.
 *
 * size должен быть >= 1
 * data - входной массив[size]
 * out - массив[size] для записи вых. значения шума
 */
void findNoiseArray(double *data, double *out, int size);

#endif

