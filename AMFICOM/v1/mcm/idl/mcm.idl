#ifndef _MCM_IDL_
#define _MCM_IDL_

#include <measurement.idl>
#include <configuration.idl>

module com {
module syrus {
module AMFICOM {
module mcm {
module corba {

	interface MCM : general::corba::Verifiable {

		void receiveTests(in measurement::corba::TestSeq_Transferable tests)
			raises (general::corba::AMFICOMRemoteException);

		void abortTests(in general::corba::IdentifierSeq test_ids)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::MeasurementSeq_Transferable transmitMeasurements(in general::corba::IdentifierSeq ids)
				raises (general::corba::AMFICOMRemoteException);

		measurement::corba::MeasurementSeq_Transferable transmitMeasurementsButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition_Transferable)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::AnalysisSeq_Transferable transmitAnalyses(in general::corba::IdentifierSeq ids)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::AnalysisSeq_Transferable transmitAnalysesButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition_Transferable)
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::EvaluationSeq_Transferable transmitEvaluations(in general::corba::IdentifierSeq ids)				
			raises (general::corba::AMFICOMRemoteException);

		measurement::corba::EvaluationSeq_Transferable transmitEvaluationsButIdsByCondition(
				in general::corba::IdentifierSeq ids,
				in general::corba::StorableObjectCondition storableObjectCondition_Transferable)
			raises (general::corba::AMFICOMRemoteException);

	};

};
};
};
};
};

#endif
