/*
 * $Id: EventSourceUtilitiesImpl.sqlj,v 1.1 2004/06/22 12:27:24 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.*;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1 $, $Date: 2004/06/22 12:27:24 $
 * @author $Author: bass $
 */
public final class EventSourceUtilitiesImpl extends MutableObjectResourceUtilitiesImpl implements EventSourceUtilitiesOperations {
	public EventSourceUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.eventsources
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.eventsources
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.eventsources
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	protected String getUUID(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String nextval;
		if (connCtx == null) {
			#sql {
				SELECT amficom.sysevsrc_seq.nextval INTO :nextval FROM sys.dual
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT amficom.sysevsrc_seq.nextval INTO :nextval FROM sys.dual
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT amficom.sysevsrc_seq.nextval INTO :nextval FROM sys.dual
			};
		}
		return EventSourceUtilities.UUID_PREFIX + nextval;
	}

	String getObjectSourceName(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String objectSourceName;
		if (connCtx == null) {
			#sql {
				SELECT object_source_name INTO :objectSourceName FROM amficom.eventsources WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT object_source_name INTO :objectSourceName FROM amficom.eventsources WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT object_source_name INTO :objectSourceName FROM amficom.eventsources WHERE id = :id
			};
		}
		return ((objectSourceName == null) ? "" : objectSourceName);
	}

	public String getObjectSourceName(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getObjectSourceName(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getDescription(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String description;
		if (connCtx == null) {
			#sql {
				SELECT description INTO :description FROM amficom.eventsources WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT description INTO :description FROM amficom.eventsources WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT description INTO :description FROM amficom.eventsources WHERE id = :id
			};
		}
		return ((description == null) ? "" : description);
	}

	public String getDescription(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getDescription(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	/**
	 * @todo Implement this method (select id and invoke the appropriate
	 *       constructor).
	 */
	String getObjectSourceId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
//		if (connCtx == null) {
//			#sql {
//			};
//		} else if (execCtx == null) {
//			#sql [connCtx] {
//			};
//		} else {
//			#sql [connCtx, execCtx] {
//			};
//		}
		return "";
	}

	public String getObjectSourceId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getObjectSourceId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	public String getTypeId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String typeId;
		if (connCtx == null) {
			#sql {
				SELECT type_id INTO :typeId FROM amficom.eventsources WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT type_id INTO :typeId FROM amficom.eventsources WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT type_id INTO :typeId FROM amficom.eventsources WHERE id = :id
			};
		}
		return ((typeId == null) ? "" : typeId);
	}

	public String getTypeId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getTypeId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String[] getMatchingIds(String eventSourceType, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if (eventSourceType == null)
			return new String[0];
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.eventsources WHERE type_id = :(eventSourceType)
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.eventsources WHERE type_id = :(eventSourceType)
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.eventsources WHERE type_id = :(eventSourceType)
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	public String[] getMatchingIds(String eventSourceType) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds(eventSourceType, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	#sql final iterator IdIterator(String id);
}
