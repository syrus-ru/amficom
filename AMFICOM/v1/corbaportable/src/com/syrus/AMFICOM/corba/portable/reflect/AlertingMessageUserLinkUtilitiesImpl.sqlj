/*
 * $Id: AlertingMessageUserLinkUtilitiesImpl.sqlj,v 1.2 2004/09/25 18:06:32 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.*;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @author $Author: bass $
 * @version $Revision: 1.2 $, $Date: 2004/09/25 18:06:32 $
 * @module corbaportable_v1
 *
 * @todo rewrite the class to have only one getMatching* accessor method.
 *       Consider that certain fields can be nulls.
 * @todo Use Reflection API where necessary (also concerns e-mail and sms
 *       delivery).
 * @todo Move all ObjectResourceImpl's to _aux package and narrow the visibility
 *       of methods where possible.
 * @todo Introduce other iterators in addition to IdIterator.
 * @todo Migrate to JDBC.
 * @todo Move all iterator operations to a try-finally block, close the iterator
 *       anyway.
 */
public final class AlertingMessageUserLinkUtilitiesImpl extends MutableObjectResourceUtilitiesImpl implements AlertingMessageUserLinkUtilitiesOperations {
	public AlertingMessageUserLinkUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	protected String getUUID(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String nextval;
		if (connCtx == null) {
			#sql {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		}
		return AlertingMessageUserLinkUtilities.UUID_PREFIX + nextval;
	}

	String _new(String alertingMessageId, String alertingTypeId, String sourceId, String userId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alertingMessageId == null)
				|| (alertingMessageId.length() == 0)
				|| (alertingTypeId == null)
				|| (alertingTypeId.length() == 0)
				|| (sourceId == null)
				|| (sourceId.length() == 0)
				|| (userId == null)
				|| (userId.length() == 0))
			throw new IllegalArgumentException();
		String id = getUUID(connCtx, execCtx);
		if (connCtx == null) {
			#sql {
				INSERT INTO amficom.alertingmessageuserlinks(id, alerting_message_id, alerting_type_id, source_id, user_id) VALUES (:id, :(alertingMessageId), :(alertingTypeId), :(sourceId), :(userId))
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				INSERT INTO amficom.alertingmessageuserlinks(id, alerting_message_id, alerting_type_id, source_id, user_id) VALUES (:id, :(alertingMessageId), :(alertingTypeId), :(sourceId), :(userId))
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				INSERT INTO amficom.alertingmessageuserlinks(id, alerting_message_id, alerting_type_id, source_id, user_id) VALUES (:id, :(alertingMessageId), :(alertingTypeId), :(sourceId), :(userId))
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
		return id;
	}

	public String _new(String alertingMessageId, String alertingTypeId, String sourceId, String userId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return _new(alertingMessageId, alertingTypeId, sourceId, userId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	/**
	 * Should only be invoked by AlertingMessageUserLinksImpl.delete(String)
	 */
	void delete(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((id == null) || (id.length() == 0))
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				DELETE FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				DELETE FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				DELETE FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	/**
	 * Should only be invoked by AlertingMessageUserLinksImpl.delete(String)
	 */
	public void delete(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			delete(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getAlertingMessageId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String alertingMessageId;
		if (connCtx == null) {
			#sql {
				SELECT alerting_message_id INTO :alertingMessageId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT alerting_message_id INTO :alertingMessageId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT alerting_message_id INTO :alertingMessageId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		}
		return alertingMessageId;
	}

	public String getAlertingMessageId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getAlertingMessageId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	void setAlertingMessageId(String id, String alertingMessageId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if (alertingMessageId == null)
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				UPDATE amficom.alertingmessageuserlinks SET alerting_message_id = :(alertingMessageId) WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				UPDATE amficom.alertingmessageuserlinks SET alerting_message_id = :(alertingMessageId) WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				UPDATE amficom.alertingmessageuserlinks SET alerting_message_id = :(alertingMessageId) WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	public void setAlertingMessageId(String id, String alertingMessageId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			setAlertingMessageId(id, alertingMessageId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getAlertingTypeId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String alertingTypeId;
		if (connCtx == null) {
			#sql {
				SELECT alerting_type_id INTO :alertingTypeId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT alerting_type_id INTO :alertingTypeId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT alerting_type_id INTO :alertingTypeId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		}
		return alertingTypeId;
	}

	public String getAlertingTypeId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getAlertingTypeId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	void setAlertingTypeId(String id, String alertingTypeId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if (alertingTypeId == null)
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				UPDATE amficom.alertingmessageuserlinks SET alerting_type_id = :(alertingTypeId) WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				UPDATE amficom.alertingmessageuserlinks SET alerting_type_id = :(alertingTypeId) WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				UPDATE amficom.alertingmessageuserlinks SET alerting_type_id = :(alertingTypeId) WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	public void setAlertingTypeId(String id, String alertingTypeId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			setAlertingTypeId(id, alertingTypeId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getSourceId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String sourceId;
		if (connCtx == null) {
			#sql {
				SELECT source_id INTO :sourceId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT source_id INTO :sourceId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT source_id INTO :sourceId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		}
		return sourceId;
	}

	public String getSourceId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSourceId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String getUserId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String userId;
		if (connCtx == null) {
			#sql {
				SELECT user_id INTO :userId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT user_id INTO :userId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT user_id INTO :userId FROM amficom.alertingmessageuserlinks WHERE id = :id
			};
		}
		return userId;
	}

	public String getUserId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getUserId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String[] getMatchingIds1(String alertingMessageId, String sourceId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alertingMessageId == null) || (sourceId == null))
			return new String[0];
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId)
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId)
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId)
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	public String[] getMatchingIds1(String alertingMessageId, String sourceId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds1(alertingMessageId, sourceId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	String[] getMatchingIds2(String alertingMessageId, String sourceId, String userId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alertingMessageId == null) || (sourceId == null) || (userId == null))
			return new String[0];
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	public String[] getMatchingIds2(String alertingMessageId, String sourceId, String userId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds2(alertingMessageId, sourceId, userId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	/**
	 * Unique constraint: <code>alertingmessageuserlinks.alusr_uk</code>.
	 *
	 * @return a string array of length 0 or 1.
	 */
	String[] getMatchingIds3(String alertingMessageId, String alertingTypeId, String sourceId, String userId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alertingMessageId == null) || (alertingTypeId == null) || (sourceId == null) || (userId == null))
			return new String[0];
		IdIterator idIterator = null;
		try {
			if (connCtx == null) {
				#sql idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND alerting_type_id = :(alertingTypeId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			} else if (execCtx == null) {
				#sql [connCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND alerting_type_id = :(alertingTypeId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			} else {
				#sql [connCtx, execCtx] idIterator = {
					SELECT id FROM amficom.alertingmessageuserlinks WHERE alerting_message_id = :(alertingMessageId) AND alerting_type_id = :(alertingTypeId) AND source_id = :(sourceId) AND user_id = :(userId)
				};
			}
			ArrayList ids = new ArrayList();
			while (idIterator.next())
				ids.add(idIterator.id());
//			assert (ids.size() <= 1): "Unique constraint broken";
			return (String[]) (ids.toArray(new String[ids.size()]));
		} finally {
			if (idIterator != null)
				idIterator.close();
		}
	}

	/**
	 * Unique constraint: <code>alertingmessageuserlinks.alusr_uk</code>.
	 *
	 * @return a string array of length 0 or 1.
	 */
	public String[] getMatchingIds3(String alertingMessageId, String alertingTypeId, String sourceId, String userId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds3(alertingMessageId, alertingTypeId, sourceId, userId, connCtx, execCtx);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw ObjectResourceImpl.box(sqle);
		}
	}

	#sql final iterator IdIterator(String id);
}
