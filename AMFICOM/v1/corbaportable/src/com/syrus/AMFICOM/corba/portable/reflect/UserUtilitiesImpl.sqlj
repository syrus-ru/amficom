/*
 * $Id: UserUtilitiesImpl.sqlj,v 1.1 2004/06/22 12:27:24 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.AbstractEventSourceUtilitiesImpl;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1 $, $Date: 2004/06/22 12:27:24 $
 * @author $Author: bass $
 */
public final class UserUtilitiesImpl extends AbstractEventSourceUtilitiesImpl implements UserUtilitiesOperations {
	public UserUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.users
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.users
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.users
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	protected String getUUID(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String nextval;
		if (connCtx == null) {
			#sql {
				SELECT amficom.user_seq.nextval INTO :nextval FROM sys.dual
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT amficom.user_seq.nextval INTO :nextval FROM sys.dual
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT amficom.user_seq.nextval INTO :nextval FROM sys.dual
			};
		}
		return UserUtilities.UUID_PREFIX + nextval;
	}

	String getType(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String type;
		if (connCtx == null) {
			#sql {
				SELECT type INTO :type FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT type INTO :type FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT type INTO :type FROM amficom.users WHERE id = :id
			};
		}
		return ((type == null) ? "" : type);
	}

	public String getType(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getType(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getLogin(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String login;
		if (connCtx == null) {
			#sql {
				SELECT login INTO :login FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT login INTO :login FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT login INTO :login FROM amficom.users WHERE id = :id
			};
		}
		return ((login == null) ? "" : login);
	}

	public String getLogin(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getLogin(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getName(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String name;
		if (connCtx == null) {
			#sql {
				SELECT name INTO :name FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT name INTO :name FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT name INTO :name FROM amficom.users WHERE id = :id
			};
		}
		return ((name == null) ? "" : name);
	}

	public String getName(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getName(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getOperationalId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String operationalId;
		if (connCtx == null) {
			#sql {
				SELECT operational_id INTO :operationalId FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT operational_id INTO :operationalId FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT operational_id INTO :operationalId FROM amficom.users WHERE id = :id
			};
		}
		return ((operationalId == null) ? "" : operationalId);
	}

	public String getOperationalId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getOperationalId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getOperatorId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String operatorId;
		if (connCtx == null) {
			#sql {
				SELECT operator_id INTO :operatorId FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT operator_id INTO :operatorId FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT operator_id INTO :operatorId FROM amficom.users WHERE id = :id
			};
		}
		return ((operatorId == null) ? "" : operatorId);
	}

	public String getOperatorId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getOperatorId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getOrganizationId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String organizationId;
		if (connCtx == null) {
			#sql {
				SELECT organization_id INTO :organizationId FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT organization_id INTO :organizationId FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT organization_id INTO :organizationId FROM amficom.users WHERE id = :id
			};
		}
		return ((organizationId == null) ? "" : organizationId);
	}

	public String getOrganizationId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getOrganizationId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getSubscriberId(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String subscriberId;
		if (connCtx == null) {
			#sql {
				SELECT subscriber_id INTO :subscriberId FROM amficom.users WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT subscriber_id INTO :subscriberId FROM amficom.users WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT subscriber_id INTO :subscriberId FROM amficom.users WHERE id = :id
			};
		}
		return ((subscriberId == null) ? "" : subscriberId);
	}

	public String getSubscriberId(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSubscriberId(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	#sql final iterator IdIterator(String id);
}
