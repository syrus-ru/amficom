/*
 * $Id: AlarmTypeUtilitiesImpl.sqlj,v 1.1 2004/06/22 12:27:24 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.ImmutableObjectResourceUtilitiesImpl;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1 $, $Date: 2004/06/22 12:27:24 $
 * @author $Author: bass $
 */
public final class AlarmTypeUtilitiesImpl extends ImmutableObjectResourceUtilitiesImpl implements AlarmTypeUtilitiesOperations {
	public AlarmTypeUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.alarmtypes
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.alarmtypes
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.alarmtypes
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	protected String getCodename(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String codename;
		if (connCtx == null) {
			#sql {
				SELECT codename INTO :codename FROM amficom.alarmtypes WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT codename INTO :codename FROM amficom.alarmtypes WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT codename INTO :codename FROM amficom.alarmtypes WHERE id = :id
			};
		}
		return ((codename == null) ? "" : codename);
	}

	protected String getName(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String name;
		if (connCtx == null) {
			#sql {
				SELECT name INTO :name FROM amficom.alarmtypes WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT name INTO :name FROM amficom.alarmtypes WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT name INTO :name FROM amficom.alarmtypes WHERE id = :id
			};
		}
		return ((name == null) ? "" : name);
	}

	String getDescription(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String description;
		if (connCtx == null) {
			#sql {
				SELECT description INTO :description FROM amficom.alarmtypes WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT description INTO :description FROM amficom.alarmtypes WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT description INTO :description FROM amficom.alarmtypes WHERE id = :id
			};
		}
		return ((description == null) ? "" : description);
	}

	public String getDescription(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getDescription(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	#sql final iterator IdIterator(String id);
}
