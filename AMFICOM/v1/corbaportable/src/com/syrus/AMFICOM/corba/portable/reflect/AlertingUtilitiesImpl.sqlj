/*
 * $Id: AlertingUtilitiesImpl.sqlj,v 1.1 2004/06/22 12:27:24 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.MutableObjectResourceUtilitiesImpl;
import java.sql.*;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1 $, $Date: 2004/06/22 12:27:24 $
 * @author $Author: bass $
 */
public final class AlertingUtilitiesImpl extends MutableObjectResourceUtilitiesImpl implements AlertingUtilitiesOperations {
	public AlertingUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		throw new UnsupportedOperationException();
	}

	protected String getUUID(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String nextval;
		if (connCtx == null) {
			#sql {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT amficom.alrm_seq.nextval INTO :nextval FROM sys.dual
			};
		}
		return AlertingUtilities.UUID_PREFIX + nextval;
	}

	String _new(long alerted, String alertingMessageUserId, String eventId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alertingMessageUserId == null) || (alertingMessageUserId.length() == 0) || (eventId == null) || (eventId.length() == 0))
			throw new IllegalArgumentException();
		String id = getUUID(connCtx, execCtx);
		if (connCtx == null) {
			#sql {
				INSERT INTO amficom.alertings(id, alerted, alerting_message_user_id, event_id) VALUES (:id, :(new Timestamp(alerted)), :(alertingMessageUserId), :(eventId))
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				INSERT INTO amficom.alertings(id, alerted, alerting_message_user_id, event_id) VALUES (:id, :(new Timestamp(alerted)), :(alertingMessageUserId), :(eventId))
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				INSERT INTO amficom.alertings(id, alerted, alerting_message_user_id, event_id) VALUES (:id, :(new Timestamp(alerted)), :(alertingMessageUserId), :(eventId))
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
		return id;
	}

	public String _new(long alerted, String alertingMessageUserId, String eventId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return _new(alerted, alertingMessageUserId, eventId, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	/**
	 * Should only be invoked by AlertingImpl.delete(String)
	 */
	void delete(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((id == null) || (id.length() == 0))
			throw new IllegalArgumentException();
		if (connCtx == null) {
			#sql {
				DELETE FROM amficom.alertings WHERE id = :id
			};
			#sql {
				COMMIT
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				DELETE FROM amficom.alertings WHERE id = :id
			};
			#sql [connCtx] {
				COMMIT
			};
		} else {
			#sql [connCtx, execCtx] {
				DELETE FROM amficom.alertings WHERE id = :id
			};
			#sql [connCtx, execCtx] {
				COMMIT
			};
		}
	}

	/**
	 * Should only be invoked by AlertingImpl.delete(String)
	 */
	public void delete(String id) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			delete(id, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String[] getMatchingIds(String alertingMessageUserId, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if (alertingMessageUserId == null)
			return new String[0];
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.alertings WHERE alerting_message_user_id = :(alertingMessageUserId)
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.alertings WHERE alerting_message_user_id = :(alertingMessageUserId)
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.alertings WHERE alerting_message_user_id = :(alertingMessageUserId)
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	public String[] getMatchingIds(String alertingMessageUserId) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getMatchingIds(alertingMessageUserId, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	#sql final iterator IdIterator(String id);
}
