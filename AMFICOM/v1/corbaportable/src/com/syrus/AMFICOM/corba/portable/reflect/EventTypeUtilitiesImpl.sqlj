/*
 * $Id: EventTypeUtilitiesImpl.sqlj,v 1.1 2004/06/22 12:27:24 bass Exp $
 *
 * Copyright © 2004 Syrus Systems.
 * Научно-технический центр.
 * Проект: АМФИКОМ.
 */

package com.syrus.AMFICOM.corba.portable.reflect;

import com.syrus.AMFICOM.corba.portable.common.DatabaseAccessException;
import com.syrus.AMFICOM.corba.portable.reflect.common.ImmutableObjectResourceUtilitiesImpl;
import java.sql.SQLException;
import java.util.ArrayList;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;

/**
 * @version $Revision: 1.1 $, $Date: 2004/06/22 12:27:24 $
 * @author $Author: bass $
 */
public final class EventTypeUtilitiesImpl extends ImmutableObjectResourceUtilitiesImpl implements EventTypeUtilitiesOperations {
	public EventTypeUtilitiesImpl() {
	}

	protected String[] getIds(DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		IdIterator idIterator;
		if (connCtx == null) {
			#sql idIterator = {
				SELECT id FROM amficom.eventtypes
			};
		} else if (execCtx == null) {
			#sql [connCtx] idIterator = {
				SELECT id FROM amficom.eventtypes
			};
		} else {
			#sql [connCtx, execCtx] idIterator = {
				SELECT id FROM amficom.eventtypes
			};
		}
		ArrayList ids = new ArrayList();
		while (idIterator.next())
			ids.add(idIterator.id());
		idIterator.close();
		return (String[]) (ids.toArray(new String[ids.size()]));
	}

	protected String getCodename(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String codename;
		if (connCtx == null) {
			#sql {
				SELECT codename INTO :codename FROM amficom.eventtypes WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT codename INTO :codename FROM amficom.eventtypes WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT codename INTO :codename FROM amficom.eventtypes WHERE id = :id
			};
		}
		return ((codename == null) ? "" : codename);
	}

	protected String getName(String id, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		String name;
		if (connCtx == null) {
			#sql {
				SELECT name INTO :name FROM amficom.eventtypes WHERE id = :id
			};
		} else if (execCtx == null) {
			#sql [connCtx] {
				SELECT name INTO :name FROM amficom.eventtypes WHERE id = :id
			};
		} else {
			#sql [connCtx, execCtx] {
				SELECT name INTO :name FROM amficom.eventtypes WHERE id = :id
			};
		}
		return ((name == null) ? "" : name);
	}

	String[] getSelectedEventTypes1(String eventSource, String alarmType, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alarmType == null) || (eventSource == null))
			return new String[0];
		EventTypeIdIterator eventTypeIdIterator;
		if (connCtx == null) {
			#sql eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourceeventtyperules WHERE source_id = :(eventSource) AND logic_text = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		} else if (execCtx == null) {
			#sql [connCtx] eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourceeventtyperules WHERE source_id = :(eventSource) AND logic_text = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		} else {
			#sql [connCtx, execCtx] eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourceeventtyperules WHERE source_id = :(eventSource) AND logic_text = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		}
		ArrayList eventTypes = new ArrayList();
		while (eventTypeIdIterator.next()) {
			try {
				eventTypes.add(eventTypeIdIterator.event_type_id());
			} catch (SQLException sqle) {
				sqle.printStackTrace();
			}
		}
		eventTypeIdIterator.close();
		return (String[]) (eventTypes.toArray(new String[eventTypes.size()]));
	}

	public String[] getSelectedEventTypes1(String eventSource, String alarmType) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSelectedEventTypes1(eventSource, alarmType, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String[] getSelectedEventTypes2(String eventSourceType, String alarmType, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		if ((alarmType == null) || (eventSourceType == null))
			return new String[0];
		EventTypeIdIterator eventTypeIdIterator;
		if (connCtx == null) {
			#sql eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourcetypeeventtypelinks WHERE source_type_id = :(eventSourceType) AND default_reaction_substring = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		} else if (execCtx == null) {
			#sql [connCtx] eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourcetypeeventtypelinks WHERE source_type_id = :(eventSourceType) AND default_reaction_substring = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		} else {
			#sql [connCtx, execCtx] eventTypeIdIterator = {
				SELECT event_type_id FROM amficom.sourcetypeeventtypelinks WHERE source_type_id = :(eventSourceType) AND default_reaction_substring = :((new StringBuffer("GENERATE_ALARM(\"")).append(alarmType).append("\")").toString())
			};
		}
		ArrayList eventTypes = new ArrayList();
		while (eventTypeIdIterator.next()) {
			try {
				eventTypes.add(eventTypeIdIterator.event_type_id());
			} catch (SQLException sqle) {
				sqle.printStackTrace();
			}
		}
		eventTypeIdIterator.close();
		return (String[]) (eventTypes.toArray(new String[eventTypes.size()]));
	}

	public String[] getSelectedEventTypes2(String eventSourceType, String alarmType) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSelectedEventTypes2(eventSourceType, alarmType, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getSelectedEventType1(String eventSource, String alarmType, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		try {
			String selectedEventType1 = getSelectedEventTypes1(eventSource, alarmType, connCtx, execCtx)[0];
			return ((selectedEventType1 == null) ? "" : selectedEventType1);
		} catch (ArrayIndexOutOfBoundsException aioobe) {
			return "";
		}
	}

	public String getSelectedEventType1(String eventSource, String alarmType) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSelectedEventType1(eventSource, alarmType, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	String getSelectedEventType2(String eventSourceType, String alarmType, DefaultContext connCtx, ExecutionContext execCtx) throws SQLException {
		try {
			String selectedEventType2 = getSelectedEventTypes2(eventSourceType, alarmType, connCtx, execCtx)[0];
			return ((selectedEventType2 == null) ? "" : selectedEventType2);
		} catch (ArrayIndexOutOfBoundsException aioobe) {
			return "";
		}
	}

	public String getSelectedEventType2(String eventSourceType, String alarmType) throws DatabaseAccessException {
		try {
			DefaultContext connCtx = DefaultContext.getDefaultContext();
			ExecutionContext execCtx = connCtx.getExecutionContext();
			return getSelectedEventType2(eventSourceType, alarmType, connCtx, execCtx);
		} catch (SQLException sqle) {
			throw new DatabaseAccessException();
		}
	}

	#sql final iterator IdIterator(String id);

	#sql private final iterator EventTypeIdIterator(String event_type_id);
}
