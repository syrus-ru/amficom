package com.syrus.AMFICOM.server.load;

import com.syrus.AMFICOM.server.*;
import com.syrus.io.FileToDirectory;
import java.io.*;
import java.sql.SQLException;
import oracle.sql.BLOB;

public class LoadImages
{
	LogWriter frame;
	ConnectionManager connectionManager;

	protected LoadImages()
	{
	}

	public LoadImages(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
		frame.log("Loading images:");
			File file;
			FileToDirectory ftd;
//			if(true)
//				return;

			try
			{
				file = new File("resources/images/images.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					upload(
						(String )ftd.read("@id"),
						(String )ftd.read("@name"),
						(String )ftd.read("@fname"),
						(String )ftd.read("@source_string"),
						Integer.parseInt((String )ftd.read("@sx")),
						Integer.parseInt((String )ftd.read("@sy")));
				}
			}
			catch(Exception e)
			{
				frame.log("FILE images/images.txt NOT LOADED");
			}

/*
		try
		{
			upload("image_sysdomain", "Name 2", "images/db/mos.gif", "file", 35, 57);
			upload("image_syscategory", "Name 3", "images/db/syscat.gif", "file", 35, 57);
			upload("image_sysuser", "Name 8", "images/db/sys_u.gif", "file", 35, 57);
			upload("image_admincategory", "Name 4", "images/db/sys_user.gif", "file", 35, 57);
			upload("image_opcategory", "Name 5", "images/db/186t.gif", "file", 35, 57);
			upload("image_supcategory", "Name 6", "images/db/186t.gif", "file", 35, 57);
			upload("image_configcategory", "Name 7", "images/db/186t.gif", "file", 35, 57);
			upload("imgage1", "Name 1", "images/db/pc.gif", "file", 35, 57);
			upload("imgage2", "Name 9", "images/db/186t.gif", "file", 35, 57);
			upload("node", "Node image", "images/db/node.gif", "file", 35, 57);
//			upload("images/db/node.gif", "Node image", "images/db/node.gif", "file", 35, 57);
			upload("void", "Node image", "images/db/void.gif", "file", 35, 57);

			upload("hps", "hos image", "images/db/hps.gif", "file", 35, 57);
			upload("questprobe", "questprobe image", "images/db/questprobe.gif", "file", 35, 57);
			upload("wins", "wins image", "images/db/wins.gif", "file", 35, 57);
			upload("well", "well image", "images/db/well.gif", "file", 35, 57);
			upload("net", "net image", "images/db/net.gif", "file", 35, 57);
			frame.log("All images loaded.");
		}
		catch(SQLException e)
		{
			frame.log("Could not finish operation");
		}
*/
			frame.log("All images loaded.");
	}

	public void upload(String id, String name, String fname, String source_string, int sx, int sy)
			throws SQLException
	{
		frame.log("insert image ID: " + id + ", NAME:" + name + ", FILE:" + fname);
		try
		{
		#sql
		{
			insert into AMFICOM.IMAGERESOURCES(
				ID,
				NAME,
				CODENAME,
				IMG,
				SOURCE_STRING,
				FILENAME,
				SIZE_X,
				SIZE_Y,
				MODIFIED)
			values(
				:id,
				:name,
				:id,
				empty_blob(),
				:source_string,
				:fname,
				:sx,
				:sy,
				SYSDATE)
		};
		}
		catch(SQLException e)
		{
			frame.log("Could not insert image - trying to update...");
		}
		try
		{
			if(source_string.equals("bytes"))
				PutImage(id, fname);
		}
		catch(SQLException ex)
		{
			frame.log("File not loaded");
		}
		#sql { commit };
	}

	public int PutImage(String id, String filename) throws SQLException
	{
		BLOB blob;
		int count;

		#sql { select IMG into :blob from AMFICOM.IMAGERESOURCES
			where ID = :id for update };

		frame.log("upload image from " + filename);

		if (blob != null)
		{
		try
		{
			InputStream file = new FileInputStream(filename);
			int nread;
			int bufsize = 10*1024;
			int offs = 1;
			byte buf[] = new byte[bufsize];
			OutputStream out = blob.getBinaryOutputStream();
			while ( ( nread = file.read(buf)) > 0 )
			{
				#sql { call dbms_lob.write(:INOUT blob, :nread, :offs, :buf) };
				offs += nread;
			}
		}
		catch(FileNotFoundException e)
		{
			System.out.println("File not found");
			e.printStackTrace();
		}
		catch(IOException e)
		{
			System.out.println("IO error in PutMap");
			e.printStackTrace();
		}

			#sql { update AMFICOM.IMAGERESOURCES set IMG = :blob where ID = :id };
			#sql { commit };
		}
		frame.log("... file Ok");
		return 0;
	}

}

