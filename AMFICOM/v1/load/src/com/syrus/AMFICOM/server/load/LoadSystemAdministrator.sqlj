package com.syrus.AMFICOM.server.load;

import com.syrus.AMFICOM.server.*;
import java.sql.SQLException;

public class LoadSystemAdministrator
{
	LogWriter frame;
	ConnectionManager connectionManager;

	protected LoadSystemAdministrator()
	{
	}

	public LoadSystemAdministrator(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
		try{
			connectionManager.getConnCtx().getConnection().setAutoCommit(false);
		} catch (Exception exx) {}
		frame.log("Loading system administration data:");
		try
		{
//			#sql { commit };
//			frame.log("Ok!");
//			if(true)
//				return;

			loadSysProfile(
					"sysuser",
					"sys",
					"sys",
					"sys",
					"sysuser",
					"системный пользователь",
					"sys",//login
					"sys",//password
					"ok",
					"active",
					"",
					"",
					"normal",
					"",
					"", "", "", "", "", "", "", "", "", "", "", "", "", "");
//					"image_sysuser");

			String us_id = getOperatorUser("sysuser");

			loadDomain(
					"sysdomain",
					"системный домен",
					"sysdomain",
					"",
					"image_sysdomain",
					" описание - просто домен",
					"sys");
/*					
			loadCategory(
					"syscategory",
					"Системный администратор",
					"sys",
					"описание - системный администратор",
					"image_syscategory");
			loadCategory(
					"admincategory",
					"Администратор",
					"admin",
					"описание - администратор",
					"image_admincategory");
			loadCategory(
					"configcategory",
					"Проектировщик",
					"config",
					"описание - проектировщик",
					"image_configcategory");
			loadCategory(
					"anacategory",
					"Аналитик",
					"ana",
					"описание - аналитик",
					"image_anacategory");
			loadCategory(
					"opercategory",
					"Оператор",
					"oper",
					"описание - оператор",
					"image_opcategory");
			loadCategory(
					"speccategory",
					"Специалист",
					"spec",
					"описание - специалист",
					"image_speccategory");
			loadCategory(
					"clientcategory",
					"Пользователь",
					"client",
					"описание - пользователь",
					"image_clientcategory");
*/					
/*
			loadGroup(
					"group1",
					"Системные администраторы",
					"sysusers",
					us_id,
					"Системные администраторы");

			setProfileGroup("sys", "group1");
*/
/*
			setProfileCategory("sys", "syscategory");
			setProfileCategory("sys", "admincategory");
			setProfileCategory("sys", "configcategory");
			setProfileCategory("sys", "anacategory");
			setProfileCategory("sys", "opercategory");
			setProfileCategory("sys", "speccategory");
			setProfileCategory("sys", "clientcategory");
*/
			#sql { commit };

			frame.log("All administration data loaded.");
		}
		catch(SQLException e)
		{
			frame.log("Could not finish operation");
		}
	}

	public void loadDomain(
			String id,
			String name,
			String codename,
			String domain_id,
			String image_id,
			String description,
			String user_id)
	{
		frame.log("load domain ID:" + id + " NAME:" + name + " USER:" + user_id);
		try
		{
		#sql
		{
			insert into AMFICOM.DOMAINS(ID, NAME, CODENAME, DESCRIPTION,
				CREATED, CREATED_BY, MODIFIED, MODIFIED_BY,
				OWNER_ID)
			values(:id, :name, :codename, :description,
				SYSDATE, :user_id, SYSDATE, :user_id,
				:user_id )
		};
		}
		catch(SQLException e)
		{
			frame.log("domain exists - updating...");
			try
			{
			#sql
			{
				update AMFICOM.DOMAINS set
						NAME = :name,
						CODENAME = :codename,
						DESCRIPTION = :description,
						MODIFIED = SYSDATE,
						MODIFIED_BY = :user_id,
						OWNER_ID = :user_id,
						DOMAIN_ID = :domain_id
					where ID = :id
			};
			}
			catch(SQLException ex)
			{
				frame.log("could not load domain: " + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}

	public void loadCategory(
			String id,
			String name,
			String codename,
			String description,
			String image_id)
	{
		frame.log("load category ID:" + id + " NAME:" + name);
		try
		{
		#sql
		{ insert into AMFICOM.CATEGORIES(ID, NAME, CODENAME,
				DESCRIPTION)
			values(:id, :name, :codename, :description )
		};
		}
		catch(SQLException e)
		{
			frame.log("category exists - updating...");
			try
			{
			#sql
			{ update AMFICOM.CATEGORIES set
					NAME = :name,
					CODENAME = :codename,
					DESCRIPTION = :description
				where Id = :id
			};
			}
			catch(SQLException ex)
			{
				frame.log("could not load category: " + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}

	public void loadGroup(
			String id,
			String name,
			String codename,
			String user_id,
			String description)
	{
		frame.log("load group ID:" + id + " NAME:" + name);
		try
		{
		#sql
		{ insert into AMFICOM.GROUPS(ID, NAME, CODENAME, DESCRIPTION,
				CREATED, CREATED_BY, MODIFIED, MODIFIED_BY, OWNER_ID)
			values(:id, :name, :codename, :description,
				SYSDATE, :user_id, SYSDATE, :user_id, :user_id )
		};
		}
		catch(SQLException e)
		{
			frame.log("group exists - updating...");
			try
			{
			#sql
			{ update AMFICOM.GROUPS set
					NAME = :name,
					CODENAME = :codename,
					DESCRIPTION = :description,
					CREATED = SYSDATE,
					CREATED_BY = :user_id,
					MODIFIED = SYSDATE,
					MODIFIED_BY = :user_id,
					OWNER_ID = :user_id
				where ID = :id
			};
			}
			catch(SQLException ex)
			{
				frame.log("could not load group: " + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}

	public void loadSysProfile(
			String id,
			String name,
			String codename,
			String user_id,
			String owner_id,
			String description,

			String login,
			String password,
			String status,
			String state,

			String disabled,
			String disabled_comments,

			String priority,
			String logfile,

			String first_name,
			String second_name,
			String last_name,
			String phone_work,
			String phone_home,
			String phone_mobile,
			String phone_emergency,

			String pager_phone,
			String pager_number,
			String sms_number,

			String address,
			String language,
			String organization,
			String e_mail)

//			String image_id)
	{
		String us_id = "";
		frame.log("load profile ID:" + id + " NAME:" + name + " LOGIN:" + login);
		try
		{
//				CREATED, CREATED_BY, MODIFIED, MODIFIED_BY, USER_ID,
//				SYSDATE, :user_id, SYSDATE, :user_id, :user_id,

			String q1 = "alter table operatorprofiles" +
				" modify (created_by null," +
				" modified_by null," +
				" user_id null," +
				" owner_id null," +
				" modified null," +
				" created null)";

			#sql
			{
			BEGIN
				execute immediate :q1;
			END;
			};
			frame.log("profiles table altered...");

			#sql
			{
				insert into AMFICOM.OPERATORPROFILES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						LOGIN,
						PASSWORD)
					values(
						:id,
						:name,
						:codename,
						:description,
						:login,
						empty_blob())
			};

			frame.log("profile inserted");
			#sql { commit };

			loadUser(user_id, id, "operatorprofile", login);

			frame.log("profile inserted");
			#sql
			{
				select ID into :us_id from AMFICOM.USERS
					where TYPE = 'operatorprofile' and OPERATOR_ID = :id
			};
			frame.log("selectd user " + us_id);
			#sql
			{
				update AMFICOM.OPERATORPROFILES set
						CREATED = SYSDATE,
						CREATED_BY = :us_id,
						MODIFIED = SYSDATE,
						MODIFIED_BY = :us_id,
						USER_ID = :us_id,
						OWNER_ID = :us_id
					where ID = :id
			};
			#sql { commit };
			frame.log("updated id:" + id + " name:" + name + " codename:" + codename +
						" description:" + description + " login:" + login +
						" user_id:" + us_id);

			String q2 = "alter table operatorprofiles" +
				" modify (created_by not null," +
				" modified_by not null," +
				" user_id not null," +
				" owner_id not null," +
				" modified not null," +
				" created not null)";

			#sql
			{
			BEGIN
				execute immediate :q2;
			END;
			};
			frame.log("profiles table altered!");

		}
		catch(SQLException e)
		{
			frame.log("could not load profile: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public void loadUser(
			String id,
			String object_id,
			String type,
			String login)
	{
		System.out.println("load user...");
		if(type.equals("operatorprofile"))
		{
			System.out.println("for operator...");
			try
			{
				#sql
				{
					insert into AMFICOM.USERS(
							ID,
							LOGIN,
							TYPE,
							OPERATOR_ID)
					values(
						:id,
						:login,
						:type,
						:object_id )
				};
			}
			catch(SQLException e)
			{
				System.out.println("user exists - updating...");
				try
				{
					#sql
					{ update AMFICOM.USERS set
							LOGIN = :login,
							TYPE = :type,
							OPERATOR_ID = :object_id
						where Id = :id
					};
				}
				catch(SQLException ex)
				{
					System.out.println("could not save user: " + ex.getMessage());
				}
			}
		}
	}

	public void loadProfile(
			String id,
			String name,
			String codename,
			String user_id,
			String description,

			String login,
			String password,
			String status,
			String state,

			String disabled,
			String disabled_comments,

			String priority,
			String logfile,

			String first_name,
			String second_name,
			String last_name,
			String phone_work,
			String phone_home,
			String phone_mobile,
			String phone_emergency,

			String pager_phone,
			String pager_number,
			String sms_number,

			String address,
			String language,
			String organization,
			String e_mail,

			String image_id)

	{
		String us_id = "";
		frame.log("load profile ID:" + id + " NAME:" + name + " LOGIN:" + login);
		try
		{
		#sql
		{
			insert into AMFICOM.OPERATORPROFILES(ID, NAME, CODENAME, DESCRIPTION,
					CREATED, CREATED_BY, MODIFIED, MODIFIED_BY, USER_ID,
					LOGIN, PASSWORD)
				values(:id, :name, :codename, :description,
					SYSDATE, :user_id, SYSDATE, :user_id, :user_id,
					:login, :password)
		};
		}
		catch(SQLException e)
		{
			frame.log("profile exists - updating...");
			try
			{
			#sql
			{
				update AMFICOM.OPERATORPROFILES set
						NAME = :name,
						CODENAME = :codename,
						DESCRIPTION = :description,
						CREATED = SYSDATE,
						CREATED_BY = :user_id,
						MODIFIED = SYSDATE,
						MODIFIED_BY = :user_id,
						USER_ID = :user_id,
						LOGIN = :login,
						PASSWORD = :password
					where ID = :id
			};
			}
			catch(SQLException ex)
			{
				frame.log("could not load profile: " + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}

	public void setProfileGroup(String user_id, String group_id)
			throws SQLException
	{
		frame.log("for profile ID:" + user_id + " set group ID:" + group_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.USERGROUPS
					where USER_ID = :user_id
					and GROUP_ID = :group_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "opglink";
			#sql { select AMFICOM.OPG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{ insert into AMFICOM.USERGROUPS(ID, USER_ID, GROUP_ID)
				values(:id_v, :user_id, :group_id)
			};
		}
		catch(SQLException e)
		{
			frame.log("could not set group for profile: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public void setProfileCategory(String user_id, String category_id)
			throws SQLException
	{
		frame.log("for profile ID:" + user_id + " set category ID:" + category_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.USERCATEGORIES
					where USER_ID = :user_id
					and CATEGORY_ID = :category_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "opclink";
			#sql { select AMFICOM.OPC_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{ insert into AMFICOM.USERCATEGORIES(ID, USER_ID, CATEGORY_ID)
				values(:id_v, :user_id, :category_id)
			};
		}
		catch(SQLException e)
		{
			frame.log("could not set category for profile: " + e.getMessage());
			e.printStackTrace();
		}
	}

	public String getOperatorUser(String op_id)
	{
		String id = "";
		try
		{
		#sql
		{
			select ID into :id from AMFICOM.USERS
				where TYPE = 'operatorprofile' and OPERATOR_ID = :op_id
		};
		}
		catch(SQLException e)
		{
			frame.log("could not get operator user: " + e.getMessage());
			e.printStackTrace();
		}
		frame.log("for operator: " + op_id + " user ID is: " + id);
		return id;
	}

}

