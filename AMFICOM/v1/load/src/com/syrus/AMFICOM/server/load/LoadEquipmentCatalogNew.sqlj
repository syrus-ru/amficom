// Copyright (c) Syrus Systems 2000 Syrus Systems
package com.syrus.AMFICOM.server.load;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import java.io.*;
import java.util.*;

import com.syrus.io.*;
import com.syrus.AMFICOM.server.*;
import com.syrus.io.FileToDirectory;

public class LoadEquipmentCatalogNew
{
	LogWriter frame;
	ConnectionManager connectionManager;

	protected LoadEquipmentCatalogNew()
	{
	}

	public LoadEquipmentCatalogNew(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
		frame.log("Loading Net Catalogue data:");
		try
		{
			connectionManager.m_ctx.getConnection().setAutoCommit(false);
		}
		catch (Exception exx) {}
		try
		{
			File file;
			FileToDirectory ftd;
			String[] fnames;
			int i;

//			#sql { commit };
//			frame.log("Ok!");
//			if(true)
//				return;

//----------------------------------  Характеристики   -------------------------

			fnames = new String[] {
				"resources/types/characteristicelectrical.txt",//-----------  Электрические
				"resources/types/characteristicoperational.txt",//---------- Эксплуатационные
				"resources/types/characteristicoptical.txt",//----------- Оптические
				"resources/types/characteristicmeasurement.txt" };//----------- Измерительные
			for(i = 0; i < fnames.length; i++)
			{
				file = new File(fnames[i]);
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					loadCharacteristicType(
						(String )ftd.read("@id"),
						(String )ftd.read("@name"),
						(String )ftd.read("@value_type_id"),
						((String )ftd.read("@is_editable")).equals("true"),
						((String )ftd.read("@is_visible")).equals("true"),
						(String )ftd.read("@ch_class"));
				}
			}

//---------------------------   Оптические волокна   ---------------------------
//----------------------------------  Патчкорды   ------------------------------

			file = new File("resources/types/link.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadLinkType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@codename"),
					(String )ftd.read("@description"),
					(String )ftd.read("@year"),
					(String )ftd.read("@standard"),
					(String )ftd.read("@link_class"),
					false);

				Hashtable ht = (Hashtable )ftd.read("@characteristics");
				if(ht != null)
					for(Enumeration e = ht.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setLinkTypeCharacteristic(
							id,
							key,
							(String )ht.get(key));
					}
			}

//---------------------------        Кабели       ------------------------------

			file = new File("resources/types/cable.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadCableType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@codename"),
					(String )ftd.read("@description"),
					(String )ftd.read("@link_class"));

				Hashtable ht = (Hashtable )ftd.read("@characteristics");
				if(ht != null)
					for(Enumeration e = ht.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setCableLinkTypeCharacteristic(
							id,
							key,
							(String )ht.get(key));
					}

				Hashtable ht2 = (Hashtable )ftd.read("@threads");
				if(ht2 != null)
					for(Enumeration e = ht2.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();

						MyStringTokenizer parser = new MyStringTokenizer((String )ht2.get(key));
						String lt_id = parser.nextToken();
						String thread_class = parser.finalToken();

						setCableTypeThread(
							key,
							key,
							id,
							lt_id);
					}
			}

//---------------------------        Пути тестирования       ------------------------------
			file = new File("resources/types/path.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadPathType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@description"));

			}

//---------------------------------- Оптические коннекторы ------------------------------------------------------

			file = new File("resources/types/port.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadPortType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@codename"),
					(String )ftd.read("@description"),
					(String )ftd.read("@year"),
					(String )ftd.read("@standard"),
					(String )ftd.read("@p_class"),
					(String )ftd.read("@interface_id"));

				Hashtable ht = (Hashtable )ftd.read("@characteristics");
				if(ht != null)
					for(Enumeration e = ht.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setPortTypeCharacteristic(
							id,
							key,
							(String )ht.get(key));
					}

			//setPortTypeLinkType( "fcpcporttype", "SSF");
			//setPortTypeLinkType( "fcpcporttype", "patchcordtype1");
			}

//---------------------------------- Кабельные порты ------------------------------------------------------

			file = new File("resources/types/cableport.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadCablePortType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@codename"),
					(String )ftd.read("@description"),
					(String )ftd.read("@p_class"));

				Hashtable ht = (Hashtable )ftd.read("@characteristics");
				if(ht != null)
					for(Enumeration e = ht.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setCablePortTypeCharacteristic(
							id,
							key,
							(String )ht.get(key));
					}

			//setPortTypeLinkType( "fcpcporttype", "SSF");
			//setPortTypeLinkType( "fcpcporttype", "patchcordtype1");
			}

//---------------------------------- Порты тестирования ------------------------

			file = new File("resources/types/accessport.txt");
			ftd = new FileToDirectory(file);
			while(ftd.hasMoreElements())
			{
				ftd.nextElement();
				String id = (String )ftd.read("@id");
				loadAccessPortType(
					id,
					(String )ftd.read("@name"),
					(String )ftd.read("@description"));

				Hashtable ht = (Hashtable )ftd.read("@characteristics");
				if(ht != null)
					for(Enumeration e = ht.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setAccessPortTypeCharacteristic(
							id,
							key,
							(String )ht.get(key));
					}

				Hashtable ht2 = (Hashtable )ftd.read("@test_type_ids");
				if(ht2 != null)
					for(Enumeration e = ht2.keys(); e.hasMoreElements();)
					{
						String key = (String )e.nextElement();
						setAccessPortTypeTestType(id, key);
					}
			//setPortTypeLinkType( "fcpcporttype", "SSF");
			//setPortTypeLinkType( "fcpcporttype", "patchcordtype1");
			}

//---------------------------------- Оптическое оборудование -------------------

			fnames = new String[] {
				"resources/types/equipmentmufta.txt",//-----------  Муфты
				"resources/types/equipmentswitch.txt",//---- Оптический коммутатор
				"resources/types/equipmentcross.txt",//-------- Оптический кросс
				"resources/types/equipmentmultiplexor.txt",//- Оптический мультиплексор
				"resources/types/equipmentfilter.txt",//----- Оптический фильтр
				"resources/types/equipmenttransmitter.txt",//-------- Transmitter
				"resources/types/equipmentreciever.txt",//----------- Reciever
				"resources/types/equipmentotdr.txt",//------------- KIS OTDR
				"resources/types/equipmentotau.txt" };//------------ KIS OTAU
			for(i = 0; i < fnames.length; i++)
			{
				file = new File(fnames[i]);
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadEquipmentType(
						id,
						(String )ftd.read("@name"),
						(String )ftd.read("@codename"),
						(String )ftd.read("@description"),
						(String )ftd.read("@manufacturer"),
						(String )ftd.read("@eq_class"),
						false);

					Hashtable ht = (Hashtable )ftd.read("@characteristics");
					if(ht != null)
						for(Enumeration e = ht.keys(); e.hasMoreElements();)
						{
							String key = (String )e.nextElement();
							setEquipmentTypeCharacteristic(
								id,
								key,
								(String )ht.get(key));
						}
				}
			}

//--------------------------------------------------------------------------------------

			LoadSystemAdministrator lsa = new LoadSystemAdministrator(frame, connectionManager);
			String us_id = lsa.getOperatorUser("sysuser");

			#sql { commit };

			frame.log("All Net Catalogue data loaded.");
		}
		catch(SQLException e)
		{
			frame.log("Could not finish operation");
		}
		catch(IOException e)
		{
			frame.log("Could not finish operation");
		}
	}

	public void loadCharacteristicType(
			String id,
			String name,
			String value_type_id,
			boolean is_editable,
			boolean is_visible,
			String ch_class)
	{
		frame.log("load char type ID:" + id + " NAME:" + name + " of TYPE:" + value_type_id);
		int is_ed = (is_editable)? 1 : 0;
		int is_vis = (is_visible)? 1 : 0;
		try
		{
			#sql {
				insert into AMFICOM.CHARACTERISTICTYPES(
						ID,
						NAME,
						VALUE_TYPE_ID,
						CH_CLASS,
						IS_EDITABLE,
						IS_VISIBLE,
						MODIFIED)
					values(
						:id,
						:name,
						:value_type_id,
						:ch_class,
						:is_ed,
						:is_vis,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("char type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.CHARACTERISTICTYPES
						set NAME = :name,
							VALUE_TYPE_ID = :value_type_id,
							CH_CLASS = :ch_class,
							IS_EDITABLE = :is_ed,
							IS_VISIBLE = :is_vis,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing char type: " + exx.getMessage());
			}
		}
	}

	public void loadLinkType(
			String id,
			String name,
			String codename,
			String description,
			String year,
			String standard,
			String link_class,
			boolean is_holder)
	{
		int is_h = (is_holder)? 1 : 0;
		frame.log("load link type ID:" + id + " NAME:" + name + " holder:" + is_holder);
		try
		{
			#sql {
				insert into AMFICOM.LINKTYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						YEAR,
						STANDARD,
						LINK_CLASS,
						IS_SLOT,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:description,
						:year,
						:standard,
						:link_class,
						:is_h,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("link type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.LINKTYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							YEAR = :year,
							STANDARD = :standard,
							LINK_CLASS = :link_class,
							IS_SLOT = :is_h,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing link type: " + exx.getMessage());
			}
		}
	}

	public void loadCableType(
			String id,
			String name,
			String codename,
			String description,
			String link_class)
	{
		frame.log("load cable type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.CABLETYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						LINK_CLASS,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:description,
						:link_class,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("cable type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.CABLETYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							LINK_CLASS = :link_class,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing cable type: " + exx.getMessage());
			}
		}
	}

	public void loadPathType(
			String id,
			String name,
			String description)
	{
		frame.log("load path type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.PATHTYPES(
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED)
					values(
						:id,
						:name,
						:description,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("path type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.PATHTYPES
						set NAME = :name,
							DESCRIPTION = :description,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing path type: " + exx.getMessage());
			}
		}
	}

	public void setLinkTypeCharacteristic(
			String link_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for link type ID:" + link_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.LINKTYPECHARACTERISTICLINKS
					where LINK_TYPE_ID = :link_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ltchl";
			#sql { select AMFICOM.LTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.LINKTYPECHARACTERISTICLINKS(ID, LINK_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :link_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for link type: " + ex.getMessage());
		}
	}

	public void setCableLinkTypeCharacteristic(
			String link_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for cable link type ID:" + link_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.CABLETYPECHARACTERISTICLINKS
					where CABLE_TYPE_ID = :link_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ltchl";
			#sql { select AMFICOM.LTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.CABLETYPECHARACTERISTICLINKS(ID, CABLE_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :link_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for cable link type: " + ex.getMessage());
		}
	}

	public void setCableTypeThread(
			String id,
			String name,
			String cable_type_id,
			String link_type_id)
	{
		frame.log("set link TYPE" + link_type_id + " NAME: " + name + " for cable type ID:" + cable_type_id);
		try
		{
//			#sql
//			{
//				delete from AMFICOM.CABLETYPETHREADS
//					where CABLE_TYPE_ID = :cable_type_id
//			};
		
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.CABLETYPETHREADS
					where CABLE_TYPE_ID = :cable_type_id
					and NAME = :name
			};
			if(count != 0)
				return;

			int id_i;
  			String id_v = "cf";
			#sql { select AMFICOM.LNK_SEQ.NEXTVAL into :id_i from SYS.DUAL };
			id_v = id_v + String.valueOf(id_i);
			#sql
			{
				insert into AMFICOM.CABLETYPETHREADS(
						ID,
						NAME,
						CABLE_TYPE_ID,
						LINK_TYPE_ID)
				values(
						:id_v,
						:name,
						:cable_type_id,
						:link_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting link for cable type: " + ex.getMessage());
		}
	}

	public void setLinkCharacteristic(
			String link_id,
			String characteristic_type_id,
			String value)
	{
		frame.log("set char " + characteristic_type_id + " (VALUE: " + value + ") for link ID:" + link_id);
		try
		{
/*
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.LINKCHARACTERISTICS
					where LINK_ID = :link_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
*/
			int id1;
			String id_v1 = "char";
			#sql { select AMFICOM.CHAR_SEQ.NEXTVAL into :id1 from SYS.DUAL };
			id_v1 = id_v1 + String.valueOf(id1);
/*
			#sql
			{
				insert into AMFICOM.CHARACTERISTICS(ID, VALUE, TYPE_ID)
				values(:id_v1, :value, :characteristic_type_id)
			};
*/
			int id2;
			String id_v2 = "lchar";
			#sql { select AMFICOM.LCHL_SEQ.NEXTVAL into :id2 from SYS.DUAL };
			id_v2 = id_v2 + String.valueOf(id2);
			#sql
			{
				insert into AMFICOM.LINKCHARACTERISTICS(ID, LINK_ID, CHARACTERISTIC_TYPE_ID)
				values(:id_v2, :link_id, :id_v1)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for link: " + ex.getMessage());
		}
	}

	public void loadPortType(
			String id,
			String name,
			String codename,
			String description,
			String year,
			String standard,
			String p_class,
			String interface_id)
	{
		frame.log("load port type ID:" + id + " NAME:" + name + " INTERFACE:" + interface_id);
		try
		{
			#sql {
				insert into AMFICOM.PORTTYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						YEAR,
						STANDARD,
						P_CLASS,
						INTERFACE_ID,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:description,
						:year,
						:standard,
						:p_class,
						:interface_id,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("port type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.PORTTYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							YEAR = :year,
							STANDARD = :standard,
							P_CLASS = :p_class,
							INTERFACE_ID = :interface_id,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing port type: " + exx.getMessage());
			}
		}
	}

	public void loadCablePortType(
			String id,
			String name,
			String codename,
			String description,
			String p_class)
	{
		frame.log("load cable port type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.CABLEPORTTYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						P_CLASS,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:description,
						:p_class,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("port type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.CABLEPORTTYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing cable port type: " + exx.getMessage());
			}
		}
	}

	public void setPortTypeCharacteristic(
			String port_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for port type ID:" + port_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PORTTYPECHARACTERISTICLINKS
					where PORT_TYPE_ID = :port_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "plchl";
			#sql { select AMFICOM.PTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.PORTTYPECHARACTERISTICLINKS(ID, PORT_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :port_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for port type: " + ex.getMessage());
		}
	}

	public void setCablePortTypeCharacteristic(
			String cable_port_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for cable port type ID:" + cable_port_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.CABLEPORTTYPECHARACTERISTICS
					where CABLE_PORT_TYPE_ID = :cable_port_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "plchl";
			#sql { select AMFICOM.PTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.CABLEPORTTYPECHARACTERISTICS(ID, CABLE_PORT_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :cable_port_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for cable port type: " + ex.getMessage());
		}
	}

	public void setPortTypeLinkType(String port_type_id, String link_type_id)
	{
		frame.log("set link type " + link_type_id + " for port type ID:" + port_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PORTTYPELINKTYPES
					where LINK_TYPE_ID = :link_type_id
					and PORT_TYPE_ID = :port_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ptlt";
			#sql { select AMFICOM.PTLT_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.PORTTYPELINKTYPES(ID, LINK_TYPE_ID, PORT_TYPE_ID)
				values(:id_v, :link_type_id, :port_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting link type for port type: " + ex.getMessage());
		}
	}

	public void loadEquipmentType(
			String id,
			String name,
			String codename,
			String description,
			String manufacturer,
			String eq_class,
			boolean is_holder)
	{
		int is_h = (is_holder)? 1 : 0;
		frame.log("load equipment type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.EQUIPMENTTYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						MANUFACTURER,
						EQ_CLASS,
						IS_HOLDER,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:description,
						:manufacturer,
						:eq_class,
						:is_h,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("equipment type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.EQUIPMENTTYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							MANUFACTURER = :manufacturer,
							EQ_CLASS = :eq_class,
							IS_HOLDER = :is_h,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing equipment type: " + exx.getMessage());
			}
		}
	}

	public void setEquipmentTypeCharacteristic(
			String equipment_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for equipment type ID:" + equipment_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.EQUIPMENTTYPECHARACTERISTICLIN
					where EQUIPMENT_TYPE_ID = :equipment_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "etchl";
			#sql { select AMFICOM.ETCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.EQUIPMENTTYPECHARACTERISTICLIN(ID, EQUIPMENT_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :equipment_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for equipment type: " + ex.getMessage());
		}
	}


	public void setEquipmentTypePort(
			String equipment_type_id,
			String id,
			String port_type_id,
			String interface_id)
	{
		frame.log("set port " + id + " (TYPE: " + port_type_id + ") for equipment type ID:" + equipment_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PORTS
					where id = :id
					and EQUIPMENT_ID = :equipment_type_id
			};
			if(count != 0)
				return;

			#sql
			{
				insert into AMFICOM.PORTS(
						ID,
						NAME,
						TYPE_ID,
						INTERFACE_ID,
						EQUIPMENT_ID)
				values(
						:id,
						:id,
						:port_type_id,
						:interface_id,
						:equipment_type_id)
			};
			#sql { commit };


			int id1;
			String id_v = "etprt";
			#sql { select AMFICOM.EQPRT_SEQ.NEXTVAL into :id1 from SYS.DUAL };
			id_v = id_v + String.valueOf(id1);
			#sql
			{
				insert into AMFICOM.EQUIPMENTTYPEPORTS(
						ID,
						PORT_ID,
						EQUIPMENT_TYPE_ID)
				values(
						:id_v,
						:id,
						:equipment_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting port for equipment type: " + ex.getMessage());
		}
	}

	public void setPortCharacteristic(
			String port_id,
			String characteristic_type_id,
			String value)
	{
		frame.log("set char " + characteristic_type_id + " (VALUE: " + value + ") for port ID:" + port_id);
		try
		{
/*
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PORTCHARACTERISTICS
					where PORT_ID = :port_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
*/
			int id1;
			String id_v1 = "char";
			#sql { select AMFICOM.CHAR_SEQ.NEXTVAL into :id1 from SYS.DUAL };
			id_v1 = id_v1 + String.valueOf(id1);
/*
			#sql
			{
				insert into AMFICOM.CHARACTERISTICS(ID, VALUE, TYPE_ID)
				values(:id_v1, :value, :characteristic_type_id)
			};
*/
			int id2;
			String id_v2 = "pchar";
			#sql { select AMFICOM.PCHL_SEQ.NEXTVAL into :id2 from SYS.DUAL };
			id_v2 = id_v2 + String.valueOf(id2);
			#sql
			{
				insert into AMFICOM.PORTCHARACTERISTICS(ID, PORT_ID, CHARACTERISTIC_TYPE_ID)
				values(:id_v2, :port_id, :id_v1)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for port: " + ex.getMessage());
		}
	}

	public void loadTestPortType(
			String id,
			String name,
			String description,
			String port_type_id)
	{
		frame.log("load test port type ID:" + id + " NAME:" + name + " fro PORT TYPE:" + port_type_id);
		try
		{
			#sql {
				insert into AMFICOM.TESTPORTTYPES(
						ID,
						NAME,
						DESCRIPTION,
						PORT_TYPE_ID)
					values(
						:id,
						:name,
						:description,
						:port_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("test port type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.TESTPORTTYPES
						set NAME = :name,
							DESCRIPTION = :description,
							PORT_TYPE_ID = :port_type_id
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing test port type: " + exx.getMessage());
			}
		}
	}

	public void loadAccessPortType(
			String id,
			String name,
			String description)
	{
		frame.log("load access port type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.ACCESSPORTTYPEs(
						ID,
						NAME,
						DESCRIPTION,
						MODIFIED)
					values(
						:id,
						:name,
						:description,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("access port type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.ACCESSPORTTYPEs
						set NAME = :name,
							DESCRIPTION = :description,
							MODIFIED = SYSDATE
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing access port type: " + exx.getMessage());
			}
		}
	}

	public void setAccessPortTypeCharacteristic(
			String port_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for access port type ID:" + port_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ACCESSPORTTYPECHARLINKS
					where ACCESS_PORT_TYPE_ID = :port_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "aplchl";
			#sql { select AMFICOM.PTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.ACCESSPORTTYPECHARLINKS(ID, ACCESS_PORT_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :port_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for access port type: " + ex.getMessage());
		}
	}

	public void setAccessPortTypeTestType(
			String access_port_type_id,
			String test_type_id)
	{
		frame.log("set test type " + test_type_id + " for access port type ID:" + access_port_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ACCESSPORTTYPETESTTYPES
					where TEST_TYPE_ID = :test_type_id
					and ACCESS_PORT_TYPE_ID = :access_port_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "char";
			#sql { select AMFICOM.CHAR_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.ACCESSPORTTYPETESTTYPES(ID, TEST_TYPE_ID, ACCESS_PORT_TYPE_ID)
				values(:id_v, :test_type_id, :access_port_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting test type for access port type: " + ex.getMessage());
		}
	}
/*
	public void loadEquipmentType(
			String id,
			String name,
			String codename,
			String description,
			String manufacturer,
			String eq_class,
			boolean is_holder)
	{
		int is_h = (is_holder)? 1 : 0;
		frame.log("load KIS type ID:" + id + " NAME:" + name);
		try
		{
			#sql {
				insert into AMFICOM.KISTYPES(
						ID,
						NAME,
						CODENAME,
						DESCRIPTION,
						MANUFACTURER,
						EQ_CLASS,
						IS_HOLDER)
					values(
						:id,
						:name,
						:codename,
						:description,
						:manufacturer,
						:eq_class,
						:is_h)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("KIS type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.KISTYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							MANUFACTURER = :manufacturer,
							EQ_CLASS = :eq_class,
							IS_HOLDER = :is_h
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing KIS type: " + exx.getMessage());
			}
		}
	}

	public void setEquipmentTypeCharacteristic(
			String KIS_type_id,
			String characteristic_type_id,
			String default_value)
	{
		frame.log("set char " + characteristic_type_id + " (DEFAULT: " + default_value + ") for KIS type ID:" + KIS_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.KISTYPECHARACTERISTICLINKS
					where KIS_TYPE_ID = :KIS_type_id
					and CHARACTERISTIC_TYPE_ID = :characteristic_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ktchl";
			#sql { select AMFICOM.KTCHL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.KISTYPECHARACTERISTICLINKS(ID, KIS_TYPE_ID, CHARACTERISTIC_TYPE_ID, DEFAULT_VALUE)
				values(:id_v, :KIS_type_id, :characteristic_type_id, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting char for KIS type: " + ex.getMessage());
		}
	}
*/
	public void setKISTypePort(
			String KIS_type_id,
			String id,
			String port_type_id,
			String interface_id)
	{
		frame.log("set port " + id + " (TYPE: " + port_type_id + ") for KIS type ID:" + KIS_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PORTS
					where id = :id
					and EQUIPMENT_ID = :KIS_type_id
			};
			if(count != 0)
				return;

			#sql
			{
				insert into AMFICOM.PORTS(
						ID,
						NAME,
						TYPE_ID,
						INTERFACE_ID,
						EQUIPMENT_ID)
				values(
						:id,
						:id,
						:port_type_id,
						:interface_id,
						:KIS_type_id)
			};
			#sql { commit };


			int id1;
			String id_v = "ktprt";
			#sql { select AMFICOM.KSPRT_SEQ.NEXTVAL into :id1 from SYS.DUAL };
			id_v = id_v + String.valueOf(id1);
			#sql
			{
				insert into AMFICOM.KISTYPEPORTS(
						ID,
						PORT_ID,
						KIS_TYPE_ID)
				values(
						:id_v,
						:id,
						:KIS_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting port for KIS type: " + ex.getMessage());
		}
	}

	public void setKISTypeAccessPort(
			String KIS_type_id,
			String id,
			String access_port_type_id,
			String port_id)
	{
		frame.log("set access port " + id + " (TYPE: " + access_port_type_id + ") for KIS type ID:" + KIS_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ACCESSPORTS
					where ID = :id
					and KIS_ID = :KIS_type_id
			};
			if(count != 0)
				return;

			#sql
			{
				insert into AMFICOM.ACCESSPORTS(
						ID,
						NAME,
						TYPE_ID,
						PORT_ID,
						KIS_ID)
				values(
						:id,
						:id,
						:access_port_type_id,
						:port_id,
						:KIS_type_id)
			};
			#sql { commit };


			int id1;
			String id_v = "ktaprt";
			#sql { select AMFICOM.KSAPRT_SEQ.NEXTVAL into :id1 from SYS.DUAL };
			id_v = id_v + String.valueOf(id1);
			#sql
			{
				insert into AMFICOM.KISTYPEACCESSPORTS(
						ID,
						ACCESS_PORT_ID,
						KIS_TYPE_ID)
				values(
						:id_v,
						:id,
						:KIS_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting access port for KIS type: " + ex.getMessage());
		}
	}
}