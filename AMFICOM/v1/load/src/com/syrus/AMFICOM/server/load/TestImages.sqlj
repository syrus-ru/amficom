package com.syrus.AMFICOM.server.load;

import com.syrus.AMFICOM.CORBA.Constants;
import com.syrus.AMFICOM.CORBA.General.octetSeqHolder;
import com.syrus.AMFICOM.CORBA.Resource.*;
import com.syrus.AMFICOM.server.*;
import java.io.*;
import java.sql.SQLException;
import java.util.Vector;
import oracle.sql.BLOB;

public class TestImages
{
	LogWriter frame;
	ConnectionManager connectionManager;

	protected TestImages()
	{
	}

	public TestImages(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
		frame.log("Loading images:");
		try
		{
			ImageResource_Transferable img = ResourcedbInterface.loadImage("resources/proto/scheme/protoelement1049452634040");

				File file = new File("./dbim.bin");
//				file.mkdirs();
				FileOutputStream out = new FileOutputStream(file);
				out.write(img.image);
				out.flush();
				out.close();
/*
			ImageResourceSeq_TransferableHolder imageseq = new ImageResourceSeq_TransferableHolder();
			Vector image_ids = new Vector();
			image_ids.add("fastnet_proto");
			image_ids.add("nqms_proto");
			image_ids.add("analytic_proto");

			loadImages(imageseq, image_ids);
*/
			frame.log("All images loaded.");
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
	}

	static public int loadImages(
			ImageResourceSeq_TransferableHolder imageseq,
			Vector image_ids)
//		throws SQLError
	{
		int i;
		int len;
		ImageResource_Transferable im_r;
		Vector vector = new Vector();
		ImageResource_Transferable ir_t[];

		String id;
		String name;
		String codename;
		String filename;
		String source_string;
		BLOB blob;
		octetSeqHolder osh;
		len = image_ids.size();
		for(i = 0; i < len; i++)
		{
			String im_id = (String )image_ids.get(i);
			osh = new octetSeqHolder();
			System.out.println("loading image: " + im_id);
			try
			{
				#sql {
					select ID, NAME, CODENAME, FILENAME, SOURCE_STRING, IMG
						into :id, :name, :codename, :filename, :source_string, :blob
						from AMFICOM.IMAGERESOURCES
						where ID = :im_id
				};
				im_r = new ImageResource_Transferable(id, codename, source_string, filename, new byte[0]);
				if(source_string.equals("file"))
					vector.add(im_r);
				else
				if(source_string.equals("bytes"))
				{
					if(GetImage(blob, osh) == 0)
					{
						im_r.image = osh.value;
						vector.add(im_r);
					}
				}
			}
			catch(SQLException e)
			{
				System.out.println("error loading image ID: " + im_id + " - " + e.getMessage());
			}
		}
		ir_t = new ImageResource_Transferable[vector.size()];
		vector.copyInto(ir_t);
		imageseq.value = ir_t;
		return Constants.ERROR_NO_ERROR;
	}

	static public int GetImage(BLOB blob, octetSeqHolder octseqh)
//			throws SQLError
	{
	try
	{
		int length;
		long nread;
		int bufsize = 10*1024;
		byte[] mybytes;
		byte[] buf;
		int offs = 1;
		int i;

		#sql length = { VALUES(dbms_lob.getlength(:blob)) };

		mybytes = new byte[length];
		buf = new byte[bufsize];

		while ( offs <= length)
		{
			nread = ((length - (offs - 1) > bufsize)?
				bufsize : (length - (offs - 1)));
			#sql { call dbms_lob.read(:blob, :inout nread, :offs, :out buf) };
			for(i = 0; i < nread; i++)
				mybytes[offs - 1 + i] = buf[i];
			offs += nread;
		}
		octseqh.value = mybytes;
		return 0;
	}
	catch(SQLException e)
	{
		return 1;
	}
	}

}

