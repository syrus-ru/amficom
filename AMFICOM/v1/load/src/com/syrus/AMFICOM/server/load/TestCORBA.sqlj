package com.syrus.AMFICOM.server.load;

import com.syrus.AMFICOM.server.ConnectionManager;
import com.syrus.AMFICOM.server.LogWriter;

public class TestCORBA
{
	LogWriter frame;
	ConnectionManager connectionManager;

	public TestCORBA()
	{
	}
	public TestCORBA(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
//		trySaveMapNode();
//		tryGetUId();
//		tryGetTestTypes();
//		tryGetUId2();
//		tryResultSet();
	}
/*
	public void tryGetUId2()
	{
		frame.log("trying to test GetUId");
		try
		{
			String type = "test";
			String id = ResourcedbInterface.getUId(type);
			frame.log("retreived UId " + id + " for type " + type);
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
	}

	public void tryResultSet()
	{
		frame.log("trying to Change REsult Set");
		try
		{
//			new ResultSetChecker(frame).run();
			frame.log("one step finished");
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
	}

	public void tryGetTestTypes()
	{
		frame.log("trying to load test types");
		try
		{
			TestTypeSeq_TransferableHolder ttypeseq = new TestTypeSeq_TransferableHolder();
			int ret = Constants.ERROR_NO_ERROR;

			ttypeseq.value = new TestType_Transferable[0];
			ret = TestDatadbInterfaceLoad.loadTestTypes(ttypeseq);
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
	}


	public void trySaveMapNode()
	{
		frame.log("trying to save node");
		try
		{
			MapPhysicalNodeElement_Transferable[] nodeseq = new MapPhysicalNodeElement_Transferable[1];
			nodeseq[0] = new MapPhysicalNodeElement_Transferable();
		  nodeseq[0].id = "PE--3528921612402194863";
		  nodeseq[0].name = " ";
		  nodeseq[0].description = " ";
		  nodeseq[0].longitude = "0.06436";
		  nodeseq[0].latitude = "0.083215";
		  nodeseq[0].owner_id = "user9";
		  nodeseq[0].map_id = "test_map";
		  nodeseq[0].symbol_id = "node2";
		  nodeseq[0].physicalLinkID = " ";
		  nodeseq[0].active = true;
		  nodeseq[0].attributes = new ElementAttribute_Transferable[0];

//			int ret = MapdbInterfaceSave.saveMapNodes(nodeseq);
//  			frame.log("Ret code is " + ret);
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
	}
*/
	public void tryGetUId()
	{
/*
		frame.log("trying to get UId for map");
		try
		{
			StringHolder idholder = new StringHolder();
			AccessIdentity_Transferable aId = new AccessIdentity_Transferable(0, "sys", "sys", "sess", "sysdomain");
			int ret = 0;
			String ret_s = "";
//			ret = ResourcedbInterface.getUId("mapcontext", idholder);
			AMFICOM server = new AMFICOMServer();
			ret = server.GetUId(aId, "mapcontext", idholder);
			ret_s = idholder.value;

			frame.log("Ret code is " + ret);
			frame.log("Ret UId is " + ret_s);
		}
		catch(Exception e)
		{
			frame.log("Could not finish operation");
			e.printStackTrace();
		}
*/
	}
}

