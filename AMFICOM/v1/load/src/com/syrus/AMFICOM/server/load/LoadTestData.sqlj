package com.syrus.AMFICOM.server.load;

import com.syrus.AMFICOM.server.*;
import com.syrus.io.*;
import java.io.File;
import java.sql.SQLException;
import java.util.*;

public class LoadTestData
{
	LogWriter frame;
	ConnectionManager connectionManager;

	protected LoadTestData()
	{
	}

	public LoadTestData(LogWriter frame, ConnectionManager connectionManager)
	{
		this.frame = frame;
		this.connectionManager = connectionManager;
	}

	public void run()
	{
		frame.log("Loading test data:");
		try{
			connectionManager.getConnCtx().getConnection().setAutoCommit(false);
		} catch (Exception exx) {}
		try
		{
			File file;
			FileToDirectory ftd;
			String[] fnames;
			int i;

			LoadSystemAdministrator lsa = new LoadSystemAdministrator(frame, connectionManager);
			String us_id = lsa.getOperatorUser("sysuser");

//			#sql { commit };
//			frame.log("Ok!");
//			if(true)
//				return;

			try
			{
				file = new File("resources/testing/datatypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					int size = Integer.parseInt((String )ftd.read("@dtype_size"));
					loadDataType(
						(String )ftd.read("@id"),
						(String )ftd.read("@name"),
						(String )ftd.read("@codename"),
						(String )ftd.read("@description"),
						(String )ftd.read("@format"),
						size);
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/datatypes.txt NOT LOADED");
			}

			fnames = new String[] {
				"resources/testing/commonparametertypes.txt",
				"resources/testing/opticalparametertypes.txt",
				"resources/testing/voiceparametertypes.txt" };
			for(i = 0; i < fnames.length; i++)
			{
				try
				{
					file = new File(fnames[i]);
					ftd = new FileToDirectory(file);
					while(ftd.hasMoreElements())
					{
						ftd.nextElement();
						loadParameterType(
							(String )ftd.read("@id"),
							(String )ftd.read("@name"),
							(String )ftd.read("@codename"),
							(String )ftd.read("@type_id"),
							(String )ftd.read("@description"),
							(String )ftd.read("@formula"),
							(String )ftd.read("@granularity"),
							(String )ftd.read("@norm"),
							(String )ftd.read("@rangehi"),
							(String )ftd.read("@rangelo"),
							(String )ftd.read("@unit"));
					}
				}
				catch(Exception e)
				{
					frame.log("FILE " + fnames[i] + " NOT LOADED");
				}
			}

			try
			{
				file = new File("resources/testing/analysistypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadAnalysisType(
						id,
						(String )ftd.read("@name"),
						(String )ftd.read("@description"));

					Hashtable ht2 = (Hashtable )ftd.read("@arguments");
					if(ht2 != null)
						for(Enumeration e = ht2.keys(); e.hasMoreElements();)
						{
							String arg_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht2.get(arg_id));
							String arg_type_id = parser.nextToken();
							String arg_type_name = parser.finalToken();

							setAnalysisTypeArgument(
								arg_type_name,
								arg_id,
								arg_type_id,
								id);
						}

					Hashtable ht3 = (Hashtable )ftd.read("@parameters");
					if(ht3 != null)
						for(Enumeration e = ht3.keys(); e.hasMoreElements();)
						{
							String param_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht3.get(param_id));
							String param_type_id = parser.nextToken();
							String param_type_name = parser.finalToken();

							setAnalysisTypeParameter(
								param_type_name,
								param_id,
								param_type_id,
								id);
						}

					Hashtable ht4 = (Hashtable )ftd.read("@criterias");
					if(ht4 != null)
						for(Enumeration e = ht4.keys(); e.hasMoreElements();)
						{
							String crit_id = (String )e.nextElement();

//							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht4.get(crit_id));
//							String crit_type_id = parser.nextToken();
//							String crit_type_name = parser.finalToken();
							setAnalysisTypeCriteria(
								id,
								crit_id);
						}
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/analysistypes.txt NOT LOADED");
			}

/*
			setAnalysisTypeParameter("Области нагрузок", "concavities", "traceeventarray", "dadara");
			setAnalysisTypeCriteria("Коэффициент подавления шума", "noise_reduction_coefficient", "coefficient", "refanalysis");

			loadDefaultCriteriaSet("defaultcriteria", "Критерии анализа по умолчанию", "refanalysis");
			loadCriteria("defaultcriteria", "noise_reduction_coefficient", "3");
*/
			try
			{
				file = new File("resources/testing/etalontypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadEtalonType(
						id,
						(String )ftd.read("@name"));

					Hashtable ht3 = (Hashtable )ftd.read("@parameters");
					if(ht3 != null)
						for(Enumeration e = ht3.keys(); e.hasMoreElements();)
						{
							String param_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht3.get(param_id));
							String param_type_id = parser.nextToken();
							String param_type_name = parser.finalToken();

							setEtalonTypeParameter(
								param_type_name,
								param_id,
								param_type_id,
								id);
						}

				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/etalontypes.txt NOT LOADED");
			}

			try
			{
				file = new File("resources/testing/evaluationtypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadEvaluationType(
						id,
						(String )ftd.read("@name"),
						(String )ftd.read("@description"),
						(String )ftd.read("@etalon_type_id"));

					Hashtable ht2 = (Hashtable )ftd.read("@arguments");
					if(ht2 != null)
						for(Enumeration e = ht2.keys(); e.hasMoreElements();)
						{
							String arg_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht2.get(arg_id));
							String arg_type_id = parser.nextToken();
							String arg_type_name = parser.finalToken();

							setEvaluationTypeArgument(
								arg_type_name,
								arg_id,
								arg_type_id,
								id);
						}

					Hashtable ht3 = (Hashtable )ftd.read("@parameters");
					if(ht3 != null)
						for(Enumeration e = ht3.keys(); e.hasMoreElements();)
						{
							String param_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht3.get(param_id));
							String param_type_id = parser.nextToken();
							String param_type_name = parser.finalToken();

							setEvaluationTypeParameter(
								param_type_name,
								param_id,
								param_type_id,
								id);
						}

					Hashtable ht4 = (Hashtable )ftd.read("@thresholds");
					if(ht4 != null)
						for(Enumeration e = ht4.keys(); e.hasMoreElements();)
						{
							String th_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht4.get(th_id));
							String th_type_id = parser.nextToken();
							String th_type_name = parser.finalToken();
							setEvaluationTypeThreshold(
								th_type_name,
								th_id,
								th_type_id,
								id);
						}
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/evaluationtypes.txt NOT LOADED");
			}

			try
			{
				file = new File("resources/testing/modelingtypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadModelingType(
						id,
						(String )ftd.read("@name"),
						(String )ftd.read("@description"));

					Hashtable ht2 = (Hashtable )ftd.read("@arguments");
					if(ht2 != null)
						for(Enumeration e = ht2.keys(); e.hasMoreElements();)
						{
							String arg_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht2.get(arg_id));
							String arg_type_id = parser.nextToken();
							String arg_type_name = parser.finalToken();

							setModelingTypeArgument(
								arg_type_name,
								arg_id,
								arg_type_id,
								id);
						}

					Hashtable ht3 = (Hashtable )ftd.read("@parameters");
					if(ht3 != null)
						for(Enumeration e = ht3.keys(); e.hasMoreElements();)
						{
							String param_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht3.get(param_id));
							String param_type_id = parser.nextToken();
							String param_type_name = parser.finalToken();

							setModelingTypeParameter(
								param_type_name,
								param_id,
								param_type_id,
								id);
						}
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/modelingtypes.txt NOT LOADED");
			}

			try
			{
				file = new File("resources/testing/testtypes.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					String id = (String )ftd.read("@id");
					loadTestType(
						id,
						(String )ftd.read("@name"),
						(String )ftd.read("@codename"),
						(String )ftd.read("@description"));

					Hashtable ht2 = (Hashtable )ftd.read("@arguments");
					if(ht2 != null)
						for(Enumeration e = ht2.keys(); e.hasMoreElements();)
						{
							String arg_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht2.get(arg_id));
							String arg_type_id = parser.nextToken();
							String arg_type_name = parser.finalToken();

							setTestTypeArgument(
								id,
								arg_type_id,
								arg_type_name,
								arg_id,
								"");
						}

					Hashtable ht3 = (Hashtable )ftd.read("@parameters");
					if(ht3 != null)
						for(Enumeration e = ht3.keys(); e.hasMoreElements();)
						{
							String param_id = (String )e.nextElement();

							SimpleStringTokenizer parser = new SimpleStringTokenizer((String )ht3.get(param_id));
							String param_type_id = parser.nextToken();
							String param_type_name = parser.finalToken();

							setTestTypeParameter(
								id,
								param_type_id,
								param_type_name,
								param_id);
						}

					Hashtable ht4 = (Hashtable )ftd.read("@analysis_types");
					if(ht4 != null)
						for(Enumeration e = ht4.keys(); e.hasMoreElements();)
						{
							String at_id = (String )e.nextElement();

							setTestTypeAnalysisType(
								id,
								at_id);
						}

					Hashtable ht5 = (Hashtable )ftd.read("@evaluation_types");
					if(ht5 != null)
						for(Enumeration e = ht5.keys(); e.hasMoreElements();)
						{
							String et_id = (String )e.nextElement();

							setTestTypeEvaluationType(
								id,
								et_id);
						}
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/testtypes.txt NOT LOADED");
			}

/*
			loadTestType("trace_get_trace", "Запрос результатов рефлектометрических измерений", "trace", "хо-хо");
			setTestTypeArgument("trace_get_trace", "characterizationidentity", "Идентификатор рефлектограммы на РТУ", "ref_characterizationidentity", "");
			setTestTypeArgument("trace_get_trace", "boolean", "Получить сырую рефлектограмму", "ref_ifgetrawdata", "");
			setTestTypeParameter("trace_get_trace", "ref_event_array", "Массив событий", "ref_event_array");
			setTestTypeParameter("trace_get_trace", "reflectogramm", "Рефлектограмма", "reflectogramm");

			loadTestType("trace_simple", "Рефлектометрические измерения без анализа", "trace_simple", "хо-хо");
			setTestTypeArgument("trace_simple", "wavelength", "Длина волны измерений", "ref_wvlen", "");
			setTestTypeArgument("trace_simple", "tracelength", "Длина рефлектограммы", "ref_trclen", "");
			setTestTypeArgument("trace_simple", "ref_res", "Разрешение", "ref_res", "");
			setTestTypeArgument("trace_simple", "pulsewidth", "Ширина импульса", "ref_pulswd", "");
			setTestTypeArgument("trace_simple", "ior", "Показатель отражения", "ref_ior", "");
			setTestTypeArgument("trace_simple", "scans", "Число усреднений (10Е+3)", "ref_scans", "");
			setTestTypeParameter("trace_simple", "characterizationidentity", "Идентификатор рефлектограммы на РТУ", "ref_characterizationidentity");

*/
			try
			{
				file = new File("resources/testing/resultsets.txt");
				ftd = new FileToDirectory(file);
				while(ftd.hasMoreElements())
				{
					ftd.nextElement();
					loadResultSet(
						(String )ftd.read("@id"),
						(String )ftd.read("@name"),
						us_id,
						(String )ftd.read("@local_path"),
						(String )ftd.read("@comments"),
						true);
				}
			}
			catch(Exception e)
			{
				frame.log("FILE resources/testing/resultsets.txt NOT LOADED");
			}

			#sql { commit };

			frame.log("All test data loaded.");
		}
		catch(SQLException e)
		{
			frame.log("Could not finish operation");
		}
	}

	public void loadDataType(
			String id,
			String name,
			String codename,
			String description,
			String format,
			int size)
	{
		frame.log("load data type ID:" + id + " NAME:" + name + " SIZE:" + size);
		try
		{
			#sql {
				insert into AMFICOM.DATATYPES(ID, NAME, CODENAME, DESCRIPTION, FORMAT, DTYPE_SIZE)
					values(
						:id,
						:name,
						:codename,
						:description,
						:format,
						:size)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("data type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.DATATYPES
						set NAME = :name,
							CODENAME = :codename,
							DESCRIPTION = :description,
							FORMAT = :format,
							DTYPE_SIZE = :size
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing data type: " + exx.getMessage());
			}
		}
	}

	public void loadParameterType(
			String id,
			String name,
			String codename,
			String type_id,
			String description,
			String formula,
			String granularity,
			String norm,
			String rangehi,
			String rangelo,
			String unit)
	{
		frame.log("load parameter type ID:" + id + " NAME:" + name + " TYPE:" + type_id);
		try
		{
			#sql {
				insert into AMFICOM.PARAMETERTYPES(
						ID,
						NAME,
						CODENAME,
						TYPE_ID,
						DESCRIPTION,
						FORMULA,
						GRANULARITY,
						NORM,
						RANGEHI,
						RANGELO,
						UNIT,
						MODIFIED)
					values(
						:id,
						:name,
						:codename,
						:type_id,
						:description,
						:formula,
						:granularity,
						:norm,
						:rangehi,
						:rangelo,
						:unit,
						SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("parameter type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.PARAMETERTYPES set
							NAME = :name,
							CODENAME = :codename,
							TYPE_ID = :type_id,
							DESCRIPTION = :description,
							FORMULA = :formula,
							GRANULARITY = :granularity,
							NORM = :norm,
							RANGEHI = :rangehi,
							RANGELO = :rangelo,
							UNIT = :unit,
							MODIFIED = SYSDATE
						where
							ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing parameter type: " + exx.getMessage());
			}
		}
	}

	public void loadTestType(
			String id,
			String name,
			String codename,
			String description)
	{
		frame.log("load test type ID:" + id + " NAME:" + name);
		try
		{
			#sql
			{
				insert into AMFICOM.TESTTYPES(ID, NAME, CODENAME, DESCRIPTION, MODIFIED)
				values(:id, :name, :codename, :description, SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("test type exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.TESTTYPES set
						NAME = :name,
						CODENAME = :codename,
						DESCRIPTION = :description,
						MODIFIED = SYSDATE
					where
						ID = :id

				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing test type: " + exx.getMessage());
			}
		}
	}

	public void setTestTypeParameter(
			String test_type_id,
			String parameter_type_id,
			String name,
			String codename)
	{
		frame.log("set parameter " + name + " (" + codename + ") TYPE:" + parameter_type_id + " for test ID:" + test_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.TESTTYPEPARAMETERS
					where TEST_TYPE_ID = :test_type_id
					and PARAMETER_TYPE_ID = :parameter_type_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ttpl";
			#sql { select AMFICOM.TTPL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.TESTTYPEPARAMETERS(ID, TEST_TYPE_ID, PARAMETER_TYPE_ID, NAME, CODENAME)
				values(:id_v, :test_type_id, :parameter_type_id, :name, :codename)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting parameter for test type: " + ex.getMessage());
		}
	}

	public void setTestTypeArgument(
			String test_type_id,
			String parameter_type_id,
			String name,
			String codename,
			String default_value)
	{
		frame.log("set argument " + name + " (" + codename + ") TYPE:" + parameter_type_id + " with DEFAULT_VALUE: " + default_value + " for test ID:" + test_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.TESTTYPEARGUMENTS
					where TEST_TYPE_ID = :test_type_id
					and CODENAME = :codename
			};
			int id;
			if(count != 0)
				return;
			String id_v = "ttal";
			#sql { select AMFICOM.TTAL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.TESTTYPEARGUMENTS(ID, TEST_TYPE_ID, PARAMETER_TYPE_ID, NAME, CODENAME, DEFAULT_VALUE)
				values(:id_v, :test_type_id, :parameter_type_id, :name, :codename, :default_value)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting argument for test type: " + ex.getMessage());
		}
	}

	public void setTestTypeAnalysisType(
			String test_type_id,
			String analysis_type_id)
	{
		frame.log("set analysis type " + analysis_type_id + " for test ID:" + test_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ANALYSISTESTTYPELINKS
					where TEST_TYPE_ID = :test_type_id
					and  ANALYSIS_TYPE_ID = :analysis_type_id
			};
			int id;
			if(count != 0)
				return;
			#sql
			{
				insert into AMFICOM.ANALYSISTESTTYPELINKS(TEST_TYPE_ID, ANALYSIS_TYPE_ID)
				values(:test_type_id, :analysis_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting analysis type for test type: " + ex.getMessage());
		}
	}

	public void setTestTypeEvaluationType(
			String test_type_id,
			String evaluation_type_id)
	{
		frame.log("set evaluation type " + evaluation_type_id + " for test ID:" + test_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.EVALUATIONTESTTYPELINKS
					where TEST_TYPE_ID = :test_type_id
			};
			int id;
			if(count != 0)
				return;
			String id_v = "attl";
			#sql { select AMFICOM.TTAL_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.EVALUATIONTESTTYPELINKS(ID, TEST_TYPE_ID, EVALUATION_TYPE_ID)
				values(:id_v, :test_type_id, :evaluation_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting evaluation type for test type: " + ex.getMessage());
		}
	}
/*
	public void loadParameterRange(
			String id,
			String hi,
			String lo,
			String norm)
	{
		frame.log("load range HI:" + hi + " LO:" + lo + " ID:" + id);
		try
		{
			#sql
			{
				insert into AMFICOM.RANGES(ID, HIGH, LOW, REF_ID)
				values(:id, :hi, :lo, :norm)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("range exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.RANGES set HIGH = :hi, LOW = :lo, REF_ID = :norm
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error creating range: " + exx.getMessage());
			}
		}
	}

	public void loadParameterMask(
			String id,
			String name,
			String parameter_type_id,
			String norm)
	{
		frame.log("load parameter mask ID:" + id + " NAME:" + name + " for PARAMETER: " + parameter_type_id);
		try
		{
			#sql
			{
				insert into AMFICOM.PARAMETERMASKS(ID, NAME, NORM, PARAMETER_TYPE_ID)
				values(:id, :name, :norm, :parameter_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("parameter mask exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.PARAMETERMASKS set NAME = :name, NORM = :norm, PARAMETER_TYPE_ID = :parameter_type_id
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saving parameter mask: " + exx.getMessage());
			}
		}
	}

	public void setParameterMaskRange(
			String parameter_mask_id,
			String range_id)
	{
		frame.log("set range ID: " + range_id + " for parameter mask ID:" + parameter_mask_id);

		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PARAMETERMASKLINKS
					where RANGE_ID = :range_id
					and PARAMETER_MASK_ID = :parameter_mask_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "pmr";
			#sql { select AMFICOM.PMR_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.PARAMETERMASKLINKS(ID, RANGE_ID, PARAMETER_MASK_ID)
				values(:id_v, :range_id, :parameter_mask_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting range for parameter mask: " + ex.getMessage());
		}

	}

	public void loadTestTypeMask(
			String id,
			String name,
			String test_type_id,
			String norm)
	{
		frame.log("load test type mask ID:" + id + " NAME:" + name + " for TESTTYPE: " + test_type_id);
		try
		{
			#sql
			{
				insert into AMFICOM.TESTTYPEMASKS(ID, NAME, NORM, TEST_TYPE_ID)
				values(:id, :name, :norm, :test_type_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("test type mask exists - updating...");
			try
			{
				#sql
				{
					update AMFICOM.TESTTYPEMASKS set NAME = :name, NORM = :norm, TEST_TYPE_ID = :test_type_id
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saving test type mask: " + exx.getMessage());
			}
		}
	}

	public void setTestMaskParameterMask(
			String test_type_mask_id,
			String parameter_mask_id)
	{
		frame.log("set parameter mask ID: " + parameter_mask_id + " as part of mask ID:" + test_type_mask_id);

		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.PARAMETERTESTMASKLINKS
					where TEST_TYPE_MASK_ID = :test_type_mask_id
					and PARAMETER_MASK_ID = :parameter_mask_id
			};
			if(count != 0)
				return;
			int id;
			String id_v = "ptml";
			#sql { select AMFICOM.PTML_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);
			#sql
			{
				insert into AMFICOM.PARAMETERTESTMASKLINKS(ID, TEST_TYPE_MASK_ID, PARAMETER_MASK_ID)
				values(:id_v, :test_type_mask_id, :parameter_mask_id)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("error setting parameter mask for test mask: " + ex.getMessage());
		}

	}
*/
	public void loadResultSet(
			String id,
			String name,
			String owner_id,
			String path,
			String comments,
			boolean active)
	{
		int act = (active)?1 : 0;
		frame.log("load result set ID:" + id + " NAME:" + name + " ACTIVE:" + active);
		try
		{
			#sql {
				insert into AMFICOM.RESULTSETS(
						ID,
						NAME,
						CREATED,
						MODIFIED,
						DOMAIN_ID,
						PERIOD,
						START_TIME,
						END_TIME,
						COMMENTS,
						ACTIVE)
				values(
						:id,
						:name,
						SYSDATE,
						SYSDATE,
						'sysdomain',
						'2592000000',
						SYSDATE,
						SYSDATE,
						:comments,
						:act)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("result set exists - updating...");
			try
			{
				#sql {
					update AMFICOM.RESULTSETS set
							NAME = :name,
							CREATED = SYSDATE,
							MODIFIED = SYSDATE,
							DOMAIN_ID = 'sysdomain',
							PERIOD = '2592000000',
							START_TIME = SYSDATE,
							END_TIME = SYSDATE,
							COMMENTS = :comments,
							ACTIVE = :act
						where ID = :id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing result set: " + exx.getMessage());
			}
		}
	}

	public void loadAnalysisType(
			String analysis_type_id,
			String name,
			String description)
	{
		frame.log("load analysis type ID:" + analysis_type_id + " NAME:" + name + " DESCR:" + description);
		try
		{
			#sql {INSERT INTO analysistypes (id, name, description, modified)
				VALUES (:analysis_type_id, :name, :description, SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("analysis type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.ANALYSISTYPES set
							NAME = :name,
							DESCRIPTION = :description,
							MODIFIED = SYSDATE
						where ID = :analysis_type_id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing analysis type: " + exx.getMessage());
			}
		}
	}

	public void setAnalysisTypeArgument(
			String name,
			String codename,
			String parameter_type_id,
			String analysis_type_id)
	{
		frame.log("set argument CODENAME: " + codename + " of type: " + parameter_type_id + " for analysis type ID:" + analysis_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ANALYSISTYPEARGUMENTS
					where ANALYSIS_TYPE_ID = :analysis_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "atparg";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO analysistypearguments (
					id,
					name,
					codename,
					analysis_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:analysis_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing analysis type argument: " + exx.getMessage());
		}
	}

	public void setAnalysisTypeParameter(
			String name,
			String codename,
			String parameter_type_id,
			String analysis_type_id)
	{
		frame.log("set parameter CODENAME: " + codename + " of type: " + parameter_type_id + " for analysis type ID:" + analysis_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ANALYSISTYPEPARAMETERS
					where ANALYSIS_TYPE_ID = :analysis_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "atppar";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO analysistypeparameters (
					id,
					name,
					codename,
					analysis_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:analysis_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing analysis type parameter: " + exx.getMessage());
		}
	}

	public void setAnalysisTypeCriteria(String analysis_type_id, String codename)
	{
		frame.log("set criteria CODENAME: " + codename + " for analysis type ID:" + analysis_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ANALYSISTYPECRITERIAS
					where ANALYSIS_TYPE_ID = :analysis_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "crityp";
			#sql { select AMFICOM.CRITYP_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

//			String criteria_type_id = ResourcedbInterface.getUId("criteriatype");
			#sql {INSERT INTO analysistypecriterias (id, analysis_type_id, codename)
				VALUES (:id_v, :analysis_type_id, :codename)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing analysis type criteria: " + exx.getMessage());
		}
	}

	public void loadEtalonType(
			String etalon_type_id,
			String name)
	{
		frame.log("load Etalon type ID:" + etalon_type_id + " NAME:" + name);
		try
		{
			#sql {INSERT INTO etalontypes (id, name)
				VALUES (:etalon_type_id, :name)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("Etalon type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.ETALONTYPES set
							NAME = :name
						where ID = :etalon_type_id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing Etalon type: " + exx.getMessage());
			}
		}
	}

	public void setEtalonTypeParameter(
			String name,
			String codename,
			String parameter_type_id,
			String etalon_type_id)
	{
		frame.log("set parameter CODENAME: " + codename + " of type: " + parameter_type_id + " for Etalon type ID:" + etalon_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.ETALONTYPEARGUMENTS
					where ETALON_TYPE_ID = :etalon_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			#sql {INSERT INTO etalontypearguments (
					id,
					name,
					codename,
					etalon_type_id,
					parameter_type_id)
				VALUES (
					:codename,
					:name,
					:codename,
					:etalon_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing Etalon type parameter: " + exx.getMessage());
		}
	}

	public void loadEvaluationType(
			String evaluation_type_id,
			String name,
			String description,
			String etalon_type_id)
	{
		frame.log("load Evaluation type ID:" + evaluation_type_id + " NAME:" + name + " DESCR:" + description);
		try
		{
			#sql {INSERT INTO evaluationtypes (id, name, description, etalon_type_id, modified)
				VALUES (:evaluation_type_id, :name, :description, :etalon_type_id, SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("Evaluation type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.EVALUATIONTYPES set
							NAME = :name,
							DESCRIPTION = :description,
							ETALON_TYPE_ID = :etalon_type_id,
							MODIFIED = SYSDATE
						where ID = :evaluation_type_id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing Evaluation type: " + exx.getMessage());
			}
		}
	}

	public void setEvaluationTypeArgument(
			String name,
			String codename,
			String parameter_type_id,
			String evaluation_type_id)
	{
		frame.log("set argument CODENAME: " + codename + " of type: " + parameter_type_id + " for Evaluation type ID:" + evaluation_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.EVALUATIONTYPEARGUMENTS
					where EVALUATION_TYPE_ID = :evaluation_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "etparg";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO evaluationtypearguments (
					id,
					name,
					codename,
					evaluation_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:evaluation_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing Evaluation type argument: " + exx.getMessage());
		}
	}

	public void setEvaluationTypeParameter(
			String name,
			String codename,
			String parameter_type_id,
			String evaluation_type_id)
	{
		frame.log("set parameter CODENAME: " + codename + " of type: " + parameter_type_id + " for Evaluation type ID:" + evaluation_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.EVALUATIONTYPEPARAMETERS
					where EVALUATION_TYPE_ID = :evaluation_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "etppar";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO evaluationtypeparameters (
					id,
					name,
					codename,
					evaluation_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:evaluation_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing Evaluation type parameter: " + exx.getMessage());
		}
	}

	public void setEvaluationTypeThreshold(
			String name,
			String codename,
			String parameter_type_id,
			String evaluation_type_id)
	{
		frame.log("set threshold CODENAME: " + codename + " for Evaluation type ID:" + evaluation_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.EVALUATIONTYPETHRESHOLDS
					where EVALUATION_TYPE_ID = :evaluation_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "crityp";
			#sql { select AMFICOM.CRITYP_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

//			String criteria_type_id = ResourcedbInterface.getUId("criteriatype");
			#sql {INSERT INTO evaluationtypethresholds (
					id,
					evaluation_type_id,
					codename,
					name,
					parameter_type_id)
				VALUES (
					:id_v,
					:evaluation_type_id,
					:codename,
					:name,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing evaluation type threshold: " + exx.getMessage());
		}
	}

	public void loadModelingType(
			String modeling_type_id,
			String name,
			String description)
	{
		frame.log("load modeling type ID:" + modeling_type_id + " NAME:" + name + " DESCR:" + description);
		try
		{
			#sql {INSERT INTO modelingtypes (id, name, description, modified)
				VALUES (:modeling_type_id, :name, :description, SYSDATE)
			};
			#sql { commit };
		}
		catch(SQLException ex)
		{
			frame.log("modeling type exists - updating...");
			try
			{
				#sql {
					update AMFICOM.MODELINGTYPES set
							NAME = :name,
							DESCRIPTION = :description,
							MODIFIED = SYSDATE
						where ID = :modeling_type_id
				};
				#sql { commit };
			}
			catch(SQLException exx)
			{
				frame.log("error saVing modeling type: " + exx.getMessage());
			}
		}
	}

	public void setModelingTypeArgument(
			String name,
			String codename,
			String parameter_type_id,
			String modeling_type_id)
	{
		frame.log("set argument CODENAME: " + codename + " of type: " + parameter_type_id + " for modeling type ID:" + modeling_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.MODELINGTYPEARGUMENTS
					where MODELING_TYPE_ID = :modeling_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "mtparg";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO modelingtypearguments (
					id,
					name,
					codename,
					modeling_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:modeling_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing modeling type argument: " + exx.getMessage());
		}
	}

	public void setModelingTypeParameter(
			String name,
			String codename,
			String parameter_type_id,
			String modeling_type_id)
	{
		frame.log("set parameter CODENAME: " + codename + " of type: " + parameter_type_id + " for modeling type ID:" + modeling_type_id);
		try
		{
			int count;
			#sql
			{
				select count(*) into :count from AMFICOM.MODELINGTYPEPARAMETERS
					where MODELING_TYPE_ID = :modeling_type_id
					and CODENAME = :codename
			};
			if(count != 0)
				return;

			int id;
			String id_v = "mtppar";
			#sql { select AMFICOM.ATARG_SEQ.NEXTVAL into :id from SYS.DUAL };
			id_v = id_v + String.valueOf(id);

			#sql {INSERT INTO modelingtypeparameters (
					id,
					name,
					codename,
					modeling_type_id,
					parameter_type_id)
				VALUES (
					:id_v,
					:name,
					:codename,
					:modeling_type_id,
					:parameter_type_id)
			};
			#sql { commit };
		}
		catch(Exception exx)
		{
			frame.log("error saVing modeling type parameter: " + exx.getMessage());
		}
	}

}

